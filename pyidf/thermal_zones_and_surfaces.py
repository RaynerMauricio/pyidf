from collections import OrderedDict

class GlobalGeometryRules(object):
    """ Corresponds to IDD object `GlobalGeometryRules`
        Specifes the geometric rules used to describe the input of surface vertices and
        daylighting reference points.
    
    """
    internal_name = "GlobalGeometryRules"
    field_count = 5
    required_fields = ["Starting Vertex Position", "Vertex Entry Direction", "Coordinate System"]

    def __init__(self):
        """ Init data dictionary object for IDD  `GlobalGeometryRules`
        """
        self._data = OrderedDict()
        self._data["Starting Vertex Position"] = None
        self._data["Vertex Entry Direction"] = None
        self._data["Coordinate System"] = None
        self._data["Daylighting Reference Point Coordinate System"] = None
        self._data["Rectangular Surface Coordinate System"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.starting_vertex_position = None
        else:
            self.starting_vertex_position = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_entry_direction = None
        else:
            self.vertex_entry_direction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coordinate_system = None
        else:
            self.coordinate_system = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.daylighting_reference_point_coordinate_system = None
        else:
            self.daylighting_reference_point_coordinate_system = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rectangular_surface_coordinate_system = None
        else:
            self.rectangular_surface_coordinate_system = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def starting_vertex_position(self):
        """Get starting_vertex_position

        Returns:
            str: the value of `starting_vertex_position` or None if not set
        """
        return self._data["Starting Vertex Position"]

    @starting_vertex_position.setter
    def starting_vertex_position(self, value=None):
        """  Corresponds to IDD Field `Starting Vertex Position`
        Specified as entry for a 4 sided surface/rectangle
        Surfaces are specified as viewed from outside the surface
        Shading surfaces as viewed from behind.  (towards what they are shading)

        Args:
            value (str): value for IDD Field `Starting Vertex Position`
                Accepted values are:
                      - UpperLeftCorner
                      - LowerLeftCorner
                      - UpperRightCorner
                      - LowerRightCorner
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `starting_vertex_position`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `starting_vertex_position`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `starting_vertex_position`')
            vals = {}
            vals["upperleftcorner"] = "UpperLeftCorner"
            vals["lowerleftcorner"] = "LowerLeftCorner"
            vals["upperrightcorner"] = "UpperRightCorner"
            vals["lowerrightcorner"] = "LowerRightCorner"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `starting_vertex_position`'.format(value))
            value = vals[value_lower]
        self._data["Starting Vertex Position"] = value

    @property
    def vertex_entry_direction(self):
        """Get vertex_entry_direction

        Returns:
            str: the value of `vertex_entry_direction` or None if not set
        """
        return self._data["Vertex Entry Direction"]

    @vertex_entry_direction.setter
    def vertex_entry_direction(self, value=None):
        """  Corresponds to IDD Field `Vertex Entry Direction`

        Args:
            value (str): value for IDD Field `Vertex Entry Direction`
                Accepted values are:
                      - Counterclockwise
                      - Clockwise
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `vertex_entry_direction`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `vertex_entry_direction`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `vertex_entry_direction`')
            vals = {}
            vals["counterclockwise"] = "Counterclockwise"
            vals["clockwise"] = "Clockwise"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `vertex_entry_direction`'.format(value))
            value = vals[value_lower]
        self._data["Vertex Entry Direction"] = value

    @property
    def coordinate_system(self):
        """Get coordinate_system

        Returns:
            str: the value of `coordinate_system` or None if not set
        """
        return self._data["Coordinate System"]

    @coordinate_system.setter
    def coordinate_system(self, value=None):
        """  Corresponds to IDD Field `Coordinate System`
        relative -- coordinates are entered relative to zone origin
        world -- all coordinates entered are "absolute" for this facility
        absolute -- same as world

        Args:
            value (str): value for IDD Field `Coordinate System`
                Accepted values are:
                      - Relative
                      - World
                      - Absolute
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `coordinate_system`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `coordinate_system`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `coordinate_system`')
            vals = {}
            vals["relative"] = "Relative"
            vals["world"] = "World"
            vals["absolute"] = "Absolute"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `coordinate_system`'.format(value))
            value = vals[value_lower]
        self._data["Coordinate System"] = value

    @property
    def daylighting_reference_point_coordinate_system(self):
        """Get daylighting_reference_point_coordinate_system

        Returns:
            str: the value of `daylighting_reference_point_coordinate_system` or None if not set
        """
        return self._data["Daylighting Reference Point Coordinate System"]

    @daylighting_reference_point_coordinate_system.setter
    def daylighting_reference_point_coordinate_system(self, value="Relative"):
        """  Corresponds to IDD Field `Daylighting Reference Point Coordinate System`
        Relative -- coordinates are entered relative to zone origin
        World -- all coordinates entered are "absolute" for this facility
        absolute -- same as world

        Args:
            value (str): value for IDD Field `Daylighting Reference Point Coordinate System`
                Accepted values are:
                      - Relative
                      - World
                      - Absolute
                Default value: Relative
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `daylighting_reference_point_coordinate_system`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `daylighting_reference_point_coordinate_system`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `daylighting_reference_point_coordinate_system`')
            vals = {}
            vals["relative"] = "Relative"
            vals["world"] = "World"
            vals["absolute"] = "Absolute"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `daylighting_reference_point_coordinate_system`'.format(value))
            value = vals[value_lower]
        self._data["Daylighting Reference Point Coordinate System"] = value

    @property
    def rectangular_surface_coordinate_system(self):
        """Get rectangular_surface_coordinate_system

        Returns:
            str: the value of `rectangular_surface_coordinate_system` or None if not set
        """
        return self._data["Rectangular Surface Coordinate System"]

    @rectangular_surface_coordinate_system.setter
    def rectangular_surface_coordinate_system(self, value="Relative"):
        """  Corresponds to IDD Field `Rectangular Surface Coordinate System`
        Relative -- Starting corner is entered relative to zone origin
        World -- Starting corner is entered in "absolute"
        absolute -- same as world

        Args:
            value (str): value for IDD Field `Rectangular Surface Coordinate System`
                Accepted values are:
                      - Relative
                      - World
                      - Absolute
                Default value: Relative
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `rectangular_surface_coordinate_system`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `rectangular_surface_coordinate_system`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `rectangular_surface_coordinate_system`')
            vals = {}
            vals["relative"] = "Relative"
            vals["world"] = "World"
            vals["absolute"] = "Absolute"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `rectangular_surface_coordinate_system`'.format(value))
            value = vals[value_lower]
        self._data["Rectangular Surface Coordinate System"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GeometryTransform(object):
    """ Corresponds to IDD object `GeometryTransform`
        Provides a simple method of altering the footprint geometry of a model. The intent
        is to provide a single parameter that can be used to reshape the building description
        contained in the rest of the input file.
    
    """
    internal_name = "GeometryTransform"
    field_count = 3
    required_fields = ["Plane of Transform", "Current Aspect Ratio", "New Aspect Ratio"]

    def __init__(self):
        """ Init data dictionary object for IDD  `GeometryTransform`
        """
        self._data = OrderedDict()
        self._data["Plane of Transform"] = None
        self._data["Current Aspect Ratio"] = None
        self._data["New Aspect Ratio"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.plane_of_transform = None
        else:
            self.plane_of_transform = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.current_aspect_ratio = None
        else:
            self.current_aspect_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.new_aspect_ratio = None
        else:
            self.new_aspect_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def plane_of_transform(self):
        """Get plane_of_transform

        Returns:
            str: the value of `plane_of_transform` or None if not set
        """
        return self._data["Plane of Transform"]

    @plane_of_transform.setter
    def plane_of_transform(self, value="XY"):
        """  Corresponds to IDD Field `Plane of Transform`
        only current allowed value is "XY"

        Args:
            value (str): value for IDD Field `Plane of Transform`
                Accepted values are:
                      - XY
                Default value: XY
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `plane_of_transform`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `plane_of_transform`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `plane_of_transform`')
            vals = {}
            vals["xy"] = "XY"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `plane_of_transform`'.format(value))
            value = vals[value_lower]
        self._data["Plane of Transform"] = value

    @property
    def current_aspect_ratio(self):
        """Get current_aspect_ratio

        Returns:
            float: the value of `current_aspect_ratio` or None if not set
        """
        return self._data["Current Aspect Ratio"]

    @current_aspect_ratio.setter
    def current_aspect_ratio(self, value=None):
        """  Corresponds to IDD Field `Current Aspect Ratio`
        Aspect ratio of building as described in idf

        Args:
            value (float): value for IDD Field `Current Aspect Ratio`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `current_aspect_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `current_aspect_ratio`')
        self._data["Current Aspect Ratio"] = value

    @property
    def new_aspect_ratio(self):
        """Get new_aspect_ratio

        Returns:
            float: the value of `new_aspect_ratio` or None if not set
        """
        return self._data["New Aspect Ratio"]

    @new_aspect_ratio.setter
    def new_aspect_ratio(self, value=None):
        """  Corresponds to IDD Field `New Aspect Ratio`
        Aspect ratio to transform to during run

        Args:
            value (float): value for IDD Field `New Aspect Ratio`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `new_aspect_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `new_aspect_ratio`')
        self._data["New Aspect Ratio"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class Zone(object):
    """ Corresponds to IDD object `Zone`
        Defines a thermal zone of the building.
    
    """
    internal_name = "Zone"
    field_count = 13
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Zone`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Direction of Relative North"] = None
        self._data["X Origin"] = None
        self._data["Y Origin"] = None
        self._data["Z Origin"] = None
        self._data["Type"] = None
        self._data["Multiplier"] = None
        self._data["Ceiling Height"] = None
        self._data["Volume"] = None
        self._data["Floor Area"] = None
        self._data["Zone Inside Convection Algorithm"] = None
        self._data["Zone Outside Convection Algorithm"] = None
        self._data["Part of Total Floor Area"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.direction_of_relative_north = None
        else:
            self.direction_of_relative_north = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.x_origin = None
        else:
            self.x_origin = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.y_origin = None
        else:
            self.y_origin = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.z_origin = None
        else:
            self.z_origin = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.type = None
        else:
            self.type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.multiplier = None
        else:
            self.multiplier = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ceiling_height = None
        else:
            self.ceiling_height = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.volume = None
        else:
            self.volume = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.floor_area = None
        else:
            self.floor_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_inside_convection_algorithm = None
        else:
            self.zone_inside_convection_algorithm = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_outside_convection_algorithm = None
        else:
            self.zone_outside_convection_algorithm = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.part_of_total_floor_area = None
        else:
            self.part_of_total_floor_area = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def direction_of_relative_north(self):
        """Get direction_of_relative_north

        Returns:
            float: the value of `direction_of_relative_north` or None if not set
        """
        return self._data["Direction of Relative North"]

    @direction_of_relative_north.setter
    def direction_of_relative_north(self, value=0.0):
        """  Corresponds to IDD Field `Direction of Relative North`

        Args:
            value (float): value for IDD Field `Direction of Relative North`
                Units: deg
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `direction_of_relative_north`'.format(value))
        self._data["Direction of Relative North"] = value

    @property
    def x_origin(self):
        """Get x_origin

        Returns:
            float: the value of `x_origin` or None if not set
        """
        return self._data["X Origin"]

    @x_origin.setter
    def x_origin(self, value=0.0):
        """  Corresponds to IDD Field `X Origin`

        Args:
            value (float): value for IDD Field `X Origin`
                Units: m
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `x_origin`'.format(value))
        self._data["X Origin"] = value

    @property
    def y_origin(self):
        """Get y_origin

        Returns:
            float: the value of `y_origin` or None if not set
        """
        return self._data["Y Origin"]

    @y_origin.setter
    def y_origin(self, value=0.0):
        """  Corresponds to IDD Field `Y Origin`

        Args:
            value (float): value for IDD Field `Y Origin`
                Units: m
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `y_origin`'.format(value))
        self._data["Y Origin"] = value

    @property
    def z_origin(self):
        """Get z_origin

        Returns:
            float: the value of `z_origin` or None if not set
        """
        return self._data["Z Origin"]

    @z_origin.setter
    def z_origin(self, value=0.0):
        """  Corresponds to IDD Field `Z Origin`

        Args:
            value (float): value for IDD Field `Z Origin`
                Units: m
                Default value: 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `z_origin`'.format(value))
        self._data["Z Origin"] = value

    @property
    def type(self):
        """Get type

        Returns:
            int: the value of `type` or None if not set
        """
        return self._data["Type"]

    @type.setter
    def type(self, value=1):
        """  Corresponds to IDD Field `Type`

        Args:
            value (int): value for IDD Field `Type`
                Default value: 1
                value >= 1
                value <= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `type`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `type`')
            if value > 1:
                raise ValueError('value need to be smaller 1 '
                                 'for field `type`')
        self._data["Type"] = value

    @property
    def multiplier(self):
        """Get multiplier

        Returns:
            int: the value of `multiplier` or None if not set
        """
        return self._data["Multiplier"]

    @multiplier.setter
    def multiplier(self, value=1):
        """  Corresponds to IDD Field `Multiplier`

        Args:
            value (int): value for IDD Field `Multiplier`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `multiplier`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `multiplier`')
        self._data["Multiplier"] = value

    @property
    def ceiling_height(self):
        """Get ceiling_height

        Returns:
            float: the value of `ceiling_height` or None if not set
        """
        return self._data["Ceiling Height"]

    @ceiling_height.setter
    def ceiling_height(self, value="autocalculate"):
        """  Corresponds to IDD Field `Ceiling Height`
        If this field is 0.0, negative or autocalculate, then the average height
        of the zone is automatically calculated and used in subsequent calculations.
        If this field is positive, then the number entered here will be used.
        Note that the Zone Ceiling Height is the distance from the Floor to
        the Ceiling in the Zone, not an absolute height from the ground.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Ceiling Height`
                Units: m
                Default value: "autocalculate"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Ceiling Height"] = "Autocalculate"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `ceiling_height`'.format(value))
        self._data["Ceiling Height"] = value

    @property
    def volume(self):
        """Get volume

        Returns:
            float: the value of `volume` or None if not set
        """
        return self._data["Volume"]

    @volume.setter
    def volume(self, value="autocalculate"):
        """  Corresponds to IDD Field `Volume`
        If this field is 0.0, negative or autocalculate, then the volume of the zone
        is automatically calculated and used in subsequent calculations.
        If this field is positive, then the number entered here will be used.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Volume`
                Units: m3
                Default value: "autocalculate"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Volume"] = "Autocalculate"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `volume`'.format(value))
        self._data["Volume"] = value

    @property
    def floor_area(self):
        """Get floor_area

        Returns:
            float: the value of `floor_area` or None if not set
        """
        return self._data["Floor Area"]

    @floor_area.setter
    def floor_area(self, value="autocalculate"):
        """  Corresponds to IDD Field `Floor Area`
        If this field is 0.0, negative or autocalculate, then the floor area of the zone
        is automatically calculated and used in subsequent calculations.
        If this field is positive, then the number entered here will be used.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Floor Area`
                Units: m2
                Default value: "autocalculate"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Floor Area"] = "Autocalculate"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `floor_area`'.format(value))
        self._data["Floor Area"] = value

    @property
    def zone_inside_convection_algorithm(self):
        """Get zone_inside_convection_algorithm

        Returns:
            str: the value of `zone_inside_convection_algorithm` or None if not set
        """
        return self._data["Zone Inside Convection Algorithm"]

    @zone_inside_convection_algorithm.setter
    def zone_inside_convection_algorithm(self, value=None):
        """  Corresponds to IDD Field `Zone Inside Convection Algorithm`
        Will default to same value as SurfaceConvectionAlgorithm:Inside object
        setting this field overrides the default SurfaceConvectionAlgorithm:Inside for this zone
        Simple = constant natural convection (ASHRAE)
        TARP = variable natural convection based on temperature difference (ASHRAE)
        CeilingDiffuser = ACH based forced and mixed convection correlations
        for ceiling diffuser configuration with simple natural convection limit
        AdaptiveConvectionAlgorithm = dynamic selection of convection models based on conditions
        TrombeWall = variable natural convection in an enclosed rectangular cavity

        Args:
            value (str): value for IDD Field `Zone Inside Convection Algorithm`
                Accepted values are:
                      - Simple
                      - TARP
                      - CeilingDiffuser
                      - AdaptiveConvectionAlgorithm
                      - TrombeWall
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_inside_convection_algorithm`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_inside_convection_algorithm`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_inside_convection_algorithm`')
            vals = {}
            vals["simple"] = "Simple"
            vals["tarp"] = "TARP"
            vals["ceilingdiffuser"] = "CeilingDiffuser"
            vals["adaptiveconvectionalgorithm"] = "AdaptiveConvectionAlgorithm"
            vals["trombewall"] = "TrombeWall"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_inside_convection_algorithm`'.format(value))
            value = vals[value_lower]
        self._data["Zone Inside Convection Algorithm"] = value

    @property
    def zone_outside_convection_algorithm(self):
        """Get zone_outside_convection_algorithm

        Returns:
            str: the value of `zone_outside_convection_algorithm` or None if not set
        """
        return self._data["Zone Outside Convection Algorithm"]

    @zone_outside_convection_algorithm.setter
    def zone_outside_convection_algorithm(self, value=None):
        """  Corresponds to IDD Field `Zone Outside Convection Algorithm`
        Will default to same value as SurfaceConvectionAlgorithm:Outside object
        setting this field overrides the default SurfaceConvectionAlgorithm:Outside for this zone
        SimpleCombined = Combined radiation and convection coefficient using simple ASHRAE model
        TARP = correlation from models developed by ASHRAE, Walton, and Sparrow et. al.
        MoWiTT = correlation from measurements by Klems and Yazdanian for smooth surfaces
        DOE-2 = correlation from measurements by Klems and Yazdanian for rough surfaces
        AdaptiveConvectionAlgorithm = dynamic selection of correlations based on conditions

        Args:
            value (str): value for IDD Field `Zone Outside Convection Algorithm`
                Accepted values are:
                      - SimpleCombined
                      - TARP
                      - DOE-2
                      - MoWiTT
                      - AdaptiveConvectionAlgorithm
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_outside_convection_algorithm`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_outside_convection_algorithm`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_outside_convection_algorithm`')
            vals = {}
            vals["simplecombined"] = "SimpleCombined"
            vals["tarp"] = "TARP"
            vals["doe-2"] = "DOE-2"
            vals["mowitt"] = "MoWiTT"
            vals["adaptiveconvectionalgorithm"] = "AdaptiveConvectionAlgorithm"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_outside_convection_algorithm`'.format(value))
            value = vals[value_lower]
        self._data["Zone Outside Convection Algorithm"] = value

    @property
    def part_of_total_floor_area(self):
        """Get part_of_total_floor_area

        Returns:
            str: the value of `part_of_total_floor_area` or None if not set
        """
        return self._data["Part of Total Floor Area"]

    @part_of_total_floor_area.setter
    def part_of_total_floor_area(self, value="Yes"):
        """  Corresponds to IDD Field `Part of Total Floor Area`

        Args:
            value (str): value for IDD Field `Part of Total Floor Area`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `part_of_total_floor_area`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `part_of_total_floor_area`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `part_of_total_floor_area`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `part_of_total_floor_area`'.format(value))
            value = vals[value_lower]
        self._data["Part of Total Floor Area"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ZoneGroup(object):
    """ Corresponds to IDD object `ZoneGroup`
        Adds a multiplier to a ZoneList. This can be used to reduce the amount of input
        necessary for simulating repetitive structures, such as the identical floors of a
        multi-story building.
    
    """
    internal_name = "ZoneGroup"
    field_count = 3
    required_fields = ["Name", "Zone List Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ZoneGroup`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Zone List Name"] = None
        self._data["Zone List Multiplier"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_list_name = None
        else:
            self.zone_list_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_list_multiplier = None
        else:
            self.zone_list_multiplier = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        Name of the Zone Group

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def zone_list_name(self):
        """Get zone_list_name

        Returns:
            str: the value of `zone_list_name` or None if not set
        """
        return self._data["Zone List Name"]

    @zone_list_name.setter
    def zone_list_name(self, value=None):
        """  Corresponds to IDD Field `Zone List Name`

        Args:
            value (str): value for IDD Field `Zone List Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_list_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_list_name`')
        self._data["Zone List Name"] = value

    @property
    def zone_list_multiplier(self):
        """Get zone_list_multiplier

        Returns:
            int: the value of `zone_list_multiplier` or None if not set
        """
        return self._data["Zone List Multiplier"]

    @zone_list_multiplier.setter
    def zone_list_multiplier(self, value=1):
        """  Corresponds to IDD Field `Zone List Multiplier`

        Args:
            value (int): value for IDD Field `Zone List Multiplier`
                Default value: 1
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_list_multiplier`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_list_multiplier`')
        self._data["Zone List Multiplier"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class BuildingSurfaceDetailed(object):
    """ Corresponds to IDD object `BuildingSurface:Detailed`
        Allows for detailed entry of building heat transfer surfaces.  Does not include subsurfaces such as windows or doors.
    
    """
    internal_name = "BuildingSurface:Detailed"
    field_count = 370
    required_fields = ["Name", "Surface Type", "Construction Name", "Zone Name", "Outside Boundary Condition", "Sun Exposure", "Wind Exposure", "Vertex 1 X-coordinate", "Vertex 1 Y-coordinate", "Vertex 1 Z-coordinate", "Vertex 2 X-coordinate", "Vertex 2 Y-coordinate", "Vertex 2 Z-coordinate", "Vertex 3 X-coordinate", "Vertex 3 Y-coordinate", "Vertex 3 Z-coordinate"]

    def __init__(self):
        """ Init data dictionary object for IDD  `BuildingSurface:Detailed`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Surface Type"] = None
        self._data["Construction Name"] = None
        self._data["Zone Name"] = None
        self._data["Outside Boundary Condition"] = None
        self._data["Outside Boundary Condition Object"] = None
        self._data["Sun Exposure"] = None
        self._data["Wind Exposure"] = None
        self._data["View Factor to Ground"] = None
        self._data["Number of Vertices"] = None
        self._data["Vertex 1 X-coordinate"] = None
        self._data["Vertex 1 Y-coordinate"] = None
        self._data["Vertex 1 Z-coordinate"] = None
        self._data["Vertex 2 X-coordinate"] = None
        self._data["Vertex 2 Y-coordinate"] = None
        self._data["Vertex 2 Z-coordinate"] = None
        self._data["Vertex 3 X-coordinate"] = None
        self._data["Vertex 3 Y-coordinate"] = None
        self._data["Vertex 3 Z-coordinate"] = None
        self._data["Vertex 4 X-coordinate"] = None
        self._data["Vertex 4 Y-coordinate"] = None
        self._data["Vertex 4 Z-coordinate"] = None
        self._data["Vertex 5 X-coordinate"] = None
        self._data["Vertex 5 Y-coordinate"] = None
        self._data["Vertex 5 Z-coordinate"] = None
        self._data["Vertex 6 X-coordinate"] = None
        self._data["Vertex 6 Y-coordinate"] = None
        self._data["Vertex 6 Z-coordinate"] = None
        self._data["Vertex 7 X-coordinate"] = None
        self._data["Vertex 7 Y-coordinate"] = None
        self._data["Vertex 7 Z-coordinate"] = None
        self._data["Vertex 8 X-coordinate"] = None
        self._data["Vertex 8 Y-coordinate"] = None
        self._data["Vertex 8 Z-coordinate"] = None
        self._data["Vertex 9 X-coordinate"] = None
        self._data["Vertex 9 Y-coordinate"] = None
        self._data["Vertex 9 Z-coordinate"] = None
        self._data["Vertex 10 X-coordinate"] = None
        self._data["Vertex 10 Y-coordinate"] = None
        self._data["Vertex 10 Z-coordinate"] = None
        self._data["Vertex 11 X-coordinate"] = None
        self._data["Vertex 11 Y-coordinate"] = None
        self._data["Vertex 11 Z-coordinate"] = None
        self._data["Vertex 12 X-coordinate"] = None
        self._data["Vertex 12 Y-coordinate"] = None
        self._data["Vertex 12 Z-coordinate"] = None
        self._data["Vertex 13 X-coordinate"] = None
        self._data["Vertex 13 Y-coordinate"] = None
        self._data["Vertex 13 Z-coordinate"] = None
        self._data["Vertex 14 X-coordinate"] = None
        self._data["Vertex 14 Y-coordinate"] = None
        self._data["Vertex 14 Z-coordinate"] = None
        self._data["Vertex 15 X-coordinate"] = None
        self._data["Vertex 15 Y-coordinate"] = None
        self._data["Vertex 15 Z-coordinate"] = None
        self._data["Vertex 16 X-coordinate"] = None
        self._data["Vertex 16 Y-coordinate"] = None
        self._data["Vertex 16 Z-coordinate"] = None
        self._data["Vertex 17 X-coordinate"] = None
        self._data["Vertex 17 Y-coordinate"] = None
        self._data["Vertex 17 Z-coordinate"] = None
        self._data["Vertex 18 X-coordinate"] = None
        self._data["Vertex 18 Y-coordinate"] = None
        self._data["Vertex 18 Z-coordinate"] = None
        self._data["Vertex 19 X-coordinate"] = None
        self._data["Vertex 19 Y-coordinate"] = None
        self._data["Vertex 19 Z-coordinate"] = None
        self._data["Vertex 20 X-coordinate"] = None
        self._data["Vertex 20 Y-coordinate"] = None
        self._data["Vertex 20 Z-coordinate"] = None
        self._data["Vertex 21 X-coordinate"] = None
        self._data["Vertex 21 Y-coordinate"] = None
        self._data["Vertex 21 Z-coordinate"] = None
        self._data["Vertex 22 X-coordinate"] = None
        self._data["Vertex 22 Y-coordinate"] = None
        self._data["Vertex 22 Z-coordinate"] = None
        self._data["Vertex 23 X-coordinate"] = None
        self._data["Vertex 23 Y-coordinate"] = None
        self._data["Vertex 23 Z-coordinate"] = None
        self._data["Vertex 24 X-coordinate"] = None
        self._data["Vertex 24 Y-coordinate"] = None
        self._data["Vertex 24 Z-coordinate"] = None
        self._data["Vertex 25 X-coordinate"] = None
        self._data["Vertex 25 Y-coordinate"] = None
        self._data["Vertex 25 Z-coordinate"] = None
        self._data["Vertex 26 X-coordinate"] = None
        self._data["Vertex 26 Y-coordinate"] = None
        self._data["Vertex 26 Z-coordinate"] = None
        self._data["Vertex 27 X-coordinate"] = None
        self._data["Vertex 27 Y-coordinate"] = None
        self._data["Vertex 27 Z-coordinate"] = None
        self._data["Vertex 28 X-coordinate"] = None
        self._data["Vertex 28 Y-coordinate"] = None
        self._data["Vertex 28 Z-coordinate"] = None
        self._data["Vertex 29 X-coordinate"] = None
        self._data["Vertex 29 Y-coordinate"] = None
        self._data["Vertex 29 Z-coordinate"] = None
        self._data["Vertex 30 X-coordinate"] = None
        self._data["Vertex 30 Y-coordinate"] = None
        self._data["Vertex 30 Z-coordinate"] = None
        self._data["Vertex 31 X-coordinate"] = None
        self._data["Vertex 31 Y-coordinate"] = None
        self._data["Vertex 31 Z-coordinate"] = None
        self._data["Vertex 32 X-coordinate"] = None
        self._data["Vertex 32 Y-coordinate"] = None
        self._data["Vertex 32 Z-coordinate"] = None
        self._data["Vertex 33 X-coordinate"] = None
        self._data["Vertex 33 Y-coordinate"] = None
        self._data["Vertex 33 Z-coordinate"] = None
        self._data["Vertex 34 X-coordinate"] = None
        self._data["Vertex 34 Y-coordinate"] = None
        self._data["Vertex 34 Z-coordinate"] = None
        self._data["Vertex 35 X-coordinate"] = None
        self._data["Vertex 35 Y-coordinate"] = None
        self._data["Vertex 35 Z-coordinate"] = None
        self._data["Vertex 36 X-coordinate"] = None
        self._data["Vertex 36 Y-coordinate"] = None
        self._data["Vertex 36 Z-coordinate"] = None
        self._data["Vertex 37 X-coordinate"] = None
        self._data["Vertex 37 Y-coordinate"] = None
        self._data["Vertex 37 Z-coordinate"] = None
        self._data["Vertex 38 X-coordinate"] = None
        self._data["Vertex 38 Y-coordinate"] = None
        self._data["Vertex 38 Z-coordinate"] = None
        self._data["Vertex 39 X-coordinate"] = None
        self._data["Vertex 39 Y-coordinate"] = None
        self._data["Vertex 39 Z-coordinate"] = None
        self._data["Vertex 40 X-coordinate"] = None
        self._data["Vertex 40 Y-coordinate"] = None
        self._data["Vertex 40 Z-coordinate"] = None
        self._data["Vertex 41 X-coordinate"] = None
        self._data["Vertex 41 Y-coordinate"] = None
        self._data["Vertex 41 Z-coordinate"] = None
        self._data["Vertex 42 X-coordinate"] = None
        self._data["Vertex 42 Y-coordinate"] = None
        self._data["Vertex 42 Z-coordinate"] = None
        self._data["Vertex 43 X-coordinate"] = None
        self._data["Vertex 43 Y-coordinate"] = None
        self._data["Vertex 43 Z-coordinate"] = None
        self._data["Vertex 44 X-coordinate"] = None
        self._data["Vertex 44 Y-coordinate"] = None
        self._data["Vertex 44 Z-coordinate"] = None
        self._data["Vertex 45 X-coordinate"] = None
        self._data["Vertex 45 Y-coordinate"] = None
        self._data["Vertex 45 Z-coordinate"] = None
        self._data["Vertex 46 X-coordinate"] = None
        self._data["Vertex 46 Y-coordinate"] = None
        self._data["Vertex 46 Z-coordinate"] = None
        self._data["Vertex 47 X-coordinate"] = None
        self._data["Vertex 47 Y-coordinate"] = None
        self._data["Vertex 47 Z-coordinate"] = None
        self._data["Vertex 48 X-coordinate"] = None
        self._data["Vertex 48 Y-coordinate"] = None
        self._data["Vertex 48 Z-coordinate"] = None
        self._data["Vertex 49 X-coordinate"] = None
        self._data["Vertex 49 Y-coordinate"] = None
        self._data["Vertex 49 Z-coordinate"] = None
        self._data["Vertex 50 X-coordinate"] = None
        self._data["Vertex 50 Y-coordinate"] = None
        self._data["Vertex 50 Z-coordinate"] = None
        self._data["Vertex 51 X-coordinate"] = None
        self._data["Vertex 51 Y-coordinate"] = None
        self._data["Vertex 51 Z-coordinate"] = None
        self._data["Vertex 52 X-coordinate"] = None
        self._data["Vertex 52 Y-coordinate"] = None
        self._data["Vertex 52 Z-coordinate"] = None
        self._data["Vertex 53 X-coordinate"] = None
        self._data["Vertex 53 Y-coordinate"] = None
        self._data["Vertex 53 Z-coordinate"] = None
        self._data["Vertex 54 X-coordinate"] = None
        self._data["Vertex 54 Y-coordinate"] = None
        self._data["Vertex 54 Z-coordinate"] = None
        self._data["Vertex 55 X-coordinate"] = None
        self._data["Vertex 55 Y-coordinate"] = None
        self._data["Vertex 55 Z-coordinate"] = None
        self._data["Vertex 56 X-coordinate"] = None
        self._data["Vertex 56 Y-coordinate"] = None
        self._data["Vertex 56 Z-coordinate"] = None
        self._data["Vertex 57 X-coordinate"] = None
        self._data["Vertex 57 Y-coordinate"] = None
        self._data["Vertex 57 Z-coordinate"] = None
        self._data["Vertex 58 X-coordinate"] = None
        self._data["Vertex 58 Y-coordinate"] = None
        self._data["Vertex 58 Z-coordinate"] = None
        self._data["Vertex 59 X-coordinate"] = None
        self._data["Vertex 59 Y-coordinate"] = None
        self._data["Vertex 59 Z-coordinate"] = None
        self._data["Vertex 60 X-coordinate"] = None
        self._data["Vertex 60 Y-coordinate"] = None
        self._data["Vertex 60 Z-coordinate"] = None
        self._data["Vertex 61 X-coordinate"] = None
        self._data["Vertex 61 Y-coordinate"] = None
        self._data["Vertex 61 Z-coordinate"] = None
        self._data["Vertex 62 X-coordinate"] = None
        self._data["Vertex 62 Y-coordinate"] = None
        self._data["Vertex 62 Z-coordinate"] = None
        self._data["Vertex 63 X-coordinate"] = None
        self._data["Vertex 63 Y-coordinate"] = None
        self._data["Vertex 63 Z-coordinate"] = None
        self._data["Vertex 64 X-coordinate"] = None
        self._data["Vertex 64 Y-coordinate"] = None
        self._data["Vertex 64 Z-coordinate"] = None
        self._data["Vertex 65 X-coordinate"] = None
        self._data["Vertex 65 Y-coordinate"] = None
        self._data["Vertex 65 Z-coordinate"] = None
        self._data["Vertex 66 X-coordinate"] = None
        self._data["Vertex 66 Y-coordinate"] = None
        self._data["Vertex 66 Z-coordinate"] = None
        self._data["Vertex 67 X-coordinate"] = None
        self._data["Vertex 67 Y-coordinate"] = None
        self._data["Vertex 67 Z-coordinate"] = None
        self._data["Vertex 68 X-coordinate"] = None
        self._data["Vertex 68 Y-coordinate"] = None
        self._data["Vertex 68 Z-coordinate"] = None
        self._data["Vertex 69 X-coordinate"] = None
        self._data["Vertex 69 Y-coordinate"] = None
        self._data["Vertex 69 Z-coordinate"] = None
        self._data["Vertex 70 X-coordinate"] = None
        self._data["Vertex 70 Y-coordinate"] = None
        self._data["Vertex 70 Z-coordinate"] = None
        self._data["Vertex 71 X-coordinate"] = None
        self._data["Vertex 71 Y-coordinate"] = None
        self._data["Vertex 71 Z-coordinate"] = None
        self._data["Vertex 72 X-coordinate"] = None
        self._data["Vertex 72 Y-coordinate"] = None
        self._data["Vertex 72 Z-coordinate"] = None
        self._data["Vertex 73 X-coordinate"] = None
        self._data["Vertex 73 Y-coordinate"] = None
        self._data["Vertex 73 Z-coordinate"] = None
        self._data["Vertex 74 X-coordinate"] = None
        self._data["Vertex 74 Y-coordinate"] = None
        self._data["Vertex 74 Z-coordinate"] = None
        self._data["Vertex 75 X-coordinate"] = None
        self._data["Vertex 75 Y-coordinate"] = None
        self._data["Vertex 75 Z-coordinate"] = None
        self._data["Vertex 76 X-coordinate"] = None
        self._data["Vertex 76 Y-coordinate"] = None
        self._data["Vertex 76 Z-coordinate"] = None
        self._data["Vertex 77 X-coordinate"] = None
        self._data["Vertex 77 Y-coordinate"] = None
        self._data["Vertex 77 Z-coordinate"] = None
        self._data["Vertex 78 X-coordinate"] = None
        self._data["Vertex 78 Y-coordinate"] = None
        self._data["Vertex 78 Z-coordinate"] = None
        self._data["Vertex 79 X-coordinate"] = None
        self._data["Vertex 79 Y-coordinate"] = None
        self._data["Vertex 79 Z-coordinate"] = None
        self._data["Vertex 80 X-coordinate"] = None
        self._data["Vertex 80 Y-coordinate"] = None
        self._data["Vertex 80 Z-coordinate"] = None
        self._data["Vertex 81 X-coordinate"] = None
        self._data["Vertex 81 Y-coordinate"] = None
        self._data["Vertex 81 Z-coordinate"] = None
        self._data["Vertex 82 X-coordinate"] = None
        self._data["Vertex 82 Y-coordinate"] = None
        self._data["Vertex 82 Z-coordinate"] = None
        self._data["Vertex 83 X-coordinate"] = None
        self._data["Vertex 83 Y-coordinate"] = None
        self._data["Vertex 83 Z-coordinate"] = None
        self._data["Vertex 84 X-coordinate"] = None
        self._data["Vertex 84 Y-coordinate"] = None
        self._data["Vertex 84 Z-coordinate"] = None
        self._data["Vertex 85 X-coordinate"] = None
        self._data["Vertex 85 Y-coordinate"] = None
        self._data["Vertex 85 Z-coordinate"] = None
        self._data["Vertex 86 X-coordinate"] = None
        self._data["Vertex 86 Y-coordinate"] = None
        self._data["Vertex 86 Z-coordinate"] = None
        self._data["Vertex 87 X-coordinate"] = None
        self._data["Vertex 87 Y-coordinate"] = None
        self._data["Vertex 87 Z-coordinate"] = None
        self._data["Vertex 88 X-coordinate"] = None
        self._data["Vertex 88 Y-coordinate"] = None
        self._data["Vertex 88 Z-coordinate"] = None
        self._data["Vertex 89 X-coordinate"] = None
        self._data["Vertex 89 Y-coordinate"] = None
        self._data["Vertex 89 Z-coordinate"] = None
        self._data["Vertex 90 X-coordinate"] = None
        self._data["Vertex 90 Y-coordinate"] = None
        self._data["Vertex 90 Z-coordinate"] = None
        self._data["Vertex 91 X-coordinate"] = None
        self._data["Vertex 91 Y-coordinate"] = None
        self._data["Vertex 91 Z-coordinate"] = None
        self._data["Vertex 92 X-coordinate"] = None
        self._data["Vertex 92 Y-coordinate"] = None
        self._data["Vertex 92 Z-coordinate"] = None
        self._data["Vertex 93 X-coordinate"] = None
        self._data["Vertex 93 Y-coordinate"] = None
        self._data["Vertex 93 Z-coordinate"] = None
        self._data["Vertex 94 X-coordinate"] = None
        self._data["Vertex 94 Y-coordinate"] = None
        self._data["Vertex 94 Z-coordinate"] = None
        self._data["Vertex 95 X-coordinate"] = None
        self._data["Vertex 95 Y-coordinate"] = None
        self._data["Vertex 95 Z-coordinate"] = None
        self._data["Vertex 96 X-coordinate"] = None
        self._data["Vertex 96 Y-coordinate"] = None
        self._data["Vertex 96 Z-coordinate"] = None
        self._data["Vertex 97 X-coordinate"] = None
        self._data["Vertex 97 Y-coordinate"] = None
        self._data["Vertex 97 Z-coordinate"] = None
        self._data["Vertex 98 X-coordinate"] = None
        self._data["Vertex 98 Y-coordinate"] = None
        self._data["Vertex 98 Z-coordinate"] = None
        self._data["Vertex 99 X-coordinate"] = None
        self._data["Vertex 99 Y-coordinate"] = None
        self._data["Vertex 99 Z-coordinate"] = None
        self._data["Vertex 100 X-coordinate"] = None
        self._data["Vertex 100 Y-coordinate"] = None
        self._data["Vertex 100 Z-coordinate"] = None
        self._data["Vertex 101 X-coordinate"] = None
        self._data["Vertex 101 Y-coordinate"] = None
        self._data["Vertex 101 Z-coordinate"] = None
        self._data["Vertex 102 X-coordinate"] = None
        self._data["Vertex 102 Y-coordinate"] = None
        self._data["Vertex 102 Z-coordinate"] = None
        self._data["Vertex 103 X-coordinate"] = None
        self._data["Vertex 103 Y-coordinate"] = None
        self._data["Vertex 103 Z-coordinate"] = None
        self._data["Vertex 104 X-coordinate"] = None
        self._data["Vertex 104 Y-coordinate"] = None
        self._data["Vertex 104 Z-coordinate"] = None
        self._data["Vertex 105 X-coordinate"] = None
        self._data["Vertex 105 Y-coordinate"] = None
        self._data["Vertex 105 Z-coordinate"] = None
        self._data["Vertex 106 X-coordinate"] = None
        self._data["Vertex 106 Y-coordinate"] = None
        self._data["Vertex 106 Z-coordinate"] = None
        self._data["Vertex 107 X-coordinate"] = None
        self._data["Vertex 107 Y-coordinate"] = None
        self._data["Vertex 107 Z-coordinate"] = None
        self._data["Vertex 108 X-coordinate"] = None
        self._data["Vertex 108 Y-coordinate"] = None
        self._data["Vertex 108 Z-coordinate"] = None
        self._data["Vertex 109 X-coordinate"] = None
        self._data["Vertex 109 Y-coordinate"] = None
        self._data["Vertex 109 Z-coordinate"] = None
        self._data["Vertex 110 X-coordinate"] = None
        self._data["Vertex 110 Y-coordinate"] = None
        self._data["Vertex 110 Z-coordinate"] = None
        self._data["Vertex 111 X-coordinate"] = None
        self._data["Vertex 111 Y-coordinate"] = None
        self._data["Vertex 111 Z-coordinate"] = None
        self._data["Vertex 112 X-coordinate"] = None
        self._data["Vertex 112 Y-coordinate"] = None
        self._data["Vertex 112 Z-coordinate"] = None
        self._data["Vertex 113 X-coordinate"] = None
        self._data["Vertex 113 Y-coordinate"] = None
        self._data["Vertex 113 Z-coordinate"] = None
        self._data["Vertex 114 X-coordinate"] = None
        self._data["Vertex 114 Y-coordinate"] = None
        self._data["Vertex 114 Z-coordinate"] = None
        self._data["Vertex 115 X-coordinate"] = None
        self._data["Vertex 115 Y-coordinate"] = None
        self._data["Vertex 115 Z-coordinate"] = None
        self._data["Vertex 116 X-coordinate"] = None
        self._data["Vertex 116 Y-coordinate"] = None
        self._data["Vertex 116 Z-coordinate"] = None
        self._data["Vertex 117 X-coordinate"] = None
        self._data["Vertex 117 Y-coordinate"] = None
        self._data["Vertex 117 Z-coordinate"] = None
        self._data["Vertex 118 X-coordinate"] = None
        self._data["Vertex 118 Y-coordinate"] = None
        self._data["Vertex 118 Z-coordinate"] = None
        self._data["Vertex 119 X-coordinate"] = None
        self._data["Vertex 119 Y-coordinate"] = None
        self._data["Vertex 119 Z-coordinate"] = None
        self._data["Vertex 120 X-coordinate"] = None
        self._data["Vertex 120 Y-coordinate"] = None
        self._data["Vertex 120 Z-coordinate"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_type = None
        else:
            self.surface_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outside_boundary_condition = None
        else:
            self.outside_boundary_condition = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outside_boundary_condition_object = None
        else:
            self.outside_boundary_condition_object = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sun_exposure = None
        else:
            self.sun_exposure = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.wind_exposure = None
        else:
            self.wind_exposure = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.view_factor_to_ground = None
        else:
            self.view_factor_to_ground = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_vertices = None
        else:
            self.number_of_vertices = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_xcoordinate = None
        else:
            self.vertex_1_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_ycoordinate = None
        else:
            self.vertex_1_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_zcoordinate = None
        else:
            self.vertex_1_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_xcoordinate = None
        else:
            self.vertex_2_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_ycoordinate = None
        else:
            self.vertex_2_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_zcoordinate = None
        else:
            self.vertex_2_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_xcoordinate = None
        else:
            self.vertex_3_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_ycoordinate = None
        else:
            self.vertex_3_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_zcoordinate = None
        else:
            self.vertex_3_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_xcoordinate = None
        else:
            self.vertex_4_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_ycoordinate = None
        else:
            self.vertex_4_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_zcoordinate = None
        else:
            self.vertex_4_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_xcoordinate = None
        else:
            self.vertex_5_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_ycoordinate = None
        else:
            self.vertex_5_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_zcoordinate = None
        else:
            self.vertex_5_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_xcoordinate = None
        else:
            self.vertex_6_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_ycoordinate = None
        else:
            self.vertex_6_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_zcoordinate = None
        else:
            self.vertex_6_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_xcoordinate = None
        else:
            self.vertex_7_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_ycoordinate = None
        else:
            self.vertex_7_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_zcoordinate = None
        else:
            self.vertex_7_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_xcoordinate = None
        else:
            self.vertex_8_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_ycoordinate = None
        else:
            self.vertex_8_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_zcoordinate = None
        else:
            self.vertex_8_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_xcoordinate = None
        else:
            self.vertex_9_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_ycoordinate = None
        else:
            self.vertex_9_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_zcoordinate = None
        else:
            self.vertex_9_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_xcoordinate = None
        else:
            self.vertex_10_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_ycoordinate = None
        else:
            self.vertex_10_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_zcoordinate = None
        else:
            self.vertex_10_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_11_xcoordinate = None
        else:
            self.vertex_11_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_11_ycoordinate = None
        else:
            self.vertex_11_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_11_zcoordinate = None
        else:
            self.vertex_11_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_12_xcoordinate = None
        else:
            self.vertex_12_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_12_ycoordinate = None
        else:
            self.vertex_12_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_12_zcoordinate = None
        else:
            self.vertex_12_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_13_xcoordinate = None
        else:
            self.vertex_13_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_13_ycoordinate = None
        else:
            self.vertex_13_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_13_zcoordinate = None
        else:
            self.vertex_13_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_14_xcoordinate = None
        else:
            self.vertex_14_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_14_ycoordinate = None
        else:
            self.vertex_14_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_14_zcoordinate = None
        else:
            self.vertex_14_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_15_xcoordinate = None
        else:
            self.vertex_15_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_15_ycoordinate = None
        else:
            self.vertex_15_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_15_zcoordinate = None
        else:
            self.vertex_15_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_16_xcoordinate = None
        else:
            self.vertex_16_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_16_ycoordinate = None
        else:
            self.vertex_16_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_16_zcoordinate = None
        else:
            self.vertex_16_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_17_xcoordinate = None
        else:
            self.vertex_17_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_17_ycoordinate = None
        else:
            self.vertex_17_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_17_zcoordinate = None
        else:
            self.vertex_17_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_18_xcoordinate = None
        else:
            self.vertex_18_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_18_ycoordinate = None
        else:
            self.vertex_18_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_18_zcoordinate = None
        else:
            self.vertex_18_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_19_xcoordinate = None
        else:
            self.vertex_19_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_19_ycoordinate = None
        else:
            self.vertex_19_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_19_zcoordinate = None
        else:
            self.vertex_19_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_20_xcoordinate = None
        else:
            self.vertex_20_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_20_ycoordinate = None
        else:
            self.vertex_20_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_20_zcoordinate = None
        else:
            self.vertex_20_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_21_xcoordinate = None
        else:
            self.vertex_21_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_21_ycoordinate = None
        else:
            self.vertex_21_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_21_zcoordinate = None
        else:
            self.vertex_21_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_22_xcoordinate = None
        else:
            self.vertex_22_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_22_ycoordinate = None
        else:
            self.vertex_22_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_22_zcoordinate = None
        else:
            self.vertex_22_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_23_xcoordinate = None
        else:
            self.vertex_23_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_23_ycoordinate = None
        else:
            self.vertex_23_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_23_zcoordinate = None
        else:
            self.vertex_23_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_24_xcoordinate = None
        else:
            self.vertex_24_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_24_ycoordinate = None
        else:
            self.vertex_24_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_24_zcoordinate = None
        else:
            self.vertex_24_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_25_xcoordinate = None
        else:
            self.vertex_25_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_25_ycoordinate = None
        else:
            self.vertex_25_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_25_zcoordinate = None
        else:
            self.vertex_25_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_26_xcoordinate = None
        else:
            self.vertex_26_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_26_ycoordinate = None
        else:
            self.vertex_26_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_26_zcoordinate = None
        else:
            self.vertex_26_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_27_xcoordinate = None
        else:
            self.vertex_27_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_27_ycoordinate = None
        else:
            self.vertex_27_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_27_zcoordinate = None
        else:
            self.vertex_27_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_28_xcoordinate = None
        else:
            self.vertex_28_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_28_ycoordinate = None
        else:
            self.vertex_28_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_28_zcoordinate = None
        else:
            self.vertex_28_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_29_xcoordinate = None
        else:
            self.vertex_29_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_29_ycoordinate = None
        else:
            self.vertex_29_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_29_zcoordinate = None
        else:
            self.vertex_29_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_30_xcoordinate = None
        else:
            self.vertex_30_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_30_ycoordinate = None
        else:
            self.vertex_30_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_30_zcoordinate = None
        else:
            self.vertex_30_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_31_xcoordinate = None
        else:
            self.vertex_31_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_31_ycoordinate = None
        else:
            self.vertex_31_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_31_zcoordinate = None
        else:
            self.vertex_31_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_32_xcoordinate = None
        else:
            self.vertex_32_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_32_ycoordinate = None
        else:
            self.vertex_32_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_32_zcoordinate = None
        else:
            self.vertex_32_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_33_xcoordinate = None
        else:
            self.vertex_33_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_33_ycoordinate = None
        else:
            self.vertex_33_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_33_zcoordinate = None
        else:
            self.vertex_33_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_34_xcoordinate = None
        else:
            self.vertex_34_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_34_ycoordinate = None
        else:
            self.vertex_34_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_34_zcoordinate = None
        else:
            self.vertex_34_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_35_xcoordinate = None
        else:
            self.vertex_35_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_35_ycoordinate = None
        else:
            self.vertex_35_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_35_zcoordinate = None
        else:
            self.vertex_35_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_36_xcoordinate = None
        else:
            self.vertex_36_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_36_ycoordinate = None
        else:
            self.vertex_36_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_36_zcoordinate = None
        else:
            self.vertex_36_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_37_xcoordinate = None
        else:
            self.vertex_37_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_37_ycoordinate = None
        else:
            self.vertex_37_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_37_zcoordinate = None
        else:
            self.vertex_37_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_38_xcoordinate = None
        else:
            self.vertex_38_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_38_ycoordinate = None
        else:
            self.vertex_38_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_38_zcoordinate = None
        else:
            self.vertex_38_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_39_xcoordinate = None
        else:
            self.vertex_39_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_39_ycoordinate = None
        else:
            self.vertex_39_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_39_zcoordinate = None
        else:
            self.vertex_39_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_40_xcoordinate = None
        else:
            self.vertex_40_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_40_ycoordinate = None
        else:
            self.vertex_40_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_40_zcoordinate = None
        else:
            self.vertex_40_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_41_xcoordinate = None
        else:
            self.vertex_41_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_41_ycoordinate = None
        else:
            self.vertex_41_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_41_zcoordinate = None
        else:
            self.vertex_41_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_42_xcoordinate = None
        else:
            self.vertex_42_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_42_ycoordinate = None
        else:
            self.vertex_42_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_42_zcoordinate = None
        else:
            self.vertex_42_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_43_xcoordinate = None
        else:
            self.vertex_43_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_43_ycoordinate = None
        else:
            self.vertex_43_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_43_zcoordinate = None
        else:
            self.vertex_43_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_44_xcoordinate = None
        else:
            self.vertex_44_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_44_ycoordinate = None
        else:
            self.vertex_44_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_44_zcoordinate = None
        else:
            self.vertex_44_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_45_xcoordinate = None
        else:
            self.vertex_45_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_45_ycoordinate = None
        else:
            self.vertex_45_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_45_zcoordinate = None
        else:
            self.vertex_45_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_46_xcoordinate = None
        else:
            self.vertex_46_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_46_ycoordinate = None
        else:
            self.vertex_46_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_46_zcoordinate = None
        else:
            self.vertex_46_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_47_xcoordinate = None
        else:
            self.vertex_47_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_47_ycoordinate = None
        else:
            self.vertex_47_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_47_zcoordinate = None
        else:
            self.vertex_47_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_48_xcoordinate = None
        else:
            self.vertex_48_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_48_ycoordinate = None
        else:
            self.vertex_48_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_48_zcoordinate = None
        else:
            self.vertex_48_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_49_xcoordinate = None
        else:
            self.vertex_49_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_49_ycoordinate = None
        else:
            self.vertex_49_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_49_zcoordinate = None
        else:
            self.vertex_49_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_50_xcoordinate = None
        else:
            self.vertex_50_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_50_ycoordinate = None
        else:
            self.vertex_50_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_50_zcoordinate = None
        else:
            self.vertex_50_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_51_xcoordinate = None
        else:
            self.vertex_51_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_51_ycoordinate = None
        else:
            self.vertex_51_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_51_zcoordinate = None
        else:
            self.vertex_51_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_52_xcoordinate = None
        else:
            self.vertex_52_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_52_ycoordinate = None
        else:
            self.vertex_52_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_52_zcoordinate = None
        else:
            self.vertex_52_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_53_xcoordinate = None
        else:
            self.vertex_53_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_53_ycoordinate = None
        else:
            self.vertex_53_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_53_zcoordinate = None
        else:
            self.vertex_53_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_54_xcoordinate = None
        else:
            self.vertex_54_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_54_ycoordinate = None
        else:
            self.vertex_54_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_54_zcoordinate = None
        else:
            self.vertex_54_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_55_xcoordinate = None
        else:
            self.vertex_55_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_55_ycoordinate = None
        else:
            self.vertex_55_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_55_zcoordinate = None
        else:
            self.vertex_55_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_56_xcoordinate = None
        else:
            self.vertex_56_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_56_ycoordinate = None
        else:
            self.vertex_56_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_56_zcoordinate = None
        else:
            self.vertex_56_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_57_xcoordinate = None
        else:
            self.vertex_57_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_57_ycoordinate = None
        else:
            self.vertex_57_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_57_zcoordinate = None
        else:
            self.vertex_57_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_58_xcoordinate = None
        else:
            self.vertex_58_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_58_ycoordinate = None
        else:
            self.vertex_58_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_58_zcoordinate = None
        else:
            self.vertex_58_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_59_xcoordinate = None
        else:
            self.vertex_59_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_59_ycoordinate = None
        else:
            self.vertex_59_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_59_zcoordinate = None
        else:
            self.vertex_59_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_60_xcoordinate = None
        else:
            self.vertex_60_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_60_ycoordinate = None
        else:
            self.vertex_60_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_60_zcoordinate = None
        else:
            self.vertex_60_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_61_xcoordinate = None
        else:
            self.vertex_61_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_61_ycoordinate = None
        else:
            self.vertex_61_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_61_zcoordinate = None
        else:
            self.vertex_61_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_62_xcoordinate = None
        else:
            self.vertex_62_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_62_ycoordinate = None
        else:
            self.vertex_62_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_62_zcoordinate = None
        else:
            self.vertex_62_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_63_xcoordinate = None
        else:
            self.vertex_63_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_63_ycoordinate = None
        else:
            self.vertex_63_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_63_zcoordinate = None
        else:
            self.vertex_63_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_64_xcoordinate = None
        else:
            self.vertex_64_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_64_ycoordinate = None
        else:
            self.vertex_64_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_64_zcoordinate = None
        else:
            self.vertex_64_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_65_xcoordinate = None
        else:
            self.vertex_65_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_65_ycoordinate = None
        else:
            self.vertex_65_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_65_zcoordinate = None
        else:
            self.vertex_65_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_66_xcoordinate = None
        else:
            self.vertex_66_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_66_ycoordinate = None
        else:
            self.vertex_66_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_66_zcoordinate = None
        else:
            self.vertex_66_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_67_xcoordinate = None
        else:
            self.vertex_67_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_67_ycoordinate = None
        else:
            self.vertex_67_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_67_zcoordinate = None
        else:
            self.vertex_67_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_68_xcoordinate = None
        else:
            self.vertex_68_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_68_ycoordinate = None
        else:
            self.vertex_68_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_68_zcoordinate = None
        else:
            self.vertex_68_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_69_xcoordinate = None
        else:
            self.vertex_69_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_69_ycoordinate = None
        else:
            self.vertex_69_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_69_zcoordinate = None
        else:
            self.vertex_69_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_70_xcoordinate = None
        else:
            self.vertex_70_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_70_ycoordinate = None
        else:
            self.vertex_70_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_70_zcoordinate = None
        else:
            self.vertex_70_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_71_xcoordinate = None
        else:
            self.vertex_71_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_71_ycoordinate = None
        else:
            self.vertex_71_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_71_zcoordinate = None
        else:
            self.vertex_71_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_72_xcoordinate = None
        else:
            self.vertex_72_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_72_ycoordinate = None
        else:
            self.vertex_72_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_72_zcoordinate = None
        else:
            self.vertex_72_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_73_xcoordinate = None
        else:
            self.vertex_73_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_73_ycoordinate = None
        else:
            self.vertex_73_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_73_zcoordinate = None
        else:
            self.vertex_73_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_74_xcoordinate = None
        else:
            self.vertex_74_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_74_ycoordinate = None
        else:
            self.vertex_74_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_74_zcoordinate = None
        else:
            self.vertex_74_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_75_xcoordinate = None
        else:
            self.vertex_75_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_75_ycoordinate = None
        else:
            self.vertex_75_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_75_zcoordinate = None
        else:
            self.vertex_75_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_76_xcoordinate = None
        else:
            self.vertex_76_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_76_ycoordinate = None
        else:
            self.vertex_76_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_76_zcoordinate = None
        else:
            self.vertex_76_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_77_xcoordinate = None
        else:
            self.vertex_77_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_77_ycoordinate = None
        else:
            self.vertex_77_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_77_zcoordinate = None
        else:
            self.vertex_77_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_78_xcoordinate = None
        else:
            self.vertex_78_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_78_ycoordinate = None
        else:
            self.vertex_78_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_78_zcoordinate = None
        else:
            self.vertex_78_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_79_xcoordinate = None
        else:
            self.vertex_79_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_79_ycoordinate = None
        else:
            self.vertex_79_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_79_zcoordinate = None
        else:
            self.vertex_79_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_80_xcoordinate = None
        else:
            self.vertex_80_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_80_ycoordinate = None
        else:
            self.vertex_80_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_80_zcoordinate = None
        else:
            self.vertex_80_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_81_xcoordinate = None
        else:
            self.vertex_81_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_81_ycoordinate = None
        else:
            self.vertex_81_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_81_zcoordinate = None
        else:
            self.vertex_81_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_82_xcoordinate = None
        else:
            self.vertex_82_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_82_ycoordinate = None
        else:
            self.vertex_82_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_82_zcoordinate = None
        else:
            self.vertex_82_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_83_xcoordinate = None
        else:
            self.vertex_83_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_83_ycoordinate = None
        else:
            self.vertex_83_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_83_zcoordinate = None
        else:
            self.vertex_83_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_84_xcoordinate = None
        else:
            self.vertex_84_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_84_ycoordinate = None
        else:
            self.vertex_84_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_84_zcoordinate = None
        else:
            self.vertex_84_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_85_xcoordinate = None
        else:
            self.vertex_85_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_85_ycoordinate = None
        else:
            self.vertex_85_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_85_zcoordinate = None
        else:
            self.vertex_85_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_86_xcoordinate = None
        else:
            self.vertex_86_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_86_ycoordinate = None
        else:
            self.vertex_86_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_86_zcoordinate = None
        else:
            self.vertex_86_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_87_xcoordinate = None
        else:
            self.vertex_87_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_87_ycoordinate = None
        else:
            self.vertex_87_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_87_zcoordinate = None
        else:
            self.vertex_87_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_88_xcoordinate = None
        else:
            self.vertex_88_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_88_ycoordinate = None
        else:
            self.vertex_88_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_88_zcoordinate = None
        else:
            self.vertex_88_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_89_xcoordinate = None
        else:
            self.vertex_89_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_89_ycoordinate = None
        else:
            self.vertex_89_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_89_zcoordinate = None
        else:
            self.vertex_89_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_90_xcoordinate = None
        else:
            self.vertex_90_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_90_ycoordinate = None
        else:
            self.vertex_90_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_90_zcoordinate = None
        else:
            self.vertex_90_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_91_xcoordinate = None
        else:
            self.vertex_91_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_91_ycoordinate = None
        else:
            self.vertex_91_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_91_zcoordinate = None
        else:
            self.vertex_91_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_92_xcoordinate = None
        else:
            self.vertex_92_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_92_ycoordinate = None
        else:
            self.vertex_92_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_92_zcoordinate = None
        else:
            self.vertex_92_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_93_xcoordinate = None
        else:
            self.vertex_93_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_93_ycoordinate = None
        else:
            self.vertex_93_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_93_zcoordinate = None
        else:
            self.vertex_93_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_94_xcoordinate = None
        else:
            self.vertex_94_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_94_ycoordinate = None
        else:
            self.vertex_94_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_94_zcoordinate = None
        else:
            self.vertex_94_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_95_xcoordinate = None
        else:
            self.vertex_95_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_95_ycoordinate = None
        else:
            self.vertex_95_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_95_zcoordinate = None
        else:
            self.vertex_95_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_96_xcoordinate = None
        else:
            self.vertex_96_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_96_ycoordinate = None
        else:
            self.vertex_96_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_96_zcoordinate = None
        else:
            self.vertex_96_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_97_xcoordinate = None
        else:
            self.vertex_97_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_97_ycoordinate = None
        else:
            self.vertex_97_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_97_zcoordinate = None
        else:
            self.vertex_97_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_98_xcoordinate = None
        else:
            self.vertex_98_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_98_ycoordinate = None
        else:
            self.vertex_98_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_98_zcoordinate = None
        else:
            self.vertex_98_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_99_xcoordinate = None
        else:
            self.vertex_99_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_99_ycoordinate = None
        else:
            self.vertex_99_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_99_zcoordinate = None
        else:
            self.vertex_99_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_100_xcoordinate = None
        else:
            self.vertex_100_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_100_ycoordinate = None
        else:
            self.vertex_100_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_100_zcoordinate = None
        else:
            self.vertex_100_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_101_xcoordinate = None
        else:
            self.vertex_101_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_101_ycoordinate = None
        else:
            self.vertex_101_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_101_zcoordinate = None
        else:
            self.vertex_101_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_102_xcoordinate = None
        else:
            self.vertex_102_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_102_ycoordinate = None
        else:
            self.vertex_102_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_102_zcoordinate = None
        else:
            self.vertex_102_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_103_xcoordinate = None
        else:
            self.vertex_103_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_103_ycoordinate = None
        else:
            self.vertex_103_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_103_zcoordinate = None
        else:
            self.vertex_103_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_104_xcoordinate = None
        else:
            self.vertex_104_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_104_ycoordinate = None
        else:
            self.vertex_104_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_104_zcoordinate = None
        else:
            self.vertex_104_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_105_xcoordinate = None
        else:
            self.vertex_105_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_105_ycoordinate = None
        else:
            self.vertex_105_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_105_zcoordinate = None
        else:
            self.vertex_105_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_106_xcoordinate = None
        else:
            self.vertex_106_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_106_ycoordinate = None
        else:
            self.vertex_106_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_106_zcoordinate = None
        else:
            self.vertex_106_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_107_xcoordinate = None
        else:
            self.vertex_107_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_107_ycoordinate = None
        else:
            self.vertex_107_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_107_zcoordinate = None
        else:
            self.vertex_107_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_108_xcoordinate = None
        else:
            self.vertex_108_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_108_ycoordinate = None
        else:
            self.vertex_108_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_108_zcoordinate = None
        else:
            self.vertex_108_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_109_xcoordinate = None
        else:
            self.vertex_109_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_109_ycoordinate = None
        else:
            self.vertex_109_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_109_zcoordinate = None
        else:
            self.vertex_109_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_110_xcoordinate = None
        else:
            self.vertex_110_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_110_ycoordinate = None
        else:
            self.vertex_110_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_110_zcoordinate = None
        else:
            self.vertex_110_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_111_xcoordinate = None
        else:
            self.vertex_111_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_111_ycoordinate = None
        else:
            self.vertex_111_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_111_zcoordinate = None
        else:
            self.vertex_111_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_112_xcoordinate = None
        else:
            self.vertex_112_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_112_ycoordinate = None
        else:
            self.vertex_112_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_112_zcoordinate = None
        else:
            self.vertex_112_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_113_xcoordinate = None
        else:
            self.vertex_113_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_113_ycoordinate = None
        else:
            self.vertex_113_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_113_zcoordinate = None
        else:
            self.vertex_113_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_114_xcoordinate = None
        else:
            self.vertex_114_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_114_ycoordinate = None
        else:
            self.vertex_114_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_114_zcoordinate = None
        else:
            self.vertex_114_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_115_xcoordinate = None
        else:
            self.vertex_115_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_115_ycoordinate = None
        else:
            self.vertex_115_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_115_zcoordinate = None
        else:
            self.vertex_115_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_116_xcoordinate = None
        else:
            self.vertex_116_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_116_ycoordinate = None
        else:
            self.vertex_116_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_116_zcoordinate = None
        else:
            self.vertex_116_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_117_xcoordinate = None
        else:
            self.vertex_117_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_117_ycoordinate = None
        else:
            self.vertex_117_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_117_zcoordinate = None
        else:
            self.vertex_117_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_118_xcoordinate = None
        else:
            self.vertex_118_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_118_ycoordinate = None
        else:
            self.vertex_118_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_118_zcoordinate = None
        else:
            self.vertex_118_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_119_xcoordinate = None
        else:
            self.vertex_119_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_119_ycoordinate = None
        else:
            self.vertex_119_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_119_zcoordinate = None
        else:
            self.vertex_119_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_120_xcoordinate = None
        else:
            self.vertex_120_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_120_ycoordinate = None
        else:
            self.vertex_120_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_120_zcoordinate = None
        else:
            self.vertex_120_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def surface_type(self):
        """Get surface_type

        Returns:
            str: the value of `surface_type` or None if not set
        """
        return self._data["Surface Type"]

    @surface_type.setter
    def surface_type(self, value=None):
        """  Corresponds to IDD Field `Surface Type`

        Args:
            value (str): value for IDD Field `Surface Type`
                Accepted values are:
                      - Floor
                      - Wall
                      - Ceiling
                      - Roof
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_type`')
            vals = {}
            vals["floor"] = "Floor"
            vals["wall"] = "Wall"
            vals["ceiling"] = "Ceiling"
            vals["roof"] = "Roof"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `surface_type`'.format(value))
            value = vals[value_lower]
        self._data["Surface Type"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Zone the surface is a part of

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def outside_boundary_condition(self):
        """Get outside_boundary_condition

        Returns:
            str: the value of `outside_boundary_condition` or None if not set
        """
        return self._data["Outside Boundary Condition"]

    @outside_boundary_condition.setter
    def outside_boundary_condition(self, value=None):
        """  Corresponds to IDD Field `Outside Boundary Condition`

        Args:
            value (str): value for IDD Field `Outside Boundary Condition`
                Accepted values are:
                      - Adiabatic
                      - Surface
                      - Zone
                      - Outdoors
                      - Ground
                      - GroundFCfactorMethod
                      - OtherSideCoefficients
                      - OtherSideConditionsModel
                      - GroundSlabPreprocessorAverage
                      - GroundSlabPreprocessorCore
                      - GroundSlabPreprocessorPerimeter
                      - GroundBasementPreprocessorAverageWall
                      - GroundBasementPreprocessorAverageFloor
                      - GroundBasementPreprocessorUpperWall
                      - GroundBasementPreprocessorLowerWall
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_boundary_condition`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_boundary_condition`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outside_boundary_condition`')
            vals = {}
            vals["adiabatic"] = "Adiabatic"
            vals["surface"] = "Surface"
            vals["zone"] = "Zone"
            vals["outdoors"] = "Outdoors"
            vals["ground"] = "Ground"
            vals["groundfcfactormethod"] = "GroundFCfactorMethod"
            vals["othersidecoefficients"] = "OtherSideCoefficients"
            vals["othersideconditionsmodel"] = "OtherSideConditionsModel"
            vals["groundslabpreprocessoraverage"] = "GroundSlabPreprocessorAverage"
            vals["groundslabpreprocessorcore"] = "GroundSlabPreprocessorCore"
            vals["groundslabpreprocessorperimeter"] = "GroundSlabPreprocessorPerimeter"
            vals["groundbasementpreprocessoraveragewall"] = "GroundBasementPreprocessorAverageWall"
            vals["groundbasementpreprocessoraveragefloor"] = "GroundBasementPreprocessorAverageFloor"
            vals["groundbasementpreprocessorupperwall"] = "GroundBasementPreprocessorUpperWall"
            vals["groundbasementpreprocessorlowerwall"] = "GroundBasementPreprocessorLowerWall"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `outside_boundary_condition`'.format(value))
            value = vals[value_lower]
        self._data["Outside Boundary Condition"] = value

    @property
    def outside_boundary_condition_object(self):
        """Get outside_boundary_condition_object

        Returns:
            str: the value of `outside_boundary_condition_object` or None if not set
        """
        return self._data["Outside Boundary Condition Object"]

    @outside_boundary_condition_object.setter
    def outside_boundary_condition_object(self, value=None):
        """  Corresponds to IDD Field `Outside Boundary Condition Object`
        Non-blank only if the field Outside Boundary Condition is Surface,
        Zone, OtherSideCoefficients or OtherSideConditionsModel
        If Surface, specify name of corresponding surface in adjacent zone or
        specify current surface name for internal partition separating like zones
        If Zone, specify the name of the corresponding zone and
        the program will generate the corresponding interzone surface
        If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients
        If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel

        Args:
            value (str): value for IDD Field `Outside Boundary Condition Object`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_boundary_condition_object`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_boundary_condition_object`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outside_boundary_condition_object`')
        self._data["Outside Boundary Condition Object"] = value

    @property
    def sun_exposure(self):
        """Get sun_exposure

        Returns:
            str: the value of `sun_exposure` or None if not set
        """
        return self._data["Sun Exposure"]

    @sun_exposure.setter
    def sun_exposure(self, value="SunExposed"):
        """  Corresponds to IDD Field `Sun Exposure`

        Args:
            value (str): value for IDD Field `Sun Exposure`
                Accepted values are:
                      - SunExposed
                      - NoSun
                Default value: SunExposed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `sun_exposure`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sun_exposure`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `sun_exposure`')
            vals = {}
            vals["sunexposed"] = "SunExposed"
            vals["nosun"] = "NoSun"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `sun_exposure`'.format(value))
            value = vals[value_lower]
        self._data["Sun Exposure"] = value

    @property
    def wind_exposure(self):
        """Get wind_exposure

        Returns:
            str: the value of `wind_exposure` or None if not set
        """
        return self._data["Wind Exposure"]

    @wind_exposure.setter
    def wind_exposure(self, value="WindExposed"):
        """  Corresponds to IDD Field `Wind Exposure`

        Args:
            value (str): value for IDD Field `Wind Exposure`
                Accepted values are:
                      - WindExposed
                      - NoWind
                Default value: WindExposed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `wind_exposure`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `wind_exposure`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `wind_exposure`')
            vals = {}
            vals["windexposed"] = "WindExposed"
            vals["nowind"] = "NoWind"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `wind_exposure`'.format(value))
            value = vals[value_lower]
        self._data["Wind Exposure"] = value

    @property
    def view_factor_to_ground(self):
        """Get view_factor_to_ground

        Returns:
            float: the value of `view_factor_to_ground` or None if not set
        """
        return self._data["View Factor to Ground"]

    @view_factor_to_ground.setter
    def view_factor_to_ground(self, value="autocalculate"):
        """  Corresponds to IDD Field `View Factor to Ground`
        From the exterior of the surface
        Unused if one uses the "reflections" options in Solar Distribution in Building input
        unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified.
        autocalculate will automatically calculate this value from the tilt of the surface

        Args:
            value (float or "Autocalculate"): value for IDD Field `View Factor to Ground`
                Default value: "autocalculate"
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["View Factor to Ground"] = "Autocalculate"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `view_factor_to_ground`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `view_factor_to_ground`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `view_factor_to_ground`')
        self._data["View Factor to Ground"] = value

    @property
    def number_of_vertices(self):
        """Get number_of_vertices

        Returns:
            float: the value of `number_of_vertices` or None if not set
        """
        return self._data["Number of Vertices"]

    @number_of_vertices.setter
    def number_of_vertices(self, value="autocalculate"):
        """  Corresponds to IDD Field `Number of Vertices`
        shown with 120 vertex coordinates -- extensible object
        "extensible" -- duplicate last set of x,y,z coordinates (last 3 fields),
        remembering to remove ; from "inner" fields.
        for clarity in any error messages, renumber the fields as well.
        (and changing z terminator to a comma "," for all but last one which needs a semi-colon ";")
        vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates
        are "relative" to the Zone Origin.  If world, then building and zone origins are used
        for some internal calculations, but all coordinates are given in an "absolute" system.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Number of Vertices`
                Default value: "autocalculate"
                value >= 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Number of Vertices"] = "Autocalculate"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_vertices`'.format(value))
            if value < 3.0:
                raise ValueError('value need to be greater or equal 3.0 '
                                 'for field `number_of_vertices`')
        self._data["Number of Vertices"] = value

    @property
    def vertex_1_xcoordinate(self):
        """Get vertex_1_xcoordinate

        Returns:
            float: the value of `vertex_1_xcoordinate` or None if not set
        """
        return self._data["Vertex 1 X-coordinate"]

    @vertex_1_xcoordinate.setter
    def vertex_1_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_xcoordinate`'.format(value))
        self._data["Vertex 1 X-coordinate"] = value

    @property
    def vertex_1_ycoordinate(self):
        """Get vertex_1_ycoordinate

        Returns:
            float: the value of `vertex_1_ycoordinate` or None if not set
        """
        return self._data["Vertex 1 Y-coordinate"]

    @vertex_1_ycoordinate.setter
    def vertex_1_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_ycoordinate`'.format(value))
        self._data["Vertex 1 Y-coordinate"] = value

    @property
    def vertex_1_zcoordinate(self):
        """Get vertex_1_zcoordinate

        Returns:
            float: the value of `vertex_1_zcoordinate` or None if not set
        """
        return self._data["Vertex 1 Z-coordinate"]

    @vertex_1_zcoordinate.setter
    def vertex_1_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_zcoordinate`'.format(value))
        self._data["Vertex 1 Z-coordinate"] = value

    @property
    def vertex_2_xcoordinate(self):
        """Get vertex_2_xcoordinate

        Returns:
            float: the value of `vertex_2_xcoordinate` or None if not set
        """
        return self._data["Vertex 2 X-coordinate"]

    @vertex_2_xcoordinate.setter
    def vertex_2_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_xcoordinate`'.format(value))
        self._data["Vertex 2 X-coordinate"] = value

    @property
    def vertex_2_ycoordinate(self):
        """Get vertex_2_ycoordinate

        Returns:
            float: the value of `vertex_2_ycoordinate` or None if not set
        """
        return self._data["Vertex 2 Y-coordinate"]

    @vertex_2_ycoordinate.setter
    def vertex_2_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_ycoordinate`'.format(value))
        self._data["Vertex 2 Y-coordinate"] = value

    @property
    def vertex_2_zcoordinate(self):
        """Get vertex_2_zcoordinate

        Returns:
            float: the value of `vertex_2_zcoordinate` or None if not set
        """
        return self._data["Vertex 2 Z-coordinate"]

    @vertex_2_zcoordinate.setter
    def vertex_2_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_zcoordinate`'.format(value))
        self._data["Vertex 2 Z-coordinate"] = value

    @property
    def vertex_3_xcoordinate(self):
        """Get vertex_3_xcoordinate

        Returns:
            float: the value of `vertex_3_xcoordinate` or None if not set
        """
        return self._data["Vertex 3 X-coordinate"]

    @vertex_3_xcoordinate.setter
    def vertex_3_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_xcoordinate`'.format(value))
        self._data["Vertex 3 X-coordinate"] = value

    @property
    def vertex_3_ycoordinate(self):
        """Get vertex_3_ycoordinate

        Returns:
            float: the value of `vertex_3_ycoordinate` or None if not set
        """
        return self._data["Vertex 3 Y-coordinate"]

    @vertex_3_ycoordinate.setter
    def vertex_3_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_ycoordinate`'.format(value))
        self._data["Vertex 3 Y-coordinate"] = value

    @property
    def vertex_3_zcoordinate(self):
        """Get vertex_3_zcoordinate

        Returns:
            float: the value of `vertex_3_zcoordinate` or None if not set
        """
        return self._data["Vertex 3 Z-coordinate"]

    @vertex_3_zcoordinate.setter
    def vertex_3_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_zcoordinate`'.format(value))
        self._data["Vertex 3 Z-coordinate"] = value

    @property
    def vertex_4_xcoordinate(self):
        """Get vertex_4_xcoordinate

        Returns:
            float: the value of `vertex_4_xcoordinate` or None if not set
        """
        return self._data["Vertex 4 X-coordinate"]

    @vertex_4_xcoordinate.setter
    def vertex_4_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_xcoordinate`'.format(value))
        self._data["Vertex 4 X-coordinate"] = value

    @property
    def vertex_4_ycoordinate(self):
        """Get vertex_4_ycoordinate

        Returns:
            float: the value of `vertex_4_ycoordinate` or None if not set
        """
        return self._data["Vertex 4 Y-coordinate"]

    @vertex_4_ycoordinate.setter
    def vertex_4_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_ycoordinate`'.format(value))
        self._data["Vertex 4 Y-coordinate"] = value

    @property
    def vertex_4_zcoordinate(self):
        """Get vertex_4_zcoordinate

        Returns:
            float: the value of `vertex_4_zcoordinate` or None if not set
        """
        return self._data["Vertex 4 Z-coordinate"]

    @vertex_4_zcoordinate.setter
    def vertex_4_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_zcoordinate`'.format(value))
        self._data["Vertex 4 Z-coordinate"] = value

    @property
    def vertex_5_xcoordinate(self):
        """Get vertex_5_xcoordinate

        Returns:
            float: the value of `vertex_5_xcoordinate` or None if not set
        """
        return self._data["Vertex 5 X-coordinate"]

    @vertex_5_xcoordinate.setter
    def vertex_5_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_xcoordinate`'.format(value))
        self._data["Vertex 5 X-coordinate"] = value

    @property
    def vertex_5_ycoordinate(self):
        """Get vertex_5_ycoordinate

        Returns:
            float: the value of `vertex_5_ycoordinate` or None if not set
        """
        return self._data["Vertex 5 Y-coordinate"]

    @vertex_5_ycoordinate.setter
    def vertex_5_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_ycoordinate`'.format(value))
        self._data["Vertex 5 Y-coordinate"] = value

    @property
    def vertex_5_zcoordinate(self):
        """Get vertex_5_zcoordinate

        Returns:
            float: the value of `vertex_5_zcoordinate` or None if not set
        """
        return self._data["Vertex 5 Z-coordinate"]

    @vertex_5_zcoordinate.setter
    def vertex_5_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_zcoordinate`'.format(value))
        self._data["Vertex 5 Z-coordinate"] = value

    @property
    def vertex_6_xcoordinate(self):
        """Get vertex_6_xcoordinate

        Returns:
            float: the value of `vertex_6_xcoordinate` or None if not set
        """
        return self._data["Vertex 6 X-coordinate"]

    @vertex_6_xcoordinate.setter
    def vertex_6_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_xcoordinate`'.format(value))
        self._data["Vertex 6 X-coordinate"] = value

    @property
    def vertex_6_ycoordinate(self):
        """Get vertex_6_ycoordinate

        Returns:
            float: the value of `vertex_6_ycoordinate` or None if not set
        """
        return self._data["Vertex 6 Y-coordinate"]

    @vertex_6_ycoordinate.setter
    def vertex_6_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_ycoordinate`'.format(value))
        self._data["Vertex 6 Y-coordinate"] = value

    @property
    def vertex_6_zcoordinate(self):
        """Get vertex_6_zcoordinate

        Returns:
            float: the value of `vertex_6_zcoordinate` or None if not set
        """
        return self._data["Vertex 6 Z-coordinate"]

    @vertex_6_zcoordinate.setter
    def vertex_6_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_zcoordinate`'.format(value))
        self._data["Vertex 6 Z-coordinate"] = value

    @property
    def vertex_7_xcoordinate(self):
        """Get vertex_7_xcoordinate

        Returns:
            float: the value of `vertex_7_xcoordinate` or None if not set
        """
        return self._data["Vertex 7 X-coordinate"]

    @vertex_7_xcoordinate.setter
    def vertex_7_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_xcoordinate`'.format(value))
        self._data["Vertex 7 X-coordinate"] = value

    @property
    def vertex_7_ycoordinate(self):
        """Get vertex_7_ycoordinate

        Returns:
            float: the value of `vertex_7_ycoordinate` or None if not set
        """
        return self._data["Vertex 7 Y-coordinate"]

    @vertex_7_ycoordinate.setter
    def vertex_7_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_ycoordinate`'.format(value))
        self._data["Vertex 7 Y-coordinate"] = value

    @property
    def vertex_7_zcoordinate(self):
        """Get vertex_7_zcoordinate

        Returns:
            float: the value of `vertex_7_zcoordinate` or None if not set
        """
        return self._data["Vertex 7 Z-coordinate"]

    @vertex_7_zcoordinate.setter
    def vertex_7_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_zcoordinate`'.format(value))
        self._data["Vertex 7 Z-coordinate"] = value

    @property
    def vertex_8_xcoordinate(self):
        """Get vertex_8_xcoordinate

        Returns:
            float: the value of `vertex_8_xcoordinate` or None if not set
        """
        return self._data["Vertex 8 X-coordinate"]

    @vertex_8_xcoordinate.setter
    def vertex_8_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_xcoordinate`'.format(value))
        self._data["Vertex 8 X-coordinate"] = value

    @property
    def vertex_8_ycoordinate(self):
        """Get vertex_8_ycoordinate

        Returns:
            float: the value of `vertex_8_ycoordinate` or None if not set
        """
        return self._data["Vertex 8 Y-coordinate"]

    @vertex_8_ycoordinate.setter
    def vertex_8_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_ycoordinate`'.format(value))
        self._data["Vertex 8 Y-coordinate"] = value

    @property
    def vertex_8_zcoordinate(self):
        """Get vertex_8_zcoordinate

        Returns:
            float: the value of `vertex_8_zcoordinate` or None if not set
        """
        return self._data["Vertex 8 Z-coordinate"]

    @vertex_8_zcoordinate.setter
    def vertex_8_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_zcoordinate`'.format(value))
        self._data["Vertex 8 Z-coordinate"] = value

    @property
    def vertex_9_xcoordinate(self):
        """Get vertex_9_xcoordinate

        Returns:
            float: the value of `vertex_9_xcoordinate` or None if not set
        """
        return self._data["Vertex 9 X-coordinate"]

    @vertex_9_xcoordinate.setter
    def vertex_9_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_xcoordinate`'.format(value))
        self._data["Vertex 9 X-coordinate"] = value

    @property
    def vertex_9_ycoordinate(self):
        """Get vertex_9_ycoordinate

        Returns:
            float: the value of `vertex_9_ycoordinate` or None if not set
        """
        return self._data["Vertex 9 Y-coordinate"]

    @vertex_9_ycoordinate.setter
    def vertex_9_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_ycoordinate`'.format(value))
        self._data["Vertex 9 Y-coordinate"] = value

    @property
    def vertex_9_zcoordinate(self):
        """Get vertex_9_zcoordinate

        Returns:
            float: the value of `vertex_9_zcoordinate` or None if not set
        """
        return self._data["Vertex 9 Z-coordinate"]

    @vertex_9_zcoordinate.setter
    def vertex_9_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_zcoordinate`'.format(value))
        self._data["Vertex 9 Z-coordinate"] = value

    @property
    def vertex_10_xcoordinate(self):
        """Get vertex_10_xcoordinate

        Returns:
            float: the value of `vertex_10_xcoordinate` or None if not set
        """
        return self._data["Vertex 10 X-coordinate"]

    @vertex_10_xcoordinate.setter
    def vertex_10_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_xcoordinate`'.format(value))
        self._data["Vertex 10 X-coordinate"] = value

    @property
    def vertex_10_ycoordinate(self):
        """Get vertex_10_ycoordinate

        Returns:
            float: the value of `vertex_10_ycoordinate` or None if not set
        """
        return self._data["Vertex 10 Y-coordinate"]

    @vertex_10_ycoordinate.setter
    def vertex_10_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_ycoordinate`'.format(value))
        self._data["Vertex 10 Y-coordinate"] = value

    @property
    def vertex_10_zcoordinate(self):
        """Get vertex_10_zcoordinate

        Returns:
            float: the value of `vertex_10_zcoordinate` or None if not set
        """
        return self._data["Vertex 10 Z-coordinate"]

    @vertex_10_zcoordinate.setter
    def vertex_10_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_zcoordinate`'.format(value))
        self._data["Vertex 10 Z-coordinate"] = value

    @property
    def vertex_11_xcoordinate(self):
        """Get vertex_11_xcoordinate

        Returns:
            float: the value of `vertex_11_xcoordinate` or None if not set
        """
        return self._data["Vertex 11 X-coordinate"]

    @vertex_11_xcoordinate.setter
    def vertex_11_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 11 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 11 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_11_xcoordinate`'.format(value))
        self._data["Vertex 11 X-coordinate"] = value

    @property
    def vertex_11_ycoordinate(self):
        """Get vertex_11_ycoordinate

        Returns:
            float: the value of `vertex_11_ycoordinate` or None if not set
        """
        return self._data["Vertex 11 Y-coordinate"]

    @vertex_11_ycoordinate.setter
    def vertex_11_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 11 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 11 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_11_ycoordinate`'.format(value))
        self._data["Vertex 11 Y-coordinate"] = value

    @property
    def vertex_11_zcoordinate(self):
        """Get vertex_11_zcoordinate

        Returns:
            float: the value of `vertex_11_zcoordinate` or None if not set
        """
        return self._data["Vertex 11 Z-coordinate"]

    @vertex_11_zcoordinate.setter
    def vertex_11_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 11 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 11 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_11_zcoordinate`'.format(value))
        self._data["Vertex 11 Z-coordinate"] = value

    @property
    def vertex_12_xcoordinate(self):
        """Get vertex_12_xcoordinate

        Returns:
            float: the value of `vertex_12_xcoordinate` or None if not set
        """
        return self._data["Vertex 12 X-coordinate"]

    @vertex_12_xcoordinate.setter
    def vertex_12_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 12 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 12 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_12_xcoordinate`'.format(value))
        self._data["Vertex 12 X-coordinate"] = value

    @property
    def vertex_12_ycoordinate(self):
        """Get vertex_12_ycoordinate

        Returns:
            float: the value of `vertex_12_ycoordinate` or None if not set
        """
        return self._data["Vertex 12 Y-coordinate"]

    @vertex_12_ycoordinate.setter
    def vertex_12_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 12 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 12 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_12_ycoordinate`'.format(value))
        self._data["Vertex 12 Y-coordinate"] = value

    @property
    def vertex_12_zcoordinate(self):
        """Get vertex_12_zcoordinate

        Returns:
            float: the value of `vertex_12_zcoordinate` or None if not set
        """
        return self._data["Vertex 12 Z-coordinate"]

    @vertex_12_zcoordinate.setter
    def vertex_12_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 12 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 12 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_12_zcoordinate`'.format(value))
        self._data["Vertex 12 Z-coordinate"] = value

    @property
    def vertex_13_xcoordinate(self):
        """Get vertex_13_xcoordinate

        Returns:
            float: the value of `vertex_13_xcoordinate` or None if not set
        """
        return self._data["Vertex 13 X-coordinate"]

    @vertex_13_xcoordinate.setter
    def vertex_13_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 13 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 13 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_13_xcoordinate`'.format(value))
        self._data["Vertex 13 X-coordinate"] = value

    @property
    def vertex_13_ycoordinate(self):
        """Get vertex_13_ycoordinate

        Returns:
            float: the value of `vertex_13_ycoordinate` or None if not set
        """
        return self._data["Vertex 13 Y-coordinate"]

    @vertex_13_ycoordinate.setter
    def vertex_13_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 13 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 13 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_13_ycoordinate`'.format(value))
        self._data["Vertex 13 Y-coordinate"] = value

    @property
    def vertex_13_zcoordinate(self):
        """Get vertex_13_zcoordinate

        Returns:
            float: the value of `vertex_13_zcoordinate` or None if not set
        """
        return self._data["Vertex 13 Z-coordinate"]

    @vertex_13_zcoordinate.setter
    def vertex_13_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 13 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 13 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_13_zcoordinate`'.format(value))
        self._data["Vertex 13 Z-coordinate"] = value

    @property
    def vertex_14_xcoordinate(self):
        """Get vertex_14_xcoordinate

        Returns:
            float: the value of `vertex_14_xcoordinate` or None if not set
        """
        return self._data["Vertex 14 X-coordinate"]

    @vertex_14_xcoordinate.setter
    def vertex_14_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 14 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 14 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_14_xcoordinate`'.format(value))
        self._data["Vertex 14 X-coordinate"] = value

    @property
    def vertex_14_ycoordinate(self):
        """Get vertex_14_ycoordinate

        Returns:
            float: the value of `vertex_14_ycoordinate` or None if not set
        """
        return self._data["Vertex 14 Y-coordinate"]

    @vertex_14_ycoordinate.setter
    def vertex_14_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 14 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 14 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_14_ycoordinate`'.format(value))
        self._data["Vertex 14 Y-coordinate"] = value

    @property
    def vertex_14_zcoordinate(self):
        """Get vertex_14_zcoordinate

        Returns:
            float: the value of `vertex_14_zcoordinate` or None if not set
        """
        return self._data["Vertex 14 Z-coordinate"]

    @vertex_14_zcoordinate.setter
    def vertex_14_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 14 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 14 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_14_zcoordinate`'.format(value))
        self._data["Vertex 14 Z-coordinate"] = value

    @property
    def vertex_15_xcoordinate(self):
        """Get vertex_15_xcoordinate

        Returns:
            float: the value of `vertex_15_xcoordinate` or None if not set
        """
        return self._data["Vertex 15 X-coordinate"]

    @vertex_15_xcoordinate.setter
    def vertex_15_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 15 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 15 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_15_xcoordinate`'.format(value))
        self._data["Vertex 15 X-coordinate"] = value

    @property
    def vertex_15_ycoordinate(self):
        """Get vertex_15_ycoordinate

        Returns:
            float: the value of `vertex_15_ycoordinate` or None if not set
        """
        return self._data["Vertex 15 Y-coordinate"]

    @vertex_15_ycoordinate.setter
    def vertex_15_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 15 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 15 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_15_ycoordinate`'.format(value))
        self._data["Vertex 15 Y-coordinate"] = value

    @property
    def vertex_15_zcoordinate(self):
        """Get vertex_15_zcoordinate

        Returns:
            float: the value of `vertex_15_zcoordinate` or None if not set
        """
        return self._data["Vertex 15 Z-coordinate"]

    @vertex_15_zcoordinate.setter
    def vertex_15_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 15 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 15 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_15_zcoordinate`'.format(value))
        self._data["Vertex 15 Z-coordinate"] = value

    @property
    def vertex_16_xcoordinate(self):
        """Get vertex_16_xcoordinate

        Returns:
            float: the value of `vertex_16_xcoordinate` or None if not set
        """
        return self._data["Vertex 16 X-coordinate"]

    @vertex_16_xcoordinate.setter
    def vertex_16_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 16 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 16 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_16_xcoordinate`'.format(value))
        self._data["Vertex 16 X-coordinate"] = value

    @property
    def vertex_16_ycoordinate(self):
        """Get vertex_16_ycoordinate

        Returns:
            float: the value of `vertex_16_ycoordinate` or None if not set
        """
        return self._data["Vertex 16 Y-coordinate"]

    @vertex_16_ycoordinate.setter
    def vertex_16_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 16 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 16 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_16_ycoordinate`'.format(value))
        self._data["Vertex 16 Y-coordinate"] = value

    @property
    def vertex_16_zcoordinate(self):
        """Get vertex_16_zcoordinate

        Returns:
            float: the value of `vertex_16_zcoordinate` or None if not set
        """
        return self._data["Vertex 16 Z-coordinate"]

    @vertex_16_zcoordinate.setter
    def vertex_16_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 16 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 16 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_16_zcoordinate`'.format(value))
        self._data["Vertex 16 Z-coordinate"] = value

    @property
    def vertex_17_xcoordinate(self):
        """Get vertex_17_xcoordinate

        Returns:
            float: the value of `vertex_17_xcoordinate` or None if not set
        """
        return self._data["Vertex 17 X-coordinate"]

    @vertex_17_xcoordinate.setter
    def vertex_17_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 17 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 17 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_17_xcoordinate`'.format(value))
        self._data["Vertex 17 X-coordinate"] = value

    @property
    def vertex_17_ycoordinate(self):
        """Get vertex_17_ycoordinate

        Returns:
            float: the value of `vertex_17_ycoordinate` or None if not set
        """
        return self._data["Vertex 17 Y-coordinate"]

    @vertex_17_ycoordinate.setter
    def vertex_17_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 17 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 17 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_17_ycoordinate`'.format(value))
        self._data["Vertex 17 Y-coordinate"] = value

    @property
    def vertex_17_zcoordinate(self):
        """Get vertex_17_zcoordinate

        Returns:
            float: the value of `vertex_17_zcoordinate` or None if not set
        """
        return self._data["Vertex 17 Z-coordinate"]

    @vertex_17_zcoordinate.setter
    def vertex_17_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 17 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 17 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_17_zcoordinate`'.format(value))
        self._data["Vertex 17 Z-coordinate"] = value

    @property
    def vertex_18_xcoordinate(self):
        """Get vertex_18_xcoordinate

        Returns:
            float: the value of `vertex_18_xcoordinate` or None if not set
        """
        return self._data["Vertex 18 X-coordinate"]

    @vertex_18_xcoordinate.setter
    def vertex_18_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 18 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 18 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_18_xcoordinate`'.format(value))
        self._data["Vertex 18 X-coordinate"] = value

    @property
    def vertex_18_ycoordinate(self):
        """Get vertex_18_ycoordinate

        Returns:
            float: the value of `vertex_18_ycoordinate` or None if not set
        """
        return self._data["Vertex 18 Y-coordinate"]

    @vertex_18_ycoordinate.setter
    def vertex_18_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 18 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 18 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_18_ycoordinate`'.format(value))
        self._data["Vertex 18 Y-coordinate"] = value

    @property
    def vertex_18_zcoordinate(self):
        """Get vertex_18_zcoordinate

        Returns:
            float: the value of `vertex_18_zcoordinate` or None if not set
        """
        return self._data["Vertex 18 Z-coordinate"]

    @vertex_18_zcoordinate.setter
    def vertex_18_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 18 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 18 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_18_zcoordinate`'.format(value))
        self._data["Vertex 18 Z-coordinate"] = value

    @property
    def vertex_19_xcoordinate(self):
        """Get vertex_19_xcoordinate

        Returns:
            float: the value of `vertex_19_xcoordinate` or None if not set
        """
        return self._data["Vertex 19 X-coordinate"]

    @vertex_19_xcoordinate.setter
    def vertex_19_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 19 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 19 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_19_xcoordinate`'.format(value))
        self._data["Vertex 19 X-coordinate"] = value

    @property
    def vertex_19_ycoordinate(self):
        """Get vertex_19_ycoordinate

        Returns:
            float: the value of `vertex_19_ycoordinate` or None if not set
        """
        return self._data["Vertex 19 Y-coordinate"]

    @vertex_19_ycoordinate.setter
    def vertex_19_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 19 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 19 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_19_ycoordinate`'.format(value))
        self._data["Vertex 19 Y-coordinate"] = value

    @property
    def vertex_19_zcoordinate(self):
        """Get vertex_19_zcoordinate

        Returns:
            float: the value of `vertex_19_zcoordinate` or None if not set
        """
        return self._data["Vertex 19 Z-coordinate"]

    @vertex_19_zcoordinate.setter
    def vertex_19_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 19 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 19 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_19_zcoordinate`'.format(value))
        self._data["Vertex 19 Z-coordinate"] = value

    @property
    def vertex_20_xcoordinate(self):
        """Get vertex_20_xcoordinate

        Returns:
            float: the value of `vertex_20_xcoordinate` or None if not set
        """
        return self._data["Vertex 20 X-coordinate"]

    @vertex_20_xcoordinate.setter
    def vertex_20_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 20 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 20 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_20_xcoordinate`'.format(value))
        self._data["Vertex 20 X-coordinate"] = value

    @property
    def vertex_20_ycoordinate(self):
        """Get vertex_20_ycoordinate

        Returns:
            float: the value of `vertex_20_ycoordinate` or None if not set
        """
        return self._data["Vertex 20 Y-coordinate"]

    @vertex_20_ycoordinate.setter
    def vertex_20_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 20 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 20 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_20_ycoordinate`'.format(value))
        self._data["Vertex 20 Y-coordinate"] = value

    @property
    def vertex_20_zcoordinate(self):
        """Get vertex_20_zcoordinate

        Returns:
            float: the value of `vertex_20_zcoordinate` or None if not set
        """
        return self._data["Vertex 20 Z-coordinate"]

    @vertex_20_zcoordinate.setter
    def vertex_20_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 20 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 20 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_20_zcoordinate`'.format(value))
        self._data["Vertex 20 Z-coordinate"] = value

    @property
    def vertex_21_xcoordinate(self):
        """Get vertex_21_xcoordinate

        Returns:
            float: the value of `vertex_21_xcoordinate` or None if not set
        """
        return self._data["Vertex 21 X-coordinate"]

    @vertex_21_xcoordinate.setter
    def vertex_21_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 21 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 21 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_21_xcoordinate`'.format(value))
        self._data["Vertex 21 X-coordinate"] = value

    @property
    def vertex_21_ycoordinate(self):
        """Get vertex_21_ycoordinate

        Returns:
            float: the value of `vertex_21_ycoordinate` or None if not set
        """
        return self._data["Vertex 21 Y-coordinate"]

    @vertex_21_ycoordinate.setter
    def vertex_21_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 21 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 21 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_21_ycoordinate`'.format(value))
        self._data["Vertex 21 Y-coordinate"] = value

    @property
    def vertex_21_zcoordinate(self):
        """Get vertex_21_zcoordinate

        Returns:
            float: the value of `vertex_21_zcoordinate` or None if not set
        """
        return self._data["Vertex 21 Z-coordinate"]

    @vertex_21_zcoordinate.setter
    def vertex_21_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 21 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 21 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_21_zcoordinate`'.format(value))
        self._data["Vertex 21 Z-coordinate"] = value

    @property
    def vertex_22_xcoordinate(self):
        """Get vertex_22_xcoordinate

        Returns:
            float: the value of `vertex_22_xcoordinate` or None if not set
        """
        return self._data["Vertex 22 X-coordinate"]

    @vertex_22_xcoordinate.setter
    def vertex_22_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 22 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 22 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_22_xcoordinate`'.format(value))
        self._data["Vertex 22 X-coordinate"] = value

    @property
    def vertex_22_ycoordinate(self):
        """Get vertex_22_ycoordinate

        Returns:
            float: the value of `vertex_22_ycoordinate` or None if not set
        """
        return self._data["Vertex 22 Y-coordinate"]

    @vertex_22_ycoordinate.setter
    def vertex_22_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 22 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 22 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_22_ycoordinate`'.format(value))
        self._data["Vertex 22 Y-coordinate"] = value

    @property
    def vertex_22_zcoordinate(self):
        """Get vertex_22_zcoordinate

        Returns:
            float: the value of `vertex_22_zcoordinate` or None if not set
        """
        return self._data["Vertex 22 Z-coordinate"]

    @vertex_22_zcoordinate.setter
    def vertex_22_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 22 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 22 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_22_zcoordinate`'.format(value))
        self._data["Vertex 22 Z-coordinate"] = value

    @property
    def vertex_23_xcoordinate(self):
        """Get vertex_23_xcoordinate

        Returns:
            float: the value of `vertex_23_xcoordinate` or None if not set
        """
        return self._data["Vertex 23 X-coordinate"]

    @vertex_23_xcoordinate.setter
    def vertex_23_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 23 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 23 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_23_xcoordinate`'.format(value))
        self._data["Vertex 23 X-coordinate"] = value

    @property
    def vertex_23_ycoordinate(self):
        """Get vertex_23_ycoordinate

        Returns:
            float: the value of `vertex_23_ycoordinate` or None if not set
        """
        return self._data["Vertex 23 Y-coordinate"]

    @vertex_23_ycoordinate.setter
    def vertex_23_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 23 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 23 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_23_ycoordinate`'.format(value))
        self._data["Vertex 23 Y-coordinate"] = value

    @property
    def vertex_23_zcoordinate(self):
        """Get vertex_23_zcoordinate

        Returns:
            float: the value of `vertex_23_zcoordinate` or None if not set
        """
        return self._data["Vertex 23 Z-coordinate"]

    @vertex_23_zcoordinate.setter
    def vertex_23_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 23 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 23 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_23_zcoordinate`'.format(value))
        self._data["Vertex 23 Z-coordinate"] = value

    @property
    def vertex_24_xcoordinate(self):
        """Get vertex_24_xcoordinate

        Returns:
            float: the value of `vertex_24_xcoordinate` or None if not set
        """
        return self._data["Vertex 24 X-coordinate"]

    @vertex_24_xcoordinate.setter
    def vertex_24_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 24 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 24 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_24_xcoordinate`'.format(value))
        self._data["Vertex 24 X-coordinate"] = value

    @property
    def vertex_24_ycoordinate(self):
        """Get vertex_24_ycoordinate

        Returns:
            float: the value of `vertex_24_ycoordinate` or None if not set
        """
        return self._data["Vertex 24 Y-coordinate"]

    @vertex_24_ycoordinate.setter
    def vertex_24_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 24 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 24 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_24_ycoordinate`'.format(value))
        self._data["Vertex 24 Y-coordinate"] = value

    @property
    def vertex_24_zcoordinate(self):
        """Get vertex_24_zcoordinate

        Returns:
            float: the value of `vertex_24_zcoordinate` or None if not set
        """
        return self._data["Vertex 24 Z-coordinate"]

    @vertex_24_zcoordinate.setter
    def vertex_24_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 24 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 24 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_24_zcoordinate`'.format(value))
        self._data["Vertex 24 Z-coordinate"] = value

    @property
    def vertex_25_xcoordinate(self):
        """Get vertex_25_xcoordinate

        Returns:
            float: the value of `vertex_25_xcoordinate` or None if not set
        """
        return self._data["Vertex 25 X-coordinate"]

    @vertex_25_xcoordinate.setter
    def vertex_25_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 25 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 25 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_25_xcoordinate`'.format(value))
        self._data["Vertex 25 X-coordinate"] = value

    @property
    def vertex_25_ycoordinate(self):
        """Get vertex_25_ycoordinate

        Returns:
            float: the value of `vertex_25_ycoordinate` or None if not set
        """
        return self._data["Vertex 25 Y-coordinate"]

    @vertex_25_ycoordinate.setter
    def vertex_25_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 25 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 25 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_25_ycoordinate`'.format(value))
        self._data["Vertex 25 Y-coordinate"] = value

    @property
    def vertex_25_zcoordinate(self):
        """Get vertex_25_zcoordinate

        Returns:
            float: the value of `vertex_25_zcoordinate` or None if not set
        """
        return self._data["Vertex 25 Z-coordinate"]

    @vertex_25_zcoordinate.setter
    def vertex_25_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 25 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 25 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_25_zcoordinate`'.format(value))
        self._data["Vertex 25 Z-coordinate"] = value

    @property
    def vertex_26_xcoordinate(self):
        """Get vertex_26_xcoordinate

        Returns:
            float: the value of `vertex_26_xcoordinate` or None if not set
        """
        return self._data["Vertex 26 X-coordinate"]

    @vertex_26_xcoordinate.setter
    def vertex_26_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 26 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 26 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_26_xcoordinate`'.format(value))
        self._data["Vertex 26 X-coordinate"] = value

    @property
    def vertex_26_ycoordinate(self):
        """Get vertex_26_ycoordinate

        Returns:
            float: the value of `vertex_26_ycoordinate` or None if not set
        """
        return self._data["Vertex 26 Y-coordinate"]

    @vertex_26_ycoordinate.setter
    def vertex_26_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 26 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 26 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_26_ycoordinate`'.format(value))
        self._data["Vertex 26 Y-coordinate"] = value

    @property
    def vertex_26_zcoordinate(self):
        """Get vertex_26_zcoordinate

        Returns:
            float: the value of `vertex_26_zcoordinate` or None if not set
        """
        return self._data["Vertex 26 Z-coordinate"]

    @vertex_26_zcoordinate.setter
    def vertex_26_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 26 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 26 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_26_zcoordinate`'.format(value))
        self._data["Vertex 26 Z-coordinate"] = value

    @property
    def vertex_27_xcoordinate(self):
        """Get vertex_27_xcoordinate

        Returns:
            float: the value of `vertex_27_xcoordinate` or None if not set
        """
        return self._data["Vertex 27 X-coordinate"]

    @vertex_27_xcoordinate.setter
    def vertex_27_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 27 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 27 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_27_xcoordinate`'.format(value))
        self._data["Vertex 27 X-coordinate"] = value

    @property
    def vertex_27_ycoordinate(self):
        """Get vertex_27_ycoordinate

        Returns:
            float: the value of `vertex_27_ycoordinate` or None if not set
        """
        return self._data["Vertex 27 Y-coordinate"]

    @vertex_27_ycoordinate.setter
    def vertex_27_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 27 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 27 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_27_ycoordinate`'.format(value))
        self._data["Vertex 27 Y-coordinate"] = value

    @property
    def vertex_27_zcoordinate(self):
        """Get vertex_27_zcoordinate

        Returns:
            float: the value of `vertex_27_zcoordinate` or None if not set
        """
        return self._data["Vertex 27 Z-coordinate"]

    @vertex_27_zcoordinate.setter
    def vertex_27_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 27 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 27 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_27_zcoordinate`'.format(value))
        self._data["Vertex 27 Z-coordinate"] = value

    @property
    def vertex_28_xcoordinate(self):
        """Get vertex_28_xcoordinate

        Returns:
            float: the value of `vertex_28_xcoordinate` or None if not set
        """
        return self._data["Vertex 28 X-coordinate"]

    @vertex_28_xcoordinate.setter
    def vertex_28_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 28 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 28 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_28_xcoordinate`'.format(value))
        self._data["Vertex 28 X-coordinate"] = value

    @property
    def vertex_28_ycoordinate(self):
        """Get vertex_28_ycoordinate

        Returns:
            float: the value of `vertex_28_ycoordinate` or None if not set
        """
        return self._data["Vertex 28 Y-coordinate"]

    @vertex_28_ycoordinate.setter
    def vertex_28_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 28 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 28 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_28_ycoordinate`'.format(value))
        self._data["Vertex 28 Y-coordinate"] = value

    @property
    def vertex_28_zcoordinate(self):
        """Get vertex_28_zcoordinate

        Returns:
            float: the value of `vertex_28_zcoordinate` or None if not set
        """
        return self._data["Vertex 28 Z-coordinate"]

    @vertex_28_zcoordinate.setter
    def vertex_28_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 28 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 28 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_28_zcoordinate`'.format(value))
        self._data["Vertex 28 Z-coordinate"] = value

    @property
    def vertex_29_xcoordinate(self):
        """Get vertex_29_xcoordinate

        Returns:
            float: the value of `vertex_29_xcoordinate` or None if not set
        """
        return self._data["Vertex 29 X-coordinate"]

    @vertex_29_xcoordinate.setter
    def vertex_29_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 29 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 29 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_29_xcoordinate`'.format(value))
        self._data["Vertex 29 X-coordinate"] = value

    @property
    def vertex_29_ycoordinate(self):
        """Get vertex_29_ycoordinate

        Returns:
            float: the value of `vertex_29_ycoordinate` or None if not set
        """
        return self._data["Vertex 29 Y-coordinate"]

    @vertex_29_ycoordinate.setter
    def vertex_29_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 29 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 29 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_29_ycoordinate`'.format(value))
        self._data["Vertex 29 Y-coordinate"] = value

    @property
    def vertex_29_zcoordinate(self):
        """Get vertex_29_zcoordinate

        Returns:
            float: the value of `vertex_29_zcoordinate` or None if not set
        """
        return self._data["Vertex 29 Z-coordinate"]

    @vertex_29_zcoordinate.setter
    def vertex_29_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 29 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 29 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_29_zcoordinate`'.format(value))
        self._data["Vertex 29 Z-coordinate"] = value

    @property
    def vertex_30_xcoordinate(self):
        """Get vertex_30_xcoordinate

        Returns:
            float: the value of `vertex_30_xcoordinate` or None if not set
        """
        return self._data["Vertex 30 X-coordinate"]

    @vertex_30_xcoordinate.setter
    def vertex_30_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 30 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 30 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_30_xcoordinate`'.format(value))
        self._data["Vertex 30 X-coordinate"] = value

    @property
    def vertex_30_ycoordinate(self):
        """Get vertex_30_ycoordinate

        Returns:
            float: the value of `vertex_30_ycoordinate` or None if not set
        """
        return self._data["Vertex 30 Y-coordinate"]

    @vertex_30_ycoordinate.setter
    def vertex_30_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 30 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 30 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_30_ycoordinate`'.format(value))
        self._data["Vertex 30 Y-coordinate"] = value

    @property
    def vertex_30_zcoordinate(self):
        """Get vertex_30_zcoordinate

        Returns:
            float: the value of `vertex_30_zcoordinate` or None if not set
        """
        return self._data["Vertex 30 Z-coordinate"]

    @vertex_30_zcoordinate.setter
    def vertex_30_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 30 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 30 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_30_zcoordinate`'.format(value))
        self._data["Vertex 30 Z-coordinate"] = value

    @property
    def vertex_31_xcoordinate(self):
        """Get vertex_31_xcoordinate

        Returns:
            float: the value of `vertex_31_xcoordinate` or None if not set
        """
        return self._data["Vertex 31 X-coordinate"]

    @vertex_31_xcoordinate.setter
    def vertex_31_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 31 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 31 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_31_xcoordinate`'.format(value))
        self._data["Vertex 31 X-coordinate"] = value

    @property
    def vertex_31_ycoordinate(self):
        """Get vertex_31_ycoordinate

        Returns:
            float: the value of `vertex_31_ycoordinate` or None if not set
        """
        return self._data["Vertex 31 Y-coordinate"]

    @vertex_31_ycoordinate.setter
    def vertex_31_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 31 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 31 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_31_ycoordinate`'.format(value))
        self._data["Vertex 31 Y-coordinate"] = value

    @property
    def vertex_31_zcoordinate(self):
        """Get vertex_31_zcoordinate

        Returns:
            float: the value of `vertex_31_zcoordinate` or None if not set
        """
        return self._data["Vertex 31 Z-coordinate"]

    @vertex_31_zcoordinate.setter
    def vertex_31_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 31 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 31 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_31_zcoordinate`'.format(value))
        self._data["Vertex 31 Z-coordinate"] = value

    @property
    def vertex_32_xcoordinate(self):
        """Get vertex_32_xcoordinate

        Returns:
            float: the value of `vertex_32_xcoordinate` or None if not set
        """
        return self._data["Vertex 32 X-coordinate"]

    @vertex_32_xcoordinate.setter
    def vertex_32_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 32 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 32 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_32_xcoordinate`'.format(value))
        self._data["Vertex 32 X-coordinate"] = value

    @property
    def vertex_32_ycoordinate(self):
        """Get vertex_32_ycoordinate

        Returns:
            float: the value of `vertex_32_ycoordinate` or None if not set
        """
        return self._data["Vertex 32 Y-coordinate"]

    @vertex_32_ycoordinate.setter
    def vertex_32_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 32 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 32 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_32_ycoordinate`'.format(value))
        self._data["Vertex 32 Y-coordinate"] = value

    @property
    def vertex_32_zcoordinate(self):
        """Get vertex_32_zcoordinate

        Returns:
            float: the value of `vertex_32_zcoordinate` or None if not set
        """
        return self._data["Vertex 32 Z-coordinate"]

    @vertex_32_zcoordinate.setter
    def vertex_32_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 32 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 32 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_32_zcoordinate`'.format(value))
        self._data["Vertex 32 Z-coordinate"] = value

    @property
    def vertex_33_xcoordinate(self):
        """Get vertex_33_xcoordinate

        Returns:
            float: the value of `vertex_33_xcoordinate` or None if not set
        """
        return self._data["Vertex 33 X-coordinate"]

    @vertex_33_xcoordinate.setter
    def vertex_33_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 33 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 33 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_33_xcoordinate`'.format(value))
        self._data["Vertex 33 X-coordinate"] = value

    @property
    def vertex_33_ycoordinate(self):
        """Get vertex_33_ycoordinate

        Returns:
            float: the value of `vertex_33_ycoordinate` or None if not set
        """
        return self._data["Vertex 33 Y-coordinate"]

    @vertex_33_ycoordinate.setter
    def vertex_33_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 33 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 33 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_33_ycoordinate`'.format(value))
        self._data["Vertex 33 Y-coordinate"] = value

    @property
    def vertex_33_zcoordinate(self):
        """Get vertex_33_zcoordinate

        Returns:
            float: the value of `vertex_33_zcoordinate` or None if not set
        """
        return self._data["Vertex 33 Z-coordinate"]

    @vertex_33_zcoordinate.setter
    def vertex_33_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 33 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 33 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_33_zcoordinate`'.format(value))
        self._data["Vertex 33 Z-coordinate"] = value

    @property
    def vertex_34_xcoordinate(self):
        """Get vertex_34_xcoordinate

        Returns:
            float: the value of `vertex_34_xcoordinate` or None if not set
        """
        return self._data["Vertex 34 X-coordinate"]

    @vertex_34_xcoordinate.setter
    def vertex_34_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 34 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 34 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_34_xcoordinate`'.format(value))
        self._data["Vertex 34 X-coordinate"] = value

    @property
    def vertex_34_ycoordinate(self):
        """Get vertex_34_ycoordinate

        Returns:
            float: the value of `vertex_34_ycoordinate` or None if not set
        """
        return self._data["Vertex 34 Y-coordinate"]

    @vertex_34_ycoordinate.setter
    def vertex_34_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 34 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 34 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_34_ycoordinate`'.format(value))
        self._data["Vertex 34 Y-coordinate"] = value

    @property
    def vertex_34_zcoordinate(self):
        """Get vertex_34_zcoordinate

        Returns:
            float: the value of `vertex_34_zcoordinate` or None if not set
        """
        return self._data["Vertex 34 Z-coordinate"]

    @vertex_34_zcoordinate.setter
    def vertex_34_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 34 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 34 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_34_zcoordinate`'.format(value))
        self._data["Vertex 34 Z-coordinate"] = value

    @property
    def vertex_35_xcoordinate(self):
        """Get vertex_35_xcoordinate

        Returns:
            float: the value of `vertex_35_xcoordinate` or None if not set
        """
        return self._data["Vertex 35 X-coordinate"]

    @vertex_35_xcoordinate.setter
    def vertex_35_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 35 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 35 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_35_xcoordinate`'.format(value))
        self._data["Vertex 35 X-coordinate"] = value

    @property
    def vertex_35_ycoordinate(self):
        """Get vertex_35_ycoordinate

        Returns:
            float: the value of `vertex_35_ycoordinate` or None if not set
        """
        return self._data["Vertex 35 Y-coordinate"]

    @vertex_35_ycoordinate.setter
    def vertex_35_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 35 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 35 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_35_ycoordinate`'.format(value))
        self._data["Vertex 35 Y-coordinate"] = value

    @property
    def vertex_35_zcoordinate(self):
        """Get vertex_35_zcoordinate

        Returns:
            float: the value of `vertex_35_zcoordinate` or None if not set
        """
        return self._data["Vertex 35 Z-coordinate"]

    @vertex_35_zcoordinate.setter
    def vertex_35_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 35 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 35 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_35_zcoordinate`'.format(value))
        self._data["Vertex 35 Z-coordinate"] = value

    @property
    def vertex_36_xcoordinate(self):
        """Get vertex_36_xcoordinate

        Returns:
            float: the value of `vertex_36_xcoordinate` or None if not set
        """
        return self._data["Vertex 36 X-coordinate"]

    @vertex_36_xcoordinate.setter
    def vertex_36_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 36 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 36 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_36_xcoordinate`'.format(value))
        self._data["Vertex 36 X-coordinate"] = value

    @property
    def vertex_36_ycoordinate(self):
        """Get vertex_36_ycoordinate

        Returns:
            float: the value of `vertex_36_ycoordinate` or None if not set
        """
        return self._data["Vertex 36 Y-coordinate"]

    @vertex_36_ycoordinate.setter
    def vertex_36_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 36 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 36 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_36_ycoordinate`'.format(value))
        self._data["Vertex 36 Y-coordinate"] = value

    @property
    def vertex_36_zcoordinate(self):
        """Get vertex_36_zcoordinate

        Returns:
            float: the value of `vertex_36_zcoordinate` or None if not set
        """
        return self._data["Vertex 36 Z-coordinate"]

    @vertex_36_zcoordinate.setter
    def vertex_36_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 36 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 36 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_36_zcoordinate`'.format(value))
        self._data["Vertex 36 Z-coordinate"] = value

    @property
    def vertex_37_xcoordinate(self):
        """Get vertex_37_xcoordinate

        Returns:
            float: the value of `vertex_37_xcoordinate` or None if not set
        """
        return self._data["Vertex 37 X-coordinate"]

    @vertex_37_xcoordinate.setter
    def vertex_37_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 37 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 37 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_37_xcoordinate`'.format(value))
        self._data["Vertex 37 X-coordinate"] = value

    @property
    def vertex_37_ycoordinate(self):
        """Get vertex_37_ycoordinate

        Returns:
            float: the value of `vertex_37_ycoordinate` or None if not set
        """
        return self._data["Vertex 37 Y-coordinate"]

    @vertex_37_ycoordinate.setter
    def vertex_37_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 37 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 37 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_37_ycoordinate`'.format(value))
        self._data["Vertex 37 Y-coordinate"] = value

    @property
    def vertex_37_zcoordinate(self):
        """Get vertex_37_zcoordinate

        Returns:
            float: the value of `vertex_37_zcoordinate` or None if not set
        """
        return self._data["Vertex 37 Z-coordinate"]

    @vertex_37_zcoordinate.setter
    def vertex_37_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 37 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 37 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_37_zcoordinate`'.format(value))
        self._data["Vertex 37 Z-coordinate"] = value

    @property
    def vertex_38_xcoordinate(self):
        """Get vertex_38_xcoordinate

        Returns:
            float: the value of `vertex_38_xcoordinate` or None if not set
        """
        return self._data["Vertex 38 X-coordinate"]

    @vertex_38_xcoordinate.setter
    def vertex_38_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 38 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 38 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_38_xcoordinate`'.format(value))
        self._data["Vertex 38 X-coordinate"] = value

    @property
    def vertex_38_ycoordinate(self):
        """Get vertex_38_ycoordinate

        Returns:
            float: the value of `vertex_38_ycoordinate` or None if not set
        """
        return self._data["Vertex 38 Y-coordinate"]

    @vertex_38_ycoordinate.setter
    def vertex_38_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 38 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 38 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_38_ycoordinate`'.format(value))
        self._data["Vertex 38 Y-coordinate"] = value

    @property
    def vertex_38_zcoordinate(self):
        """Get vertex_38_zcoordinate

        Returns:
            float: the value of `vertex_38_zcoordinate` or None if not set
        """
        return self._data["Vertex 38 Z-coordinate"]

    @vertex_38_zcoordinate.setter
    def vertex_38_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 38 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 38 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_38_zcoordinate`'.format(value))
        self._data["Vertex 38 Z-coordinate"] = value

    @property
    def vertex_39_xcoordinate(self):
        """Get vertex_39_xcoordinate

        Returns:
            float: the value of `vertex_39_xcoordinate` or None if not set
        """
        return self._data["Vertex 39 X-coordinate"]

    @vertex_39_xcoordinate.setter
    def vertex_39_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 39 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 39 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_39_xcoordinate`'.format(value))
        self._data["Vertex 39 X-coordinate"] = value

    @property
    def vertex_39_ycoordinate(self):
        """Get vertex_39_ycoordinate

        Returns:
            float: the value of `vertex_39_ycoordinate` or None if not set
        """
        return self._data["Vertex 39 Y-coordinate"]

    @vertex_39_ycoordinate.setter
    def vertex_39_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 39 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 39 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_39_ycoordinate`'.format(value))
        self._data["Vertex 39 Y-coordinate"] = value

    @property
    def vertex_39_zcoordinate(self):
        """Get vertex_39_zcoordinate

        Returns:
            float: the value of `vertex_39_zcoordinate` or None if not set
        """
        return self._data["Vertex 39 Z-coordinate"]

    @vertex_39_zcoordinate.setter
    def vertex_39_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 39 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 39 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_39_zcoordinate`'.format(value))
        self._data["Vertex 39 Z-coordinate"] = value

    @property
    def vertex_40_xcoordinate(self):
        """Get vertex_40_xcoordinate

        Returns:
            float: the value of `vertex_40_xcoordinate` or None if not set
        """
        return self._data["Vertex 40 X-coordinate"]

    @vertex_40_xcoordinate.setter
    def vertex_40_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 40 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 40 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_40_xcoordinate`'.format(value))
        self._data["Vertex 40 X-coordinate"] = value

    @property
    def vertex_40_ycoordinate(self):
        """Get vertex_40_ycoordinate

        Returns:
            float: the value of `vertex_40_ycoordinate` or None if not set
        """
        return self._data["Vertex 40 Y-coordinate"]

    @vertex_40_ycoordinate.setter
    def vertex_40_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 40 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 40 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_40_ycoordinate`'.format(value))
        self._data["Vertex 40 Y-coordinate"] = value

    @property
    def vertex_40_zcoordinate(self):
        """Get vertex_40_zcoordinate

        Returns:
            float: the value of `vertex_40_zcoordinate` or None if not set
        """
        return self._data["Vertex 40 Z-coordinate"]

    @vertex_40_zcoordinate.setter
    def vertex_40_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 40 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 40 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_40_zcoordinate`'.format(value))
        self._data["Vertex 40 Z-coordinate"] = value

    @property
    def vertex_41_xcoordinate(self):
        """Get vertex_41_xcoordinate

        Returns:
            float: the value of `vertex_41_xcoordinate` or None if not set
        """
        return self._data["Vertex 41 X-coordinate"]

    @vertex_41_xcoordinate.setter
    def vertex_41_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 41 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 41 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_41_xcoordinate`'.format(value))
        self._data["Vertex 41 X-coordinate"] = value

    @property
    def vertex_41_ycoordinate(self):
        """Get vertex_41_ycoordinate

        Returns:
            float: the value of `vertex_41_ycoordinate` or None if not set
        """
        return self._data["Vertex 41 Y-coordinate"]

    @vertex_41_ycoordinate.setter
    def vertex_41_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 41 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 41 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_41_ycoordinate`'.format(value))
        self._data["Vertex 41 Y-coordinate"] = value

    @property
    def vertex_41_zcoordinate(self):
        """Get vertex_41_zcoordinate

        Returns:
            float: the value of `vertex_41_zcoordinate` or None if not set
        """
        return self._data["Vertex 41 Z-coordinate"]

    @vertex_41_zcoordinate.setter
    def vertex_41_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 41 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 41 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_41_zcoordinate`'.format(value))
        self._data["Vertex 41 Z-coordinate"] = value

    @property
    def vertex_42_xcoordinate(self):
        """Get vertex_42_xcoordinate

        Returns:
            float: the value of `vertex_42_xcoordinate` or None if not set
        """
        return self._data["Vertex 42 X-coordinate"]

    @vertex_42_xcoordinate.setter
    def vertex_42_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 42 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 42 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_42_xcoordinate`'.format(value))
        self._data["Vertex 42 X-coordinate"] = value

    @property
    def vertex_42_ycoordinate(self):
        """Get vertex_42_ycoordinate

        Returns:
            float: the value of `vertex_42_ycoordinate` or None if not set
        """
        return self._data["Vertex 42 Y-coordinate"]

    @vertex_42_ycoordinate.setter
    def vertex_42_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 42 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 42 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_42_ycoordinate`'.format(value))
        self._data["Vertex 42 Y-coordinate"] = value

    @property
    def vertex_42_zcoordinate(self):
        """Get vertex_42_zcoordinate

        Returns:
            float: the value of `vertex_42_zcoordinate` or None if not set
        """
        return self._data["Vertex 42 Z-coordinate"]

    @vertex_42_zcoordinate.setter
    def vertex_42_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 42 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 42 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_42_zcoordinate`'.format(value))
        self._data["Vertex 42 Z-coordinate"] = value

    @property
    def vertex_43_xcoordinate(self):
        """Get vertex_43_xcoordinate

        Returns:
            float: the value of `vertex_43_xcoordinate` or None if not set
        """
        return self._data["Vertex 43 X-coordinate"]

    @vertex_43_xcoordinate.setter
    def vertex_43_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 43 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 43 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_43_xcoordinate`'.format(value))
        self._data["Vertex 43 X-coordinate"] = value

    @property
    def vertex_43_ycoordinate(self):
        """Get vertex_43_ycoordinate

        Returns:
            float: the value of `vertex_43_ycoordinate` or None if not set
        """
        return self._data["Vertex 43 Y-coordinate"]

    @vertex_43_ycoordinate.setter
    def vertex_43_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 43 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 43 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_43_ycoordinate`'.format(value))
        self._data["Vertex 43 Y-coordinate"] = value

    @property
    def vertex_43_zcoordinate(self):
        """Get vertex_43_zcoordinate

        Returns:
            float: the value of `vertex_43_zcoordinate` or None if not set
        """
        return self._data["Vertex 43 Z-coordinate"]

    @vertex_43_zcoordinate.setter
    def vertex_43_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 43 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 43 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_43_zcoordinate`'.format(value))
        self._data["Vertex 43 Z-coordinate"] = value

    @property
    def vertex_44_xcoordinate(self):
        """Get vertex_44_xcoordinate

        Returns:
            float: the value of `vertex_44_xcoordinate` or None if not set
        """
        return self._data["Vertex 44 X-coordinate"]

    @vertex_44_xcoordinate.setter
    def vertex_44_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 44 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 44 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_44_xcoordinate`'.format(value))
        self._data["Vertex 44 X-coordinate"] = value

    @property
    def vertex_44_ycoordinate(self):
        """Get vertex_44_ycoordinate

        Returns:
            float: the value of `vertex_44_ycoordinate` or None if not set
        """
        return self._data["Vertex 44 Y-coordinate"]

    @vertex_44_ycoordinate.setter
    def vertex_44_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 44 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 44 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_44_ycoordinate`'.format(value))
        self._data["Vertex 44 Y-coordinate"] = value

    @property
    def vertex_44_zcoordinate(self):
        """Get vertex_44_zcoordinate

        Returns:
            float: the value of `vertex_44_zcoordinate` or None if not set
        """
        return self._data["Vertex 44 Z-coordinate"]

    @vertex_44_zcoordinate.setter
    def vertex_44_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 44 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 44 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_44_zcoordinate`'.format(value))
        self._data["Vertex 44 Z-coordinate"] = value

    @property
    def vertex_45_xcoordinate(self):
        """Get vertex_45_xcoordinate

        Returns:
            float: the value of `vertex_45_xcoordinate` or None if not set
        """
        return self._data["Vertex 45 X-coordinate"]

    @vertex_45_xcoordinate.setter
    def vertex_45_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 45 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 45 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_45_xcoordinate`'.format(value))
        self._data["Vertex 45 X-coordinate"] = value

    @property
    def vertex_45_ycoordinate(self):
        """Get vertex_45_ycoordinate

        Returns:
            float: the value of `vertex_45_ycoordinate` or None if not set
        """
        return self._data["Vertex 45 Y-coordinate"]

    @vertex_45_ycoordinate.setter
    def vertex_45_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 45 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 45 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_45_ycoordinate`'.format(value))
        self._data["Vertex 45 Y-coordinate"] = value

    @property
    def vertex_45_zcoordinate(self):
        """Get vertex_45_zcoordinate

        Returns:
            float: the value of `vertex_45_zcoordinate` or None if not set
        """
        return self._data["Vertex 45 Z-coordinate"]

    @vertex_45_zcoordinate.setter
    def vertex_45_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 45 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 45 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_45_zcoordinate`'.format(value))
        self._data["Vertex 45 Z-coordinate"] = value

    @property
    def vertex_46_xcoordinate(self):
        """Get vertex_46_xcoordinate

        Returns:
            float: the value of `vertex_46_xcoordinate` or None if not set
        """
        return self._data["Vertex 46 X-coordinate"]

    @vertex_46_xcoordinate.setter
    def vertex_46_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 46 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 46 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_46_xcoordinate`'.format(value))
        self._data["Vertex 46 X-coordinate"] = value

    @property
    def vertex_46_ycoordinate(self):
        """Get vertex_46_ycoordinate

        Returns:
            float: the value of `vertex_46_ycoordinate` or None if not set
        """
        return self._data["Vertex 46 Y-coordinate"]

    @vertex_46_ycoordinate.setter
    def vertex_46_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 46 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 46 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_46_ycoordinate`'.format(value))
        self._data["Vertex 46 Y-coordinate"] = value

    @property
    def vertex_46_zcoordinate(self):
        """Get vertex_46_zcoordinate

        Returns:
            float: the value of `vertex_46_zcoordinate` or None if not set
        """
        return self._data["Vertex 46 Z-coordinate"]

    @vertex_46_zcoordinate.setter
    def vertex_46_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 46 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 46 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_46_zcoordinate`'.format(value))
        self._data["Vertex 46 Z-coordinate"] = value

    @property
    def vertex_47_xcoordinate(self):
        """Get vertex_47_xcoordinate

        Returns:
            float: the value of `vertex_47_xcoordinate` or None if not set
        """
        return self._data["Vertex 47 X-coordinate"]

    @vertex_47_xcoordinate.setter
    def vertex_47_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 47 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 47 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_47_xcoordinate`'.format(value))
        self._data["Vertex 47 X-coordinate"] = value

    @property
    def vertex_47_ycoordinate(self):
        """Get vertex_47_ycoordinate

        Returns:
            float: the value of `vertex_47_ycoordinate` or None if not set
        """
        return self._data["Vertex 47 Y-coordinate"]

    @vertex_47_ycoordinate.setter
    def vertex_47_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 47 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 47 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_47_ycoordinate`'.format(value))
        self._data["Vertex 47 Y-coordinate"] = value

    @property
    def vertex_47_zcoordinate(self):
        """Get vertex_47_zcoordinate

        Returns:
            float: the value of `vertex_47_zcoordinate` or None if not set
        """
        return self._data["Vertex 47 Z-coordinate"]

    @vertex_47_zcoordinate.setter
    def vertex_47_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 47 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 47 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_47_zcoordinate`'.format(value))
        self._data["Vertex 47 Z-coordinate"] = value

    @property
    def vertex_48_xcoordinate(self):
        """Get vertex_48_xcoordinate

        Returns:
            float: the value of `vertex_48_xcoordinate` or None if not set
        """
        return self._data["Vertex 48 X-coordinate"]

    @vertex_48_xcoordinate.setter
    def vertex_48_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 48 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 48 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_48_xcoordinate`'.format(value))
        self._data["Vertex 48 X-coordinate"] = value

    @property
    def vertex_48_ycoordinate(self):
        """Get vertex_48_ycoordinate

        Returns:
            float: the value of `vertex_48_ycoordinate` or None if not set
        """
        return self._data["Vertex 48 Y-coordinate"]

    @vertex_48_ycoordinate.setter
    def vertex_48_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 48 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 48 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_48_ycoordinate`'.format(value))
        self._data["Vertex 48 Y-coordinate"] = value

    @property
    def vertex_48_zcoordinate(self):
        """Get vertex_48_zcoordinate

        Returns:
            float: the value of `vertex_48_zcoordinate` or None if not set
        """
        return self._data["Vertex 48 Z-coordinate"]

    @vertex_48_zcoordinate.setter
    def vertex_48_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 48 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 48 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_48_zcoordinate`'.format(value))
        self._data["Vertex 48 Z-coordinate"] = value

    @property
    def vertex_49_xcoordinate(self):
        """Get vertex_49_xcoordinate

        Returns:
            float: the value of `vertex_49_xcoordinate` or None if not set
        """
        return self._data["Vertex 49 X-coordinate"]

    @vertex_49_xcoordinate.setter
    def vertex_49_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 49 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 49 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_49_xcoordinate`'.format(value))
        self._data["Vertex 49 X-coordinate"] = value

    @property
    def vertex_49_ycoordinate(self):
        """Get vertex_49_ycoordinate

        Returns:
            float: the value of `vertex_49_ycoordinate` or None if not set
        """
        return self._data["Vertex 49 Y-coordinate"]

    @vertex_49_ycoordinate.setter
    def vertex_49_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 49 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 49 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_49_ycoordinate`'.format(value))
        self._data["Vertex 49 Y-coordinate"] = value

    @property
    def vertex_49_zcoordinate(self):
        """Get vertex_49_zcoordinate

        Returns:
            float: the value of `vertex_49_zcoordinate` or None if not set
        """
        return self._data["Vertex 49 Z-coordinate"]

    @vertex_49_zcoordinate.setter
    def vertex_49_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 49 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 49 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_49_zcoordinate`'.format(value))
        self._data["Vertex 49 Z-coordinate"] = value

    @property
    def vertex_50_xcoordinate(self):
        """Get vertex_50_xcoordinate

        Returns:
            float: the value of `vertex_50_xcoordinate` or None if not set
        """
        return self._data["Vertex 50 X-coordinate"]

    @vertex_50_xcoordinate.setter
    def vertex_50_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 50 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 50 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_50_xcoordinate`'.format(value))
        self._data["Vertex 50 X-coordinate"] = value

    @property
    def vertex_50_ycoordinate(self):
        """Get vertex_50_ycoordinate

        Returns:
            float: the value of `vertex_50_ycoordinate` or None if not set
        """
        return self._data["Vertex 50 Y-coordinate"]

    @vertex_50_ycoordinate.setter
    def vertex_50_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 50 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 50 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_50_ycoordinate`'.format(value))
        self._data["Vertex 50 Y-coordinate"] = value

    @property
    def vertex_50_zcoordinate(self):
        """Get vertex_50_zcoordinate

        Returns:
            float: the value of `vertex_50_zcoordinate` or None if not set
        """
        return self._data["Vertex 50 Z-coordinate"]

    @vertex_50_zcoordinate.setter
    def vertex_50_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 50 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 50 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_50_zcoordinate`'.format(value))
        self._data["Vertex 50 Z-coordinate"] = value

    @property
    def vertex_51_xcoordinate(self):
        """Get vertex_51_xcoordinate

        Returns:
            float: the value of `vertex_51_xcoordinate` or None if not set
        """
        return self._data["Vertex 51 X-coordinate"]

    @vertex_51_xcoordinate.setter
    def vertex_51_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 51 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 51 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_51_xcoordinate`'.format(value))
        self._data["Vertex 51 X-coordinate"] = value

    @property
    def vertex_51_ycoordinate(self):
        """Get vertex_51_ycoordinate

        Returns:
            float: the value of `vertex_51_ycoordinate` or None if not set
        """
        return self._data["Vertex 51 Y-coordinate"]

    @vertex_51_ycoordinate.setter
    def vertex_51_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 51 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 51 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_51_ycoordinate`'.format(value))
        self._data["Vertex 51 Y-coordinate"] = value

    @property
    def vertex_51_zcoordinate(self):
        """Get vertex_51_zcoordinate

        Returns:
            float: the value of `vertex_51_zcoordinate` or None if not set
        """
        return self._data["Vertex 51 Z-coordinate"]

    @vertex_51_zcoordinate.setter
    def vertex_51_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 51 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 51 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_51_zcoordinate`'.format(value))
        self._data["Vertex 51 Z-coordinate"] = value

    @property
    def vertex_52_xcoordinate(self):
        """Get vertex_52_xcoordinate

        Returns:
            float: the value of `vertex_52_xcoordinate` or None if not set
        """
        return self._data["Vertex 52 X-coordinate"]

    @vertex_52_xcoordinate.setter
    def vertex_52_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 52 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 52 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_52_xcoordinate`'.format(value))
        self._data["Vertex 52 X-coordinate"] = value

    @property
    def vertex_52_ycoordinate(self):
        """Get vertex_52_ycoordinate

        Returns:
            float: the value of `vertex_52_ycoordinate` or None if not set
        """
        return self._data["Vertex 52 Y-coordinate"]

    @vertex_52_ycoordinate.setter
    def vertex_52_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 52 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 52 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_52_ycoordinate`'.format(value))
        self._data["Vertex 52 Y-coordinate"] = value

    @property
    def vertex_52_zcoordinate(self):
        """Get vertex_52_zcoordinate

        Returns:
            float: the value of `vertex_52_zcoordinate` or None if not set
        """
        return self._data["Vertex 52 Z-coordinate"]

    @vertex_52_zcoordinate.setter
    def vertex_52_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 52 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 52 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_52_zcoordinate`'.format(value))
        self._data["Vertex 52 Z-coordinate"] = value

    @property
    def vertex_53_xcoordinate(self):
        """Get vertex_53_xcoordinate

        Returns:
            float: the value of `vertex_53_xcoordinate` or None if not set
        """
        return self._data["Vertex 53 X-coordinate"]

    @vertex_53_xcoordinate.setter
    def vertex_53_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 53 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 53 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_53_xcoordinate`'.format(value))
        self._data["Vertex 53 X-coordinate"] = value

    @property
    def vertex_53_ycoordinate(self):
        """Get vertex_53_ycoordinate

        Returns:
            float: the value of `vertex_53_ycoordinate` or None if not set
        """
        return self._data["Vertex 53 Y-coordinate"]

    @vertex_53_ycoordinate.setter
    def vertex_53_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 53 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 53 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_53_ycoordinate`'.format(value))
        self._data["Vertex 53 Y-coordinate"] = value

    @property
    def vertex_53_zcoordinate(self):
        """Get vertex_53_zcoordinate

        Returns:
            float: the value of `vertex_53_zcoordinate` or None if not set
        """
        return self._data["Vertex 53 Z-coordinate"]

    @vertex_53_zcoordinate.setter
    def vertex_53_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 53 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 53 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_53_zcoordinate`'.format(value))
        self._data["Vertex 53 Z-coordinate"] = value

    @property
    def vertex_54_xcoordinate(self):
        """Get vertex_54_xcoordinate

        Returns:
            float: the value of `vertex_54_xcoordinate` or None if not set
        """
        return self._data["Vertex 54 X-coordinate"]

    @vertex_54_xcoordinate.setter
    def vertex_54_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 54 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 54 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_54_xcoordinate`'.format(value))
        self._data["Vertex 54 X-coordinate"] = value

    @property
    def vertex_54_ycoordinate(self):
        """Get vertex_54_ycoordinate

        Returns:
            float: the value of `vertex_54_ycoordinate` or None if not set
        """
        return self._data["Vertex 54 Y-coordinate"]

    @vertex_54_ycoordinate.setter
    def vertex_54_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 54 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 54 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_54_ycoordinate`'.format(value))
        self._data["Vertex 54 Y-coordinate"] = value

    @property
    def vertex_54_zcoordinate(self):
        """Get vertex_54_zcoordinate

        Returns:
            float: the value of `vertex_54_zcoordinate` or None if not set
        """
        return self._data["Vertex 54 Z-coordinate"]

    @vertex_54_zcoordinate.setter
    def vertex_54_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 54 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 54 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_54_zcoordinate`'.format(value))
        self._data["Vertex 54 Z-coordinate"] = value

    @property
    def vertex_55_xcoordinate(self):
        """Get vertex_55_xcoordinate

        Returns:
            float: the value of `vertex_55_xcoordinate` or None if not set
        """
        return self._data["Vertex 55 X-coordinate"]

    @vertex_55_xcoordinate.setter
    def vertex_55_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 55 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 55 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_55_xcoordinate`'.format(value))
        self._data["Vertex 55 X-coordinate"] = value

    @property
    def vertex_55_ycoordinate(self):
        """Get vertex_55_ycoordinate

        Returns:
            float: the value of `vertex_55_ycoordinate` or None if not set
        """
        return self._data["Vertex 55 Y-coordinate"]

    @vertex_55_ycoordinate.setter
    def vertex_55_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 55 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 55 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_55_ycoordinate`'.format(value))
        self._data["Vertex 55 Y-coordinate"] = value

    @property
    def vertex_55_zcoordinate(self):
        """Get vertex_55_zcoordinate

        Returns:
            float: the value of `vertex_55_zcoordinate` or None if not set
        """
        return self._data["Vertex 55 Z-coordinate"]

    @vertex_55_zcoordinate.setter
    def vertex_55_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 55 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 55 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_55_zcoordinate`'.format(value))
        self._data["Vertex 55 Z-coordinate"] = value

    @property
    def vertex_56_xcoordinate(self):
        """Get vertex_56_xcoordinate

        Returns:
            float: the value of `vertex_56_xcoordinate` or None if not set
        """
        return self._data["Vertex 56 X-coordinate"]

    @vertex_56_xcoordinate.setter
    def vertex_56_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 56 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 56 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_56_xcoordinate`'.format(value))
        self._data["Vertex 56 X-coordinate"] = value

    @property
    def vertex_56_ycoordinate(self):
        """Get vertex_56_ycoordinate

        Returns:
            float: the value of `vertex_56_ycoordinate` or None if not set
        """
        return self._data["Vertex 56 Y-coordinate"]

    @vertex_56_ycoordinate.setter
    def vertex_56_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 56 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 56 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_56_ycoordinate`'.format(value))
        self._data["Vertex 56 Y-coordinate"] = value

    @property
    def vertex_56_zcoordinate(self):
        """Get vertex_56_zcoordinate

        Returns:
            float: the value of `vertex_56_zcoordinate` or None if not set
        """
        return self._data["Vertex 56 Z-coordinate"]

    @vertex_56_zcoordinate.setter
    def vertex_56_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 56 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 56 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_56_zcoordinate`'.format(value))
        self._data["Vertex 56 Z-coordinate"] = value

    @property
    def vertex_57_xcoordinate(self):
        """Get vertex_57_xcoordinate

        Returns:
            float: the value of `vertex_57_xcoordinate` or None if not set
        """
        return self._data["Vertex 57 X-coordinate"]

    @vertex_57_xcoordinate.setter
    def vertex_57_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 57 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 57 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_57_xcoordinate`'.format(value))
        self._data["Vertex 57 X-coordinate"] = value

    @property
    def vertex_57_ycoordinate(self):
        """Get vertex_57_ycoordinate

        Returns:
            float: the value of `vertex_57_ycoordinate` or None if not set
        """
        return self._data["Vertex 57 Y-coordinate"]

    @vertex_57_ycoordinate.setter
    def vertex_57_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 57 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 57 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_57_ycoordinate`'.format(value))
        self._data["Vertex 57 Y-coordinate"] = value

    @property
    def vertex_57_zcoordinate(self):
        """Get vertex_57_zcoordinate

        Returns:
            float: the value of `vertex_57_zcoordinate` or None if not set
        """
        return self._data["Vertex 57 Z-coordinate"]

    @vertex_57_zcoordinate.setter
    def vertex_57_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 57 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 57 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_57_zcoordinate`'.format(value))
        self._data["Vertex 57 Z-coordinate"] = value

    @property
    def vertex_58_xcoordinate(self):
        """Get vertex_58_xcoordinate

        Returns:
            float: the value of `vertex_58_xcoordinate` or None if not set
        """
        return self._data["Vertex 58 X-coordinate"]

    @vertex_58_xcoordinate.setter
    def vertex_58_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 58 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 58 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_58_xcoordinate`'.format(value))
        self._data["Vertex 58 X-coordinate"] = value

    @property
    def vertex_58_ycoordinate(self):
        """Get vertex_58_ycoordinate

        Returns:
            float: the value of `vertex_58_ycoordinate` or None if not set
        """
        return self._data["Vertex 58 Y-coordinate"]

    @vertex_58_ycoordinate.setter
    def vertex_58_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 58 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 58 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_58_ycoordinate`'.format(value))
        self._data["Vertex 58 Y-coordinate"] = value

    @property
    def vertex_58_zcoordinate(self):
        """Get vertex_58_zcoordinate

        Returns:
            float: the value of `vertex_58_zcoordinate` or None if not set
        """
        return self._data["Vertex 58 Z-coordinate"]

    @vertex_58_zcoordinate.setter
    def vertex_58_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 58 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 58 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_58_zcoordinate`'.format(value))
        self._data["Vertex 58 Z-coordinate"] = value

    @property
    def vertex_59_xcoordinate(self):
        """Get vertex_59_xcoordinate

        Returns:
            float: the value of `vertex_59_xcoordinate` or None if not set
        """
        return self._data["Vertex 59 X-coordinate"]

    @vertex_59_xcoordinate.setter
    def vertex_59_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 59 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 59 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_59_xcoordinate`'.format(value))
        self._data["Vertex 59 X-coordinate"] = value

    @property
    def vertex_59_ycoordinate(self):
        """Get vertex_59_ycoordinate

        Returns:
            float: the value of `vertex_59_ycoordinate` or None if not set
        """
        return self._data["Vertex 59 Y-coordinate"]

    @vertex_59_ycoordinate.setter
    def vertex_59_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 59 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 59 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_59_ycoordinate`'.format(value))
        self._data["Vertex 59 Y-coordinate"] = value

    @property
    def vertex_59_zcoordinate(self):
        """Get vertex_59_zcoordinate

        Returns:
            float: the value of `vertex_59_zcoordinate` or None if not set
        """
        return self._data["Vertex 59 Z-coordinate"]

    @vertex_59_zcoordinate.setter
    def vertex_59_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 59 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 59 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_59_zcoordinate`'.format(value))
        self._data["Vertex 59 Z-coordinate"] = value

    @property
    def vertex_60_xcoordinate(self):
        """Get vertex_60_xcoordinate

        Returns:
            float: the value of `vertex_60_xcoordinate` or None if not set
        """
        return self._data["Vertex 60 X-coordinate"]

    @vertex_60_xcoordinate.setter
    def vertex_60_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 60 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 60 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_60_xcoordinate`'.format(value))
        self._data["Vertex 60 X-coordinate"] = value

    @property
    def vertex_60_ycoordinate(self):
        """Get vertex_60_ycoordinate

        Returns:
            float: the value of `vertex_60_ycoordinate` or None if not set
        """
        return self._data["Vertex 60 Y-coordinate"]

    @vertex_60_ycoordinate.setter
    def vertex_60_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 60 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 60 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_60_ycoordinate`'.format(value))
        self._data["Vertex 60 Y-coordinate"] = value

    @property
    def vertex_60_zcoordinate(self):
        """Get vertex_60_zcoordinate

        Returns:
            float: the value of `vertex_60_zcoordinate` or None if not set
        """
        return self._data["Vertex 60 Z-coordinate"]

    @vertex_60_zcoordinate.setter
    def vertex_60_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 60 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 60 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_60_zcoordinate`'.format(value))
        self._data["Vertex 60 Z-coordinate"] = value

    @property
    def vertex_61_xcoordinate(self):
        """Get vertex_61_xcoordinate

        Returns:
            float: the value of `vertex_61_xcoordinate` or None if not set
        """
        return self._data["Vertex 61 X-coordinate"]

    @vertex_61_xcoordinate.setter
    def vertex_61_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 61 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 61 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_61_xcoordinate`'.format(value))
        self._data["Vertex 61 X-coordinate"] = value

    @property
    def vertex_61_ycoordinate(self):
        """Get vertex_61_ycoordinate

        Returns:
            float: the value of `vertex_61_ycoordinate` or None if not set
        """
        return self._data["Vertex 61 Y-coordinate"]

    @vertex_61_ycoordinate.setter
    def vertex_61_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 61 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 61 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_61_ycoordinate`'.format(value))
        self._data["Vertex 61 Y-coordinate"] = value

    @property
    def vertex_61_zcoordinate(self):
        """Get vertex_61_zcoordinate

        Returns:
            float: the value of `vertex_61_zcoordinate` or None if not set
        """
        return self._data["Vertex 61 Z-coordinate"]

    @vertex_61_zcoordinate.setter
    def vertex_61_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 61 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 61 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_61_zcoordinate`'.format(value))
        self._data["Vertex 61 Z-coordinate"] = value

    @property
    def vertex_62_xcoordinate(self):
        """Get vertex_62_xcoordinate

        Returns:
            float: the value of `vertex_62_xcoordinate` or None if not set
        """
        return self._data["Vertex 62 X-coordinate"]

    @vertex_62_xcoordinate.setter
    def vertex_62_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 62 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 62 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_62_xcoordinate`'.format(value))
        self._data["Vertex 62 X-coordinate"] = value

    @property
    def vertex_62_ycoordinate(self):
        """Get vertex_62_ycoordinate

        Returns:
            float: the value of `vertex_62_ycoordinate` or None if not set
        """
        return self._data["Vertex 62 Y-coordinate"]

    @vertex_62_ycoordinate.setter
    def vertex_62_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 62 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 62 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_62_ycoordinate`'.format(value))
        self._data["Vertex 62 Y-coordinate"] = value

    @property
    def vertex_62_zcoordinate(self):
        """Get vertex_62_zcoordinate

        Returns:
            float: the value of `vertex_62_zcoordinate` or None if not set
        """
        return self._data["Vertex 62 Z-coordinate"]

    @vertex_62_zcoordinate.setter
    def vertex_62_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 62 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 62 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_62_zcoordinate`'.format(value))
        self._data["Vertex 62 Z-coordinate"] = value

    @property
    def vertex_63_xcoordinate(self):
        """Get vertex_63_xcoordinate

        Returns:
            float: the value of `vertex_63_xcoordinate` or None if not set
        """
        return self._data["Vertex 63 X-coordinate"]

    @vertex_63_xcoordinate.setter
    def vertex_63_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 63 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 63 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_63_xcoordinate`'.format(value))
        self._data["Vertex 63 X-coordinate"] = value

    @property
    def vertex_63_ycoordinate(self):
        """Get vertex_63_ycoordinate

        Returns:
            float: the value of `vertex_63_ycoordinate` or None if not set
        """
        return self._data["Vertex 63 Y-coordinate"]

    @vertex_63_ycoordinate.setter
    def vertex_63_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 63 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 63 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_63_ycoordinate`'.format(value))
        self._data["Vertex 63 Y-coordinate"] = value

    @property
    def vertex_63_zcoordinate(self):
        """Get vertex_63_zcoordinate

        Returns:
            float: the value of `vertex_63_zcoordinate` or None if not set
        """
        return self._data["Vertex 63 Z-coordinate"]

    @vertex_63_zcoordinate.setter
    def vertex_63_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 63 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 63 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_63_zcoordinate`'.format(value))
        self._data["Vertex 63 Z-coordinate"] = value

    @property
    def vertex_64_xcoordinate(self):
        """Get vertex_64_xcoordinate

        Returns:
            float: the value of `vertex_64_xcoordinate` or None if not set
        """
        return self._data["Vertex 64 X-coordinate"]

    @vertex_64_xcoordinate.setter
    def vertex_64_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 64 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 64 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_64_xcoordinate`'.format(value))
        self._data["Vertex 64 X-coordinate"] = value

    @property
    def vertex_64_ycoordinate(self):
        """Get vertex_64_ycoordinate

        Returns:
            float: the value of `vertex_64_ycoordinate` or None if not set
        """
        return self._data["Vertex 64 Y-coordinate"]

    @vertex_64_ycoordinate.setter
    def vertex_64_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 64 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 64 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_64_ycoordinate`'.format(value))
        self._data["Vertex 64 Y-coordinate"] = value

    @property
    def vertex_64_zcoordinate(self):
        """Get vertex_64_zcoordinate

        Returns:
            float: the value of `vertex_64_zcoordinate` or None if not set
        """
        return self._data["Vertex 64 Z-coordinate"]

    @vertex_64_zcoordinate.setter
    def vertex_64_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 64 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 64 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_64_zcoordinate`'.format(value))
        self._data["Vertex 64 Z-coordinate"] = value

    @property
    def vertex_65_xcoordinate(self):
        """Get vertex_65_xcoordinate

        Returns:
            float: the value of `vertex_65_xcoordinate` or None if not set
        """
        return self._data["Vertex 65 X-coordinate"]

    @vertex_65_xcoordinate.setter
    def vertex_65_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 65 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 65 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_65_xcoordinate`'.format(value))
        self._data["Vertex 65 X-coordinate"] = value

    @property
    def vertex_65_ycoordinate(self):
        """Get vertex_65_ycoordinate

        Returns:
            float: the value of `vertex_65_ycoordinate` or None if not set
        """
        return self._data["Vertex 65 Y-coordinate"]

    @vertex_65_ycoordinate.setter
    def vertex_65_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 65 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 65 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_65_ycoordinate`'.format(value))
        self._data["Vertex 65 Y-coordinate"] = value

    @property
    def vertex_65_zcoordinate(self):
        """Get vertex_65_zcoordinate

        Returns:
            float: the value of `vertex_65_zcoordinate` or None if not set
        """
        return self._data["Vertex 65 Z-coordinate"]

    @vertex_65_zcoordinate.setter
    def vertex_65_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 65 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 65 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_65_zcoordinate`'.format(value))
        self._data["Vertex 65 Z-coordinate"] = value

    @property
    def vertex_66_xcoordinate(self):
        """Get vertex_66_xcoordinate

        Returns:
            float: the value of `vertex_66_xcoordinate` or None if not set
        """
        return self._data["Vertex 66 X-coordinate"]

    @vertex_66_xcoordinate.setter
    def vertex_66_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 66 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 66 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_66_xcoordinate`'.format(value))
        self._data["Vertex 66 X-coordinate"] = value

    @property
    def vertex_66_ycoordinate(self):
        """Get vertex_66_ycoordinate

        Returns:
            float: the value of `vertex_66_ycoordinate` or None if not set
        """
        return self._data["Vertex 66 Y-coordinate"]

    @vertex_66_ycoordinate.setter
    def vertex_66_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 66 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 66 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_66_ycoordinate`'.format(value))
        self._data["Vertex 66 Y-coordinate"] = value

    @property
    def vertex_66_zcoordinate(self):
        """Get vertex_66_zcoordinate

        Returns:
            float: the value of `vertex_66_zcoordinate` or None if not set
        """
        return self._data["Vertex 66 Z-coordinate"]

    @vertex_66_zcoordinate.setter
    def vertex_66_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 66 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 66 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_66_zcoordinate`'.format(value))
        self._data["Vertex 66 Z-coordinate"] = value

    @property
    def vertex_67_xcoordinate(self):
        """Get vertex_67_xcoordinate

        Returns:
            float: the value of `vertex_67_xcoordinate` or None if not set
        """
        return self._data["Vertex 67 X-coordinate"]

    @vertex_67_xcoordinate.setter
    def vertex_67_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 67 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 67 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_67_xcoordinate`'.format(value))
        self._data["Vertex 67 X-coordinate"] = value

    @property
    def vertex_67_ycoordinate(self):
        """Get vertex_67_ycoordinate

        Returns:
            float: the value of `vertex_67_ycoordinate` or None if not set
        """
        return self._data["Vertex 67 Y-coordinate"]

    @vertex_67_ycoordinate.setter
    def vertex_67_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 67 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 67 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_67_ycoordinate`'.format(value))
        self._data["Vertex 67 Y-coordinate"] = value

    @property
    def vertex_67_zcoordinate(self):
        """Get vertex_67_zcoordinate

        Returns:
            float: the value of `vertex_67_zcoordinate` or None if not set
        """
        return self._data["Vertex 67 Z-coordinate"]

    @vertex_67_zcoordinate.setter
    def vertex_67_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 67 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 67 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_67_zcoordinate`'.format(value))
        self._data["Vertex 67 Z-coordinate"] = value

    @property
    def vertex_68_xcoordinate(self):
        """Get vertex_68_xcoordinate

        Returns:
            float: the value of `vertex_68_xcoordinate` or None if not set
        """
        return self._data["Vertex 68 X-coordinate"]

    @vertex_68_xcoordinate.setter
    def vertex_68_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 68 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 68 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_68_xcoordinate`'.format(value))
        self._data["Vertex 68 X-coordinate"] = value

    @property
    def vertex_68_ycoordinate(self):
        """Get vertex_68_ycoordinate

        Returns:
            float: the value of `vertex_68_ycoordinate` or None if not set
        """
        return self._data["Vertex 68 Y-coordinate"]

    @vertex_68_ycoordinate.setter
    def vertex_68_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 68 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 68 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_68_ycoordinate`'.format(value))
        self._data["Vertex 68 Y-coordinate"] = value

    @property
    def vertex_68_zcoordinate(self):
        """Get vertex_68_zcoordinate

        Returns:
            float: the value of `vertex_68_zcoordinate` or None if not set
        """
        return self._data["Vertex 68 Z-coordinate"]

    @vertex_68_zcoordinate.setter
    def vertex_68_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 68 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 68 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_68_zcoordinate`'.format(value))
        self._data["Vertex 68 Z-coordinate"] = value

    @property
    def vertex_69_xcoordinate(self):
        """Get vertex_69_xcoordinate

        Returns:
            float: the value of `vertex_69_xcoordinate` or None if not set
        """
        return self._data["Vertex 69 X-coordinate"]

    @vertex_69_xcoordinate.setter
    def vertex_69_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 69 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 69 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_69_xcoordinate`'.format(value))
        self._data["Vertex 69 X-coordinate"] = value

    @property
    def vertex_69_ycoordinate(self):
        """Get vertex_69_ycoordinate

        Returns:
            float: the value of `vertex_69_ycoordinate` or None if not set
        """
        return self._data["Vertex 69 Y-coordinate"]

    @vertex_69_ycoordinate.setter
    def vertex_69_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 69 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 69 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_69_ycoordinate`'.format(value))
        self._data["Vertex 69 Y-coordinate"] = value

    @property
    def vertex_69_zcoordinate(self):
        """Get vertex_69_zcoordinate

        Returns:
            float: the value of `vertex_69_zcoordinate` or None if not set
        """
        return self._data["Vertex 69 Z-coordinate"]

    @vertex_69_zcoordinate.setter
    def vertex_69_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 69 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 69 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_69_zcoordinate`'.format(value))
        self._data["Vertex 69 Z-coordinate"] = value

    @property
    def vertex_70_xcoordinate(self):
        """Get vertex_70_xcoordinate

        Returns:
            float: the value of `vertex_70_xcoordinate` or None if not set
        """
        return self._data["Vertex 70 X-coordinate"]

    @vertex_70_xcoordinate.setter
    def vertex_70_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 70 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 70 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_70_xcoordinate`'.format(value))
        self._data["Vertex 70 X-coordinate"] = value

    @property
    def vertex_70_ycoordinate(self):
        """Get vertex_70_ycoordinate

        Returns:
            float: the value of `vertex_70_ycoordinate` or None if not set
        """
        return self._data["Vertex 70 Y-coordinate"]

    @vertex_70_ycoordinate.setter
    def vertex_70_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 70 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 70 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_70_ycoordinate`'.format(value))
        self._data["Vertex 70 Y-coordinate"] = value

    @property
    def vertex_70_zcoordinate(self):
        """Get vertex_70_zcoordinate

        Returns:
            float: the value of `vertex_70_zcoordinate` or None if not set
        """
        return self._data["Vertex 70 Z-coordinate"]

    @vertex_70_zcoordinate.setter
    def vertex_70_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 70 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 70 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_70_zcoordinate`'.format(value))
        self._data["Vertex 70 Z-coordinate"] = value

    @property
    def vertex_71_xcoordinate(self):
        """Get vertex_71_xcoordinate

        Returns:
            float: the value of `vertex_71_xcoordinate` or None if not set
        """
        return self._data["Vertex 71 X-coordinate"]

    @vertex_71_xcoordinate.setter
    def vertex_71_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 71 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 71 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_71_xcoordinate`'.format(value))
        self._data["Vertex 71 X-coordinate"] = value

    @property
    def vertex_71_ycoordinate(self):
        """Get vertex_71_ycoordinate

        Returns:
            float: the value of `vertex_71_ycoordinate` or None if not set
        """
        return self._data["Vertex 71 Y-coordinate"]

    @vertex_71_ycoordinate.setter
    def vertex_71_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 71 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 71 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_71_ycoordinate`'.format(value))
        self._data["Vertex 71 Y-coordinate"] = value

    @property
    def vertex_71_zcoordinate(self):
        """Get vertex_71_zcoordinate

        Returns:
            float: the value of `vertex_71_zcoordinate` or None if not set
        """
        return self._data["Vertex 71 Z-coordinate"]

    @vertex_71_zcoordinate.setter
    def vertex_71_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 71 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 71 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_71_zcoordinate`'.format(value))
        self._data["Vertex 71 Z-coordinate"] = value

    @property
    def vertex_72_xcoordinate(self):
        """Get vertex_72_xcoordinate

        Returns:
            float: the value of `vertex_72_xcoordinate` or None if not set
        """
        return self._data["Vertex 72 X-coordinate"]

    @vertex_72_xcoordinate.setter
    def vertex_72_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 72 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 72 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_72_xcoordinate`'.format(value))
        self._data["Vertex 72 X-coordinate"] = value

    @property
    def vertex_72_ycoordinate(self):
        """Get vertex_72_ycoordinate

        Returns:
            float: the value of `vertex_72_ycoordinate` or None if not set
        """
        return self._data["Vertex 72 Y-coordinate"]

    @vertex_72_ycoordinate.setter
    def vertex_72_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 72 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 72 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_72_ycoordinate`'.format(value))
        self._data["Vertex 72 Y-coordinate"] = value

    @property
    def vertex_72_zcoordinate(self):
        """Get vertex_72_zcoordinate

        Returns:
            float: the value of `vertex_72_zcoordinate` or None if not set
        """
        return self._data["Vertex 72 Z-coordinate"]

    @vertex_72_zcoordinate.setter
    def vertex_72_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 72 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 72 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_72_zcoordinate`'.format(value))
        self._data["Vertex 72 Z-coordinate"] = value

    @property
    def vertex_73_xcoordinate(self):
        """Get vertex_73_xcoordinate

        Returns:
            float: the value of `vertex_73_xcoordinate` or None if not set
        """
        return self._data["Vertex 73 X-coordinate"]

    @vertex_73_xcoordinate.setter
    def vertex_73_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 73 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 73 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_73_xcoordinate`'.format(value))
        self._data["Vertex 73 X-coordinate"] = value

    @property
    def vertex_73_ycoordinate(self):
        """Get vertex_73_ycoordinate

        Returns:
            float: the value of `vertex_73_ycoordinate` or None if not set
        """
        return self._data["Vertex 73 Y-coordinate"]

    @vertex_73_ycoordinate.setter
    def vertex_73_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 73 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 73 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_73_ycoordinate`'.format(value))
        self._data["Vertex 73 Y-coordinate"] = value

    @property
    def vertex_73_zcoordinate(self):
        """Get vertex_73_zcoordinate

        Returns:
            float: the value of `vertex_73_zcoordinate` or None if not set
        """
        return self._data["Vertex 73 Z-coordinate"]

    @vertex_73_zcoordinate.setter
    def vertex_73_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 73 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 73 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_73_zcoordinate`'.format(value))
        self._data["Vertex 73 Z-coordinate"] = value

    @property
    def vertex_74_xcoordinate(self):
        """Get vertex_74_xcoordinate

        Returns:
            float: the value of `vertex_74_xcoordinate` or None if not set
        """
        return self._data["Vertex 74 X-coordinate"]

    @vertex_74_xcoordinate.setter
    def vertex_74_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 74 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 74 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_74_xcoordinate`'.format(value))
        self._data["Vertex 74 X-coordinate"] = value

    @property
    def vertex_74_ycoordinate(self):
        """Get vertex_74_ycoordinate

        Returns:
            float: the value of `vertex_74_ycoordinate` or None if not set
        """
        return self._data["Vertex 74 Y-coordinate"]

    @vertex_74_ycoordinate.setter
    def vertex_74_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 74 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 74 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_74_ycoordinate`'.format(value))
        self._data["Vertex 74 Y-coordinate"] = value

    @property
    def vertex_74_zcoordinate(self):
        """Get vertex_74_zcoordinate

        Returns:
            float: the value of `vertex_74_zcoordinate` or None if not set
        """
        return self._data["Vertex 74 Z-coordinate"]

    @vertex_74_zcoordinate.setter
    def vertex_74_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 74 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 74 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_74_zcoordinate`'.format(value))
        self._data["Vertex 74 Z-coordinate"] = value

    @property
    def vertex_75_xcoordinate(self):
        """Get vertex_75_xcoordinate

        Returns:
            float: the value of `vertex_75_xcoordinate` or None if not set
        """
        return self._data["Vertex 75 X-coordinate"]

    @vertex_75_xcoordinate.setter
    def vertex_75_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 75 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 75 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_75_xcoordinate`'.format(value))
        self._data["Vertex 75 X-coordinate"] = value

    @property
    def vertex_75_ycoordinate(self):
        """Get vertex_75_ycoordinate

        Returns:
            float: the value of `vertex_75_ycoordinate` or None if not set
        """
        return self._data["Vertex 75 Y-coordinate"]

    @vertex_75_ycoordinate.setter
    def vertex_75_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 75 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 75 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_75_ycoordinate`'.format(value))
        self._data["Vertex 75 Y-coordinate"] = value

    @property
    def vertex_75_zcoordinate(self):
        """Get vertex_75_zcoordinate

        Returns:
            float: the value of `vertex_75_zcoordinate` or None if not set
        """
        return self._data["Vertex 75 Z-coordinate"]

    @vertex_75_zcoordinate.setter
    def vertex_75_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 75 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 75 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_75_zcoordinate`'.format(value))
        self._data["Vertex 75 Z-coordinate"] = value

    @property
    def vertex_76_xcoordinate(self):
        """Get vertex_76_xcoordinate

        Returns:
            float: the value of `vertex_76_xcoordinate` or None if not set
        """
        return self._data["Vertex 76 X-coordinate"]

    @vertex_76_xcoordinate.setter
    def vertex_76_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 76 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 76 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_76_xcoordinate`'.format(value))
        self._data["Vertex 76 X-coordinate"] = value

    @property
    def vertex_76_ycoordinate(self):
        """Get vertex_76_ycoordinate

        Returns:
            float: the value of `vertex_76_ycoordinate` or None if not set
        """
        return self._data["Vertex 76 Y-coordinate"]

    @vertex_76_ycoordinate.setter
    def vertex_76_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 76 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 76 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_76_ycoordinate`'.format(value))
        self._data["Vertex 76 Y-coordinate"] = value

    @property
    def vertex_76_zcoordinate(self):
        """Get vertex_76_zcoordinate

        Returns:
            float: the value of `vertex_76_zcoordinate` or None if not set
        """
        return self._data["Vertex 76 Z-coordinate"]

    @vertex_76_zcoordinate.setter
    def vertex_76_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 76 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 76 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_76_zcoordinate`'.format(value))
        self._data["Vertex 76 Z-coordinate"] = value

    @property
    def vertex_77_xcoordinate(self):
        """Get vertex_77_xcoordinate

        Returns:
            float: the value of `vertex_77_xcoordinate` or None if not set
        """
        return self._data["Vertex 77 X-coordinate"]

    @vertex_77_xcoordinate.setter
    def vertex_77_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 77 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 77 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_77_xcoordinate`'.format(value))
        self._data["Vertex 77 X-coordinate"] = value

    @property
    def vertex_77_ycoordinate(self):
        """Get vertex_77_ycoordinate

        Returns:
            float: the value of `vertex_77_ycoordinate` or None if not set
        """
        return self._data["Vertex 77 Y-coordinate"]

    @vertex_77_ycoordinate.setter
    def vertex_77_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 77 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 77 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_77_ycoordinate`'.format(value))
        self._data["Vertex 77 Y-coordinate"] = value

    @property
    def vertex_77_zcoordinate(self):
        """Get vertex_77_zcoordinate

        Returns:
            float: the value of `vertex_77_zcoordinate` or None if not set
        """
        return self._data["Vertex 77 Z-coordinate"]

    @vertex_77_zcoordinate.setter
    def vertex_77_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 77 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 77 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_77_zcoordinate`'.format(value))
        self._data["Vertex 77 Z-coordinate"] = value

    @property
    def vertex_78_xcoordinate(self):
        """Get vertex_78_xcoordinate

        Returns:
            float: the value of `vertex_78_xcoordinate` or None if not set
        """
        return self._data["Vertex 78 X-coordinate"]

    @vertex_78_xcoordinate.setter
    def vertex_78_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 78 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 78 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_78_xcoordinate`'.format(value))
        self._data["Vertex 78 X-coordinate"] = value

    @property
    def vertex_78_ycoordinate(self):
        """Get vertex_78_ycoordinate

        Returns:
            float: the value of `vertex_78_ycoordinate` or None if not set
        """
        return self._data["Vertex 78 Y-coordinate"]

    @vertex_78_ycoordinate.setter
    def vertex_78_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 78 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 78 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_78_ycoordinate`'.format(value))
        self._data["Vertex 78 Y-coordinate"] = value

    @property
    def vertex_78_zcoordinate(self):
        """Get vertex_78_zcoordinate

        Returns:
            float: the value of `vertex_78_zcoordinate` or None if not set
        """
        return self._data["Vertex 78 Z-coordinate"]

    @vertex_78_zcoordinate.setter
    def vertex_78_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 78 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 78 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_78_zcoordinate`'.format(value))
        self._data["Vertex 78 Z-coordinate"] = value

    @property
    def vertex_79_xcoordinate(self):
        """Get vertex_79_xcoordinate

        Returns:
            float: the value of `vertex_79_xcoordinate` or None if not set
        """
        return self._data["Vertex 79 X-coordinate"]

    @vertex_79_xcoordinate.setter
    def vertex_79_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 79 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 79 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_79_xcoordinate`'.format(value))
        self._data["Vertex 79 X-coordinate"] = value

    @property
    def vertex_79_ycoordinate(self):
        """Get vertex_79_ycoordinate

        Returns:
            float: the value of `vertex_79_ycoordinate` or None if not set
        """
        return self._data["Vertex 79 Y-coordinate"]

    @vertex_79_ycoordinate.setter
    def vertex_79_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 79 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 79 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_79_ycoordinate`'.format(value))
        self._data["Vertex 79 Y-coordinate"] = value

    @property
    def vertex_79_zcoordinate(self):
        """Get vertex_79_zcoordinate

        Returns:
            float: the value of `vertex_79_zcoordinate` or None if not set
        """
        return self._data["Vertex 79 Z-coordinate"]

    @vertex_79_zcoordinate.setter
    def vertex_79_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 79 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 79 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_79_zcoordinate`'.format(value))
        self._data["Vertex 79 Z-coordinate"] = value

    @property
    def vertex_80_xcoordinate(self):
        """Get vertex_80_xcoordinate

        Returns:
            float: the value of `vertex_80_xcoordinate` or None if not set
        """
        return self._data["Vertex 80 X-coordinate"]

    @vertex_80_xcoordinate.setter
    def vertex_80_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 80 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 80 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_80_xcoordinate`'.format(value))
        self._data["Vertex 80 X-coordinate"] = value

    @property
    def vertex_80_ycoordinate(self):
        """Get vertex_80_ycoordinate

        Returns:
            float: the value of `vertex_80_ycoordinate` or None if not set
        """
        return self._data["Vertex 80 Y-coordinate"]

    @vertex_80_ycoordinate.setter
    def vertex_80_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 80 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 80 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_80_ycoordinate`'.format(value))
        self._data["Vertex 80 Y-coordinate"] = value

    @property
    def vertex_80_zcoordinate(self):
        """Get vertex_80_zcoordinate

        Returns:
            float: the value of `vertex_80_zcoordinate` or None if not set
        """
        return self._data["Vertex 80 Z-coordinate"]

    @vertex_80_zcoordinate.setter
    def vertex_80_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 80 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 80 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_80_zcoordinate`'.format(value))
        self._data["Vertex 80 Z-coordinate"] = value

    @property
    def vertex_81_xcoordinate(self):
        """Get vertex_81_xcoordinate

        Returns:
            float: the value of `vertex_81_xcoordinate` or None if not set
        """
        return self._data["Vertex 81 X-coordinate"]

    @vertex_81_xcoordinate.setter
    def vertex_81_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 81 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 81 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_81_xcoordinate`'.format(value))
        self._data["Vertex 81 X-coordinate"] = value

    @property
    def vertex_81_ycoordinate(self):
        """Get vertex_81_ycoordinate

        Returns:
            float: the value of `vertex_81_ycoordinate` or None if not set
        """
        return self._data["Vertex 81 Y-coordinate"]

    @vertex_81_ycoordinate.setter
    def vertex_81_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 81 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 81 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_81_ycoordinate`'.format(value))
        self._data["Vertex 81 Y-coordinate"] = value

    @property
    def vertex_81_zcoordinate(self):
        """Get vertex_81_zcoordinate

        Returns:
            float: the value of `vertex_81_zcoordinate` or None if not set
        """
        return self._data["Vertex 81 Z-coordinate"]

    @vertex_81_zcoordinate.setter
    def vertex_81_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 81 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 81 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_81_zcoordinate`'.format(value))
        self._data["Vertex 81 Z-coordinate"] = value

    @property
    def vertex_82_xcoordinate(self):
        """Get vertex_82_xcoordinate

        Returns:
            float: the value of `vertex_82_xcoordinate` or None if not set
        """
        return self._data["Vertex 82 X-coordinate"]

    @vertex_82_xcoordinate.setter
    def vertex_82_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 82 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 82 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_82_xcoordinate`'.format(value))
        self._data["Vertex 82 X-coordinate"] = value

    @property
    def vertex_82_ycoordinate(self):
        """Get vertex_82_ycoordinate

        Returns:
            float: the value of `vertex_82_ycoordinate` or None if not set
        """
        return self._data["Vertex 82 Y-coordinate"]

    @vertex_82_ycoordinate.setter
    def vertex_82_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 82 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 82 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_82_ycoordinate`'.format(value))
        self._data["Vertex 82 Y-coordinate"] = value

    @property
    def vertex_82_zcoordinate(self):
        """Get vertex_82_zcoordinate

        Returns:
            float: the value of `vertex_82_zcoordinate` or None if not set
        """
        return self._data["Vertex 82 Z-coordinate"]

    @vertex_82_zcoordinate.setter
    def vertex_82_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 82 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 82 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_82_zcoordinate`'.format(value))
        self._data["Vertex 82 Z-coordinate"] = value

    @property
    def vertex_83_xcoordinate(self):
        """Get vertex_83_xcoordinate

        Returns:
            float: the value of `vertex_83_xcoordinate` or None if not set
        """
        return self._data["Vertex 83 X-coordinate"]

    @vertex_83_xcoordinate.setter
    def vertex_83_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 83 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 83 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_83_xcoordinate`'.format(value))
        self._data["Vertex 83 X-coordinate"] = value

    @property
    def vertex_83_ycoordinate(self):
        """Get vertex_83_ycoordinate

        Returns:
            float: the value of `vertex_83_ycoordinate` or None if not set
        """
        return self._data["Vertex 83 Y-coordinate"]

    @vertex_83_ycoordinate.setter
    def vertex_83_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 83 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 83 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_83_ycoordinate`'.format(value))
        self._data["Vertex 83 Y-coordinate"] = value

    @property
    def vertex_83_zcoordinate(self):
        """Get vertex_83_zcoordinate

        Returns:
            float: the value of `vertex_83_zcoordinate` or None if not set
        """
        return self._data["Vertex 83 Z-coordinate"]

    @vertex_83_zcoordinate.setter
    def vertex_83_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 83 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 83 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_83_zcoordinate`'.format(value))
        self._data["Vertex 83 Z-coordinate"] = value

    @property
    def vertex_84_xcoordinate(self):
        """Get vertex_84_xcoordinate

        Returns:
            float: the value of `vertex_84_xcoordinate` or None if not set
        """
        return self._data["Vertex 84 X-coordinate"]

    @vertex_84_xcoordinate.setter
    def vertex_84_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 84 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 84 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_84_xcoordinate`'.format(value))
        self._data["Vertex 84 X-coordinate"] = value

    @property
    def vertex_84_ycoordinate(self):
        """Get vertex_84_ycoordinate

        Returns:
            float: the value of `vertex_84_ycoordinate` or None if not set
        """
        return self._data["Vertex 84 Y-coordinate"]

    @vertex_84_ycoordinate.setter
    def vertex_84_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 84 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 84 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_84_ycoordinate`'.format(value))
        self._data["Vertex 84 Y-coordinate"] = value

    @property
    def vertex_84_zcoordinate(self):
        """Get vertex_84_zcoordinate

        Returns:
            float: the value of `vertex_84_zcoordinate` or None if not set
        """
        return self._data["Vertex 84 Z-coordinate"]

    @vertex_84_zcoordinate.setter
    def vertex_84_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 84 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 84 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_84_zcoordinate`'.format(value))
        self._data["Vertex 84 Z-coordinate"] = value

    @property
    def vertex_85_xcoordinate(self):
        """Get vertex_85_xcoordinate

        Returns:
            float: the value of `vertex_85_xcoordinate` or None if not set
        """
        return self._data["Vertex 85 X-coordinate"]

    @vertex_85_xcoordinate.setter
    def vertex_85_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 85 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 85 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_85_xcoordinate`'.format(value))
        self._data["Vertex 85 X-coordinate"] = value

    @property
    def vertex_85_ycoordinate(self):
        """Get vertex_85_ycoordinate

        Returns:
            float: the value of `vertex_85_ycoordinate` or None if not set
        """
        return self._data["Vertex 85 Y-coordinate"]

    @vertex_85_ycoordinate.setter
    def vertex_85_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 85 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 85 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_85_ycoordinate`'.format(value))
        self._data["Vertex 85 Y-coordinate"] = value

    @property
    def vertex_85_zcoordinate(self):
        """Get vertex_85_zcoordinate

        Returns:
            float: the value of `vertex_85_zcoordinate` or None if not set
        """
        return self._data["Vertex 85 Z-coordinate"]

    @vertex_85_zcoordinate.setter
    def vertex_85_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 85 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 85 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_85_zcoordinate`'.format(value))
        self._data["Vertex 85 Z-coordinate"] = value

    @property
    def vertex_86_xcoordinate(self):
        """Get vertex_86_xcoordinate

        Returns:
            float: the value of `vertex_86_xcoordinate` or None if not set
        """
        return self._data["Vertex 86 X-coordinate"]

    @vertex_86_xcoordinate.setter
    def vertex_86_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 86 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 86 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_86_xcoordinate`'.format(value))
        self._data["Vertex 86 X-coordinate"] = value

    @property
    def vertex_86_ycoordinate(self):
        """Get vertex_86_ycoordinate

        Returns:
            float: the value of `vertex_86_ycoordinate` or None if not set
        """
        return self._data["Vertex 86 Y-coordinate"]

    @vertex_86_ycoordinate.setter
    def vertex_86_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 86 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 86 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_86_ycoordinate`'.format(value))
        self._data["Vertex 86 Y-coordinate"] = value

    @property
    def vertex_86_zcoordinate(self):
        """Get vertex_86_zcoordinate

        Returns:
            float: the value of `vertex_86_zcoordinate` or None if not set
        """
        return self._data["Vertex 86 Z-coordinate"]

    @vertex_86_zcoordinate.setter
    def vertex_86_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 86 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 86 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_86_zcoordinate`'.format(value))
        self._data["Vertex 86 Z-coordinate"] = value

    @property
    def vertex_87_xcoordinate(self):
        """Get vertex_87_xcoordinate

        Returns:
            float: the value of `vertex_87_xcoordinate` or None if not set
        """
        return self._data["Vertex 87 X-coordinate"]

    @vertex_87_xcoordinate.setter
    def vertex_87_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 87 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 87 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_87_xcoordinate`'.format(value))
        self._data["Vertex 87 X-coordinate"] = value

    @property
    def vertex_87_ycoordinate(self):
        """Get vertex_87_ycoordinate

        Returns:
            float: the value of `vertex_87_ycoordinate` or None if not set
        """
        return self._data["Vertex 87 Y-coordinate"]

    @vertex_87_ycoordinate.setter
    def vertex_87_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 87 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 87 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_87_ycoordinate`'.format(value))
        self._data["Vertex 87 Y-coordinate"] = value

    @property
    def vertex_87_zcoordinate(self):
        """Get vertex_87_zcoordinate

        Returns:
            float: the value of `vertex_87_zcoordinate` or None if not set
        """
        return self._data["Vertex 87 Z-coordinate"]

    @vertex_87_zcoordinate.setter
    def vertex_87_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 87 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 87 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_87_zcoordinate`'.format(value))
        self._data["Vertex 87 Z-coordinate"] = value

    @property
    def vertex_88_xcoordinate(self):
        """Get vertex_88_xcoordinate

        Returns:
            float: the value of `vertex_88_xcoordinate` or None if not set
        """
        return self._data["Vertex 88 X-coordinate"]

    @vertex_88_xcoordinate.setter
    def vertex_88_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 88 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 88 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_88_xcoordinate`'.format(value))
        self._data["Vertex 88 X-coordinate"] = value

    @property
    def vertex_88_ycoordinate(self):
        """Get vertex_88_ycoordinate

        Returns:
            float: the value of `vertex_88_ycoordinate` or None if not set
        """
        return self._data["Vertex 88 Y-coordinate"]

    @vertex_88_ycoordinate.setter
    def vertex_88_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 88 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 88 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_88_ycoordinate`'.format(value))
        self._data["Vertex 88 Y-coordinate"] = value

    @property
    def vertex_88_zcoordinate(self):
        """Get vertex_88_zcoordinate

        Returns:
            float: the value of `vertex_88_zcoordinate` or None if not set
        """
        return self._data["Vertex 88 Z-coordinate"]

    @vertex_88_zcoordinate.setter
    def vertex_88_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 88 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 88 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_88_zcoordinate`'.format(value))
        self._data["Vertex 88 Z-coordinate"] = value

    @property
    def vertex_89_xcoordinate(self):
        """Get vertex_89_xcoordinate

        Returns:
            float: the value of `vertex_89_xcoordinate` or None if not set
        """
        return self._data["Vertex 89 X-coordinate"]

    @vertex_89_xcoordinate.setter
    def vertex_89_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 89 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 89 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_89_xcoordinate`'.format(value))
        self._data["Vertex 89 X-coordinate"] = value

    @property
    def vertex_89_ycoordinate(self):
        """Get vertex_89_ycoordinate

        Returns:
            float: the value of `vertex_89_ycoordinate` or None if not set
        """
        return self._data["Vertex 89 Y-coordinate"]

    @vertex_89_ycoordinate.setter
    def vertex_89_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 89 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 89 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_89_ycoordinate`'.format(value))
        self._data["Vertex 89 Y-coordinate"] = value

    @property
    def vertex_89_zcoordinate(self):
        """Get vertex_89_zcoordinate

        Returns:
            float: the value of `vertex_89_zcoordinate` or None if not set
        """
        return self._data["Vertex 89 Z-coordinate"]

    @vertex_89_zcoordinate.setter
    def vertex_89_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 89 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 89 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_89_zcoordinate`'.format(value))
        self._data["Vertex 89 Z-coordinate"] = value

    @property
    def vertex_90_xcoordinate(self):
        """Get vertex_90_xcoordinate

        Returns:
            float: the value of `vertex_90_xcoordinate` or None if not set
        """
        return self._data["Vertex 90 X-coordinate"]

    @vertex_90_xcoordinate.setter
    def vertex_90_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 90 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 90 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_90_xcoordinate`'.format(value))
        self._data["Vertex 90 X-coordinate"] = value

    @property
    def vertex_90_ycoordinate(self):
        """Get vertex_90_ycoordinate

        Returns:
            float: the value of `vertex_90_ycoordinate` or None if not set
        """
        return self._data["Vertex 90 Y-coordinate"]

    @vertex_90_ycoordinate.setter
    def vertex_90_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 90 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 90 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_90_ycoordinate`'.format(value))
        self._data["Vertex 90 Y-coordinate"] = value

    @property
    def vertex_90_zcoordinate(self):
        """Get vertex_90_zcoordinate

        Returns:
            float: the value of `vertex_90_zcoordinate` or None if not set
        """
        return self._data["Vertex 90 Z-coordinate"]

    @vertex_90_zcoordinate.setter
    def vertex_90_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 90 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 90 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_90_zcoordinate`'.format(value))
        self._data["Vertex 90 Z-coordinate"] = value

    @property
    def vertex_91_xcoordinate(self):
        """Get vertex_91_xcoordinate

        Returns:
            float: the value of `vertex_91_xcoordinate` or None if not set
        """
        return self._data["Vertex 91 X-coordinate"]

    @vertex_91_xcoordinate.setter
    def vertex_91_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 91 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 91 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_91_xcoordinate`'.format(value))
        self._data["Vertex 91 X-coordinate"] = value

    @property
    def vertex_91_ycoordinate(self):
        """Get vertex_91_ycoordinate

        Returns:
            float: the value of `vertex_91_ycoordinate` or None if not set
        """
        return self._data["Vertex 91 Y-coordinate"]

    @vertex_91_ycoordinate.setter
    def vertex_91_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 91 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 91 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_91_ycoordinate`'.format(value))
        self._data["Vertex 91 Y-coordinate"] = value

    @property
    def vertex_91_zcoordinate(self):
        """Get vertex_91_zcoordinate

        Returns:
            float: the value of `vertex_91_zcoordinate` or None if not set
        """
        return self._data["Vertex 91 Z-coordinate"]

    @vertex_91_zcoordinate.setter
    def vertex_91_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 91 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 91 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_91_zcoordinate`'.format(value))
        self._data["Vertex 91 Z-coordinate"] = value

    @property
    def vertex_92_xcoordinate(self):
        """Get vertex_92_xcoordinate

        Returns:
            float: the value of `vertex_92_xcoordinate` or None if not set
        """
        return self._data["Vertex 92 X-coordinate"]

    @vertex_92_xcoordinate.setter
    def vertex_92_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 92 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 92 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_92_xcoordinate`'.format(value))
        self._data["Vertex 92 X-coordinate"] = value

    @property
    def vertex_92_ycoordinate(self):
        """Get vertex_92_ycoordinate

        Returns:
            float: the value of `vertex_92_ycoordinate` or None if not set
        """
        return self._data["Vertex 92 Y-coordinate"]

    @vertex_92_ycoordinate.setter
    def vertex_92_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 92 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 92 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_92_ycoordinate`'.format(value))
        self._data["Vertex 92 Y-coordinate"] = value

    @property
    def vertex_92_zcoordinate(self):
        """Get vertex_92_zcoordinate

        Returns:
            float: the value of `vertex_92_zcoordinate` or None if not set
        """
        return self._data["Vertex 92 Z-coordinate"]

    @vertex_92_zcoordinate.setter
    def vertex_92_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 92 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 92 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_92_zcoordinate`'.format(value))
        self._data["Vertex 92 Z-coordinate"] = value

    @property
    def vertex_93_xcoordinate(self):
        """Get vertex_93_xcoordinate

        Returns:
            float: the value of `vertex_93_xcoordinate` or None if not set
        """
        return self._data["Vertex 93 X-coordinate"]

    @vertex_93_xcoordinate.setter
    def vertex_93_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 93 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 93 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_93_xcoordinate`'.format(value))
        self._data["Vertex 93 X-coordinate"] = value

    @property
    def vertex_93_ycoordinate(self):
        """Get vertex_93_ycoordinate

        Returns:
            float: the value of `vertex_93_ycoordinate` or None if not set
        """
        return self._data["Vertex 93 Y-coordinate"]

    @vertex_93_ycoordinate.setter
    def vertex_93_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 93 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 93 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_93_ycoordinate`'.format(value))
        self._data["Vertex 93 Y-coordinate"] = value

    @property
    def vertex_93_zcoordinate(self):
        """Get vertex_93_zcoordinate

        Returns:
            float: the value of `vertex_93_zcoordinate` or None if not set
        """
        return self._data["Vertex 93 Z-coordinate"]

    @vertex_93_zcoordinate.setter
    def vertex_93_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 93 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 93 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_93_zcoordinate`'.format(value))
        self._data["Vertex 93 Z-coordinate"] = value

    @property
    def vertex_94_xcoordinate(self):
        """Get vertex_94_xcoordinate

        Returns:
            float: the value of `vertex_94_xcoordinate` or None if not set
        """
        return self._data["Vertex 94 X-coordinate"]

    @vertex_94_xcoordinate.setter
    def vertex_94_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 94 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 94 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_94_xcoordinate`'.format(value))
        self._data["Vertex 94 X-coordinate"] = value

    @property
    def vertex_94_ycoordinate(self):
        """Get vertex_94_ycoordinate

        Returns:
            float: the value of `vertex_94_ycoordinate` or None if not set
        """
        return self._data["Vertex 94 Y-coordinate"]

    @vertex_94_ycoordinate.setter
    def vertex_94_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 94 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 94 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_94_ycoordinate`'.format(value))
        self._data["Vertex 94 Y-coordinate"] = value

    @property
    def vertex_94_zcoordinate(self):
        """Get vertex_94_zcoordinate

        Returns:
            float: the value of `vertex_94_zcoordinate` or None if not set
        """
        return self._data["Vertex 94 Z-coordinate"]

    @vertex_94_zcoordinate.setter
    def vertex_94_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 94 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 94 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_94_zcoordinate`'.format(value))
        self._data["Vertex 94 Z-coordinate"] = value

    @property
    def vertex_95_xcoordinate(self):
        """Get vertex_95_xcoordinate

        Returns:
            float: the value of `vertex_95_xcoordinate` or None if not set
        """
        return self._data["Vertex 95 X-coordinate"]

    @vertex_95_xcoordinate.setter
    def vertex_95_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 95 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 95 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_95_xcoordinate`'.format(value))
        self._data["Vertex 95 X-coordinate"] = value

    @property
    def vertex_95_ycoordinate(self):
        """Get vertex_95_ycoordinate

        Returns:
            float: the value of `vertex_95_ycoordinate` or None if not set
        """
        return self._data["Vertex 95 Y-coordinate"]

    @vertex_95_ycoordinate.setter
    def vertex_95_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 95 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 95 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_95_ycoordinate`'.format(value))
        self._data["Vertex 95 Y-coordinate"] = value

    @property
    def vertex_95_zcoordinate(self):
        """Get vertex_95_zcoordinate

        Returns:
            float: the value of `vertex_95_zcoordinate` or None if not set
        """
        return self._data["Vertex 95 Z-coordinate"]

    @vertex_95_zcoordinate.setter
    def vertex_95_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 95 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 95 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_95_zcoordinate`'.format(value))
        self._data["Vertex 95 Z-coordinate"] = value

    @property
    def vertex_96_xcoordinate(self):
        """Get vertex_96_xcoordinate

        Returns:
            float: the value of `vertex_96_xcoordinate` or None if not set
        """
        return self._data["Vertex 96 X-coordinate"]

    @vertex_96_xcoordinate.setter
    def vertex_96_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 96 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 96 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_96_xcoordinate`'.format(value))
        self._data["Vertex 96 X-coordinate"] = value

    @property
    def vertex_96_ycoordinate(self):
        """Get vertex_96_ycoordinate

        Returns:
            float: the value of `vertex_96_ycoordinate` or None if not set
        """
        return self._data["Vertex 96 Y-coordinate"]

    @vertex_96_ycoordinate.setter
    def vertex_96_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 96 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 96 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_96_ycoordinate`'.format(value))
        self._data["Vertex 96 Y-coordinate"] = value

    @property
    def vertex_96_zcoordinate(self):
        """Get vertex_96_zcoordinate

        Returns:
            float: the value of `vertex_96_zcoordinate` or None if not set
        """
        return self._data["Vertex 96 Z-coordinate"]

    @vertex_96_zcoordinate.setter
    def vertex_96_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 96 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 96 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_96_zcoordinate`'.format(value))
        self._data["Vertex 96 Z-coordinate"] = value

    @property
    def vertex_97_xcoordinate(self):
        """Get vertex_97_xcoordinate

        Returns:
            float: the value of `vertex_97_xcoordinate` or None if not set
        """
        return self._data["Vertex 97 X-coordinate"]

    @vertex_97_xcoordinate.setter
    def vertex_97_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 97 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 97 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_97_xcoordinate`'.format(value))
        self._data["Vertex 97 X-coordinate"] = value

    @property
    def vertex_97_ycoordinate(self):
        """Get vertex_97_ycoordinate

        Returns:
            float: the value of `vertex_97_ycoordinate` or None if not set
        """
        return self._data["Vertex 97 Y-coordinate"]

    @vertex_97_ycoordinate.setter
    def vertex_97_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 97 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 97 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_97_ycoordinate`'.format(value))
        self._data["Vertex 97 Y-coordinate"] = value

    @property
    def vertex_97_zcoordinate(self):
        """Get vertex_97_zcoordinate

        Returns:
            float: the value of `vertex_97_zcoordinate` or None if not set
        """
        return self._data["Vertex 97 Z-coordinate"]

    @vertex_97_zcoordinate.setter
    def vertex_97_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 97 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 97 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_97_zcoordinate`'.format(value))
        self._data["Vertex 97 Z-coordinate"] = value

    @property
    def vertex_98_xcoordinate(self):
        """Get vertex_98_xcoordinate

        Returns:
            float: the value of `vertex_98_xcoordinate` or None if not set
        """
        return self._data["Vertex 98 X-coordinate"]

    @vertex_98_xcoordinate.setter
    def vertex_98_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 98 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 98 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_98_xcoordinate`'.format(value))
        self._data["Vertex 98 X-coordinate"] = value

    @property
    def vertex_98_ycoordinate(self):
        """Get vertex_98_ycoordinate

        Returns:
            float: the value of `vertex_98_ycoordinate` or None if not set
        """
        return self._data["Vertex 98 Y-coordinate"]

    @vertex_98_ycoordinate.setter
    def vertex_98_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 98 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 98 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_98_ycoordinate`'.format(value))
        self._data["Vertex 98 Y-coordinate"] = value

    @property
    def vertex_98_zcoordinate(self):
        """Get vertex_98_zcoordinate

        Returns:
            float: the value of `vertex_98_zcoordinate` or None if not set
        """
        return self._data["Vertex 98 Z-coordinate"]

    @vertex_98_zcoordinate.setter
    def vertex_98_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 98 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 98 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_98_zcoordinate`'.format(value))
        self._data["Vertex 98 Z-coordinate"] = value

    @property
    def vertex_99_xcoordinate(self):
        """Get vertex_99_xcoordinate

        Returns:
            float: the value of `vertex_99_xcoordinate` or None if not set
        """
        return self._data["Vertex 99 X-coordinate"]

    @vertex_99_xcoordinate.setter
    def vertex_99_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 99 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 99 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_99_xcoordinate`'.format(value))
        self._data["Vertex 99 X-coordinate"] = value

    @property
    def vertex_99_ycoordinate(self):
        """Get vertex_99_ycoordinate

        Returns:
            float: the value of `vertex_99_ycoordinate` or None if not set
        """
        return self._data["Vertex 99 Y-coordinate"]

    @vertex_99_ycoordinate.setter
    def vertex_99_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 99 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 99 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_99_ycoordinate`'.format(value))
        self._data["Vertex 99 Y-coordinate"] = value

    @property
    def vertex_99_zcoordinate(self):
        """Get vertex_99_zcoordinate

        Returns:
            float: the value of `vertex_99_zcoordinate` or None if not set
        """
        return self._data["Vertex 99 Z-coordinate"]

    @vertex_99_zcoordinate.setter
    def vertex_99_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 99 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 99 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_99_zcoordinate`'.format(value))
        self._data["Vertex 99 Z-coordinate"] = value

    @property
    def vertex_100_xcoordinate(self):
        """Get vertex_100_xcoordinate

        Returns:
            float: the value of `vertex_100_xcoordinate` or None if not set
        """
        return self._data["Vertex 100 X-coordinate"]

    @vertex_100_xcoordinate.setter
    def vertex_100_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 100 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 100 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_100_xcoordinate`'.format(value))
        self._data["Vertex 100 X-coordinate"] = value

    @property
    def vertex_100_ycoordinate(self):
        """Get vertex_100_ycoordinate

        Returns:
            float: the value of `vertex_100_ycoordinate` or None if not set
        """
        return self._data["Vertex 100 Y-coordinate"]

    @vertex_100_ycoordinate.setter
    def vertex_100_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 100 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 100 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_100_ycoordinate`'.format(value))
        self._data["Vertex 100 Y-coordinate"] = value

    @property
    def vertex_100_zcoordinate(self):
        """Get vertex_100_zcoordinate

        Returns:
            float: the value of `vertex_100_zcoordinate` or None if not set
        """
        return self._data["Vertex 100 Z-coordinate"]

    @vertex_100_zcoordinate.setter
    def vertex_100_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 100 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 100 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_100_zcoordinate`'.format(value))
        self._data["Vertex 100 Z-coordinate"] = value

    @property
    def vertex_101_xcoordinate(self):
        """Get vertex_101_xcoordinate

        Returns:
            float: the value of `vertex_101_xcoordinate` or None if not set
        """
        return self._data["Vertex 101 X-coordinate"]

    @vertex_101_xcoordinate.setter
    def vertex_101_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 101 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 101 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_101_xcoordinate`'.format(value))
        self._data["Vertex 101 X-coordinate"] = value

    @property
    def vertex_101_ycoordinate(self):
        """Get vertex_101_ycoordinate

        Returns:
            float: the value of `vertex_101_ycoordinate` or None if not set
        """
        return self._data["Vertex 101 Y-coordinate"]

    @vertex_101_ycoordinate.setter
    def vertex_101_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 101 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 101 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_101_ycoordinate`'.format(value))
        self._data["Vertex 101 Y-coordinate"] = value

    @property
    def vertex_101_zcoordinate(self):
        """Get vertex_101_zcoordinate

        Returns:
            float: the value of `vertex_101_zcoordinate` or None if not set
        """
        return self._data["Vertex 101 Z-coordinate"]

    @vertex_101_zcoordinate.setter
    def vertex_101_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 101 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 101 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_101_zcoordinate`'.format(value))
        self._data["Vertex 101 Z-coordinate"] = value

    @property
    def vertex_102_xcoordinate(self):
        """Get vertex_102_xcoordinate

        Returns:
            float: the value of `vertex_102_xcoordinate` or None if not set
        """
        return self._data["Vertex 102 X-coordinate"]

    @vertex_102_xcoordinate.setter
    def vertex_102_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 102 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 102 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_102_xcoordinate`'.format(value))
        self._data["Vertex 102 X-coordinate"] = value

    @property
    def vertex_102_ycoordinate(self):
        """Get vertex_102_ycoordinate

        Returns:
            float: the value of `vertex_102_ycoordinate` or None if not set
        """
        return self._data["Vertex 102 Y-coordinate"]

    @vertex_102_ycoordinate.setter
    def vertex_102_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 102 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 102 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_102_ycoordinate`'.format(value))
        self._data["Vertex 102 Y-coordinate"] = value

    @property
    def vertex_102_zcoordinate(self):
        """Get vertex_102_zcoordinate

        Returns:
            float: the value of `vertex_102_zcoordinate` or None if not set
        """
        return self._data["Vertex 102 Z-coordinate"]

    @vertex_102_zcoordinate.setter
    def vertex_102_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 102 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 102 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_102_zcoordinate`'.format(value))
        self._data["Vertex 102 Z-coordinate"] = value

    @property
    def vertex_103_xcoordinate(self):
        """Get vertex_103_xcoordinate

        Returns:
            float: the value of `vertex_103_xcoordinate` or None if not set
        """
        return self._data["Vertex 103 X-coordinate"]

    @vertex_103_xcoordinate.setter
    def vertex_103_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 103 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 103 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_103_xcoordinate`'.format(value))
        self._data["Vertex 103 X-coordinate"] = value

    @property
    def vertex_103_ycoordinate(self):
        """Get vertex_103_ycoordinate

        Returns:
            float: the value of `vertex_103_ycoordinate` or None if not set
        """
        return self._data["Vertex 103 Y-coordinate"]

    @vertex_103_ycoordinate.setter
    def vertex_103_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 103 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 103 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_103_ycoordinate`'.format(value))
        self._data["Vertex 103 Y-coordinate"] = value

    @property
    def vertex_103_zcoordinate(self):
        """Get vertex_103_zcoordinate

        Returns:
            float: the value of `vertex_103_zcoordinate` or None if not set
        """
        return self._data["Vertex 103 Z-coordinate"]

    @vertex_103_zcoordinate.setter
    def vertex_103_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 103 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 103 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_103_zcoordinate`'.format(value))
        self._data["Vertex 103 Z-coordinate"] = value

    @property
    def vertex_104_xcoordinate(self):
        """Get vertex_104_xcoordinate

        Returns:
            float: the value of `vertex_104_xcoordinate` or None if not set
        """
        return self._data["Vertex 104 X-coordinate"]

    @vertex_104_xcoordinate.setter
    def vertex_104_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 104 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 104 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_104_xcoordinate`'.format(value))
        self._data["Vertex 104 X-coordinate"] = value

    @property
    def vertex_104_ycoordinate(self):
        """Get vertex_104_ycoordinate

        Returns:
            float: the value of `vertex_104_ycoordinate` or None if not set
        """
        return self._data["Vertex 104 Y-coordinate"]

    @vertex_104_ycoordinate.setter
    def vertex_104_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 104 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 104 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_104_ycoordinate`'.format(value))
        self._data["Vertex 104 Y-coordinate"] = value

    @property
    def vertex_104_zcoordinate(self):
        """Get vertex_104_zcoordinate

        Returns:
            float: the value of `vertex_104_zcoordinate` or None if not set
        """
        return self._data["Vertex 104 Z-coordinate"]

    @vertex_104_zcoordinate.setter
    def vertex_104_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 104 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 104 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_104_zcoordinate`'.format(value))
        self._data["Vertex 104 Z-coordinate"] = value

    @property
    def vertex_105_xcoordinate(self):
        """Get vertex_105_xcoordinate

        Returns:
            float: the value of `vertex_105_xcoordinate` or None if not set
        """
        return self._data["Vertex 105 X-coordinate"]

    @vertex_105_xcoordinate.setter
    def vertex_105_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 105 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 105 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_105_xcoordinate`'.format(value))
        self._data["Vertex 105 X-coordinate"] = value

    @property
    def vertex_105_ycoordinate(self):
        """Get vertex_105_ycoordinate

        Returns:
            float: the value of `vertex_105_ycoordinate` or None if not set
        """
        return self._data["Vertex 105 Y-coordinate"]

    @vertex_105_ycoordinate.setter
    def vertex_105_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 105 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 105 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_105_ycoordinate`'.format(value))
        self._data["Vertex 105 Y-coordinate"] = value

    @property
    def vertex_105_zcoordinate(self):
        """Get vertex_105_zcoordinate

        Returns:
            float: the value of `vertex_105_zcoordinate` or None if not set
        """
        return self._data["Vertex 105 Z-coordinate"]

    @vertex_105_zcoordinate.setter
    def vertex_105_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 105 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 105 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_105_zcoordinate`'.format(value))
        self._data["Vertex 105 Z-coordinate"] = value

    @property
    def vertex_106_xcoordinate(self):
        """Get vertex_106_xcoordinate

        Returns:
            float: the value of `vertex_106_xcoordinate` or None if not set
        """
        return self._data["Vertex 106 X-coordinate"]

    @vertex_106_xcoordinate.setter
    def vertex_106_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 106 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 106 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_106_xcoordinate`'.format(value))
        self._data["Vertex 106 X-coordinate"] = value

    @property
    def vertex_106_ycoordinate(self):
        """Get vertex_106_ycoordinate

        Returns:
            float: the value of `vertex_106_ycoordinate` or None if not set
        """
        return self._data["Vertex 106 Y-coordinate"]

    @vertex_106_ycoordinate.setter
    def vertex_106_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 106 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 106 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_106_ycoordinate`'.format(value))
        self._data["Vertex 106 Y-coordinate"] = value

    @property
    def vertex_106_zcoordinate(self):
        """Get vertex_106_zcoordinate

        Returns:
            float: the value of `vertex_106_zcoordinate` or None if not set
        """
        return self._data["Vertex 106 Z-coordinate"]

    @vertex_106_zcoordinate.setter
    def vertex_106_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 106 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 106 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_106_zcoordinate`'.format(value))
        self._data["Vertex 106 Z-coordinate"] = value

    @property
    def vertex_107_xcoordinate(self):
        """Get vertex_107_xcoordinate

        Returns:
            float: the value of `vertex_107_xcoordinate` or None if not set
        """
        return self._data["Vertex 107 X-coordinate"]

    @vertex_107_xcoordinate.setter
    def vertex_107_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 107 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 107 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_107_xcoordinate`'.format(value))
        self._data["Vertex 107 X-coordinate"] = value

    @property
    def vertex_107_ycoordinate(self):
        """Get vertex_107_ycoordinate

        Returns:
            float: the value of `vertex_107_ycoordinate` or None if not set
        """
        return self._data["Vertex 107 Y-coordinate"]

    @vertex_107_ycoordinate.setter
    def vertex_107_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 107 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 107 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_107_ycoordinate`'.format(value))
        self._data["Vertex 107 Y-coordinate"] = value

    @property
    def vertex_107_zcoordinate(self):
        """Get vertex_107_zcoordinate

        Returns:
            float: the value of `vertex_107_zcoordinate` or None if not set
        """
        return self._data["Vertex 107 Z-coordinate"]

    @vertex_107_zcoordinate.setter
    def vertex_107_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 107 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 107 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_107_zcoordinate`'.format(value))
        self._data["Vertex 107 Z-coordinate"] = value

    @property
    def vertex_108_xcoordinate(self):
        """Get vertex_108_xcoordinate

        Returns:
            float: the value of `vertex_108_xcoordinate` or None if not set
        """
        return self._data["Vertex 108 X-coordinate"]

    @vertex_108_xcoordinate.setter
    def vertex_108_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 108 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 108 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_108_xcoordinate`'.format(value))
        self._data["Vertex 108 X-coordinate"] = value

    @property
    def vertex_108_ycoordinate(self):
        """Get vertex_108_ycoordinate

        Returns:
            float: the value of `vertex_108_ycoordinate` or None if not set
        """
        return self._data["Vertex 108 Y-coordinate"]

    @vertex_108_ycoordinate.setter
    def vertex_108_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 108 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 108 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_108_ycoordinate`'.format(value))
        self._data["Vertex 108 Y-coordinate"] = value

    @property
    def vertex_108_zcoordinate(self):
        """Get vertex_108_zcoordinate

        Returns:
            float: the value of `vertex_108_zcoordinate` or None if not set
        """
        return self._data["Vertex 108 Z-coordinate"]

    @vertex_108_zcoordinate.setter
    def vertex_108_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 108 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 108 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_108_zcoordinate`'.format(value))
        self._data["Vertex 108 Z-coordinate"] = value

    @property
    def vertex_109_xcoordinate(self):
        """Get vertex_109_xcoordinate

        Returns:
            float: the value of `vertex_109_xcoordinate` or None if not set
        """
        return self._data["Vertex 109 X-coordinate"]

    @vertex_109_xcoordinate.setter
    def vertex_109_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 109 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 109 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_109_xcoordinate`'.format(value))
        self._data["Vertex 109 X-coordinate"] = value

    @property
    def vertex_109_ycoordinate(self):
        """Get vertex_109_ycoordinate

        Returns:
            float: the value of `vertex_109_ycoordinate` or None if not set
        """
        return self._data["Vertex 109 Y-coordinate"]

    @vertex_109_ycoordinate.setter
    def vertex_109_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 109 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 109 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_109_ycoordinate`'.format(value))
        self._data["Vertex 109 Y-coordinate"] = value

    @property
    def vertex_109_zcoordinate(self):
        """Get vertex_109_zcoordinate

        Returns:
            float: the value of `vertex_109_zcoordinate` or None if not set
        """
        return self._data["Vertex 109 Z-coordinate"]

    @vertex_109_zcoordinate.setter
    def vertex_109_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 109 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 109 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_109_zcoordinate`'.format(value))
        self._data["Vertex 109 Z-coordinate"] = value

    @property
    def vertex_110_xcoordinate(self):
        """Get vertex_110_xcoordinate

        Returns:
            float: the value of `vertex_110_xcoordinate` or None if not set
        """
        return self._data["Vertex 110 X-coordinate"]

    @vertex_110_xcoordinate.setter
    def vertex_110_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 110 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 110 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_110_xcoordinate`'.format(value))
        self._data["Vertex 110 X-coordinate"] = value

    @property
    def vertex_110_ycoordinate(self):
        """Get vertex_110_ycoordinate

        Returns:
            float: the value of `vertex_110_ycoordinate` or None if not set
        """
        return self._data["Vertex 110 Y-coordinate"]

    @vertex_110_ycoordinate.setter
    def vertex_110_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 110 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 110 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_110_ycoordinate`'.format(value))
        self._data["Vertex 110 Y-coordinate"] = value

    @property
    def vertex_110_zcoordinate(self):
        """Get vertex_110_zcoordinate

        Returns:
            float: the value of `vertex_110_zcoordinate` or None if not set
        """
        return self._data["Vertex 110 Z-coordinate"]

    @vertex_110_zcoordinate.setter
    def vertex_110_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 110 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 110 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_110_zcoordinate`'.format(value))
        self._data["Vertex 110 Z-coordinate"] = value

    @property
    def vertex_111_xcoordinate(self):
        """Get vertex_111_xcoordinate

        Returns:
            float: the value of `vertex_111_xcoordinate` or None if not set
        """
        return self._data["Vertex 111 X-coordinate"]

    @vertex_111_xcoordinate.setter
    def vertex_111_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 111 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 111 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_111_xcoordinate`'.format(value))
        self._data["Vertex 111 X-coordinate"] = value

    @property
    def vertex_111_ycoordinate(self):
        """Get vertex_111_ycoordinate

        Returns:
            float: the value of `vertex_111_ycoordinate` or None if not set
        """
        return self._data["Vertex 111 Y-coordinate"]

    @vertex_111_ycoordinate.setter
    def vertex_111_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 111 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 111 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_111_ycoordinate`'.format(value))
        self._data["Vertex 111 Y-coordinate"] = value

    @property
    def vertex_111_zcoordinate(self):
        """Get vertex_111_zcoordinate

        Returns:
            float: the value of `vertex_111_zcoordinate` or None if not set
        """
        return self._data["Vertex 111 Z-coordinate"]

    @vertex_111_zcoordinate.setter
    def vertex_111_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 111 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 111 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_111_zcoordinate`'.format(value))
        self._data["Vertex 111 Z-coordinate"] = value

    @property
    def vertex_112_xcoordinate(self):
        """Get vertex_112_xcoordinate

        Returns:
            float: the value of `vertex_112_xcoordinate` or None if not set
        """
        return self._data["Vertex 112 X-coordinate"]

    @vertex_112_xcoordinate.setter
    def vertex_112_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 112 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 112 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_112_xcoordinate`'.format(value))
        self._data["Vertex 112 X-coordinate"] = value

    @property
    def vertex_112_ycoordinate(self):
        """Get vertex_112_ycoordinate

        Returns:
            float: the value of `vertex_112_ycoordinate` or None if not set
        """
        return self._data["Vertex 112 Y-coordinate"]

    @vertex_112_ycoordinate.setter
    def vertex_112_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 112 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 112 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_112_ycoordinate`'.format(value))
        self._data["Vertex 112 Y-coordinate"] = value

    @property
    def vertex_112_zcoordinate(self):
        """Get vertex_112_zcoordinate

        Returns:
            float: the value of `vertex_112_zcoordinate` or None if not set
        """
        return self._data["Vertex 112 Z-coordinate"]

    @vertex_112_zcoordinate.setter
    def vertex_112_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 112 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 112 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_112_zcoordinate`'.format(value))
        self._data["Vertex 112 Z-coordinate"] = value

    @property
    def vertex_113_xcoordinate(self):
        """Get vertex_113_xcoordinate

        Returns:
            float: the value of `vertex_113_xcoordinate` or None if not set
        """
        return self._data["Vertex 113 X-coordinate"]

    @vertex_113_xcoordinate.setter
    def vertex_113_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 113 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 113 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_113_xcoordinate`'.format(value))
        self._data["Vertex 113 X-coordinate"] = value

    @property
    def vertex_113_ycoordinate(self):
        """Get vertex_113_ycoordinate

        Returns:
            float: the value of `vertex_113_ycoordinate` or None if not set
        """
        return self._data["Vertex 113 Y-coordinate"]

    @vertex_113_ycoordinate.setter
    def vertex_113_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 113 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 113 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_113_ycoordinate`'.format(value))
        self._data["Vertex 113 Y-coordinate"] = value

    @property
    def vertex_113_zcoordinate(self):
        """Get vertex_113_zcoordinate

        Returns:
            float: the value of `vertex_113_zcoordinate` or None if not set
        """
        return self._data["Vertex 113 Z-coordinate"]

    @vertex_113_zcoordinate.setter
    def vertex_113_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 113 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 113 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_113_zcoordinate`'.format(value))
        self._data["Vertex 113 Z-coordinate"] = value

    @property
    def vertex_114_xcoordinate(self):
        """Get vertex_114_xcoordinate

        Returns:
            float: the value of `vertex_114_xcoordinate` or None if not set
        """
        return self._data["Vertex 114 X-coordinate"]

    @vertex_114_xcoordinate.setter
    def vertex_114_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 114 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 114 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_114_xcoordinate`'.format(value))
        self._data["Vertex 114 X-coordinate"] = value

    @property
    def vertex_114_ycoordinate(self):
        """Get vertex_114_ycoordinate

        Returns:
            float: the value of `vertex_114_ycoordinate` or None if not set
        """
        return self._data["Vertex 114 Y-coordinate"]

    @vertex_114_ycoordinate.setter
    def vertex_114_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 114 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 114 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_114_ycoordinate`'.format(value))
        self._data["Vertex 114 Y-coordinate"] = value

    @property
    def vertex_114_zcoordinate(self):
        """Get vertex_114_zcoordinate

        Returns:
            float: the value of `vertex_114_zcoordinate` or None if not set
        """
        return self._data["Vertex 114 Z-coordinate"]

    @vertex_114_zcoordinate.setter
    def vertex_114_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 114 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 114 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_114_zcoordinate`'.format(value))
        self._data["Vertex 114 Z-coordinate"] = value

    @property
    def vertex_115_xcoordinate(self):
        """Get vertex_115_xcoordinate

        Returns:
            float: the value of `vertex_115_xcoordinate` or None if not set
        """
        return self._data["Vertex 115 X-coordinate"]

    @vertex_115_xcoordinate.setter
    def vertex_115_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 115 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 115 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_115_xcoordinate`'.format(value))
        self._data["Vertex 115 X-coordinate"] = value

    @property
    def vertex_115_ycoordinate(self):
        """Get vertex_115_ycoordinate

        Returns:
            float: the value of `vertex_115_ycoordinate` or None if not set
        """
        return self._data["Vertex 115 Y-coordinate"]

    @vertex_115_ycoordinate.setter
    def vertex_115_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 115 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 115 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_115_ycoordinate`'.format(value))
        self._data["Vertex 115 Y-coordinate"] = value

    @property
    def vertex_115_zcoordinate(self):
        """Get vertex_115_zcoordinate

        Returns:
            float: the value of `vertex_115_zcoordinate` or None if not set
        """
        return self._data["Vertex 115 Z-coordinate"]

    @vertex_115_zcoordinate.setter
    def vertex_115_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 115 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 115 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_115_zcoordinate`'.format(value))
        self._data["Vertex 115 Z-coordinate"] = value

    @property
    def vertex_116_xcoordinate(self):
        """Get vertex_116_xcoordinate

        Returns:
            float: the value of `vertex_116_xcoordinate` or None if not set
        """
        return self._data["Vertex 116 X-coordinate"]

    @vertex_116_xcoordinate.setter
    def vertex_116_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 116 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 116 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_116_xcoordinate`'.format(value))
        self._data["Vertex 116 X-coordinate"] = value

    @property
    def vertex_116_ycoordinate(self):
        """Get vertex_116_ycoordinate

        Returns:
            float: the value of `vertex_116_ycoordinate` or None if not set
        """
        return self._data["Vertex 116 Y-coordinate"]

    @vertex_116_ycoordinate.setter
    def vertex_116_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 116 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 116 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_116_ycoordinate`'.format(value))
        self._data["Vertex 116 Y-coordinate"] = value

    @property
    def vertex_116_zcoordinate(self):
        """Get vertex_116_zcoordinate

        Returns:
            float: the value of `vertex_116_zcoordinate` or None if not set
        """
        return self._data["Vertex 116 Z-coordinate"]

    @vertex_116_zcoordinate.setter
    def vertex_116_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 116 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 116 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_116_zcoordinate`'.format(value))
        self._data["Vertex 116 Z-coordinate"] = value

    @property
    def vertex_117_xcoordinate(self):
        """Get vertex_117_xcoordinate

        Returns:
            float: the value of `vertex_117_xcoordinate` or None if not set
        """
        return self._data["Vertex 117 X-coordinate"]

    @vertex_117_xcoordinate.setter
    def vertex_117_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 117 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 117 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_117_xcoordinate`'.format(value))
        self._data["Vertex 117 X-coordinate"] = value

    @property
    def vertex_117_ycoordinate(self):
        """Get vertex_117_ycoordinate

        Returns:
            float: the value of `vertex_117_ycoordinate` or None if not set
        """
        return self._data["Vertex 117 Y-coordinate"]

    @vertex_117_ycoordinate.setter
    def vertex_117_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 117 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 117 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_117_ycoordinate`'.format(value))
        self._data["Vertex 117 Y-coordinate"] = value

    @property
    def vertex_117_zcoordinate(self):
        """Get vertex_117_zcoordinate

        Returns:
            float: the value of `vertex_117_zcoordinate` or None if not set
        """
        return self._data["Vertex 117 Z-coordinate"]

    @vertex_117_zcoordinate.setter
    def vertex_117_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 117 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 117 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_117_zcoordinate`'.format(value))
        self._data["Vertex 117 Z-coordinate"] = value

    @property
    def vertex_118_xcoordinate(self):
        """Get vertex_118_xcoordinate

        Returns:
            float: the value of `vertex_118_xcoordinate` or None if not set
        """
        return self._data["Vertex 118 X-coordinate"]

    @vertex_118_xcoordinate.setter
    def vertex_118_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 118 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 118 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_118_xcoordinate`'.format(value))
        self._data["Vertex 118 X-coordinate"] = value

    @property
    def vertex_118_ycoordinate(self):
        """Get vertex_118_ycoordinate

        Returns:
            float: the value of `vertex_118_ycoordinate` or None if not set
        """
        return self._data["Vertex 118 Y-coordinate"]

    @vertex_118_ycoordinate.setter
    def vertex_118_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 118 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 118 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_118_ycoordinate`'.format(value))
        self._data["Vertex 118 Y-coordinate"] = value

    @property
    def vertex_118_zcoordinate(self):
        """Get vertex_118_zcoordinate

        Returns:
            float: the value of `vertex_118_zcoordinate` or None if not set
        """
        return self._data["Vertex 118 Z-coordinate"]

    @vertex_118_zcoordinate.setter
    def vertex_118_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 118 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 118 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_118_zcoordinate`'.format(value))
        self._data["Vertex 118 Z-coordinate"] = value

    @property
    def vertex_119_xcoordinate(self):
        """Get vertex_119_xcoordinate

        Returns:
            float: the value of `vertex_119_xcoordinate` or None if not set
        """
        return self._data["Vertex 119 X-coordinate"]

    @vertex_119_xcoordinate.setter
    def vertex_119_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 119 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 119 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_119_xcoordinate`'.format(value))
        self._data["Vertex 119 X-coordinate"] = value

    @property
    def vertex_119_ycoordinate(self):
        """Get vertex_119_ycoordinate

        Returns:
            float: the value of `vertex_119_ycoordinate` or None if not set
        """
        return self._data["Vertex 119 Y-coordinate"]

    @vertex_119_ycoordinate.setter
    def vertex_119_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 119 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 119 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_119_ycoordinate`'.format(value))
        self._data["Vertex 119 Y-coordinate"] = value

    @property
    def vertex_119_zcoordinate(self):
        """Get vertex_119_zcoordinate

        Returns:
            float: the value of `vertex_119_zcoordinate` or None if not set
        """
        return self._data["Vertex 119 Z-coordinate"]

    @vertex_119_zcoordinate.setter
    def vertex_119_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 119 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 119 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_119_zcoordinate`'.format(value))
        self._data["Vertex 119 Z-coordinate"] = value

    @property
    def vertex_120_xcoordinate(self):
        """Get vertex_120_xcoordinate

        Returns:
            float: the value of `vertex_120_xcoordinate` or None if not set
        """
        return self._data["Vertex 120 X-coordinate"]

    @vertex_120_xcoordinate.setter
    def vertex_120_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 120 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 120 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_120_xcoordinate`'.format(value))
        self._data["Vertex 120 X-coordinate"] = value

    @property
    def vertex_120_ycoordinate(self):
        """Get vertex_120_ycoordinate

        Returns:
            float: the value of `vertex_120_ycoordinate` or None if not set
        """
        return self._data["Vertex 120 Y-coordinate"]

    @vertex_120_ycoordinate.setter
    def vertex_120_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 120 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 120 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_120_ycoordinate`'.format(value))
        self._data["Vertex 120 Y-coordinate"] = value

    @property
    def vertex_120_zcoordinate(self):
        """Get vertex_120_zcoordinate

        Returns:
            float: the value of `vertex_120_zcoordinate` or None if not set
        """
        return self._data["Vertex 120 Z-coordinate"]

    @vertex_120_zcoordinate.setter
    def vertex_120_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 120 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 120 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_120_zcoordinate`'.format(value))
        self._data["Vertex 120 Z-coordinate"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class WallDetailed(object):
    """ Corresponds to IDD object `Wall:Detailed`
        Allows for detailed entry of wall heat transfer surfaces.
    
    """
    internal_name = "Wall:Detailed"
    field_count = 39
    required_fields = ["Name", "Construction Name", "Zone Name", "Outside Boundary Condition", "Sun Exposure", "Wind Exposure", "Vertex 1 X-coordinate", "Vertex 1 Y-coordinate", "Vertex 1 Z-coordinate", "Vertex 2 X-coordinate", "Vertex 2 Y-coordinate", "Vertex 2 Z-coordinate", "Vertex 3 X-coordinate", "Vertex 3 Y-coordinate", "Vertex 3 Z-coordinate"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Wall:Detailed`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Zone Name"] = None
        self._data["Outside Boundary Condition"] = None
        self._data["Outside Boundary Condition Object"] = None
        self._data["Sun Exposure"] = None
        self._data["Wind Exposure"] = None
        self._data["View Factor to Ground"] = None
        self._data["Number of Vertices"] = None
        self._data["Vertex 1 X-coordinate"] = None
        self._data["Vertex 1 Y-coordinate"] = None
        self._data["Vertex 1 Z-coordinate"] = None
        self._data["Vertex 2 X-coordinate"] = None
        self._data["Vertex 2 Y-coordinate"] = None
        self._data["Vertex 2 Z-coordinate"] = None
        self._data["Vertex 3 X-coordinate"] = None
        self._data["Vertex 3 Y-coordinate"] = None
        self._data["Vertex 3 Z-coordinate"] = None
        self._data["Vertex 4 X-coordinate"] = None
        self._data["Vertex 4 Y-coordinate"] = None
        self._data["Vertex 4 Z-coordinate"] = None
        self._data["Vertex 5 X-coordinate"] = None
        self._data["Vertex 5 Y-coordinate"] = None
        self._data["Vertex 5 Z-coordinate"] = None
        self._data["Vertex 6 X-coordinate"] = None
        self._data["Vertex 6 Y-coordinate"] = None
        self._data["Vertex 6 Z-coordinate"] = None
        self._data["Vertex 7 X-coordinate"] = None
        self._data["Vertex 7 Y-coordinate"] = None
        self._data["Vertex 7 Z-coordinate"] = None
        self._data["Vertex 8 X-coordinate"] = None
        self._data["Vertex 8 Y-coordinate"] = None
        self._data["Vertex 8 Z-coordinate"] = None
        self._data["Vertex 9 X-coordinate"] = None
        self._data["Vertex 9 Y-coordinate"] = None
        self._data["Vertex 9 Z-coordinate"] = None
        self._data["Vertex 10 X-coordinate"] = None
        self._data["Vertex 10 Y-coordinate"] = None
        self._data["Vertex 10 Z-coordinate"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outside_boundary_condition = None
        else:
            self.outside_boundary_condition = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outside_boundary_condition_object = None
        else:
            self.outside_boundary_condition_object = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sun_exposure = None
        else:
            self.sun_exposure = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.wind_exposure = None
        else:
            self.wind_exposure = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.view_factor_to_ground = None
        else:
            self.view_factor_to_ground = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_vertices = None
        else:
            self.number_of_vertices = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_xcoordinate = None
        else:
            self.vertex_1_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_ycoordinate = None
        else:
            self.vertex_1_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_zcoordinate = None
        else:
            self.vertex_1_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_xcoordinate = None
        else:
            self.vertex_2_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_ycoordinate = None
        else:
            self.vertex_2_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_zcoordinate = None
        else:
            self.vertex_2_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_xcoordinate = None
        else:
            self.vertex_3_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_ycoordinate = None
        else:
            self.vertex_3_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_zcoordinate = None
        else:
            self.vertex_3_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_xcoordinate = None
        else:
            self.vertex_4_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_ycoordinate = None
        else:
            self.vertex_4_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_zcoordinate = None
        else:
            self.vertex_4_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_xcoordinate = None
        else:
            self.vertex_5_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_ycoordinate = None
        else:
            self.vertex_5_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_zcoordinate = None
        else:
            self.vertex_5_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_xcoordinate = None
        else:
            self.vertex_6_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_ycoordinate = None
        else:
            self.vertex_6_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_zcoordinate = None
        else:
            self.vertex_6_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_xcoordinate = None
        else:
            self.vertex_7_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_ycoordinate = None
        else:
            self.vertex_7_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_zcoordinate = None
        else:
            self.vertex_7_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_xcoordinate = None
        else:
            self.vertex_8_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_ycoordinate = None
        else:
            self.vertex_8_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_zcoordinate = None
        else:
            self.vertex_8_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_xcoordinate = None
        else:
            self.vertex_9_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_ycoordinate = None
        else:
            self.vertex_9_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_zcoordinate = None
        else:
            self.vertex_9_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_xcoordinate = None
        else:
            self.vertex_10_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_ycoordinate = None
        else:
            self.vertex_10_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_zcoordinate = None
        else:
            self.vertex_10_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Zone the surface is a part of

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def outside_boundary_condition(self):
        """Get outside_boundary_condition

        Returns:
            str: the value of `outside_boundary_condition` or None if not set
        """
        return self._data["Outside Boundary Condition"]

    @outside_boundary_condition.setter
    def outside_boundary_condition(self, value=None):
        """  Corresponds to IDD Field `Outside Boundary Condition`

        Args:
            value (str): value for IDD Field `Outside Boundary Condition`
                Accepted values are:
                      - Adiabatic
                      - Surface
                      - Zone
                      - Outdoors
                      - Ground
                      - GroundFCfactorMethod
                      - OtherSideCoefficients
                      - OtherSideConditionsModel
                      - GroundSlabPreprocessorAverage
                      - GroundSlabPreprocessorCore
                      - GroundSlabPreprocessorPerimeter
                      - GroundBasementPreprocessorAverageWall
                      - GroundBasementPreprocessorAverageFloor
                      - GroundBasementPreprocessorUpperWall
                      - GroundBasementPreprocessorLowerWall
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_boundary_condition`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_boundary_condition`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outside_boundary_condition`')
            vals = {}
            vals["adiabatic"] = "Adiabatic"
            vals["surface"] = "Surface"
            vals["zone"] = "Zone"
            vals["outdoors"] = "Outdoors"
            vals["ground"] = "Ground"
            vals["groundfcfactormethod"] = "GroundFCfactorMethod"
            vals["othersidecoefficients"] = "OtherSideCoefficients"
            vals["othersideconditionsmodel"] = "OtherSideConditionsModel"
            vals["groundslabpreprocessoraverage"] = "GroundSlabPreprocessorAverage"
            vals["groundslabpreprocessorcore"] = "GroundSlabPreprocessorCore"
            vals["groundslabpreprocessorperimeter"] = "GroundSlabPreprocessorPerimeter"
            vals["groundbasementpreprocessoraveragewall"] = "GroundBasementPreprocessorAverageWall"
            vals["groundbasementpreprocessoraveragefloor"] = "GroundBasementPreprocessorAverageFloor"
            vals["groundbasementpreprocessorupperwall"] = "GroundBasementPreprocessorUpperWall"
            vals["groundbasementpreprocessorlowerwall"] = "GroundBasementPreprocessorLowerWall"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `outside_boundary_condition`'.format(value))
            value = vals[value_lower]
        self._data["Outside Boundary Condition"] = value

    @property
    def outside_boundary_condition_object(self):
        """Get outside_boundary_condition_object

        Returns:
            str: the value of `outside_boundary_condition_object` or None if not set
        """
        return self._data["Outside Boundary Condition Object"]

    @outside_boundary_condition_object.setter
    def outside_boundary_condition_object(self, value=None):
        """  Corresponds to IDD Field `Outside Boundary Condition Object`
        Non-blank only if the field Outside Boundary Condition is Surface,
        Zone, OtherSideCoefficients or OtherSideConditionsModel
        If Surface, specify name of corresponding surface in adjacent zone or
        specify current surface name for internal partition separating like zones
        If Zone, specify the name of the corresponding zone and
        the program will generate the corresponding interzone surface
        If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients
        If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel

        Args:
            value (str): value for IDD Field `Outside Boundary Condition Object`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_boundary_condition_object`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_boundary_condition_object`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outside_boundary_condition_object`')
        self._data["Outside Boundary Condition Object"] = value

    @property
    def sun_exposure(self):
        """Get sun_exposure

        Returns:
            str: the value of `sun_exposure` or None if not set
        """
        return self._data["Sun Exposure"]

    @sun_exposure.setter
    def sun_exposure(self, value="SunExposed"):
        """  Corresponds to IDD Field `Sun Exposure`

        Args:
            value (str): value for IDD Field `Sun Exposure`
                Accepted values are:
                      - SunExposed
                      - NoSun
                Default value: SunExposed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `sun_exposure`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sun_exposure`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `sun_exposure`')
            vals = {}
            vals["sunexposed"] = "SunExposed"
            vals["nosun"] = "NoSun"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `sun_exposure`'.format(value))
            value = vals[value_lower]
        self._data["Sun Exposure"] = value

    @property
    def wind_exposure(self):
        """Get wind_exposure

        Returns:
            str: the value of `wind_exposure` or None if not set
        """
        return self._data["Wind Exposure"]

    @wind_exposure.setter
    def wind_exposure(self, value="WindExposed"):
        """  Corresponds to IDD Field `Wind Exposure`

        Args:
            value (str): value for IDD Field `Wind Exposure`
                Accepted values are:
                      - WindExposed
                      - NoWind
                Default value: WindExposed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `wind_exposure`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `wind_exposure`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `wind_exposure`')
            vals = {}
            vals["windexposed"] = "WindExposed"
            vals["nowind"] = "NoWind"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `wind_exposure`'.format(value))
            value = vals[value_lower]
        self._data["Wind Exposure"] = value

    @property
    def view_factor_to_ground(self):
        """Get view_factor_to_ground

        Returns:
            float: the value of `view_factor_to_ground` or None if not set
        """
        return self._data["View Factor to Ground"]

    @view_factor_to_ground.setter
    def view_factor_to_ground(self, value="autocalculate"):
        """  Corresponds to IDD Field `View Factor to Ground`
        From the exterior of the surface
        Unused if one uses the "reflections" options in Solar Distribution in Building input
        unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified.
        autocalculate will automatically calculate this value from the tilt of the surface

        Args:
            value (float or "Autocalculate"): value for IDD Field `View Factor to Ground`
                Default value: "autocalculate"
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["View Factor to Ground"] = "Autocalculate"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `view_factor_to_ground`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `view_factor_to_ground`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `view_factor_to_ground`')
        self._data["View Factor to Ground"] = value

    @property
    def number_of_vertices(self):
        """Get number_of_vertices

        Returns:
            float: the value of `number_of_vertices` or None if not set
        """
        return self._data["Number of Vertices"]

    @number_of_vertices.setter
    def number_of_vertices(self, value="autocalculate"):
        """  Corresponds to IDD Field `Number of Vertices`
        shown with 10 vertex coordinates -- extensible object
        "extensible" -- duplicate last set of x,y,z coordinates, renumbering please
        (and changing z terminator to a comma "," for all but last one which needs a semi-colon ";")
        vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates
        are "relative" to the Zone Origin.  If world, then building and zone origins are used
        for some internal calculations, but all coordinates are given in an "absolute" system.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Number of Vertices`
                Default value: "autocalculate"
                value >= 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Number of Vertices"] = "Autocalculate"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_vertices`'.format(value))
            if value < 3.0:
                raise ValueError('value need to be greater or equal 3.0 '
                                 'for field `number_of_vertices`')
        self._data["Number of Vertices"] = value

    @property
    def vertex_1_xcoordinate(self):
        """Get vertex_1_xcoordinate

        Returns:
            float: the value of `vertex_1_xcoordinate` or None if not set
        """
        return self._data["Vertex 1 X-coordinate"]

    @vertex_1_xcoordinate.setter
    def vertex_1_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_xcoordinate`'.format(value))
        self._data["Vertex 1 X-coordinate"] = value

    @property
    def vertex_1_ycoordinate(self):
        """Get vertex_1_ycoordinate

        Returns:
            float: the value of `vertex_1_ycoordinate` or None if not set
        """
        return self._data["Vertex 1 Y-coordinate"]

    @vertex_1_ycoordinate.setter
    def vertex_1_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_ycoordinate`'.format(value))
        self._data["Vertex 1 Y-coordinate"] = value

    @property
    def vertex_1_zcoordinate(self):
        """Get vertex_1_zcoordinate

        Returns:
            float: the value of `vertex_1_zcoordinate` or None if not set
        """
        return self._data["Vertex 1 Z-coordinate"]

    @vertex_1_zcoordinate.setter
    def vertex_1_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_zcoordinate`'.format(value))
        self._data["Vertex 1 Z-coordinate"] = value

    @property
    def vertex_2_xcoordinate(self):
        """Get vertex_2_xcoordinate

        Returns:
            float: the value of `vertex_2_xcoordinate` or None if not set
        """
        return self._data["Vertex 2 X-coordinate"]

    @vertex_2_xcoordinate.setter
    def vertex_2_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_xcoordinate`'.format(value))
        self._data["Vertex 2 X-coordinate"] = value

    @property
    def vertex_2_ycoordinate(self):
        """Get vertex_2_ycoordinate

        Returns:
            float: the value of `vertex_2_ycoordinate` or None if not set
        """
        return self._data["Vertex 2 Y-coordinate"]

    @vertex_2_ycoordinate.setter
    def vertex_2_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_ycoordinate`'.format(value))
        self._data["Vertex 2 Y-coordinate"] = value

    @property
    def vertex_2_zcoordinate(self):
        """Get vertex_2_zcoordinate

        Returns:
            float: the value of `vertex_2_zcoordinate` or None if not set
        """
        return self._data["Vertex 2 Z-coordinate"]

    @vertex_2_zcoordinate.setter
    def vertex_2_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_zcoordinate`'.format(value))
        self._data["Vertex 2 Z-coordinate"] = value

    @property
    def vertex_3_xcoordinate(self):
        """Get vertex_3_xcoordinate

        Returns:
            float: the value of `vertex_3_xcoordinate` or None if not set
        """
        return self._data["Vertex 3 X-coordinate"]

    @vertex_3_xcoordinate.setter
    def vertex_3_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_xcoordinate`'.format(value))
        self._data["Vertex 3 X-coordinate"] = value

    @property
    def vertex_3_ycoordinate(self):
        """Get vertex_3_ycoordinate

        Returns:
            float: the value of `vertex_3_ycoordinate` or None if not set
        """
        return self._data["Vertex 3 Y-coordinate"]

    @vertex_3_ycoordinate.setter
    def vertex_3_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_ycoordinate`'.format(value))
        self._data["Vertex 3 Y-coordinate"] = value

    @property
    def vertex_3_zcoordinate(self):
        """Get vertex_3_zcoordinate

        Returns:
            float: the value of `vertex_3_zcoordinate` or None if not set
        """
        return self._data["Vertex 3 Z-coordinate"]

    @vertex_3_zcoordinate.setter
    def vertex_3_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_zcoordinate`'.format(value))
        self._data["Vertex 3 Z-coordinate"] = value

    @property
    def vertex_4_xcoordinate(self):
        """Get vertex_4_xcoordinate

        Returns:
            float: the value of `vertex_4_xcoordinate` or None if not set
        """
        return self._data["Vertex 4 X-coordinate"]

    @vertex_4_xcoordinate.setter
    def vertex_4_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_xcoordinate`'.format(value))
        self._data["Vertex 4 X-coordinate"] = value

    @property
    def vertex_4_ycoordinate(self):
        """Get vertex_4_ycoordinate

        Returns:
            float: the value of `vertex_4_ycoordinate` or None if not set
        """
        return self._data["Vertex 4 Y-coordinate"]

    @vertex_4_ycoordinate.setter
    def vertex_4_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_ycoordinate`'.format(value))
        self._data["Vertex 4 Y-coordinate"] = value

    @property
    def vertex_4_zcoordinate(self):
        """Get vertex_4_zcoordinate

        Returns:
            float: the value of `vertex_4_zcoordinate` or None if not set
        """
        return self._data["Vertex 4 Z-coordinate"]

    @vertex_4_zcoordinate.setter
    def vertex_4_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_zcoordinate`'.format(value))
        self._data["Vertex 4 Z-coordinate"] = value

    @property
    def vertex_5_xcoordinate(self):
        """Get vertex_5_xcoordinate

        Returns:
            float: the value of `vertex_5_xcoordinate` or None if not set
        """
        return self._data["Vertex 5 X-coordinate"]

    @vertex_5_xcoordinate.setter
    def vertex_5_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_xcoordinate`'.format(value))
        self._data["Vertex 5 X-coordinate"] = value

    @property
    def vertex_5_ycoordinate(self):
        """Get vertex_5_ycoordinate

        Returns:
            float: the value of `vertex_5_ycoordinate` or None if not set
        """
        return self._data["Vertex 5 Y-coordinate"]

    @vertex_5_ycoordinate.setter
    def vertex_5_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_ycoordinate`'.format(value))
        self._data["Vertex 5 Y-coordinate"] = value

    @property
    def vertex_5_zcoordinate(self):
        """Get vertex_5_zcoordinate

        Returns:
            float: the value of `vertex_5_zcoordinate` or None if not set
        """
        return self._data["Vertex 5 Z-coordinate"]

    @vertex_5_zcoordinate.setter
    def vertex_5_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_zcoordinate`'.format(value))
        self._data["Vertex 5 Z-coordinate"] = value

    @property
    def vertex_6_xcoordinate(self):
        """Get vertex_6_xcoordinate

        Returns:
            float: the value of `vertex_6_xcoordinate` or None if not set
        """
        return self._data["Vertex 6 X-coordinate"]

    @vertex_6_xcoordinate.setter
    def vertex_6_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_xcoordinate`'.format(value))
        self._data["Vertex 6 X-coordinate"] = value

    @property
    def vertex_6_ycoordinate(self):
        """Get vertex_6_ycoordinate

        Returns:
            float: the value of `vertex_6_ycoordinate` or None if not set
        """
        return self._data["Vertex 6 Y-coordinate"]

    @vertex_6_ycoordinate.setter
    def vertex_6_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_ycoordinate`'.format(value))
        self._data["Vertex 6 Y-coordinate"] = value

    @property
    def vertex_6_zcoordinate(self):
        """Get vertex_6_zcoordinate

        Returns:
            float: the value of `vertex_6_zcoordinate` or None if not set
        """
        return self._data["Vertex 6 Z-coordinate"]

    @vertex_6_zcoordinate.setter
    def vertex_6_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_zcoordinate`'.format(value))
        self._data["Vertex 6 Z-coordinate"] = value

    @property
    def vertex_7_xcoordinate(self):
        """Get vertex_7_xcoordinate

        Returns:
            float: the value of `vertex_7_xcoordinate` or None if not set
        """
        return self._data["Vertex 7 X-coordinate"]

    @vertex_7_xcoordinate.setter
    def vertex_7_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_xcoordinate`'.format(value))
        self._data["Vertex 7 X-coordinate"] = value

    @property
    def vertex_7_ycoordinate(self):
        """Get vertex_7_ycoordinate

        Returns:
            float: the value of `vertex_7_ycoordinate` or None if not set
        """
        return self._data["Vertex 7 Y-coordinate"]

    @vertex_7_ycoordinate.setter
    def vertex_7_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_ycoordinate`'.format(value))
        self._data["Vertex 7 Y-coordinate"] = value

    @property
    def vertex_7_zcoordinate(self):
        """Get vertex_7_zcoordinate

        Returns:
            float: the value of `vertex_7_zcoordinate` or None if not set
        """
        return self._data["Vertex 7 Z-coordinate"]

    @vertex_7_zcoordinate.setter
    def vertex_7_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_zcoordinate`'.format(value))
        self._data["Vertex 7 Z-coordinate"] = value

    @property
    def vertex_8_xcoordinate(self):
        """Get vertex_8_xcoordinate

        Returns:
            float: the value of `vertex_8_xcoordinate` or None if not set
        """
        return self._data["Vertex 8 X-coordinate"]

    @vertex_8_xcoordinate.setter
    def vertex_8_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_xcoordinate`'.format(value))
        self._data["Vertex 8 X-coordinate"] = value

    @property
    def vertex_8_ycoordinate(self):
        """Get vertex_8_ycoordinate

        Returns:
            float: the value of `vertex_8_ycoordinate` or None if not set
        """
        return self._data["Vertex 8 Y-coordinate"]

    @vertex_8_ycoordinate.setter
    def vertex_8_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_ycoordinate`'.format(value))
        self._data["Vertex 8 Y-coordinate"] = value

    @property
    def vertex_8_zcoordinate(self):
        """Get vertex_8_zcoordinate

        Returns:
            float: the value of `vertex_8_zcoordinate` or None if not set
        """
        return self._data["Vertex 8 Z-coordinate"]

    @vertex_8_zcoordinate.setter
    def vertex_8_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_zcoordinate`'.format(value))
        self._data["Vertex 8 Z-coordinate"] = value

    @property
    def vertex_9_xcoordinate(self):
        """Get vertex_9_xcoordinate

        Returns:
            float: the value of `vertex_9_xcoordinate` or None if not set
        """
        return self._data["Vertex 9 X-coordinate"]

    @vertex_9_xcoordinate.setter
    def vertex_9_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_xcoordinate`'.format(value))
        self._data["Vertex 9 X-coordinate"] = value

    @property
    def vertex_9_ycoordinate(self):
        """Get vertex_9_ycoordinate

        Returns:
            float: the value of `vertex_9_ycoordinate` or None if not set
        """
        return self._data["Vertex 9 Y-coordinate"]

    @vertex_9_ycoordinate.setter
    def vertex_9_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_ycoordinate`'.format(value))
        self._data["Vertex 9 Y-coordinate"] = value

    @property
    def vertex_9_zcoordinate(self):
        """Get vertex_9_zcoordinate

        Returns:
            float: the value of `vertex_9_zcoordinate` or None if not set
        """
        return self._data["Vertex 9 Z-coordinate"]

    @vertex_9_zcoordinate.setter
    def vertex_9_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_zcoordinate`'.format(value))
        self._data["Vertex 9 Z-coordinate"] = value

    @property
    def vertex_10_xcoordinate(self):
        """Get vertex_10_xcoordinate

        Returns:
            float: the value of `vertex_10_xcoordinate` or None if not set
        """
        return self._data["Vertex 10 X-coordinate"]

    @vertex_10_xcoordinate.setter
    def vertex_10_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_xcoordinate`'.format(value))
        self._data["Vertex 10 X-coordinate"] = value

    @property
    def vertex_10_ycoordinate(self):
        """Get vertex_10_ycoordinate

        Returns:
            float: the value of `vertex_10_ycoordinate` or None if not set
        """
        return self._data["Vertex 10 Y-coordinate"]

    @vertex_10_ycoordinate.setter
    def vertex_10_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_ycoordinate`'.format(value))
        self._data["Vertex 10 Y-coordinate"] = value

    @property
    def vertex_10_zcoordinate(self):
        """Get vertex_10_zcoordinate

        Returns:
            float: the value of `vertex_10_zcoordinate` or None if not set
        """
        return self._data["Vertex 10 Z-coordinate"]

    @vertex_10_zcoordinate.setter
    def vertex_10_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_zcoordinate`'.format(value))
        self._data["Vertex 10 Z-coordinate"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class RoofCeilingDetailed(object):
    """ Corresponds to IDD object `RoofCeiling:Detailed`
        Allows for detailed entry of roof/ceiling heat transfer surfaces.
    
    """
    internal_name = "RoofCeiling:Detailed"
    field_count = 39
    required_fields = ["Name", "Construction Name", "Zone Name", "Outside Boundary Condition", "Sun Exposure", "Wind Exposure", "Vertex 1 X-coordinate", "Vertex 1 Y-coordinate", "Vertex 1 Z-coordinate", "Vertex 2 X-coordinate", "Vertex 2 Y-coordinate", "Vertex 2 Z-coordinate", "Vertex 3 X-coordinate", "Vertex 3 Y-coordinate", "Vertex 3 Z-coordinate"]

    def __init__(self):
        """ Init data dictionary object for IDD  `RoofCeiling:Detailed`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Zone Name"] = None
        self._data["Outside Boundary Condition"] = None
        self._data["Outside Boundary Condition Object"] = None
        self._data["Sun Exposure"] = None
        self._data["Wind Exposure"] = None
        self._data["View Factor to Ground"] = None
        self._data["Number of Vertices"] = None
        self._data["Vertex 1 X-coordinate"] = None
        self._data["Vertex 1 Y-coordinate"] = None
        self._data["Vertex 1 Z-coordinate"] = None
        self._data["Vertex 2 X-coordinate"] = None
        self._data["Vertex 2 Y-coordinate"] = None
        self._data["Vertex 2 Z-coordinate"] = None
        self._data["Vertex 3 X-coordinate"] = None
        self._data["Vertex 3 Y-coordinate"] = None
        self._data["Vertex 3 Z-coordinate"] = None
        self._data["Vertex 4 X-coordinate"] = None
        self._data["Vertex 4 Y-coordinate"] = None
        self._data["Vertex 4 Z-coordinate"] = None
        self._data["Vertex 5 X-coordinate"] = None
        self._data["Vertex 5 Y-coordinate"] = None
        self._data["Vertex 5 Z-coordinate"] = None
        self._data["Vertex 6 X-coordinate"] = None
        self._data["Vertex 6 Y-coordinate"] = None
        self._data["Vertex 6 Z-coordinate"] = None
        self._data["Vertex 7 X-coordinate"] = None
        self._data["Vertex 7 Y-coordinate"] = None
        self._data["Vertex 7 Z-coordinate"] = None
        self._data["Vertex 8 X-coordinate"] = None
        self._data["Vertex 8 Y-coordinate"] = None
        self._data["Vertex 8 Z-coordinate"] = None
        self._data["Vertex 9 X-coordinate"] = None
        self._data["Vertex 9 Y-coordinate"] = None
        self._data["Vertex 9 Z-coordinate"] = None
        self._data["Vertex 10 X-coordinate"] = None
        self._data["Vertex 10 Y-coordinate"] = None
        self._data["Vertex 10 Z-coordinate"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outside_boundary_condition = None
        else:
            self.outside_boundary_condition = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outside_boundary_condition_object = None
        else:
            self.outside_boundary_condition_object = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sun_exposure = None
        else:
            self.sun_exposure = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.wind_exposure = None
        else:
            self.wind_exposure = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.view_factor_to_ground = None
        else:
            self.view_factor_to_ground = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_vertices = None
        else:
            self.number_of_vertices = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_xcoordinate = None
        else:
            self.vertex_1_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_ycoordinate = None
        else:
            self.vertex_1_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_zcoordinate = None
        else:
            self.vertex_1_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_xcoordinate = None
        else:
            self.vertex_2_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_ycoordinate = None
        else:
            self.vertex_2_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_zcoordinate = None
        else:
            self.vertex_2_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_xcoordinate = None
        else:
            self.vertex_3_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_ycoordinate = None
        else:
            self.vertex_3_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_zcoordinate = None
        else:
            self.vertex_3_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_xcoordinate = None
        else:
            self.vertex_4_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_ycoordinate = None
        else:
            self.vertex_4_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_zcoordinate = None
        else:
            self.vertex_4_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_xcoordinate = None
        else:
            self.vertex_5_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_ycoordinate = None
        else:
            self.vertex_5_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_zcoordinate = None
        else:
            self.vertex_5_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_xcoordinate = None
        else:
            self.vertex_6_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_ycoordinate = None
        else:
            self.vertex_6_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_zcoordinate = None
        else:
            self.vertex_6_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_xcoordinate = None
        else:
            self.vertex_7_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_ycoordinate = None
        else:
            self.vertex_7_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_zcoordinate = None
        else:
            self.vertex_7_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_xcoordinate = None
        else:
            self.vertex_8_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_ycoordinate = None
        else:
            self.vertex_8_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_zcoordinate = None
        else:
            self.vertex_8_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_xcoordinate = None
        else:
            self.vertex_9_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_ycoordinate = None
        else:
            self.vertex_9_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_zcoordinate = None
        else:
            self.vertex_9_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_xcoordinate = None
        else:
            self.vertex_10_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_ycoordinate = None
        else:
            self.vertex_10_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_zcoordinate = None
        else:
            self.vertex_10_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Zone the surface is a part of

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def outside_boundary_condition(self):
        """Get outside_boundary_condition

        Returns:
            str: the value of `outside_boundary_condition` or None if not set
        """
        return self._data["Outside Boundary Condition"]

    @outside_boundary_condition.setter
    def outside_boundary_condition(self, value=None):
        """  Corresponds to IDD Field `Outside Boundary Condition`

        Args:
            value (str): value for IDD Field `Outside Boundary Condition`
                Accepted values are:
                      - Adiabatic
                      - Surface
                      - Zone
                      - Outdoors
                      - Ground
                      - OtherSideCoefficients
                      - OtherSideConditionsModel
                      - GroundSlabPreprocessorAverage
                      - GroundSlabPreprocessorCore
                      - GroundSlabPreprocessorPerimeter
                      - GroundBasementPreprocessorAverageWall
                      - GroundBasementPreprocessorAverageFloor
                      - GroundBasementPreprocessorUpperWall
                      - GroundBasementPreprocessorLowerWall
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_boundary_condition`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_boundary_condition`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outside_boundary_condition`')
            vals = {}
            vals["adiabatic"] = "Adiabatic"
            vals["surface"] = "Surface"
            vals["zone"] = "Zone"
            vals["outdoors"] = "Outdoors"
            vals["ground"] = "Ground"
            vals["othersidecoefficients"] = "OtherSideCoefficients"
            vals["othersideconditionsmodel"] = "OtherSideConditionsModel"
            vals["groundslabpreprocessoraverage"] = "GroundSlabPreprocessorAverage"
            vals["groundslabpreprocessorcore"] = "GroundSlabPreprocessorCore"
            vals["groundslabpreprocessorperimeter"] = "GroundSlabPreprocessorPerimeter"
            vals["groundbasementpreprocessoraveragewall"] = "GroundBasementPreprocessorAverageWall"
            vals["groundbasementpreprocessoraveragefloor"] = "GroundBasementPreprocessorAverageFloor"
            vals["groundbasementpreprocessorupperwall"] = "GroundBasementPreprocessorUpperWall"
            vals["groundbasementpreprocessorlowerwall"] = "GroundBasementPreprocessorLowerWall"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `outside_boundary_condition`'.format(value))
            value = vals[value_lower]
        self._data["Outside Boundary Condition"] = value

    @property
    def outside_boundary_condition_object(self):
        """Get outside_boundary_condition_object

        Returns:
            str: the value of `outside_boundary_condition_object` or None if not set
        """
        return self._data["Outside Boundary Condition Object"]

    @outside_boundary_condition_object.setter
    def outside_boundary_condition_object(self, value=None):
        """  Corresponds to IDD Field `Outside Boundary Condition Object`
        Non-blank only if the field Outside Boundary Condition is Surface,
        Zone, OtherSideCoefficients or OtherSideConditionsModel
        If Surface, specify name of corresponding surface in adjacent zone or
        specify current surface name for internal partition separating like zones
        If Zone, specify the name of the corresponding zone and
        the program will generate the corresponding interzone surface
        If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients
        If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel

        Args:
            value (str): value for IDD Field `Outside Boundary Condition Object`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_boundary_condition_object`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_boundary_condition_object`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outside_boundary_condition_object`')
        self._data["Outside Boundary Condition Object"] = value

    @property
    def sun_exposure(self):
        """Get sun_exposure

        Returns:
            str: the value of `sun_exposure` or None if not set
        """
        return self._data["Sun Exposure"]

    @sun_exposure.setter
    def sun_exposure(self, value="SunExposed"):
        """  Corresponds to IDD Field `Sun Exposure`

        Args:
            value (str): value for IDD Field `Sun Exposure`
                Accepted values are:
                      - SunExposed
                      - NoSun
                Default value: SunExposed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `sun_exposure`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sun_exposure`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `sun_exposure`')
            vals = {}
            vals["sunexposed"] = "SunExposed"
            vals["nosun"] = "NoSun"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `sun_exposure`'.format(value))
            value = vals[value_lower]
        self._data["Sun Exposure"] = value

    @property
    def wind_exposure(self):
        """Get wind_exposure

        Returns:
            str: the value of `wind_exposure` or None if not set
        """
        return self._data["Wind Exposure"]

    @wind_exposure.setter
    def wind_exposure(self, value="WindExposed"):
        """  Corresponds to IDD Field `Wind Exposure`

        Args:
            value (str): value for IDD Field `Wind Exposure`
                Accepted values are:
                      - WindExposed
                      - NoWind
                Default value: WindExposed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `wind_exposure`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `wind_exposure`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `wind_exposure`')
            vals = {}
            vals["windexposed"] = "WindExposed"
            vals["nowind"] = "NoWind"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `wind_exposure`'.format(value))
            value = vals[value_lower]
        self._data["Wind Exposure"] = value

    @property
    def view_factor_to_ground(self):
        """Get view_factor_to_ground

        Returns:
            float: the value of `view_factor_to_ground` or None if not set
        """
        return self._data["View Factor to Ground"]

    @view_factor_to_ground.setter
    def view_factor_to_ground(self, value="autocalculate"):
        """  Corresponds to IDD Field `View Factor to Ground`
        From the exterior of the surface
        Unused if one uses the "reflections" options in Solar Distribution in Building input
        unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified.
        autocalculate will automatically calculate this value from the tilt of the surface

        Args:
            value (float or "Autocalculate"): value for IDD Field `View Factor to Ground`
                Default value: "autocalculate"
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["View Factor to Ground"] = "Autocalculate"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `view_factor_to_ground`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `view_factor_to_ground`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `view_factor_to_ground`')
        self._data["View Factor to Ground"] = value

    @property
    def number_of_vertices(self):
        """Get number_of_vertices

        Returns:
            float: the value of `number_of_vertices` or None if not set
        """
        return self._data["Number of Vertices"]

    @number_of_vertices.setter
    def number_of_vertices(self, value="autocalculate"):
        """  Corresponds to IDD Field `Number of Vertices`
        shown with 10 vertex coordinates -- extensible object
        "extensible" -- duplicate last set of x,y,z coordinates, renumbering please
        (and changing z terminator to a comma "," for all but last one which needs a semi-colon ";")
        vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates
        are "relative" to the Zone Origin.  If world, then building and zone origins are used
        for some internal calculations, but all coordinates are given in an "absolute" system.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Number of Vertices`
                Default value: "autocalculate"
                value >= 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Number of Vertices"] = "Autocalculate"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_vertices`'.format(value))
            if value < 3.0:
                raise ValueError('value need to be greater or equal 3.0 '
                                 'for field `number_of_vertices`')
        self._data["Number of Vertices"] = value

    @property
    def vertex_1_xcoordinate(self):
        """Get vertex_1_xcoordinate

        Returns:
            float: the value of `vertex_1_xcoordinate` or None if not set
        """
        return self._data["Vertex 1 X-coordinate"]

    @vertex_1_xcoordinate.setter
    def vertex_1_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_xcoordinate`'.format(value))
        self._data["Vertex 1 X-coordinate"] = value

    @property
    def vertex_1_ycoordinate(self):
        """Get vertex_1_ycoordinate

        Returns:
            float: the value of `vertex_1_ycoordinate` or None if not set
        """
        return self._data["Vertex 1 Y-coordinate"]

    @vertex_1_ycoordinate.setter
    def vertex_1_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_ycoordinate`'.format(value))
        self._data["Vertex 1 Y-coordinate"] = value

    @property
    def vertex_1_zcoordinate(self):
        """Get vertex_1_zcoordinate

        Returns:
            float: the value of `vertex_1_zcoordinate` or None if not set
        """
        return self._data["Vertex 1 Z-coordinate"]

    @vertex_1_zcoordinate.setter
    def vertex_1_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_zcoordinate`'.format(value))
        self._data["Vertex 1 Z-coordinate"] = value

    @property
    def vertex_2_xcoordinate(self):
        """Get vertex_2_xcoordinate

        Returns:
            float: the value of `vertex_2_xcoordinate` or None if not set
        """
        return self._data["Vertex 2 X-coordinate"]

    @vertex_2_xcoordinate.setter
    def vertex_2_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_xcoordinate`'.format(value))
        self._data["Vertex 2 X-coordinate"] = value

    @property
    def vertex_2_ycoordinate(self):
        """Get vertex_2_ycoordinate

        Returns:
            float: the value of `vertex_2_ycoordinate` or None if not set
        """
        return self._data["Vertex 2 Y-coordinate"]

    @vertex_2_ycoordinate.setter
    def vertex_2_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_ycoordinate`'.format(value))
        self._data["Vertex 2 Y-coordinate"] = value

    @property
    def vertex_2_zcoordinate(self):
        """Get vertex_2_zcoordinate

        Returns:
            float: the value of `vertex_2_zcoordinate` or None if not set
        """
        return self._data["Vertex 2 Z-coordinate"]

    @vertex_2_zcoordinate.setter
    def vertex_2_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_zcoordinate`'.format(value))
        self._data["Vertex 2 Z-coordinate"] = value

    @property
    def vertex_3_xcoordinate(self):
        """Get vertex_3_xcoordinate

        Returns:
            float: the value of `vertex_3_xcoordinate` or None if not set
        """
        return self._data["Vertex 3 X-coordinate"]

    @vertex_3_xcoordinate.setter
    def vertex_3_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_xcoordinate`'.format(value))
        self._data["Vertex 3 X-coordinate"] = value

    @property
    def vertex_3_ycoordinate(self):
        """Get vertex_3_ycoordinate

        Returns:
            float: the value of `vertex_3_ycoordinate` or None if not set
        """
        return self._data["Vertex 3 Y-coordinate"]

    @vertex_3_ycoordinate.setter
    def vertex_3_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_ycoordinate`'.format(value))
        self._data["Vertex 3 Y-coordinate"] = value

    @property
    def vertex_3_zcoordinate(self):
        """Get vertex_3_zcoordinate

        Returns:
            float: the value of `vertex_3_zcoordinate` or None if not set
        """
        return self._data["Vertex 3 Z-coordinate"]

    @vertex_3_zcoordinate.setter
    def vertex_3_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_zcoordinate`'.format(value))
        self._data["Vertex 3 Z-coordinate"] = value

    @property
    def vertex_4_xcoordinate(self):
        """Get vertex_4_xcoordinate

        Returns:
            float: the value of `vertex_4_xcoordinate` or None if not set
        """
        return self._data["Vertex 4 X-coordinate"]

    @vertex_4_xcoordinate.setter
    def vertex_4_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_xcoordinate`'.format(value))
        self._data["Vertex 4 X-coordinate"] = value

    @property
    def vertex_4_ycoordinate(self):
        """Get vertex_4_ycoordinate

        Returns:
            float: the value of `vertex_4_ycoordinate` or None if not set
        """
        return self._data["Vertex 4 Y-coordinate"]

    @vertex_4_ycoordinate.setter
    def vertex_4_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_ycoordinate`'.format(value))
        self._data["Vertex 4 Y-coordinate"] = value

    @property
    def vertex_4_zcoordinate(self):
        """Get vertex_4_zcoordinate

        Returns:
            float: the value of `vertex_4_zcoordinate` or None if not set
        """
        return self._data["Vertex 4 Z-coordinate"]

    @vertex_4_zcoordinate.setter
    def vertex_4_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_zcoordinate`'.format(value))
        self._data["Vertex 4 Z-coordinate"] = value

    @property
    def vertex_5_xcoordinate(self):
        """Get vertex_5_xcoordinate

        Returns:
            float: the value of `vertex_5_xcoordinate` or None if not set
        """
        return self._data["Vertex 5 X-coordinate"]

    @vertex_5_xcoordinate.setter
    def vertex_5_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_xcoordinate`'.format(value))
        self._data["Vertex 5 X-coordinate"] = value

    @property
    def vertex_5_ycoordinate(self):
        """Get vertex_5_ycoordinate

        Returns:
            float: the value of `vertex_5_ycoordinate` or None if not set
        """
        return self._data["Vertex 5 Y-coordinate"]

    @vertex_5_ycoordinate.setter
    def vertex_5_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_ycoordinate`'.format(value))
        self._data["Vertex 5 Y-coordinate"] = value

    @property
    def vertex_5_zcoordinate(self):
        """Get vertex_5_zcoordinate

        Returns:
            float: the value of `vertex_5_zcoordinate` or None if not set
        """
        return self._data["Vertex 5 Z-coordinate"]

    @vertex_5_zcoordinate.setter
    def vertex_5_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_zcoordinate`'.format(value))
        self._data["Vertex 5 Z-coordinate"] = value

    @property
    def vertex_6_xcoordinate(self):
        """Get vertex_6_xcoordinate

        Returns:
            float: the value of `vertex_6_xcoordinate` or None if not set
        """
        return self._data["Vertex 6 X-coordinate"]

    @vertex_6_xcoordinate.setter
    def vertex_6_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_xcoordinate`'.format(value))
        self._data["Vertex 6 X-coordinate"] = value

    @property
    def vertex_6_ycoordinate(self):
        """Get vertex_6_ycoordinate

        Returns:
            float: the value of `vertex_6_ycoordinate` or None if not set
        """
        return self._data["Vertex 6 Y-coordinate"]

    @vertex_6_ycoordinate.setter
    def vertex_6_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_ycoordinate`'.format(value))
        self._data["Vertex 6 Y-coordinate"] = value

    @property
    def vertex_6_zcoordinate(self):
        """Get vertex_6_zcoordinate

        Returns:
            float: the value of `vertex_6_zcoordinate` or None if not set
        """
        return self._data["Vertex 6 Z-coordinate"]

    @vertex_6_zcoordinate.setter
    def vertex_6_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_zcoordinate`'.format(value))
        self._data["Vertex 6 Z-coordinate"] = value

    @property
    def vertex_7_xcoordinate(self):
        """Get vertex_7_xcoordinate

        Returns:
            float: the value of `vertex_7_xcoordinate` or None if not set
        """
        return self._data["Vertex 7 X-coordinate"]

    @vertex_7_xcoordinate.setter
    def vertex_7_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_xcoordinate`'.format(value))
        self._data["Vertex 7 X-coordinate"] = value

    @property
    def vertex_7_ycoordinate(self):
        """Get vertex_7_ycoordinate

        Returns:
            float: the value of `vertex_7_ycoordinate` or None if not set
        """
        return self._data["Vertex 7 Y-coordinate"]

    @vertex_7_ycoordinate.setter
    def vertex_7_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_ycoordinate`'.format(value))
        self._data["Vertex 7 Y-coordinate"] = value

    @property
    def vertex_7_zcoordinate(self):
        """Get vertex_7_zcoordinate

        Returns:
            float: the value of `vertex_7_zcoordinate` or None if not set
        """
        return self._data["Vertex 7 Z-coordinate"]

    @vertex_7_zcoordinate.setter
    def vertex_7_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_zcoordinate`'.format(value))
        self._data["Vertex 7 Z-coordinate"] = value

    @property
    def vertex_8_xcoordinate(self):
        """Get vertex_8_xcoordinate

        Returns:
            float: the value of `vertex_8_xcoordinate` or None if not set
        """
        return self._data["Vertex 8 X-coordinate"]

    @vertex_8_xcoordinate.setter
    def vertex_8_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_xcoordinate`'.format(value))
        self._data["Vertex 8 X-coordinate"] = value

    @property
    def vertex_8_ycoordinate(self):
        """Get vertex_8_ycoordinate

        Returns:
            float: the value of `vertex_8_ycoordinate` or None if not set
        """
        return self._data["Vertex 8 Y-coordinate"]

    @vertex_8_ycoordinate.setter
    def vertex_8_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_ycoordinate`'.format(value))
        self._data["Vertex 8 Y-coordinate"] = value

    @property
    def vertex_8_zcoordinate(self):
        """Get vertex_8_zcoordinate

        Returns:
            float: the value of `vertex_8_zcoordinate` or None if not set
        """
        return self._data["Vertex 8 Z-coordinate"]

    @vertex_8_zcoordinate.setter
    def vertex_8_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_zcoordinate`'.format(value))
        self._data["Vertex 8 Z-coordinate"] = value

    @property
    def vertex_9_xcoordinate(self):
        """Get vertex_9_xcoordinate

        Returns:
            float: the value of `vertex_9_xcoordinate` or None if not set
        """
        return self._data["Vertex 9 X-coordinate"]

    @vertex_9_xcoordinate.setter
    def vertex_9_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_xcoordinate`'.format(value))
        self._data["Vertex 9 X-coordinate"] = value

    @property
    def vertex_9_ycoordinate(self):
        """Get vertex_9_ycoordinate

        Returns:
            float: the value of `vertex_9_ycoordinate` or None if not set
        """
        return self._data["Vertex 9 Y-coordinate"]

    @vertex_9_ycoordinate.setter
    def vertex_9_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_ycoordinate`'.format(value))
        self._data["Vertex 9 Y-coordinate"] = value

    @property
    def vertex_9_zcoordinate(self):
        """Get vertex_9_zcoordinate

        Returns:
            float: the value of `vertex_9_zcoordinate` or None if not set
        """
        return self._data["Vertex 9 Z-coordinate"]

    @vertex_9_zcoordinate.setter
    def vertex_9_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_zcoordinate`'.format(value))
        self._data["Vertex 9 Z-coordinate"] = value

    @property
    def vertex_10_xcoordinate(self):
        """Get vertex_10_xcoordinate

        Returns:
            float: the value of `vertex_10_xcoordinate` or None if not set
        """
        return self._data["Vertex 10 X-coordinate"]

    @vertex_10_xcoordinate.setter
    def vertex_10_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_xcoordinate`'.format(value))
        self._data["Vertex 10 X-coordinate"] = value

    @property
    def vertex_10_ycoordinate(self):
        """Get vertex_10_ycoordinate

        Returns:
            float: the value of `vertex_10_ycoordinate` or None if not set
        """
        return self._data["Vertex 10 Y-coordinate"]

    @vertex_10_ycoordinate.setter
    def vertex_10_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_ycoordinate`'.format(value))
        self._data["Vertex 10 Y-coordinate"] = value

    @property
    def vertex_10_zcoordinate(self):
        """Get vertex_10_zcoordinate

        Returns:
            float: the value of `vertex_10_zcoordinate` or None if not set
        """
        return self._data["Vertex 10 Z-coordinate"]

    @vertex_10_zcoordinate.setter
    def vertex_10_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_zcoordinate`'.format(value))
        self._data["Vertex 10 Z-coordinate"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class FloorDetailed(object):
    """ Corresponds to IDD object `Floor:Detailed`
        Allows for detailed entry of floor heat transfer surfaces.
    
    """
    internal_name = "Floor:Detailed"
    field_count = 39
    required_fields = ["Name", "Construction Name", "Zone Name", "Outside Boundary Condition", "Sun Exposure", "Wind Exposure", "Vertex 1 X-coordinate", "Vertex 1 Y-coordinate", "Vertex 1 Z-coordinate", "Vertex 2 X-coordinate", "Vertex 2 Y-coordinate", "Vertex 2 Z-coordinate", "Vertex 3 X-coordinate", "Vertex 3 Y-coordinate", "Vertex 3 Z-coordinate"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Floor:Detailed`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Zone Name"] = None
        self._data["Outside Boundary Condition"] = None
        self._data["Outside Boundary Condition Object"] = None
        self._data["Sun Exposure"] = None
        self._data["Wind Exposure"] = None
        self._data["View Factor to Ground"] = None
        self._data["Number of Vertices"] = None
        self._data["Vertex 1 X-coordinate"] = None
        self._data["Vertex 1 Y-coordinate"] = None
        self._data["Vertex 1 Z-coordinate"] = None
        self._data["Vertex 2 X-coordinate"] = None
        self._data["Vertex 2 Y-coordinate"] = None
        self._data["Vertex 2 Z-coordinate"] = None
        self._data["Vertex 3 X-coordinate"] = None
        self._data["Vertex 3 Y-coordinate"] = None
        self._data["Vertex 3 Z-coordinate"] = None
        self._data["Vertex 4 X-coordinate"] = None
        self._data["Vertex 4 Y-coordinate"] = None
        self._data["Vertex 4 Z-coordinate"] = None
        self._data["Vertex 5 X-coordinate"] = None
        self._data["Vertex 5 Y-coordinate"] = None
        self._data["Vertex 5 Z-coordinate"] = None
        self._data["Vertex 6 X-coordinate"] = None
        self._data["Vertex 6 Y-coordinate"] = None
        self._data["Vertex 6 Z-coordinate"] = None
        self._data["Vertex 7 X-coordinate"] = None
        self._data["Vertex 7 Y-coordinate"] = None
        self._data["Vertex 7 Z-coordinate"] = None
        self._data["Vertex 8 X-coordinate"] = None
        self._data["Vertex 8 Y-coordinate"] = None
        self._data["Vertex 8 Z-coordinate"] = None
        self._data["Vertex 9 X-coordinate"] = None
        self._data["Vertex 9 Y-coordinate"] = None
        self._data["Vertex 9 Z-coordinate"] = None
        self._data["Vertex 10 X-coordinate"] = None
        self._data["Vertex 10 Y-coordinate"] = None
        self._data["Vertex 10 Z-coordinate"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outside_boundary_condition = None
        else:
            self.outside_boundary_condition = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outside_boundary_condition_object = None
        else:
            self.outside_boundary_condition_object = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sun_exposure = None
        else:
            self.sun_exposure = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.wind_exposure = None
        else:
            self.wind_exposure = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.view_factor_to_ground = None
        else:
            self.view_factor_to_ground = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_vertices = None
        else:
            self.number_of_vertices = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_xcoordinate = None
        else:
            self.vertex_1_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_ycoordinate = None
        else:
            self.vertex_1_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_zcoordinate = None
        else:
            self.vertex_1_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_xcoordinate = None
        else:
            self.vertex_2_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_ycoordinate = None
        else:
            self.vertex_2_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_zcoordinate = None
        else:
            self.vertex_2_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_xcoordinate = None
        else:
            self.vertex_3_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_ycoordinate = None
        else:
            self.vertex_3_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_zcoordinate = None
        else:
            self.vertex_3_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_xcoordinate = None
        else:
            self.vertex_4_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_ycoordinate = None
        else:
            self.vertex_4_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_zcoordinate = None
        else:
            self.vertex_4_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_xcoordinate = None
        else:
            self.vertex_5_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_ycoordinate = None
        else:
            self.vertex_5_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_zcoordinate = None
        else:
            self.vertex_5_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_xcoordinate = None
        else:
            self.vertex_6_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_ycoordinate = None
        else:
            self.vertex_6_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_zcoordinate = None
        else:
            self.vertex_6_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_xcoordinate = None
        else:
            self.vertex_7_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_ycoordinate = None
        else:
            self.vertex_7_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_zcoordinate = None
        else:
            self.vertex_7_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_xcoordinate = None
        else:
            self.vertex_8_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_ycoordinate = None
        else:
            self.vertex_8_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_zcoordinate = None
        else:
            self.vertex_8_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_xcoordinate = None
        else:
            self.vertex_9_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_ycoordinate = None
        else:
            self.vertex_9_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_zcoordinate = None
        else:
            self.vertex_9_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_xcoordinate = None
        else:
            self.vertex_10_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_ycoordinate = None
        else:
            self.vertex_10_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_zcoordinate = None
        else:
            self.vertex_10_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Zone the surface is a part of

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def outside_boundary_condition(self):
        """Get outside_boundary_condition

        Returns:
            str: the value of `outside_boundary_condition` or None if not set
        """
        return self._data["Outside Boundary Condition"]

    @outside_boundary_condition.setter
    def outside_boundary_condition(self, value=None):
        """  Corresponds to IDD Field `Outside Boundary Condition`

        Args:
            value (str): value for IDD Field `Outside Boundary Condition`
                Accepted values are:
                      - Adiabatic
                      - Surface
                      - Zone
                      - Outdoors
                      - Ground
                      - GroundFCfactorMethod
                      - OtherSideCoefficients
                      - OtherSideConditionsModel
                      - GroundSlabPreprocessorAverage
                      - GroundSlabPreprocessorCore
                      - GroundSlabPreprocessorPerimeter
                      - GroundBasementPreprocessorAverageWall
                      - GroundBasementPreprocessorAverageFloor
                      - GroundBasementPreprocessorUpperWall
                      - GroundBasementPreprocessorLowerWall
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_boundary_condition`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_boundary_condition`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outside_boundary_condition`')
            vals = {}
            vals["adiabatic"] = "Adiabatic"
            vals["surface"] = "Surface"
            vals["zone"] = "Zone"
            vals["outdoors"] = "Outdoors"
            vals["ground"] = "Ground"
            vals["groundfcfactormethod"] = "GroundFCfactorMethod"
            vals["othersidecoefficients"] = "OtherSideCoefficients"
            vals["othersideconditionsmodel"] = "OtherSideConditionsModel"
            vals["groundslabpreprocessoraverage"] = "GroundSlabPreprocessorAverage"
            vals["groundslabpreprocessorcore"] = "GroundSlabPreprocessorCore"
            vals["groundslabpreprocessorperimeter"] = "GroundSlabPreprocessorPerimeter"
            vals["groundbasementpreprocessoraveragewall"] = "GroundBasementPreprocessorAverageWall"
            vals["groundbasementpreprocessoraveragefloor"] = "GroundBasementPreprocessorAverageFloor"
            vals["groundbasementpreprocessorupperwall"] = "GroundBasementPreprocessorUpperWall"
            vals["groundbasementpreprocessorlowerwall"] = "GroundBasementPreprocessorLowerWall"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `outside_boundary_condition`'.format(value))
            value = vals[value_lower]
        self._data["Outside Boundary Condition"] = value

    @property
    def outside_boundary_condition_object(self):
        """Get outside_boundary_condition_object

        Returns:
            str: the value of `outside_boundary_condition_object` or None if not set
        """
        return self._data["Outside Boundary Condition Object"]

    @outside_boundary_condition_object.setter
    def outside_boundary_condition_object(self, value=None):
        """  Corresponds to IDD Field `Outside Boundary Condition Object`
        Non-blank only if the field Outside Boundary Condition is Surface,
        Zone, OtherSideCoefficients or OtherSideConditionsModel
        If Surface, specify name of corresponding surface in adjacent zone or
        specify current surface name for internal partition separating like zones
        If Zone, specify the name of the corresponding zone and
        the program will generate the corresponding interzone surface
        If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients
        If OtherSideConditionsModel, specify name of SurfaceProperty:OtherSideConditionsModel

        Args:
            value (str): value for IDD Field `Outside Boundary Condition Object`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_boundary_condition_object`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_boundary_condition_object`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outside_boundary_condition_object`')
        self._data["Outside Boundary Condition Object"] = value

    @property
    def sun_exposure(self):
        """Get sun_exposure

        Returns:
            str: the value of `sun_exposure` or None if not set
        """
        return self._data["Sun Exposure"]

    @sun_exposure.setter
    def sun_exposure(self, value="SunExposed"):
        """  Corresponds to IDD Field `Sun Exposure`

        Args:
            value (str): value for IDD Field `Sun Exposure`
                Accepted values are:
                      - SunExposed
                      - NoSun
                Default value: SunExposed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `sun_exposure`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sun_exposure`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `sun_exposure`')
            vals = {}
            vals["sunexposed"] = "SunExposed"
            vals["nosun"] = "NoSun"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `sun_exposure`'.format(value))
            value = vals[value_lower]
        self._data["Sun Exposure"] = value

    @property
    def wind_exposure(self):
        """Get wind_exposure

        Returns:
            str: the value of `wind_exposure` or None if not set
        """
        return self._data["Wind Exposure"]

    @wind_exposure.setter
    def wind_exposure(self, value="WindExposed"):
        """  Corresponds to IDD Field `Wind Exposure`

        Args:
            value (str): value for IDD Field `Wind Exposure`
                Accepted values are:
                      - WindExposed
                      - NoWind
                Default value: WindExposed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `wind_exposure`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `wind_exposure`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `wind_exposure`')
            vals = {}
            vals["windexposed"] = "WindExposed"
            vals["nowind"] = "NoWind"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `wind_exposure`'.format(value))
            value = vals[value_lower]
        self._data["Wind Exposure"] = value

    @property
    def view_factor_to_ground(self):
        """Get view_factor_to_ground

        Returns:
            float: the value of `view_factor_to_ground` or None if not set
        """
        return self._data["View Factor to Ground"]

    @view_factor_to_ground.setter
    def view_factor_to_ground(self, value="autocalculate"):
        """  Corresponds to IDD Field `View Factor to Ground`
        From the exterior of the surface
        Unused if one uses the "reflections" options in Solar Distribution in Building input
        unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified.
        autocalculate will automatically calculate this value from the tilt of the surface

        Args:
            value (float or "Autocalculate"): value for IDD Field `View Factor to Ground`
                Default value: "autocalculate"
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["View Factor to Ground"] = "Autocalculate"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `view_factor_to_ground`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `view_factor_to_ground`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `view_factor_to_ground`')
        self._data["View Factor to Ground"] = value

    @property
    def number_of_vertices(self):
        """Get number_of_vertices

        Returns:
            float: the value of `number_of_vertices` or None if not set
        """
        return self._data["Number of Vertices"]

    @number_of_vertices.setter
    def number_of_vertices(self, value="autocalculate"):
        """  Corresponds to IDD Field `Number of Vertices`
        shown with 10 vertex coordinates -- extensible object
        "extensible" -- duplicate last set of x,y,z coordinates, renumbering please
        (and changing z terminator to a comma "," for all but last one which needs a semi-colon ";")
        vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates
        are "relative" to the Zone Origin.  If world, then building and zone origins are used
        for some internal calculations, but all coordinates are given in an "absolute" system.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Number of Vertices`
                Default value: "autocalculate"
                value >= 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Number of Vertices"] = "Autocalculate"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_vertices`'.format(value))
            if value < 3.0:
                raise ValueError('value need to be greater or equal 3.0 '
                                 'for field `number_of_vertices`')
        self._data["Number of Vertices"] = value

    @property
    def vertex_1_xcoordinate(self):
        """Get vertex_1_xcoordinate

        Returns:
            float: the value of `vertex_1_xcoordinate` or None if not set
        """
        return self._data["Vertex 1 X-coordinate"]

    @vertex_1_xcoordinate.setter
    def vertex_1_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_xcoordinate`'.format(value))
        self._data["Vertex 1 X-coordinate"] = value

    @property
    def vertex_1_ycoordinate(self):
        """Get vertex_1_ycoordinate

        Returns:
            float: the value of `vertex_1_ycoordinate` or None if not set
        """
        return self._data["Vertex 1 Y-coordinate"]

    @vertex_1_ycoordinate.setter
    def vertex_1_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_ycoordinate`'.format(value))
        self._data["Vertex 1 Y-coordinate"] = value

    @property
    def vertex_1_zcoordinate(self):
        """Get vertex_1_zcoordinate

        Returns:
            float: the value of `vertex_1_zcoordinate` or None if not set
        """
        return self._data["Vertex 1 Z-coordinate"]

    @vertex_1_zcoordinate.setter
    def vertex_1_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_zcoordinate`'.format(value))
        self._data["Vertex 1 Z-coordinate"] = value

    @property
    def vertex_2_xcoordinate(self):
        """Get vertex_2_xcoordinate

        Returns:
            float: the value of `vertex_2_xcoordinate` or None if not set
        """
        return self._data["Vertex 2 X-coordinate"]

    @vertex_2_xcoordinate.setter
    def vertex_2_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_xcoordinate`'.format(value))
        self._data["Vertex 2 X-coordinate"] = value

    @property
    def vertex_2_ycoordinate(self):
        """Get vertex_2_ycoordinate

        Returns:
            float: the value of `vertex_2_ycoordinate` or None if not set
        """
        return self._data["Vertex 2 Y-coordinate"]

    @vertex_2_ycoordinate.setter
    def vertex_2_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_ycoordinate`'.format(value))
        self._data["Vertex 2 Y-coordinate"] = value

    @property
    def vertex_2_zcoordinate(self):
        """Get vertex_2_zcoordinate

        Returns:
            float: the value of `vertex_2_zcoordinate` or None if not set
        """
        return self._data["Vertex 2 Z-coordinate"]

    @vertex_2_zcoordinate.setter
    def vertex_2_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_zcoordinate`'.format(value))
        self._data["Vertex 2 Z-coordinate"] = value

    @property
    def vertex_3_xcoordinate(self):
        """Get vertex_3_xcoordinate

        Returns:
            float: the value of `vertex_3_xcoordinate` or None if not set
        """
        return self._data["Vertex 3 X-coordinate"]

    @vertex_3_xcoordinate.setter
    def vertex_3_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_xcoordinate`'.format(value))
        self._data["Vertex 3 X-coordinate"] = value

    @property
    def vertex_3_ycoordinate(self):
        """Get vertex_3_ycoordinate

        Returns:
            float: the value of `vertex_3_ycoordinate` or None if not set
        """
        return self._data["Vertex 3 Y-coordinate"]

    @vertex_3_ycoordinate.setter
    def vertex_3_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_ycoordinate`'.format(value))
        self._data["Vertex 3 Y-coordinate"] = value

    @property
    def vertex_3_zcoordinate(self):
        """Get vertex_3_zcoordinate

        Returns:
            float: the value of `vertex_3_zcoordinate` or None if not set
        """
        return self._data["Vertex 3 Z-coordinate"]

    @vertex_3_zcoordinate.setter
    def vertex_3_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_zcoordinate`'.format(value))
        self._data["Vertex 3 Z-coordinate"] = value

    @property
    def vertex_4_xcoordinate(self):
        """Get vertex_4_xcoordinate

        Returns:
            float: the value of `vertex_4_xcoordinate` or None if not set
        """
        return self._data["Vertex 4 X-coordinate"]

    @vertex_4_xcoordinate.setter
    def vertex_4_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_xcoordinate`'.format(value))
        self._data["Vertex 4 X-coordinate"] = value

    @property
    def vertex_4_ycoordinate(self):
        """Get vertex_4_ycoordinate

        Returns:
            float: the value of `vertex_4_ycoordinate` or None if not set
        """
        return self._data["Vertex 4 Y-coordinate"]

    @vertex_4_ycoordinate.setter
    def vertex_4_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_ycoordinate`'.format(value))
        self._data["Vertex 4 Y-coordinate"] = value

    @property
    def vertex_4_zcoordinate(self):
        """Get vertex_4_zcoordinate

        Returns:
            float: the value of `vertex_4_zcoordinate` or None if not set
        """
        return self._data["Vertex 4 Z-coordinate"]

    @vertex_4_zcoordinate.setter
    def vertex_4_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_zcoordinate`'.format(value))
        self._data["Vertex 4 Z-coordinate"] = value

    @property
    def vertex_5_xcoordinate(self):
        """Get vertex_5_xcoordinate

        Returns:
            float: the value of `vertex_5_xcoordinate` or None if not set
        """
        return self._data["Vertex 5 X-coordinate"]

    @vertex_5_xcoordinate.setter
    def vertex_5_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_xcoordinate`'.format(value))
        self._data["Vertex 5 X-coordinate"] = value

    @property
    def vertex_5_ycoordinate(self):
        """Get vertex_5_ycoordinate

        Returns:
            float: the value of `vertex_5_ycoordinate` or None if not set
        """
        return self._data["Vertex 5 Y-coordinate"]

    @vertex_5_ycoordinate.setter
    def vertex_5_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_ycoordinate`'.format(value))
        self._data["Vertex 5 Y-coordinate"] = value

    @property
    def vertex_5_zcoordinate(self):
        """Get vertex_5_zcoordinate

        Returns:
            float: the value of `vertex_5_zcoordinate` or None if not set
        """
        return self._data["Vertex 5 Z-coordinate"]

    @vertex_5_zcoordinate.setter
    def vertex_5_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_zcoordinate`'.format(value))
        self._data["Vertex 5 Z-coordinate"] = value

    @property
    def vertex_6_xcoordinate(self):
        """Get vertex_6_xcoordinate

        Returns:
            float: the value of `vertex_6_xcoordinate` or None if not set
        """
        return self._data["Vertex 6 X-coordinate"]

    @vertex_6_xcoordinate.setter
    def vertex_6_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_xcoordinate`'.format(value))
        self._data["Vertex 6 X-coordinate"] = value

    @property
    def vertex_6_ycoordinate(self):
        """Get vertex_6_ycoordinate

        Returns:
            float: the value of `vertex_6_ycoordinate` or None if not set
        """
        return self._data["Vertex 6 Y-coordinate"]

    @vertex_6_ycoordinate.setter
    def vertex_6_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_ycoordinate`'.format(value))
        self._data["Vertex 6 Y-coordinate"] = value

    @property
    def vertex_6_zcoordinate(self):
        """Get vertex_6_zcoordinate

        Returns:
            float: the value of `vertex_6_zcoordinate` or None if not set
        """
        return self._data["Vertex 6 Z-coordinate"]

    @vertex_6_zcoordinate.setter
    def vertex_6_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_zcoordinate`'.format(value))
        self._data["Vertex 6 Z-coordinate"] = value

    @property
    def vertex_7_xcoordinate(self):
        """Get vertex_7_xcoordinate

        Returns:
            float: the value of `vertex_7_xcoordinate` or None if not set
        """
        return self._data["Vertex 7 X-coordinate"]

    @vertex_7_xcoordinate.setter
    def vertex_7_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_xcoordinate`'.format(value))
        self._data["Vertex 7 X-coordinate"] = value

    @property
    def vertex_7_ycoordinate(self):
        """Get vertex_7_ycoordinate

        Returns:
            float: the value of `vertex_7_ycoordinate` or None if not set
        """
        return self._data["Vertex 7 Y-coordinate"]

    @vertex_7_ycoordinate.setter
    def vertex_7_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_ycoordinate`'.format(value))
        self._data["Vertex 7 Y-coordinate"] = value

    @property
    def vertex_7_zcoordinate(self):
        """Get vertex_7_zcoordinate

        Returns:
            float: the value of `vertex_7_zcoordinate` or None if not set
        """
        return self._data["Vertex 7 Z-coordinate"]

    @vertex_7_zcoordinate.setter
    def vertex_7_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_zcoordinate`'.format(value))
        self._data["Vertex 7 Z-coordinate"] = value

    @property
    def vertex_8_xcoordinate(self):
        """Get vertex_8_xcoordinate

        Returns:
            float: the value of `vertex_8_xcoordinate` or None if not set
        """
        return self._data["Vertex 8 X-coordinate"]

    @vertex_8_xcoordinate.setter
    def vertex_8_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_xcoordinate`'.format(value))
        self._data["Vertex 8 X-coordinate"] = value

    @property
    def vertex_8_ycoordinate(self):
        """Get vertex_8_ycoordinate

        Returns:
            float: the value of `vertex_8_ycoordinate` or None if not set
        """
        return self._data["Vertex 8 Y-coordinate"]

    @vertex_8_ycoordinate.setter
    def vertex_8_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_ycoordinate`'.format(value))
        self._data["Vertex 8 Y-coordinate"] = value

    @property
    def vertex_8_zcoordinate(self):
        """Get vertex_8_zcoordinate

        Returns:
            float: the value of `vertex_8_zcoordinate` or None if not set
        """
        return self._data["Vertex 8 Z-coordinate"]

    @vertex_8_zcoordinate.setter
    def vertex_8_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_zcoordinate`'.format(value))
        self._data["Vertex 8 Z-coordinate"] = value

    @property
    def vertex_9_xcoordinate(self):
        """Get vertex_9_xcoordinate

        Returns:
            float: the value of `vertex_9_xcoordinate` or None if not set
        """
        return self._data["Vertex 9 X-coordinate"]

    @vertex_9_xcoordinate.setter
    def vertex_9_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_xcoordinate`'.format(value))
        self._data["Vertex 9 X-coordinate"] = value

    @property
    def vertex_9_ycoordinate(self):
        """Get vertex_9_ycoordinate

        Returns:
            float: the value of `vertex_9_ycoordinate` or None if not set
        """
        return self._data["Vertex 9 Y-coordinate"]

    @vertex_9_ycoordinate.setter
    def vertex_9_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_ycoordinate`'.format(value))
        self._data["Vertex 9 Y-coordinate"] = value

    @property
    def vertex_9_zcoordinate(self):
        """Get vertex_9_zcoordinate

        Returns:
            float: the value of `vertex_9_zcoordinate` or None if not set
        """
        return self._data["Vertex 9 Z-coordinate"]

    @vertex_9_zcoordinate.setter
    def vertex_9_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_zcoordinate`'.format(value))
        self._data["Vertex 9 Z-coordinate"] = value

    @property
    def vertex_10_xcoordinate(self):
        """Get vertex_10_xcoordinate

        Returns:
            float: the value of `vertex_10_xcoordinate` or None if not set
        """
        return self._data["Vertex 10 X-coordinate"]

    @vertex_10_xcoordinate.setter
    def vertex_10_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_xcoordinate`'.format(value))
        self._data["Vertex 10 X-coordinate"] = value

    @property
    def vertex_10_ycoordinate(self):
        """Get vertex_10_ycoordinate

        Returns:
            float: the value of `vertex_10_ycoordinate` or None if not set
        """
        return self._data["Vertex 10 Y-coordinate"]

    @vertex_10_ycoordinate.setter
    def vertex_10_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_ycoordinate`'.format(value))
        self._data["Vertex 10 Y-coordinate"] = value

    @property
    def vertex_10_zcoordinate(self):
        """Get vertex_10_zcoordinate

        Returns:
            float: the value of `vertex_10_zcoordinate` or None if not set
        """
        return self._data["Vertex 10 Z-coordinate"]

    @vertex_10_zcoordinate.setter
    def vertex_10_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_zcoordinate`'.format(value))
        self._data["Vertex 10 Z-coordinate"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class WallExterior(object):
    """ Corresponds to IDD object `Wall:Exterior`
        Allows for simplified entry of exterior walls.
        View Factor to Ground is automatically calculated.
    
    """
    internal_name = "Wall:Exterior"
    field_count = 10
    required_fields = ["Name", "Construction Name", "Zone Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Wall:Exterior`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Zone Name"] = None
        self._data["Azimuth Angle"] = None
        self._data["Tilt Angle"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Y Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Height"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.azimuth_angle = None
        else:
            self.azimuth_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tilt_angle = None
        else:
            self.tilt_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_y_coordinate = None
        else:
            self.starting_y_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.height = None
        else:
            self.height = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Zone the surface is a part of

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def azimuth_angle(self):
        """Get azimuth_angle

        Returns:
            float: the value of `azimuth_angle` or None if not set
        """
        return self._data["Azimuth Angle"]

    @azimuth_angle.setter
    def azimuth_angle(self, value=None):
        """  Corresponds to IDD Field `Azimuth Angle`
        Facing direction of outside of wall (S=180,N=0,E=90,W=270)

        Args:
            value (float): value for IDD Field `Azimuth Angle`
                Units: deg
                value >= 0.0
                value <= 360.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `azimuth_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `azimuth_angle`')
            if value > 360.0:
                raise ValueError('value need to be smaller 360.0 '
                                 'for field `azimuth_angle`')
        self._data["Azimuth Angle"] = value

    @property
    def tilt_angle(self):
        """Get tilt_angle

        Returns:
            float: the value of `tilt_angle` or None if not set
        """
        return self._data["Tilt Angle"]

    @tilt_angle.setter
    def tilt_angle(self, value=90.0):
        """  Corresponds to IDD Field `Tilt Angle`
        Walls are usually tilted 90 degrees

        Args:
            value (float): value for IDD Field `Tilt Angle`
                Units: deg
                Default value: 90.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tilt_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tilt_angle`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `tilt_angle`')
        self._data["Tilt Angle"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        Starting (x,y,z) coordinate is the Lower Left Corner of the Wall

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_y_coordinate(self):
        """Get starting_y_coordinate

        Returns:
            float: the value of `starting_y_coordinate` or None if not set
        """
        return self._data["Starting Y Coordinate"]

    @starting_y_coordinate.setter
    def starting_y_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Y Coordinate`

        Args:
            value (float): value for IDD Field `Starting Y Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_y_coordinate`'.format(value))
        self._data["Starting Y Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def height(self):
        """Get height

        Returns:
            float: the value of `height` or None if not set
        """
        return self._data["Height"]

    @height.setter
    def height(self, value=None):
        """  Corresponds to IDD Field `Height`

        Args:
            value (float): value for IDD Field `Height`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `height`'.format(value))
        self._data["Height"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class WallAdiabatic(object):
    """ Corresponds to IDD object `Wall:Adiabatic`
        Allows for simplified entry of interior walls.
    
    """
    internal_name = "Wall:Adiabatic"
    field_count = 10
    required_fields = ["Name", "Construction Name", "Zone Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Wall:Adiabatic`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Zone Name"] = None
        self._data["Azimuth Angle"] = None
        self._data["Tilt Angle"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Y Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Height"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.azimuth_angle = None
        else:
            self.azimuth_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tilt_angle = None
        else:
            self.tilt_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_y_coordinate = None
        else:
            self.starting_y_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.height = None
        else:
            self.height = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Zone the surface is a part of

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def azimuth_angle(self):
        """Get azimuth_angle

        Returns:
            float: the value of `azimuth_angle` or None if not set
        """
        return self._data["Azimuth Angle"]

    @azimuth_angle.setter
    def azimuth_angle(self, value=None):
        """  Corresponds to IDD Field `Azimuth Angle`
        Facing direction of outside of wall (S=180,N=0,E=90,W=270)

        Args:
            value (float): value for IDD Field `Azimuth Angle`
                Units: deg
                value >= 0.0
                value <= 360.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `azimuth_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `azimuth_angle`')
            if value > 360.0:
                raise ValueError('value need to be smaller 360.0 '
                                 'for field `azimuth_angle`')
        self._data["Azimuth Angle"] = value

    @property
    def tilt_angle(self):
        """Get tilt_angle

        Returns:
            float: the value of `tilt_angle` or None if not set
        """
        return self._data["Tilt Angle"]

    @tilt_angle.setter
    def tilt_angle(self, value=90.0):
        """  Corresponds to IDD Field `Tilt Angle`
        Walls are usually tilted 90 degrees

        Args:
            value (float): value for IDD Field `Tilt Angle`
                Units: deg
                Default value: 90.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tilt_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tilt_angle`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `tilt_angle`')
        self._data["Tilt Angle"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        Starting (x,y,z) coordinate is the Lower Left Corner of the Wall

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_y_coordinate(self):
        """Get starting_y_coordinate

        Returns:
            float: the value of `starting_y_coordinate` or None if not set
        """
        return self._data["Starting Y Coordinate"]

    @starting_y_coordinate.setter
    def starting_y_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Y Coordinate`

        Args:
            value (float): value for IDD Field `Starting Y Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_y_coordinate`'.format(value))
        self._data["Starting Y Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def height(self):
        """Get height

        Returns:
            float: the value of `height` or None if not set
        """
        return self._data["Height"]

    @height.setter
    def height(self, value=None):
        """  Corresponds to IDD Field `Height`

        Args:
            value (float): value for IDD Field `Height`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `height`'.format(value))
        self._data["Height"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class WallUnderground(object):
    """ Corresponds to IDD object `Wall:Underground`
        Allows for simplified entry of underground walls.
    
    """
    internal_name = "Wall:Underground"
    field_count = 10
    required_fields = ["Name", "Construction Name", "Zone Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Wall:Underground`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Zone Name"] = None
        self._data["Azimuth Angle"] = None
        self._data["Tilt Angle"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Y Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Height"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.azimuth_angle = None
        else:
            self.azimuth_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tilt_angle = None
        else:
            self.tilt_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_y_coordinate = None
        else:
            self.starting_y_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.height = None
        else:
            self.height = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file.
        If the construction is type "Construction:CfactorUndergroundWall",
        then the GroundFCfactorMethod will be used.

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Zone the surface is a part of

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def azimuth_angle(self):
        """Get azimuth_angle

        Returns:
            float: the value of `azimuth_angle` or None if not set
        """
        return self._data["Azimuth Angle"]

    @azimuth_angle.setter
    def azimuth_angle(self, value=None):
        """  Corresponds to IDD Field `Azimuth Angle`
        Facing direction of outside of wall (S=180,N=0,E=90,W=270)

        Args:
            value (float): value for IDD Field `Azimuth Angle`
                Units: deg
                value >= 0.0
                value <= 360.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `azimuth_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `azimuth_angle`')
            if value > 360.0:
                raise ValueError('value need to be smaller 360.0 '
                                 'for field `azimuth_angle`')
        self._data["Azimuth Angle"] = value

    @property
    def tilt_angle(self):
        """Get tilt_angle

        Returns:
            float: the value of `tilt_angle` or None if not set
        """
        return self._data["Tilt Angle"]

    @tilt_angle.setter
    def tilt_angle(self, value=90.0):
        """  Corresponds to IDD Field `Tilt Angle`
        Walls are usually tilted 90 degrees

        Args:
            value (float): value for IDD Field `Tilt Angle`
                Units: deg
                Default value: 90.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tilt_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tilt_angle`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `tilt_angle`')
        self._data["Tilt Angle"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        Starting (x,y,z) coordinate is the Lower Left Corner of the Wall

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_y_coordinate(self):
        """Get starting_y_coordinate

        Returns:
            float: the value of `starting_y_coordinate` or None if not set
        """
        return self._data["Starting Y Coordinate"]

    @starting_y_coordinate.setter
    def starting_y_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Y Coordinate`

        Args:
            value (float): value for IDD Field `Starting Y Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_y_coordinate`'.format(value))
        self._data["Starting Y Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def height(self):
        """Get height

        Returns:
            float: the value of `height` or None if not set
        """
        return self._data["Height"]

    @height.setter
    def height(self, value=None):
        """  Corresponds to IDD Field `Height`

        Args:
            value (float): value for IDD Field `Height`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `height`'.format(value))
        self._data["Height"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class WallInterzone(object):
    """ Corresponds to IDD object `Wall:Interzone`
        Allows for simplified entry of interzone walls (walls between zones).
    
    """
    internal_name = "Wall:Interzone"
    field_count = 11
    required_fields = ["Name", "Construction Name", "Zone Name", "Outside Boundary Condition Object"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Wall:Interzone`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Zone Name"] = None
        self._data["Outside Boundary Condition Object"] = None
        self._data["Azimuth Angle"] = None
        self._data["Tilt Angle"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Y Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Height"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outside_boundary_condition_object = None
        else:
            self.outside_boundary_condition_object = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.azimuth_angle = None
        else:
            self.azimuth_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tilt_angle = None
        else:
            self.tilt_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_y_coordinate = None
        else:
            self.starting_y_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.height = None
        else:
            self.height = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Zone for the inside of the surface

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def outside_boundary_condition_object(self):
        """Get outside_boundary_condition_object

        Returns:
            str: the value of `outside_boundary_condition_object` or None if not set
        """
        return self._data["Outside Boundary Condition Object"]

    @outside_boundary_condition_object.setter
    def outside_boundary_condition_object(self, value=None):
        """  Corresponds to IDD Field `Outside Boundary Condition Object`
        Specify a surface name in an adjacent zone for known interior walls.
        Specify a zone name of an adjacent zone to automatically generate
        the interior wall in the adjacent zone.

        Args:
            value (str): value for IDD Field `Outside Boundary Condition Object`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_boundary_condition_object`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_boundary_condition_object`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outside_boundary_condition_object`')
        self._data["Outside Boundary Condition Object"] = value

    @property
    def azimuth_angle(self):
        """Get azimuth_angle

        Returns:
            float: the value of `azimuth_angle` or None if not set
        """
        return self._data["Azimuth Angle"]

    @azimuth_angle.setter
    def azimuth_angle(self, value=None):
        """  Corresponds to IDD Field `Azimuth Angle`
        Facing direction of outside of wall (S=180,N=0,E=90,W=270)

        Args:
            value (float): value for IDD Field `Azimuth Angle`
                Units: deg
                value >= 0.0
                value <= 360.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `azimuth_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `azimuth_angle`')
            if value > 360.0:
                raise ValueError('value need to be smaller 360.0 '
                                 'for field `azimuth_angle`')
        self._data["Azimuth Angle"] = value

    @property
    def tilt_angle(self):
        """Get tilt_angle

        Returns:
            float: the value of `tilt_angle` or None if not set
        """
        return self._data["Tilt Angle"]

    @tilt_angle.setter
    def tilt_angle(self, value=90.0):
        """  Corresponds to IDD Field `Tilt Angle`
        Walls are usually tilted 90 degrees

        Args:
            value (float): value for IDD Field `Tilt Angle`
                Units: deg
                Default value: 90.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tilt_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tilt_angle`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `tilt_angle`')
        self._data["Tilt Angle"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        Starting (x,y,z) coordinate is the Lower Left Corner of the Wall

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_y_coordinate(self):
        """Get starting_y_coordinate

        Returns:
            float: the value of `starting_y_coordinate` or None if not set
        """
        return self._data["Starting Y Coordinate"]

    @starting_y_coordinate.setter
    def starting_y_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Y Coordinate`

        Args:
            value (float): value for IDD Field `Starting Y Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_y_coordinate`'.format(value))
        self._data["Starting Y Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def height(self):
        """Get height

        Returns:
            float: the value of `height` or None if not set
        """
        return self._data["Height"]

    @height.setter
    def height(self, value=None):
        """  Corresponds to IDD Field `Height`

        Args:
            value (float): value for IDD Field `Height`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `height`'.format(value))
        self._data["Height"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class Roof(object):
    """ Corresponds to IDD object `Roof`
        Allows for simplified entry of roofs (exterior).
        View Factor to Ground is automatically calculated.
    
    """
    internal_name = "Roof"
    field_count = 10
    required_fields = ["Name", "Construction Name", "Zone Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Roof`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Zone Name"] = None
        self._data["Azimuth Angle"] = None
        self._data["Tilt Angle"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Y Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Width"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.azimuth_angle = None
        else:
            self.azimuth_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tilt_angle = None
        else:
            self.tilt_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_y_coordinate = None
        else:
            self.starting_y_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.width = None
        else:
            self.width = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Zone the surface is a part of

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def azimuth_angle(self):
        """Get azimuth_angle

        Returns:
            float: the value of `azimuth_angle` or None if not set
        """
        return self._data["Azimuth Angle"]

    @azimuth_angle.setter
    def azimuth_angle(self, value=None):
        """  Corresponds to IDD Field `Azimuth Angle`
        Facing direction of outside of Roof

        Args:
            value (float): value for IDD Field `Azimuth Angle`
                Units: deg
                value >= 0.0
                value <= 360.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `azimuth_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `azimuth_angle`')
            if value > 360.0:
                raise ValueError('value need to be smaller 360.0 '
                                 'for field `azimuth_angle`')
        self._data["Azimuth Angle"] = value

    @property
    def tilt_angle(self):
        """Get tilt_angle

        Returns:
            float: the value of `tilt_angle` or None if not set
        """
        return self._data["Tilt Angle"]

    @tilt_angle.setter
    def tilt_angle(self, value=0.0):
        """  Corresponds to IDD Field `Tilt Angle`
        Flat Roofs are tilted 0 degrees

        Args:
            value (float): value for IDD Field `Tilt Angle`
                Units: deg
                Default value: 0.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tilt_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tilt_angle`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `tilt_angle`')
        self._data["Tilt Angle"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        If not Flat, Starting coordinate is the Lower Left Corner of the Roof

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_y_coordinate(self):
        """Get starting_y_coordinate

        Returns:
            float: the value of `starting_y_coordinate` or None if not set
        """
        return self._data["Starting Y Coordinate"]

    @starting_y_coordinate.setter
    def starting_y_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Y Coordinate`

        Args:
            value (float): value for IDD Field `Starting Y Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_y_coordinate`'.format(value))
        self._data["Starting Y Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`
        Along X Axis

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def width(self):
        """Get width

        Returns:
            float: the value of `width` or None if not set
        """
        return self._data["Width"]

    @width.setter
    def width(self, value=None):
        """  Corresponds to IDD Field `Width`
        Along Y Axis

        Args:
            value (float): value for IDD Field `Width`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `width`'.format(value))
        self._data["Width"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CeilingAdiabatic(object):
    """ Corresponds to IDD object `Ceiling:Adiabatic`
        Allows for simplified entry of interior ceilings.
    
    """
    internal_name = "Ceiling:Adiabatic"
    field_count = 10
    required_fields = ["Name", "Construction Name", "Zone Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Ceiling:Adiabatic`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Zone Name"] = None
        self._data["Azimuth Angle"] = None
        self._data["Tilt Angle"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Y Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Width"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.azimuth_angle = None
        else:
            self.azimuth_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tilt_angle = None
        else:
            self.tilt_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_y_coordinate = None
        else:
            self.starting_y_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.width = None
        else:
            self.width = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Zone the surface is a part of

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def azimuth_angle(self):
        """Get azimuth_angle

        Returns:
            float: the value of `azimuth_angle` or None if not set
        """
        return self._data["Azimuth Angle"]

    @azimuth_angle.setter
    def azimuth_angle(self, value=None):
        """  Corresponds to IDD Field `Azimuth Angle`
        Facing direction of outside of Ceiling

        Args:
            value (float): value for IDD Field `Azimuth Angle`
                Units: deg
                value >= 0.0
                value <= 360.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `azimuth_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `azimuth_angle`')
            if value > 360.0:
                raise ValueError('value need to be smaller 360.0 '
                                 'for field `azimuth_angle`')
        self._data["Azimuth Angle"] = value

    @property
    def tilt_angle(self):
        """Get tilt_angle

        Returns:
            float: the value of `tilt_angle` or None if not set
        """
        return self._data["Tilt Angle"]

    @tilt_angle.setter
    def tilt_angle(self, value=0.0):
        """  Corresponds to IDD Field `Tilt Angle`
        Ceilings are usually tilted 0 degrees

        Args:
            value (float): value for IDD Field `Tilt Angle`
                Units: deg
                Default value: 0.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tilt_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tilt_angle`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `tilt_angle`')
        self._data["Tilt Angle"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        If not Flat, Starting coordinate is the Lower Left Corner of the Ceiling

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_y_coordinate(self):
        """Get starting_y_coordinate

        Returns:
            float: the value of `starting_y_coordinate` or None if not set
        """
        return self._data["Starting Y Coordinate"]

    @starting_y_coordinate.setter
    def starting_y_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Y Coordinate`

        Args:
            value (float): value for IDD Field `Starting Y Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_y_coordinate`'.format(value))
        self._data["Starting Y Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`
        Along X Axis

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def width(self):
        """Get width

        Returns:
            float: the value of `width` or None if not set
        """
        return self._data["Width"]

    @width.setter
    def width(self, value=None):
        """  Corresponds to IDD Field `Width`
        Along Y Axis

        Args:
            value (float): value for IDD Field `Width`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `width`'.format(value))
        self._data["Width"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CeilingInterzone(object):
    """ Corresponds to IDD object `Ceiling:Interzone`
        Allows for simplified entry of ceilings using adjacent zone
        (interzone) heat transfer - adjacent surface should be a floor
    
    """
    internal_name = "Ceiling:Interzone"
    field_count = 11
    required_fields = ["Name", "Construction Name", "Zone Name", "Outside Boundary Condition Object"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Ceiling:Interzone`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Zone Name"] = None
        self._data["Outside Boundary Condition Object"] = None
        self._data["Azimuth Angle"] = None
        self._data["Tilt Angle"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Y Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Width"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outside_boundary_condition_object = None
        else:
            self.outside_boundary_condition_object = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.azimuth_angle = None
        else:
            self.azimuth_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tilt_angle = None
        else:
            self.tilt_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_y_coordinate = None
        else:
            self.starting_y_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.width = None
        else:
            self.width = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Zone for the inside of the surface

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def outside_boundary_condition_object(self):
        """Get outside_boundary_condition_object

        Returns:
            str: the value of `outside_boundary_condition_object` or None if not set
        """
        return self._data["Outside Boundary Condition Object"]

    @outside_boundary_condition_object.setter
    def outside_boundary_condition_object(self, value=None):
        """  Corresponds to IDD Field `Outside Boundary Condition Object`
        Specify a surface name in an adjacent zone for known interior floors
        Specify a zone name of an adjacent zone to automatically generate
        the interior floor in the adjacent zone.

        Args:
            value (str): value for IDD Field `Outside Boundary Condition Object`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_boundary_condition_object`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_boundary_condition_object`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outside_boundary_condition_object`')
        self._data["Outside Boundary Condition Object"] = value

    @property
    def azimuth_angle(self):
        """Get azimuth_angle

        Returns:
            float: the value of `azimuth_angle` or None if not set
        """
        return self._data["Azimuth Angle"]

    @azimuth_angle.setter
    def azimuth_angle(self, value=None):
        """  Corresponds to IDD Field `Azimuth Angle`
        Facing direction of outside of wall (S=180,N=0,E=90,W=270)

        Args:
            value (float): value for IDD Field `Azimuth Angle`
                Units: deg
                value >= 0.0
                value <= 360.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `azimuth_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `azimuth_angle`')
            if value > 360.0:
                raise ValueError('value need to be smaller 360.0 '
                                 'for field `azimuth_angle`')
        self._data["Azimuth Angle"] = value

    @property
    def tilt_angle(self):
        """Get tilt_angle

        Returns:
            float: the value of `tilt_angle` or None if not set
        """
        return self._data["Tilt Angle"]

    @tilt_angle.setter
    def tilt_angle(self, value=0.0):
        """  Corresponds to IDD Field `Tilt Angle`
        Ceilings are usually tilted 0 degrees

        Args:
            value (float): value for IDD Field `Tilt Angle`
                Units: deg
                Default value: 0.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tilt_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tilt_angle`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `tilt_angle`')
        self._data["Tilt Angle"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        If not Flat, should be Lower Left Corner (from outside)

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_y_coordinate(self):
        """Get starting_y_coordinate

        Returns:
            float: the value of `starting_y_coordinate` or None if not set
        """
        return self._data["Starting Y Coordinate"]

    @starting_y_coordinate.setter
    def starting_y_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Y Coordinate`

        Args:
            value (float): value for IDD Field `Starting Y Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_y_coordinate`'.format(value))
        self._data["Starting Y Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`
        Along X Axis

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def width(self):
        """Get width

        Returns:
            float: the value of `width` or None if not set
        """
        return self._data["Width"]

    @width.setter
    def width(self, value=None):
        """  Corresponds to IDD Field `Width`
        Along Y Axis

        Args:
            value (float): value for IDD Field `Width`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `width`'.format(value))
        self._data["Width"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class FloorGroundContact(object):
    """ Corresponds to IDD object `Floor:GroundContact`
        Allows for simplified entry of exterior floors with ground contact.
        View Factors to Ground is automatically calculated.
    
    """
    internal_name = "Floor:GroundContact"
    field_count = 10
    required_fields = ["Name", "Construction Name", "Zone Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Floor:GroundContact`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Zone Name"] = None
        self._data["Azimuth Angle"] = None
        self._data["Tilt Angle"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Y Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Width"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.azimuth_angle = None
        else:
            self.azimuth_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tilt_angle = None
        else:
            self.tilt_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_y_coordinate = None
        else:
            self.starting_y_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.width = None
        else:
            self.width = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file
        If the construction is type "Construction:FfactorGroundFloor",
        then the GroundFCfactorMethod will be used.

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Zone the surface is a part of

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def azimuth_angle(self):
        """Get azimuth_angle

        Returns:
            float: the value of `azimuth_angle` or None if not set
        """
        return self._data["Azimuth Angle"]

    @azimuth_angle.setter
    def azimuth_angle(self, value=None):
        """  Corresponds to IDD Field `Azimuth Angle`

        Args:
            value (float): value for IDD Field `Azimuth Angle`
                Units: deg
                value >= 0.0
                value <= 360.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `azimuth_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `azimuth_angle`')
            if value > 360.0:
                raise ValueError('value need to be smaller 360.0 '
                                 'for field `azimuth_angle`')
        self._data["Azimuth Angle"] = value

    @property
    def tilt_angle(self):
        """Get tilt_angle

        Returns:
            float: the value of `tilt_angle` or None if not set
        """
        return self._data["Tilt Angle"]

    @tilt_angle.setter
    def tilt_angle(self, value=180.0):
        """  Corresponds to IDD Field `Tilt Angle`
        Floors are usually tilted 180 degrees

        Args:
            value (float): value for IDD Field `Tilt Angle`
                Units: deg
                Default value: 180.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tilt_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tilt_angle`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `tilt_angle`')
        self._data["Tilt Angle"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        if not flat, should be lower left corner (from outside)

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_y_coordinate(self):
        """Get starting_y_coordinate

        Returns:
            float: the value of `starting_y_coordinate` or None if not set
        """
        return self._data["Starting Y Coordinate"]

    @starting_y_coordinate.setter
    def starting_y_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Y Coordinate`

        Args:
            value (float): value for IDD Field `Starting Y Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_y_coordinate`'.format(value))
        self._data["Starting Y Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`
        Along X Axis

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def width(self):
        """Get width

        Returns:
            float: the value of `width` or None if not set
        """
        return self._data["Width"]

    @width.setter
    def width(self, value=None):
        """  Corresponds to IDD Field `Width`
        Along Y Axis

        Args:
            value (float): value for IDD Field `Width`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `width`'.format(value))
        self._data["Width"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class FloorAdiabatic(object):
    """ Corresponds to IDD object `Floor:Adiabatic`
        Allows for simplified entry of exterior floors
        ignoring ground contact or interior floors.
        View Factor to Ground is automatically calculated.
    
    """
    internal_name = "Floor:Adiabatic"
    field_count = 10
    required_fields = ["Name", "Construction Name", "Zone Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Floor:Adiabatic`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Zone Name"] = None
        self._data["Azimuth Angle"] = None
        self._data["Tilt Angle"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Y Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Width"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.azimuth_angle = None
        else:
            self.azimuth_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tilt_angle = None
        else:
            self.tilt_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_y_coordinate = None
        else:
            self.starting_y_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.width = None
        else:
            self.width = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Zone the surface is a part of

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def azimuth_angle(self):
        """Get azimuth_angle

        Returns:
            float: the value of `azimuth_angle` or None if not set
        """
        return self._data["Azimuth Angle"]

    @azimuth_angle.setter
    def azimuth_angle(self, value=None):
        """  Corresponds to IDD Field `Azimuth Angle`

        Args:
            value (float): value for IDD Field `Azimuth Angle`
                Units: deg
                value >= 0.0
                value <= 360.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `azimuth_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `azimuth_angle`')
            if value > 360.0:
                raise ValueError('value need to be smaller 360.0 '
                                 'for field `azimuth_angle`')
        self._data["Azimuth Angle"] = value

    @property
    def tilt_angle(self):
        """Get tilt_angle

        Returns:
            float: the value of `tilt_angle` or None if not set
        """
        return self._data["Tilt Angle"]

    @tilt_angle.setter
    def tilt_angle(self, value=180.0):
        """  Corresponds to IDD Field `Tilt Angle`
        Floors are usually tilted 180 degrees

        Args:
            value (float): value for IDD Field `Tilt Angle`
                Units: deg
                Default value: 180.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tilt_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tilt_angle`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `tilt_angle`')
        self._data["Tilt Angle"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        if not flat, should be lower left corner (from outside)

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_y_coordinate(self):
        """Get starting_y_coordinate

        Returns:
            float: the value of `starting_y_coordinate` or None if not set
        """
        return self._data["Starting Y Coordinate"]

    @starting_y_coordinate.setter
    def starting_y_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Y Coordinate`

        Args:
            value (float): value for IDD Field `Starting Y Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_y_coordinate`'.format(value))
        self._data["Starting Y Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`
        Along X Axis

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def width(self):
        """Get width

        Returns:
            float: the value of `width` or None if not set
        """
        return self._data["Width"]

    @width.setter
    def width(self, value=None):
        """  Corresponds to IDD Field `Width`
        Along Y Axis

        Args:
            value (float): value for IDD Field `Width`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `width`'.format(value))
        self._data["Width"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class FloorInterzone(object):
    """ Corresponds to IDD object `Floor:Interzone`
        Allows for simplified entry of floors using adjacent zone
        (interzone) heat transfer - adjacent surface should be a ceiling.
    
    """
    internal_name = "Floor:Interzone"
    field_count = 11
    required_fields = ["Name", "Construction Name", "Zone Name", "Outside Boundary Condition Object"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Floor:Interzone`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Zone Name"] = None
        self._data["Outside Boundary Condition Object"] = None
        self._data["Azimuth Angle"] = None
        self._data["Tilt Angle"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Y Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Width"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outside_boundary_condition_object = None
        else:
            self.outside_boundary_condition_object = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.azimuth_angle = None
        else:
            self.azimuth_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tilt_angle = None
        else:
            self.tilt_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_y_coordinate = None
        else:
            self.starting_y_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.width = None
        else:
            self.width = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Zone for the inside of the surface

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def outside_boundary_condition_object(self):
        """Get outside_boundary_condition_object

        Returns:
            str: the value of `outside_boundary_condition_object` or None if not set
        """
        return self._data["Outside Boundary Condition Object"]

    @outside_boundary_condition_object.setter
    def outside_boundary_condition_object(self, value=None):
        """  Corresponds to IDD Field `Outside Boundary Condition Object`
        Specify a surface name in an adjacent zone for known interior ceilings.
        Specify a zone name of an adjacent zone to automatically generate
        the interior ceiling in the adjacent zone.

        Args:
            value (str): value for IDD Field `Outside Boundary Condition Object`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_boundary_condition_object`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_boundary_condition_object`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outside_boundary_condition_object`')
        self._data["Outside Boundary Condition Object"] = value

    @property
    def azimuth_angle(self):
        """Get azimuth_angle

        Returns:
            float: the value of `azimuth_angle` or None if not set
        """
        return self._data["Azimuth Angle"]

    @azimuth_angle.setter
    def azimuth_angle(self, value=None):
        """  Corresponds to IDD Field `Azimuth Angle`

        Args:
            value (float): value for IDD Field `Azimuth Angle`
                Units: deg
                value >= 0.0
                value <= 360.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `azimuth_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `azimuth_angle`')
            if value > 360.0:
                raise ValueError('value need to be smaller 360.0 '
                                 'for field `azimuth_angle`')
        self._data["Azimuth Angle"] = value

    @property
    def tilt_angle(self):
        """Get tilt_angle

        Returns:
            float: the value of `tilt_angle` or None if not set
        """
        return self._data["Tilt Angle"]

    @tilt_angle.setter
    def tilt_angle(self, value=180.0):
        """  Corresponds to IDD Field `Tilt Angle`
        Floors are usually tilted 180 degrees

        Args:
            value (float): value for IDD Field `Tilt Angle`
                Units: deg
                Default value: 180.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tilt_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tilt_angle`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `tilt_angle`')
        self._data["Tilt Angle"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        If not Flat, should be Lower Left Corner (from outside)

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_y_coordinate(self):
        """Get starting_y_coordinate

        Returns:
            float: the value of `starting_y_coordinate` or None if not set
        """
        return self._data["Starting Y Coordinate"]

    @starting_y_coordinate.setter
    def starting_y_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Y Coordinate`

        Args:
            value (float): value for IDD Field `Starting Y Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_y_coordinate`'.format(value))
        self._data["Starting Y Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`
        Along X Axis

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def width(self):
        """Get width

        Returns:
            float: the value of `width` or None if not set
        """
        return self._data["Width"]

    @width.setter
    def width(self, value=None):
        """  Corresponds to IDD Field `Width`
        Along Y Axis

        Args:
            value (float): value for IDD Field `Width`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `width`'.format(value))
        self._data["Width"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class FenestrationSurfaceDetailed(object):
    """ Corresponds to IDD object `FenestrationSurface:Detailed`
        Allows for detailed entry of subsurfaces
        (windows, doors, glass doors, tubular daylighting devices).
    
    """
    internal_name = "FenestrationSurface:Detailed"
    field_count = 22
    required_fields = ["Name", "Surface Type", "Construction Name", "Building Surface Name", "Vertex 1 X-coordinate", "Vertex 1 Y-coordinate", "Vertex 1 Z-coordinate", "Vertex 2 X-coordinate", "Vertex 2 Y-coordinate", "Vertex 2 Z-coordinate", "Vertex 3 X-coordinate", "Vertex 3 Y-coordinate", "Vertex 3 Z-coordinate"]

    def __init__(self):
        """ Init data dictionary object for IDD  `FenestrationSurface:Detailed`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Surface Type"] = None
        self._data["Construction Name"] = None
        self._data["Building Surface Name"] = None
        self._data["Outside Boundary Condition Object"] = None
        self._data["View Factor to Ground"] = None
        self._data["Shading Control Name"] = None
        self._data["Frame and Divider Name"] = None
        self._data["Multiplier"] = None
        self._data["Number of Vertices"] = None
        self._data["Vertex 1 X-coordinate"] = None
        self._data["Vertex 1 Y-coordinate"] = None
        self._data["Vertex 1 Z-coordinate"] = None
        self._data["Vertex 2 X-coordinate"] = None
        self._data["Vertex 2 Y-coordinate"] = None
        self._data["Vertex 2 Z-coordinate"] = None
        self._data["Vertex 3 X-coordinate"] = None
        self._data["Vertex 3 Y-coordinate"] = None
        self._data["Vertex 3 Z-coordinate"] = None
        self._data["Vertex 4 X-coordinate"] = None
        self._data["Vertex 4 Y-coordinate"] = None
        self._data["Vertex 4 Z-coordinate"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_type = None
        else:
            self.surface_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.building_surface_name = None
        else:
            self.building_surface_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outside_boundary_condition_object = None
        else:
            self.outside_boundary_condition_object = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.view_factor_to_ground = None
        else:
            self.view_factor_to_ground = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.shading_control_name = None
        else:
            self.shading_control_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.frame_and_divider_name = None
        else:
            self.frame_and_divider_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.multiplier = None
        else:
            self.multiplier = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_vertices = None
        else:
            self.number_of_vertices = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_xcoordinate = None
        else:
            self.vertex_1_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_ycoordinate = None
        else:
            self.vertex_1_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_zcoordinate = None
        else:
            self.vertex_1_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_xcoordinate = None
        else:
            self.vertex_2_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_ycoordinate = None
        else:
            self.vertex_2_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_zcoordinate = None
        else:
            self.vertex_2_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_xcoordinate = None
        else:
            self.vertex_3_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_ycoordinate = None
        else:
            self.vertex_3_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_zcoordinate = None
        else:
            self.vertex_3_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_xcoordinate = None
        else:
            self.vertex_4_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_ycoordinate = None
        else:
            self.vertex_4_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_zcoordinate = None
        else:
            self.vertex_4_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def surface_type(self):
        """Get surface_type

        Returns:
            str: the value of `surface_type` or None if not set
        """
        return self._data["Surface Type"]

    @surface_type.setter
    def surface_type(self, value=None):
        """  Corresponds to IDD Field `Surface Type`

        Args:
            value (str): value for IDD Field `Surface Type`
                Accepted values are:
                      - Window
                      - Door
                      - GlassDoor
                      - TubularDaylightDome
                      - TubularDaylightDiffuser
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `surface_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `surface_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `surface_type`')
            vals = {}
            vals["window"] = "Window"
            vals["door"] = "Door"
            vals["glassdoor"] = "GlassDoor"
            vals["tubulardaylightdome"] = "TubularDaylightDome"
            vals["tubulardaylightdiffuser"] = "TubularDaylightDiffuser"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `surface_type`'.format(value))
            value = vals[value_lower]
        self._data["Surface Type"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def building_surface_name(self):
        """Get building_surface_name

        Returns:
            str: the value of `building_surface_name` or None if not set
        """
        return self._data["Building Surface Name"]

    @building_surface_name.setter
    def building_surface_name(self, value=None):
        """  Corresponds to IDD Field `Building Surface Name`

        Args:
            value (str): value for IDD Field `Building Surface Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `building_surface_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `building_surface_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `building_surface_name`')
        self._data["Building Surface Name"] = value

    @property
    def outside_boundary_condition_object(self):
        """Get outside_boundary_condition_object

        Returns:
            str: the value of `outside_boundary_condition_object` or None if not set
        """
        return self._data["Outside Boundary Condition Object"]

    @outside_boundary_condition_object.setter
    def outside_boundary_condition_object(self, value=None):
        """  Corresponds to IDD Field `Outside Boundary Condition Object`
        Non-blank only if base surface field Outside Boundary Condition is
        Surface or OtherSideCoefficients
        If Base Surface's Surface, specify name of corresponding subsurface in adjacent zone or
        specify current subsurface name for internal partition separating like zones
        If OtherSideCoefficients, specify name of SurfaceProperty:OtherSideCoefficients
        or leave blank to inherit Base Surface's OtherSide Coefficients

        Args:
            value (str): value for IDD Field `Outside Boundary Condition Object`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_boundary_condition_object`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_boundary_condition_object`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outside_boundary_condition_object`')
        self._data["Outside Boundary Condition Object"] = value

    @property
    def view_factor_to_ground(self):
        """Get view_factor_to_ground

        Returns:
            float: the value of `view_factor_to_ground` or None if not set
        """
        return self._data["View Factor to Ground"]

    @view_factor_to_ground.setter
    def view_factor_to_ground(self, value="autocalculate"):
        """  Corresponds to IDD Field `View Factor to Ground`
        From the exterior of the surface
        Unused if one uses the "reflections" options in Solar Distribution in Building input
        unless a DaylightingDevice:Shelf or DaylightingDevice:Tubular object has been specified.
        autocalculate will automatically calculate this value from the tilt of the surface

        Args:
            value (float or "Autocalculate"): value for IDD Field `View Factor to Ground`
                Default value: "autocalculate"
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["View Factor to Ground"] = "Autocalculate"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `view_factor_to_ground`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `view_factor_to_ground`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `view_factor_to_ground`')
        self._data["View Factor to Ground"] = value

    @property
    def shading_control_name(self):
        """Get shading_control_name

        Returns:
            str: the value of `shading_control_name` or None if not set
        """
        return self._data["Shading Control Name"]

    @shading_control_name.setter
    def shading_control_name(self, value=None):
        """  Corresponds to IDD Field `Shading Control Name`
        enter the name of a WindowProperty:ShadingControl object
        used for windows and glass doors only
        If not specified, window or glass door has no shading (blind, roller shade, etc.)

        Args:
            value (str): value for IDD Field `Shading Control Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `shading_control_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `shading_control_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `shading_control_name`')
        self._data["Shading Control Name"] = value

    @property
    def frame_and_divider_name(self):
        """Get frame_and_divider_name

        Returns:
            str: the value of `frame_and_divider_name` or None if not set
        """
        return self._data["Frame and Divider Name"]

    @frame_and_divider_name.setter
    def frame_and_divider_name(self, value=None):
        """  Corresponds to IDD Field `Frame and Divider Name`
        Enter the name of a WindowProperty:FrameAndDivider object
        Used only for exterior windows (rectangular) and glass doors.
        Unused for triangular windows.
        If not specified (blank), window or glass door has no frame or divider
        and no beam solar reflection from reveal surfaces.

        Args:
            value (str): value for IDD Field `Frame and Divider Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `frame_and_divider_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `frame_and_divider_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `frame_and_divider_name`')
        self._data["Frame and Divider Name"] = value

    @property
    def multiplier(self):
        """Get multiplier

        Returns:
            float: the value of `multiplier` or None if not set
        """
        return self._data["Multiplier"]

    @multiplier.setter
    def multiplier(self, value=1.0):
        """  Corresponds to IDD Field `Multiplier`
        Used only for Surface Type = WINDOW, GLASSDOOR or DOOR
        Non-integer values will be truncated to integer

        Args:
            value (float): value for IDD Field `Multiplier`
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `multiplier`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `multiplier`')
        self._data["Multiplier"] = value

    @property
    def number_of_vertices(self):
        """Get number_of_vertices

        Returns:
            float: the value of `number_of_vertices` or None if not set
        """
        return self._data["Number of Vertices"]

    @number_of_vertices.setter
    def number_of_vertices(self, value="autocalculate"):
        """  Corresponds to IDD Field `Number of Vertices`
        vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates
        are "relative" to the Zone Origin.  If world, then building and zone origins are used
        for some internal calculations, but all coordinates are given in an "absolute" system.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Number of Vertices`
                Default value: "autocalculate"
                value >= 3.0
                value <= 4.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Number of Vertices"] = "Autocalculate"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_vertices`'.format(value))
            if value < 3.0:
                raise ValueError('value need to be greater or equal 3.0 '
                                 'for field `number_of_vertices`')
            if value > 4.0:
                raise ValueError('value need to be smaller 4.0 '
                                 'for field `number_of_vertices`')
        self._data["Number of Vertices"] = value

    @property
    def vertex_1_xcoordinate(self):
        """Get vertex_1_xcoordinate

        Returns:
            float: the value of `vertex_1_xcoordinate` or None if not set
        """
        return self._data["Vertex 1 X-coordinate"]

    @vertex_1_xcoordinate.setter
    def vertex_1_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_xcoordinate`'.format(value))
        self._data["Vertex 1 X-coordinate"] = value

    @property
    def vertex_1_ycoordinate(self):
        """Get vertex_1_ycoordinate

        Returns:
            float: the value of `vertex_1_ycoordinate` or None if not set
        """
        return self._data["Vertex 1 Y-coordinate"]

    @vertex_1_ycoordinate.setter
    def vertex_1_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_ycoordinate`'.format(value))
        self._data["Vertex 1 Y-coordinate"] = value

    @property
    def vertex_1_zcoordinate(self):
        """Get vertex_1_zcoordinate

        Returns:
            float: the value of `vertex_1_zcoordinate` or None if not set
        """
        return self._data["Vertex 1 Z-coordinate"]

    @vertex_1_zcoordinate.setter
    def vertex_1_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_zcoordinate`'.format(value))
        self._data["Vertex 1 Z-coordinate"] = value

    @property
    def vertex_2_xcoordinate(self):
        """Get vertex_2_xcoordinate

        Returns:
            float: the value of `vertex_2_xcoordinate` or None if not set
        """
        return self._data["Vertex 2 X-coordinate"]

    @vertex_2_xcoordinate.setter
    def vertex_2_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_xcoordinate`'.format(value))
        self._data["Vertex 2 X-coordinate"] = value

    @property
    def vertex_2_ycoordinate(self):
        """Get vertex_2_ycoordinate

        Returns:
            float: the value of `vertex_2_ycoordinate` or None if not set
        """
        return self._data["Vertex 2 Y-coordinate"]

    @vertex_2_ycoordinate.setter
    def vertex_2_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_ycoordinate`'.format(value))
        self._data["Vertex 2 Y-coordinate"] = value

    @property
    def vertex_2_zcoordinate(self):
        """Get vertex_2_zcoordinate

        Returns:
            float: the value of `vertex_2_zcoordinate` or None if not set
        """
        return self._data["Vertex 2 Z-coordinate"]

    @vertex_2_zcoordinate.setter
    def vertex_2_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_zcoordinate`'.format(value))
        self._data["Vertex 2 Z-coordinate"] = value

    @property
    def vertex_3_xcoordinate(self):
        """Get vertex_3_xcoordinate

        Returns:
            float: the value of `vertex_3_xcoordinate` or None if not set
        """
        return self._data["Vertex 3 X-coordinate"]

    @vertex_3_xcoordinate.setter
    def vertex_3_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_xcoordinate`'.format(value))
        self._data["Vertex 3 X-coordinate"] = value

    @property
    def vertex_3_ycoordinate(self):
        """Get vertex_3_ycoordinate

        Returns:
            float: the value of `vertex_3_ycoordinate` or None if not set
        """
        return self._data["Vertex 3 Y-coordinate"]

    @vertex_3_ycoordinate.setter
    def vertex_3_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_ycoordinate`'.format(value))
        self._data["Vertex 3 Y-coordinate"] = value

    @property
    def vertex_3_zcoordinate(self):
        """Get vertex_3_zcoordinate

        Returns:
            float: the value of `vertex_3_zcoordinate` or None if not set
        """
        return self._data["Vertex 3 Z-coordinate"]

    @vertex_3_zcoordinate.setter
    def vertex_3_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_zcoordinate`'.format(value))
        self._data["Vertex 3 Z-coordinate"] = value

    @property
    def vertex_4_xcoordinate(self):
        """Get vertex_4_xcoordinate

        Returns:
            float: the value of `vertex_4_xcoordinate` or None if not set
        """
        return self._data["Vertex 4 X-coordinate"]

    @vertex_4_xcoordinate.setter
    def vertex_4_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 X-coordinate`
        Not used for triangles

        Args:
            value (float): value for IDD Field `Vertex 4 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_xcoordinate`'.format(value))
        self._data["Vertex 4 X-coordinate"] = value

    @property
    def vertex_4_ycoordinate(self):
        """Get vertex_4_ycoordinate

        Returns:
            float: the value of `vertex_4_ycoordinate` or None if not set
        """
        return self._data["Vertex 4 Y-coordinate"]

    @vertex_4_ycoordinate.setter
    def vertex_4_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 Y-coordinate`
        Not used for triangles

        Args:
            value (float): value for IDD Field `Vertex 4 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_ycoordinate`'.format(value))
        self._data["Vertex 4 Y-coordinate"] = value

    @property
    def vertex_4_zcoordinate(self):
        """Get vertex_4_zcoordinate

        Returns:
            float: the value of `vertex_4_zcoordinate` or None if not set
        """
        return self._data["Vertex 4 Z-coordinate"]

    @vertex_4_zcoordinate.setter
    def vertex_4_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 Z-coordinate`
        Not used for triangles

        Args:
            value (float): value for IDD Field `Vertex 4 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_zcoordinate`'.format(value))
        self._data["Vertex 4 Z-coordinate"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class Window(object):
    """ Corresponds to IDD object `Window`
        Allows for simplified entry of Windows.
    
    """
    internal_name = "Window"
    field_count = 10
    required_fields = ["Name", "Construction Name", "Building Surface Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Window`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Building Surface Name"] = None
        self._data["Shading Control Name"] = None
        self._data["Frame and Divider Name"] = None
        self._data["Multiplier"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Height"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.building_surface_name = None
        else:
            self.building_surface_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.shading_control_name = None
        else:
            self.shading_control_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.frame_and_divider_name = None
        else:
            self.frame_and_divider_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.multiplier = None
        else:
            self.multiplier = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.height = None
        else:
            self.height = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def building_surface_name(self):
        """Get building_surface_name

        Returns:
            str: the value of `building_surface_name` or None if not set
        """
        return self._data["Building Surface Name"]

    @building_surface_name.setter
    def building_surface_name(self, value=None):
        """  Corresponds to IDD Field `Building Surface Name`
        Name of Surface (Wall, usually) the Window is on (i.e., Base Surface)
        Window assumes the azimuth and tilt angles of the surface it is on.

        Args:
            value (str): value for IDD Field `Building Surface Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `building_surface_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `building_surface_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `building_surface_name`')
        self._data["Building Surface Name"] = value

    @property
    def shading_control_name(self):
        """Get shading_control_name

        Returns:
            str: the value of `shading_control_name` or None if not set
        """
        return self._data["Shading Control Name"]

    @shading_control_name.setter
    def shading_control_name(self, value=None):
        """  Corresponds to IDD Field `Shading Control Name`
        enter the name of a WindowProperty:ShadingControl object
        used for windows and glass doors only
        If not specified, window or glass door has no shading (blind, roller shade, etc.)

        Args:
            value (str): value for IDD Field `Shading Control Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `shading_control_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `shading_control_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `shading_control_name`')
        self._data["Shading Control Name"] = value

    @property
    def frame_and_divider_name(self):
        """Get frame_and_divider_name

        Returns:
            str: the value of `frame_and_divider_name` or None if not set
        """
        return self._data["Frame and Divider Name"]

    @frame_and_divider_name.setter
    def frame_and_divider_name(self, value=None):
        """  Corresponds to IDD Field `Frame and Divider Name`
        Enter the name of a WindowProperty:FrameAndDivider object
        Used only for exterior windows (rectangular) and glass doors.
        Unused for triangular windows.
        If not specified (blank), window or glass door has no frame or divider
        and no beam solar reflection from reveal surfaces.

        Args:
            value (str): value for IDD Field `Frame and Divider Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `frame_and_divider_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `frame_and_divider_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `frame_and_divider_name`')
        self._data["Frame and Divider Name"] = value

    @property
    def multiplier(self):
        """Get multiplier

        Returns:
            float: the value of `multiplier` or None if not set
        """
        return self._data["Multiplier"]

    @multiplier.setter
    def multiplier(self, value=1.0):
        """  Corresponds to IDD Field `Multiplier`
        Used only for Surface Type = WINDOW, GLASSDOOR or DOOR
        Non-integer values will be truncated to integer

        Args:
            value (float): value for IDD Field `Multiplier`
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `multiplier`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `multiplier`')
        self._data["Multiplier"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        Window starting coordinate is specified relative to the Base Surface origin.

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`
        How far up the wall the Window starts. (in 2-d, this would be a Y Coordinate)

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def height(self):
        """Get height

        Returns:
            float: the value of `height` or None if not set
        """
        return self._data["Height"]

    @height.setter
    def height(self, value=None):
        """  Corresponds to IDD Field `Height`

        Args:
            value (float): value for IDD Field `Height`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `height`'.format(value))
        self._data["Height"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class Door(object):
    """ Corresponds to IDD object `Door`
        Allows for simplified entry of opaque Doors.
    
    """
    internal_name = "Door"
    field_count = 8
    required_fields = ["Name", "Construction Name", "Building Surface Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Door`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Building Surface Name"] = None
        self._data["Multiplier"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Height"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.building_surface_name = None
        else:
            self.building_surface_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.multiplier = None
        else:
            self.multiplier = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.height = None
        else:
            self.height = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def building_surface_name(self):
        """Get building_surface_name

        Returns:
            str: the value of `building_surface_name` or None if not set
        """
        return self._data["Building Surface Name"]

    @building_surface_name.setter
    def building_surface_name(self, value=None):
        """  Corresponds to IDD Field `Building Surface Name`
        Name of Surface (Wall, usually) the Door is on (i.e., Base Surface)
        Door assumes the azimuth and tilt angles of the surface it is on.

        Args:
            value (str): value for IDD Field `Building Surface Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `building_surface_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `building_surface_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `building_surface_name`')
        self._data["Building Surface Name"] = value

    @property
    def multiplier(self):
        """Get multiplier

        Returns:
            float: the value of `multiplier` or None if not set
        """
        return self._data["Multiplier"]

    @multiplier.setter
    def multiplier(self, value=1.0):
        """  Corresponds to IDD Field `Multiplier`
        Used only for Surface Type = WINDOW, GLASSDOOR or DOOR
        Non-integer values will be truncated to integer

        Args:
            value (float): value for IDD Field `Multiplier`
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `multiplier`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `multiplier`')
        self._data["Multiplier"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        Door starting coordinate is specified relative to the Base Surface origin.

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`
        How far up the wall the Door starts. (in 2-d, this would be a Y Coordinate)

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def height(self):
        """Get height

        Returns:
            float: the value of `height` or None if not set
        """
        return self._data["Height"]

    @height.setter
    def height(self, value=None):
        """  Corresponds to IDD Field `Height`

        Args:
            value (float): value for IDD Field `Height`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `height`'.format(value))
        self._data["Height"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GlazedDoor(object):
    """ Corresponds to IDD object `GlazedDoor`
        Allows for simplified entry of glass Doors.
    
    """
    internal_name = "GlazedDoor"
    field_count = 10
    required_fields = ["Name", "Construction Name", "Building Surface Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `GlazedDoor`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Building Surface Name"] = None
        self._data["Shading Control Name"] = None
        self._data["Frame and Divider Name"] = None
        self._data["Multiplier"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Height"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.building_surface_name = None
        else:
            self.building_surface_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.shading_control_name = None
        else:
            self.shading_control_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.frame_and_divider_name = None
        else:
            self.frame_and_divider_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.multiplier = None
        else:
            self.multiplier = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.height = None
        else:
            self.height = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def building_surface_name(self):
        """Get building_surface_name

        Returns:
            str: the value of `building_surface_name` or None if not set
        """
        return self._data["Building Surface Name"]

    @building_surface_name.setter
    def building_surface_name(self, value=None):
        """  Corresponds to IDD Field `Building Surface Name`
        Name of Surface (Wall, usually) the Door is on (i.e., Base Surface)
        Door assumes the azimuth and tilt angles of the surface it is on.

        Args:
            value (str): value for IDD Field `Building Surface Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `building_surface_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `building_surface_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `building_surface_name`')
        self._data["Building Surface Name"] = value

    @property
    def shading_control_name(self):
        """Get shading_control_name

        Returns:
            str: the value of `shading_control_name` or None if not set
        """
        return self._data["Shading Control Name"]

    @shading_control_name.setter
    def shading_control_name(self, value=None):
        """  Corresponds to IDD Field `Shading Control Name`
        enter the name of a WindowProperty:ShadingControl object
        used for windows and glass doors only
        If not specified, window or glass door has no shading (blind, roller shade, etc.)

        Args:
            value (str): value for IDD Field `Shading Control Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `shading_control_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `shading_control_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `shading_control_name`')
        self._data["Shading Control Name"] = value

    @property
    def frame_and_divider_name(self):
        """Get frame_and_divider_name

        Returns:
            str: the value of `frame_and_divider_name` or None if not set
        """
        return self._data["Frame and Divider Name"]

    @frame_and_divider_name.setter
    def frame_and_divider_name(self, value=None):
        """  Corresponds to IDD Field `Frame and Divider Name`
        Enter the name of a WindowProperty:FrameAndDivider object
        Used only for exterior windows (rectangular) and glass doors.
        Unused for triangular windows.
        If not specified (blank), window or glass door has no frame or divider
        and no beam solar reflection from reveal surfaces.

        Args:
            value (str): value for IDD Field `Frame and Divider Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `frame_and_divider_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `frame_and_divider_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `frame_and_divider_name`')
        self._data["Frame and Divider Name"] = value

    @property
    def multiplier(self):
        """Get multiplier

        Returns:
            float: the value of `multiplier` or None if not set
        """
        return self._data["Multiplier"]

    @multiplier.setter
    def multiplier(self, value=1.0):
        """  Corresponds to IDD Field `Multiplier`
        Used only for Surface Type = WINDOW, GLASSDOOR or DOOR
        Non-integer values will be truncated to integer

        Args:
            value (float): value for IDD Field `Multiplier`
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `multiplier`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `multiplier`')
        self._data["Multiplier"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        Door starting coordinate is specified relative to the Base Surface origin.

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`
        How far up the wall the Door starts. (in 2-d, this would be a Y Coordinate)

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def height(self):
        """Get height

        Returns:
            float: the value of `height` or None if not set
        """
        return self._data["Height"]

    @height.setter
    def height(self, value=None):
        """  Corresponds to IDD Field `Height`

        Args:
            value (float): value for IDD Field `Height`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `height`'.format(value))
        self._data["Height"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class WindowInterzone(object):
    """ Corresponds to IDD object `Window:Interzone`
        Allows for simplified entry of interzone windows (adjacent to
        other zones).
    
    """
    internal_name = "Window:Interzone"
    field_count = 9
    required_fields = ["Name", "Construction Name", "Building Surface Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Window:Interzone`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Building Surface Name"] = None
        self._data["Outside Boundary Condition Object"] = None
        self._data["Multiplier"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Height"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.building_surface_name = None
        else:
            self.building_surface_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outside_boundary_condition_object = None
        else:
            self.outside_boundary_condition_object = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.multiplier = None
        else:
            self.multiplier = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.height = None
        else:
            self.height = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def building_surface_name(self):
        """Get building_surface_name

        Returns:
            str: the value of `building_surface_name` or None if not set
        """
        return self._data["Building Surface Name"]

    @building_surface_name.setter
    def building_surface_name(self, value=None):
        """  Corresponds to IDD Field `Building Surface Name`
        Name of Surface (Wall, usually) the Window is on (i.e., Base Surface)
        Window assumes the azimuth and tilt angles of the surface it is on.

        Args:
            value (str): value for IDD Field `Building Surface Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `building_surface_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `building_surface_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `building_surface_name`')
        self._data["Building Surface Name"] = value

    @property
    def outside_boundary_condition_object(self):
        """Get outside_boundary_condition_object

        Returns:
            str: the value of `outside_boundary_condition_object` or None if not set
        """
        return self._data["Outside Boundary Condition Object"]

    @outside_boundary_condition_object.setter
    def outside_boundary_condition_object(self, value=None):
        """  Corresponds to IDD Field `Outside Boundary Condition Object`
        Specify a surface name in an adjacent zone for known interior windows.
        Specify a zone name of an adjacent zone to automatically generate
        the interior window in the adjacent zone.
        a blank field will set up a Window in an adjacent zone
        (same zone as adjacent to base surface)

        Args:
            value (str): value for IDD Field `Outside Boundary Condition Object`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_boundary_condition_object`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_boundary_condition_object`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outside_boundary_condition_object`')
        self._data["Outside Boundary Condition Object"] = value

    @property
    def multiplier(self):
        """Get multiplier

        Returns:
            float: the value of `multiplier` or None if not set
        """
        return self._data["Multiplier"]

    @multiplier.setter
    def multiplier(self, value=1.0):
        """  Corresponds to IDD Field `Multiplier`
        Used only for Surface Type = WINDOW, GLASSDOOR or DOOR
        Non-integer values will be truncated to integer

        Args:
            value (float): value for IDD Field `Multiplier`
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `multiplier`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `multiplier`')
        self._data["Multiplier"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        Window starting coordinate is specified relative to the Base Surface origin.

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`
        How far up the wall the Window starts. (in 2-d, this would be a Y Coordinate)

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def height(self):
        """Get height

        Returns:
            float: the value of `height` or None if not set
        """
        return self._data["Height"]

    @height.setter
    def height(self, value=None):
        """  Corresponds to IDD Field `Height`

        Args:
            value (float): value for IDD Field `Height`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `height`'.format(value))
        self._data["Height"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class DoorInterzone(object):
    """ Corresponds to IDD object `Door:Interzone`
        Allows for simplified entry of interzone (opaque interior) doors (adjacent to
        other zones).
    
    """
    internal_name = "Door:Interzone"
    field_count = 9
    required_fields = ["Name", "Construction Name", "Building Surface Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Door:Interzone`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Building Surface Name"] = None
        self._data["Outside Boundary Condition Object"] = None
        self._data["Multiplier"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Height"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.building_surface_name = None
        else:
            self.building_surface_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outside_boundary_condition_object = None
        else:
            self.outside_boundary_condition_object = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.multiplier = None
        else:
            self.multiplier = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.height = None
        else:
            self.height = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def building_surface_name(self):
        """Get building_surface_name

        Returns:
            str: the value of `building_surface_name` or None if not set
        """
        return self._data["Building Surface Name"]

    @building_surface_name.setter
    def building_surface_name(self, value=None):
        """  Corresponds to IDD Field `Building Surface Name`
        Name of Surface (Wall, usually) the Door is on (i.e., Base Surface)
        Door assumes the azimuth and tilt angles of the surface it is on.

        Args:
            value (str): value for IDD Field `Building Surface Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `building_surface_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `building_surface_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `building_surface_name`')
        self._data["Building Surface Name"] = value

    @property
    def outside_boundary_condition_object(self):
        """Get outside_boundary_condition_object

        Returns:
            str: the value of `outside_boundary_condition_object` or None if not set
        """
        return self._data["Outside Boundary Condition Object"]

    @outside_boundary_condition_object.setter
    def outside_boundary_condition_object(self, value=None):
        """  Corresponds to IDD Field `Outside Boundary Condition Object`
        Specify a surface name in an adjacent zone for known interior doors.
        Specify a zone name of an adjacent zone to automatically generate
        the interior door in the adjacent zone.
        a blank field will set up a Window in an adjacent zone
        (same zone as adjacent to base surface)

        Args:
            value (str): value for IDD Field `Outside Boundary Condition Object`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_boundary_condition_object`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_boundary_condition_object`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outside_boundary_condition_object`')
        self._data["Outside Boundary Condition Object"] = value

    @property
    def multiplier(self):
        """Get multiplier

        Returns:
            float: the value of `multiplier` or None if not set
        """
        return self._data["Multiplier"]

    @multiplier.setter
    def multiplier(self, value=1.0):
        """  Corresponds to IDD Field `Multiplier`
        Used only for Surface Type = WINDOW, GLASSDOOR or DOOR
        Non-integer values will be truncated to integer

        Args:
            value (float): value for IDD Field `Multiplier`
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `multiplier`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `multiplier`')
        self._data["Multiplier"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        Door starting coordinate is specified relative to the Base Surface origin.

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`
        How far up the wall the Door starts. (in 2-d, this would be a Y Coordinate)

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def height(self):
        """Get height

        Returns:
            float: the value of `height` or None if not set
        """
        return self._data["Height"]

    @height.setter
    def height(self, value=None):
        """  Corresponds to IDD Field `Height`

        Args:
            value (float): value for IDD Field `Height`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `height`'.format(value))
        self._data["Height"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class GlazedDoorInterzone(object):
    """ Corresponds to IDD object `GlazedDoor:Interzone`
        Allows for simplified entry of interzone (glass interior) doors (adjacent to
        other zones).
    
    """
    internal_name = "GlazedDoor:Interzone"
    field_count = 9
    required_fields = ["Name", "Construction Name", "Building Surface Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `GlazedDoor:Interzone`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Building Surface Name"] = None
        self._data["Outside Boundary Condition Object"] = None
        self._data["Multiplier"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Height"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.building_surface_name = None
        else:
            self.building_surface_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outside_boundary_condition_object = None
        else:
            self.outside_boundary_condition_object = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.multiplier = None
        else:
            self.multiplier = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.height = None
        else:
            self.height = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def building_surface_name(self):
        """Get building_surface_name

        Returns:
            str: the value of `building_surface_name` or None if not set
        """
        return self._data["Building Surface Name"]

    @building_surface_name.setter
    def building_surface_name(self, value=None):
        """  Corresponds to IDD Field `Building Surface Name`
        Name of Surface (Wall, usually) the Door is on (i.e., Base Surface)
        Door assumes the azimuth and tilt angles of the surface it is on.

        Args:
            value (str): value for IDD Field `Building Surface Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `building_surface_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `building_surface_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `building_surface_name`')
        self._data["Building Surface Name"] = value

    @property
    def outside_boundary_condition_object(self):
        """Get outside_boundary_condition_object

        Returns:
            str: the value of `outside_boundary_condition_object` or None if not set
        """
        return self._data["Outside Boundary Condition Object"]

    @outside_boundary_condition_object.setter
    def outside_boundary_condition_object(self, value=None):
        """  Corresponds to IDD Field `Outside Boundary Condition Object`
        Specify a surface name in an adjacent zone for known interior doors.
        Specify a zone name of an adjacent zone to automatically generate
        the interior door in the adjacent zone.
        a blank field will set up a Window in an adjacent zone
        (same zone as adjacent to base surface)

        Args:
            value (str): value for IDD Field `Outside Boundary Condition Object`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `outside_boundary_condition_object`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `outside_boundary_condition_object`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `outside_boundary_condition_object`')
        self._data["Outside Boundary Condition Object"] = value

    @property
    def multiplier(self):
        """Get multiplier

        Returns:
            float: the value of `multiplier` or None if not set
        """
        return self._data["Multiplier"]

    @multiplier.setter
    def multiplier(self, value=1.0):
        """  Corresponds to IDD Field `Multiplier`
        Used only for Surface Type = WINDOW, GLASSDOOR or DOOR
        Non-integer values will be truncated to integer

        Args:
            value (float): value for IDD Field `Multiplier`
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `multiplier`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `multiplier`')
        self._data["Multiplier"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        Door starting coordinate is specified relative to the Base Surface origin.

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`
        How far up the wall the Door starts. (in 2-d, this would be a Y Coordinate)

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def height(self):
        """Get height

        Returns:
            float: the value of `height` or None if not set
        """
        return self._data["Height"]

    @height.setter
    def height(self, value=None):
        """  Corresponds to IDD Field `Height`

        Args:
            value (float): value for IDD Field `Height`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `height`'.format(value))
        self._data["Height"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class WindowPropertyShadingControl(object):
    """ Corresponds to IDD object `WindowProperty:ShadingControl`
        Specifies the type, location, and controls for window shades, window blinds, and
        switchable glazing. Referenced by the surface objects for exterior windows and glass
        doors (ref: FenestrationSurface:Detailed, Window, and GlazedDoor).
    
    """
    internal_name = "WindowProperty:ShadingControl"
    field_count = 12
    required_fields = ["Name", "Shading Type", "Shading Control Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `WindowProperty:ShadingControl`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Shading Type"] = None
        self._data["Construction with Shading Name"] = None
        self._data["Shading Control Type"] = None
        self._data["Schedule Name"] = None
        self._data["Setpoint"] = None
        self._data["Shading Control Is Scheduled"] = None
        self._data["Glare Control Is Active"] = None
        self._data["Shading Device Material Name"] = None
        self._data["Type of Slat Angle Control for Blinds"] = None
        self._data["Slat Angle Schedule Name"] = None
        self._data["Setpoint 2"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.shading_type = None
        else:
            self.shading_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_with_shading_name = None
        else:
            self.construction_with_shading_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.shading_control_type = None
        else:
            self.shading_control_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.schedule_name = None
        else:
            self.schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.setpoint = None
        else:
            self.setpoint = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.shading_control_is_scheduled = None
        else:
            self.shading_control_is_scheduled = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.glare_control_is_active = None
        else:
            self.glare_control_is_active = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.shading_device_material_name = None
        else:
            self.shading_device_material_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.type_of_slat_angle_control_for_blinds = None
        else:
            self.type_of_slat_angle_control_for_blinds = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.slat_angle_schedule_name = None
        else:
            self.slat_angle_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.setpoint_2 = None
        else:
            self.setpoint_2 = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        Referenced by surfaces that are exterior windows
        Not used by interzone windows

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def shading_type(self):
        """Get shading_type

        Returns:
            str: the value of `shading_type` or None if not set
        """
        return self._data["Shading Type"]

    @shading_type.setter
    def shading_type(self, value=None):
        """  Corresponds to IDD Field `Shading Type`

        Args:
            value (str): value for IDD Field `Shading Type`
                Accepted values are:
                      - InteriorShade
                      - ExteriorShade
                      - ExteriorScreen
                      - InteriorBlind
                      - ExteriorBlind
                      - BetweenGlassShade
                      - BetweenGlassBlind
                      - SwitchableGlazing
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `shading_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `shading_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `shading_type`')
            vals = {}
            vals["interiorshade"] = "InteriorShade"
            vals["exteriorshade"] = "ExteriorShade"
            vals["exteriorscreen"] = "ExteriorScreen"
            vals["interiorblind"] = "InteriorBlind"
            vals["exteriorblind"] = "ExteriorBlind"
            vals["betweenglassshade"] = "BetweenGlassShade"
            vals["betweenglassblind"] = "BetweenGlassBlind"
            vals["switchableglazing"] = "SwitchableGlazing"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `shading_type`'.format(value))
            value = vals[value_lower]
        self._data["Shading Type"] = value

    @property
    def construction_with_shading_name(self):
        """Get construction_with_shading_name

        Returns:
            str: the value of `construction_with_shading_name` or None if not set
        """
        return self._data["Construction with Shading Name"]

    @construction_with_shading_name.setter
    def construction_with_shading_name(self, value=None):
        """  Corresponds to IDD Field `Construction with Shading Name`
        Required if Shading Type = SwitchableGlazing
        Required if Shading Type = interior or exterior shade or blind, or exterior screen, and
        "Shading Device Material Name" is not specified.
        If both "Construction with Shading Name" and "Shading Device Material Name" are entered,
        the former takes precedence.

        Args:
            value (str): value for IDD Field `Construction with Shading Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_with_shading_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_with_shading_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_with_shading_name`')
        self._data["Construction with Shading Name"] = value

    @property
    def shading_control_type(self):
        """Get shading_control_type

        Returns:
            str: the value of `shading_control_type` or None if not set
        """
        return self._data["Shading Control Type"]

    @shading_control_type.setter
    def shading_control_type(self, value=None):
        """  Corresponds to IDD Field `Shading Control Type`
        OnIfScheduleAllows requires that Schedule Name be specified and
        Shading Control Is Scheduled = Yes.
        AlwaysOn, AlwaysOff and OnIfScheduleAllows are the only valid control types for ExteriorScreen.
        The following six control types are used primarily to reduce
        zone cooling load due to window solar gain
        Following entry should be used only if Shading Type = SwitchableGlazing
        and window is in a daylit zone
        The following three control types are used to reduce zone Heating load. They can be
        used with any Shading Type but are most appropriate for opaque interior or exterior
        shades with high insulating value ("opaque movable insulation")
        The following two control types are used to reduce zone heating and cooling load.
        They can be used with any Shading Type but are most appropriate for translucent interior
        or exterior shades with high insulating value ("translucent movable insulation")
        The following two control types are used to reduce zone Cooling load.
        They can be used with any Shading Type but are most appropriate for interior
        or exterior blinds,interior or exterior shades with low insulating value, or
        switchable glazing
        The following four control types require that both Setpoint and Setpoint2 be specified
        Setpoint will correspond to outdoor air temp or zone air temp (deg C)
        Setpoint2 will correspond to solar on window or horizontal solar (W/m2)

        Args:
            value (str): value for IDD Field `Shading Control Type`
                Accepted values are:
                      - AlwaysOn
                      - AlwaysOff
                      - OnIfScheduleAllows
                      - OnIfHighSolarOnWindow
                      - OnIfHighHorizontalSolar
                      - OnIfHighOutdoorAirTemperature
                      - OnIfHighZoneAirTemperature
                      - OnIfHighZoneCooling
                      - OnIfHighGlare
                      - MeetDaylightIlluminanceSetpoint
                      - OnNightIfLowOutdoorTempAndOffDay
                      - OnNightIfLowInsideTempAndOffDay
                      - OnNightIfHeatingAndOffDay
                      - OnNightIfLowOutdoorTempAndOnDayIfCooling
                      - OnNightIfHeatingAndOnDayIfCooling
                      - OffNightAndOnDayIfCoolingAndHighSolarOnWindow
                      - OnNightAndOnDayIfCoolingAndHighSolarOnWindow
                      - OnIfHighOutdoorAirTempAndHighSolarOnWindow
                      - OnIfHighOutdoorAirTempAndHighHorizontalSolar
                      - OnIfHighZoneAirTempAndHighSolarOnWindow
                      - OnIfHighZoneAirTempAndHighHorizontalSolar
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `shading_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `shading_control_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `shading_control_type`')
            vals = {}
            vals["alwayson"] = "AlwaysOn"
            vals["alwaysoff"] = "AlwaysOff"
            vals["onifscheduleallows"] = "OnIfScheduleAllows"
            vals["onifhighsolaronwindow"] = "OnIfHighSolarOnWindow"
            vals["onifhighhorizontalsolar"] = "OnIfHighHorizontalSolar"
            vals["onifhighoutdoorairtemperature"] = "OnIfHighOutdoorAirTemperature"
            vals["onifhighzoneairtemperature"] = "OnIfHighZoneAirTemperature"
            vals["onifhighzonecooling"] = "OnIfHighZoneCooling"
            vals["onifhighglare"] = "OnIfHighGlare"
            vals["meetdaylightilluminancesetpoint"] = "MeetDaylightIlluminanceSetpoint"
            vals["onnightiflowoutdoortempandoffday"] = "OnNightIfLowOutdoorTempAndOffDay"
            vals["onnightiflowinsidetempandoffday"] = "OnNightIfLowInsideTempAndOffDay"
            vals["onnightifheatingandoffday"] = "OnNightIfHeatingAndOffDay"
            vals["onnightiflowoutdoortempandondayifcooling"] = "OnNightIfLowOutdoorTempAndOnDayIfCooling"
            vals["onnightifheatingandondayifcooling"] = "OnNightIfHeatingAndOnDayIfCooling"
            vals["offnightandondayifcoolingandhighsolaronwindow"] = "OffNightAndOnDayIfCoolingAndHighSolarOnWindow"
            vals["onnightandondayifcoolingandhighsolaronwindow"] = "OnNightAndOnDayIfCoolingAndHighSolarOnWindow"
            vals["onifhighoutdoorairtempandhighsolaronwindow"] = "OnIfHighOutdoorAirTempAndHighSolarOnWindow"
            vals["onifhighoutdoorairtempandhighhorizontalsolar"] = "OnIfHighOutdoorAirTempAndHighHorizontalSolar"
            vals["onifhighzoneairtempandhighsolaronwindow"] = "OnIfHighZoneAirTempAndHighSolarOnWindow"
            vals["onifhighzoneairtempandhighhorizontalsolar"] = "OnIfHighZoneAirTempAndHighHorizontalSolar"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `shading_control_type`'.format(value))
            value = vals[value_lower]
        self._data["Shading Control Type"] = value

    @property
    def schedule_name(self):
        """Get schedule_name

        Returns:
            str: the value of `schedule_name` or None if not set
        """
        return self._data["Schedule Name"]

    @schedule_name.setter
    def schedule_name(self, value=None):
        """  Corresponds to IDD Field `Schedule Name`
        Required if Shading Control Is Scheduled = Yes.
        If schedule value = 1, shading control is active, i.e., shading can take place only
        if the control test passes. If schedule value = 0, shading is off whether or not
        the control test passes. Schedule Name is required if Shading Control Is Scheduled = Yes.
        If Schedule Name is not specified, shading control is assumed to be active at all times.

        Args:
            value (str): value for IDD Field `Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `schedule_name`')
        self._data["Schedule Name"] = value

    @property
    def setpoint(self):
        """Get setpoint

        Returns:
            float: the value of `setpoint` or None if not set
        """
        return self._data["Setpoint"]

    @setpoint.setter
    def setpoint(self, value=None):
        """  Corresponds to IDD Field `Setpoint`
        W/m2 for solar-based controls, W for cooling- or heating-based controls,
        deg C for temperature-based controls.
        Unused for Shading Control Type = AlwaysOn, AlwaysOff, OnIfScheduleAllows,
        OnIfHighGlare, Glare, and DaylightIlluminance

        Args:
            value (float): value for IDD Field `Setpoint`
                Units: W/m2, W or deg C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `setpoint`'.format(value))
        self._data["Setpoint"] = value

    @property
    def shading_control_is_scheduled(self):
        """Get shading_control_is_scheduled

        Returns:
            str: the value of `shading_control_is_scheduled` or None if not set
        """
        return self._data["Shading Control Is Scheduled"]

    @shading_control_is_scheduled.setter
    def shading_control_is_scheduled(self, value="No"):
        """  Corresponds to IDD Field `Shading Control Is Scheduled`
        If Yes, Schedule Name is required; if No, Schedule Name is not used.
        Shading Control Is Scheduled = Yes is required if Shading Control Type = OnIfScheduleAllows.

        Args:
            value (str): value for IDD Field `Shading Control Is Scheduled`
                Accepted values are:
                      - No
                      - Yes
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `shading_control_is_scheduled`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `shading_control_is_scheduled`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `shading_control_is_scheduled`')
            vals = {}
            vals["no"] = "No"
            vals["yes"] = "Yes"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `shading_control_is_scheduled`'.format(value))
            value = vals[value_lower]
        self._data["Shading Control Is Scheduled"] = value

    @property
    def glare_control_is_active(self):
        """Get glare_control_is_active

        Returns:
            str: the value of `glare_control_is_active` or None if not set
        """
        return self._data["Glare Control Is Active"]

    @glare_control_is_active.setter
    def glare_control_is_active(self, value="No"):
        """  Corresponds to IDD Field `Glare Control Is Active`
        If Yes and window is in a daylit zone, shading is on if zone's discomfort glare index exceeds
        the maximum discomfort glare index specified in the Daylighting object referenced by the zone.
        The glare test is OR'ed with the test specified by Shading Control Type.
        Glare Control Is Active = Yes is required if Shading Control Type = OnIfHighGlare.

        Args:
            value (str): value for IDD Field `Glare Control Is Active`
                Accepted values are:
                      - No
                      - Yes
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `glare_control_is_active`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `glare_control_is_active`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `glare_control_is_active`')
            vals = {}
            vals["no"] = "No"
            vals["yes"] = "Yes"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `glare_control_is_active`'.format(value))
            value = vals[value_lower]
        self._data["Glare Control Is Active"] = value

    @property
    def shading_device_material_name(self):
        """Get shading_device_material_name

        Returns:
            str: the value of `shading_device_material_name` or None if not set
        """
        return self._data["Shading Device Material Name"]

    @shading_device_material_name.setter
    def shading_device_material_name(self, value=None):
        """  Corresponds to IDD Field `Shading Device Material Name`
        Enter the name of a WindowMaterial:Shade, WindowMaterial:Screen or WindowMaterial:Blind object.
        Required if "Construction with Shading Name" is not specified.
        Not used if Shading Control Type = SwitchableGlazing, BetweenGlassShade, or BetweenGlassBlind.
        If both "Construction with Shading Name" and "Shading Device Material Name" are entered,
        the former takes precedence.

        Args:
            value (str): value for IDD Field `Shading Device Material Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `shading_device_material_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `shading_device_material_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `shading_device_material_name`')
        self._data["Shading Device Material Name"] = value

    @property
    def type_of_slat_angle_control_for_blinds(self):
        """Get type_of_slat_angle_control_for_blinds

        Returns:
            str: the value of `type_of_slat_angle_control_for_blinds` or None if not set
        """
        return self._data["Type of Slat Angle Control for Blinds"]

    @type_of_slat_angle_control_for_blinds.setter
    def type_of_slat_angle_control_for_blinds(self, value="FixedSlatAngle"):
        """  Corresponds to IDD Field `Type of Slat Angle Control for Blinds`
        Used only if Shading Type = InteriorBlind, ExteriorBlind or BetweenGlassBlind.
        If choice is ScheduledSlatAngle then Slat Angle Schedule Name is required.

        Args:
            value (str): value for IDD Field `Type of Slat Angle Control for Blinds`
                Accepted values are:
                      - FixedSlatAngle
                      - ScheduledSlatAngle
                      - BlockBeamSolar
                Default value: FixedSlatAngle
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `type_of_slat_angle_control_for_blinds`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `type_of_slat_angle_control_for_blinds`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `type_of_slat_angle_control_for_blinds`')
            vals = {}
            vals["fixedslatangle"] = "FixedSlatAngle"
            vals["scheduledslatangle"] = "ScheduledSlatAngle"
            vals["blockbeamsolar"] = "BlockBeamSolar"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `type_of_slat_angle_control_for_blinds`'.format(value))
            value = vals[value_lower]
        self._data["Type of Slat Angle Control for Blinds"] = value

    @property
    def slat_angle_schedule_name(self):
        """Get slat_angle_schedule_name

        Returns:
            str: the value of `slat_angle_schedule_name` or None if not set
        """
        return self._data["Slat Angle Schedule Name"]

    @slat_angle_schedule_name.setter
    def slat_angle_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Slat Angle Schedule Name`
        Used only if Shading Type = InteriorBlind, ExteriorBlind or BetweenGlassBlind.
        Required if Type of Slat Angle Control for Blinds = ScheduledSlatAngle
        Schedule values should be degrees (0 minimum, 180 maximum)

        Args:
            value (str): value for IDD Field `Slat Angle Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `slat_angle_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `slat_angle_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `slat_angle_schedule_name`')
        self._data["Slat Angle Schedule Name"] = value

    @property
    def setpoint_2(self):
        """Get setpoint_2

        Returns:
            float: the value of `setpoint_2` or None if not set
        """
        return self._data["Setpoint 2"]

    @setpoint_2.setter
    def setpoint_2(self, value=None):
        """  Corresponds to IDD Field `Setpoint 2`
        W/m2 for solar-based controls, deg C for temperature-based controls.
        Used only as the second setpoint for the following two-setpoint control types:
        OnIfHighOutdoorAirTempAndHighSolarOnWindow, OnIfHighOutdoorAirTempAndHighHorizontalSolar,
        OnIfHighZoneAirTempAndHighSolarOnWindow, and OnIfHighZoneAirTempAndHighHorizontalSolar

        Args:
            value (float): value for IDD Field `Setpoint 2`
                Units: W/m2 or deg C
                IP-Units: unknown
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `setpoint_2`'.format(value))
        self._data["Setpoint 2"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class WindowPropertyFrameAndDivider(object):
    """ Corresponds to IDD object `WindowProperty:FrameAndDivider`
        Specifies the dimensions of a window frame, dividers, and inside reveal surfaces.
        Referenced by the surface objects for exterior windows and glass doors
        (ref: FenestrationSurface:Detailed, Window, and GlazedDoor).
    
    """
    internal_name = "WindowProperty:FrameAndDivider"
    field_count = 25
    required_fields = ["Name", "Divider Type"]

    def __init__(self):
        """ Init data dictionary object for IDD  `WindowProperty:FrameAndDivider`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Frame Width"] = None
        self._data["Frame Outside Projection"] = None
        self._data["Frame Inside Projection"] = None
        self._data["Frame Conductance"] = None
        self._data["Ratio of Frame-Edge Glass Conductance to Center-Of-Glass Conductance"] = None
        self._data["Frame Solar Absorptance"] = None
        self._data["Frame Visible Absorptance"] = None
        self._data["Frame Thermal Hemispherical Emissivity"] = None
        self._data["Divider Type"] = None
        self._data["Divider Width"] = None
        self._data["Number of Horizontal Dividers"] = None
        self._data["Number of Vertical Dividers"] = None
        self._data["Divider Outside Projection"] = None
        self._data["Divider Inside Projection"] = None
        self._data["Divider Conductance"] = None
        self._data["Ratio of Divider-Edge Glass Conductance to Center-Of-Glass Conductance"] = None
        self._data["Divider Solar Absorptance"] = None
        self._data["Divider Visible Absorptance"] = None
        self._data["Divider Thermal Hemispherical Emissivity"] = None
        self._data["Outside Reveal Solar Absorptance"] = None
        self._data["Inside Sill Depth"] = None
        self._data["Inside Sill Solar Absorptance"] = None
        self._data["Inside Reveal Depth"] = None
        self._data["Inside Reveal Solar Absorptance"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.frame_width = None
        else:
            self.frame_width = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.frame_outside_projection = None
        else:
            self.frame_outside_projection = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.frame_inside_projection = None
        else:
            self.frame_inside_projection = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.frame_conductance = None
        else:
            self.frame_conductance = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ratio_of_frameedge_glass_conductance_to_centerofglass_conductance = None
        else:
            self.ratio_of_frameedge_glass_conductance_to_centerofglass_conductance = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.frame_solar_absorptance = None
        else:
            self.frame_solar_absorptance = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.frame_visible_absorptance = None
        else:
            self.frame_visible_absorptance = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.frame_thermal_hemispherical_emissivity = None
        else:
            self.frame_thermal_hemispherical_emissivity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.divider_type = None
        else:
            self.divider_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.divider_width = None
        else:
            self.divider_width = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_horizontal_dividers = None
        else:
            self.number_of_horizontal_dividers = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_vertical_dividers = None
        else:
            self.number_of_vertical_dividers = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.divider_outside_projection = None
        else:
            self.divider_outside_projection = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.divider_inside_projection = None
        else:
            self.divider_inside_projection = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.divider_conductance = None
        else:
            self.divider_conductance = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ratio_of_divideredge_glass_conductance_to_centerofglass_conductance = None
        else:
            self.ratio_of_divideredge_glass_conductance_to_centerofglass_conductance = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.divider_solar_absorptance = None
        else:
            self.divider_solar_absorptance = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.divider_visible_absorptance = None
        else:
            self.divider_visible_absorptance = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.divider_thermal_hemispherical_emissivity = None
        else:
            self.divider_thermal_hemispherical_emissivity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outside_reveal_solar_absorptance = None
        else:
            self.outside_reveal_solar_absorptance = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.inside_sill_depth = None
        else:
            self.inside_sill_depth = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.inside_sill_solar_absorptance = None
        else:
            self.inside_sill_solar_absorptance = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.inside_reveal_depth = None
        else:
            self.inside_reveal_depth = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.inside_reveal_solar_absorptance = None
        else:
            self.inside_reveal_solar_absorptance = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        Referenced by surfaces that are exterior windows
        Not used by interzone windows

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def frame_width(self):
        """Get frame_width

        Returns:
            float: the value of `frame_width` or None if not set
        """
        return self._data["Frame Width"]

    @frame_width.setter
    def frame_width(self, value=0.0):
        """  Corresponds to IDD Field `Frame Width`
        Width of frame in plane of window
        Frame width assumed the same on all sides of window

        Args:
            value (float): value for IDD Field `Frame Width`
                Units: m
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `frame_width`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `frame_width`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `frame_width`')
        self._data["Frame Width"] = value

    @property
    def frame_outside_projection(self):
        """Get frame_outside_projection

        Returns:
            float: the value of `frame_outside_projection` or None if not set
        """
        return self._data["Frame Outside Projection"]

    @frame_outside_projection.setter
    def frame_outside_projection(self, value=0.0):
        """  Corresponds to IDD Field `Frame Outside Projection`
        Amount that frame projects outward from the outside face of the glazing

        Args:
            value (float): value for IDD Field `Frame Outside Projection`
                Units: m
                Default value: 0.0
                value >= 0.0
                value <= 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `frame_outside_projection`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `frame_outside_projection`')
            if value > 0.5:
                raise ValueError('value need to be smaller 0.5 '
                                 'for field `frame_outside_projection`')
        self._data["Frame Outside Projection"] = value

    @property
    def frame_inside_projection(self):
        """Get frame_inside_projection

        Returns:
            float: the value of `frame_inside_projection` or None if not set
        """
        return self._data["Frame Inside Projection"]

    @frame_inside_projection.setter
    def frame_inside_projection(self, value=0.0):
        """  Corresponds to IDD Field `Frame Inside Projection`
        Amount that frame projects inward from the inside face of the glazing

        Args:
            value (float): value for IDD Field `Frame Inside Projection`
                Units: m
                Default value: 0.0
                value >= 0.0
                value <= 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `frame_inside_projection`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `frame_inside_projection`')
            if value > 0.5:
                raise ValueError('value need to be smaller 0.5 '
                                 'for field `frame_inside_projection`')
        self._data["Frame Inside Projection"] = value

    @property
    def frame_conductance(self):
        """Get frame_conductance

        Returns:
            float: the value of `frame_conductance` or None if not set
        """
        return self._data["Frame Conductance"]

    @frame_conductance.setter
    def frame_conductance(self, value=None):
        """  Corresponds to IDD Field `Frame Conductance`
        Effective conductance of frame
        Excludes air films
        Obtained from WINDOW 5 or other 2-D calculation

        Args:
            value (float): value for IDD Field `Frame Conductance`
                Units: W/m2-K
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `frame_conductance`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `frame_conductance`')
        self._data["Frame Conductance"] = value

    @property
    def ratio_of_frameedge_glass_conductance_to_centerofglass_conductance(self):
        """Get ratio_of_frameedge_glass_conductance_to_centerofglass_conductance

        Returns:
            float: the value of `ratio_of_frameedge_glass_conductance_to_centerofglass_conductance` or None if not set
        """
        return self._data["Ratio of Frame-Edge Glass Conductance to Center-Of-Glass Conductance"]

    @ratio_of_frameedge_glass_conductance_to_centerofglass_conductance.setter
    def ratio_of_frameedge_glass_conductance_to_centerofglass_conductance(self, value=1.0):
        """  Corresponds to IDD Field `Ratio of Frame-Edge Glass Conductance to Center-Of-Glass Conductance`
        Excludes air films; applies only to multipane windows
        Obtained from WINDOW 5 or other 2-D calculation

        Args:
            value (float): value for IDD Field `Ratio of Frame-Edge Glass Conductance to Center-Of-Glass Conductance`
                Default value: 1.0
                value > 0.0
                value <= 4.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `ratio_of_frameedge_glass_conductance_to_centerofglass_conductance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `ratio_of_frameedge_glass_conductance_to_centerofglass_conductance`')
            if value > 4.0:
                raise ValueError('value need to be smaller 4.0 '
                                 'for field `ratio_of_frameedge_glass_conductance_to_centerofglass_conductance`')
        self._data["Ratio of Frame-Edge Glass Conductance to Center-Of-Glass Conductance"] = value

    @property
    def frame_solar_absorptance(self):
        """Get frame_solar_absorptance

        Returns:
            float: the value of `frame_solar_absorptance` or None if not set
        """
        return self._data["Frame Solar Absorptance"]

    @frame_solar_absorptance.setter
    def frame_solar_absorptance(self, value=0.7):
        """  Corresponds to IDD Field `Frame Solar Absorptance`
        Assumed same on outside and inside of frame

        Args:
            value (float): value for IDD Field `Frame Solar Absorptance`
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `frame_solar_absorptance`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `frame_solar_absorptance`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `frame_solar_absorptance`')
        self._data["Frame Solar Absorptance"] = value

    @property
    def frame_visible_absorptance(self):
        """Get frame_visible_absorptance

        Returns:
            float: the value of `frame_visible_absorptance` or None if not set
        """
        return self._data["Frame Visible Absorptance"]

    @frame_visible_absorptance.setter
    def frame_visible_absorptance(self, value=0.7):
        """  Corresponds to IDD Field `Frame Visible Absorptance`
        Assumed same on outside and inside of frame

        Args:
            value (float): value for IDD Field `Frame Visible Absorptance`
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `frame_visible_absorptance`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `frame_visible_absorptance`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `frame_visible_absorptance`')
        self._data["Frame Visible Absorptance"] = value

    @property
    def frame_thermal_hemispherical_emissivity(self):
        """Get frame_thermal_hemispherical_emissivity

        Returns:
            float: the value of `frame_thermal_hemispherical_emissivity` or None if not set
        """
        return self._data["Frame Thermal Hemispherical Emissivity"]

    @frame_thermal_hemispherical_emissivity.setter
    def frame_thermal_hemispherical_emissivity(self, value=0.9):
        """  Corresponds to IDD Field `Frame Thermal Hemispherical Emissivity`
        Assumed same on outside and inside of frame

        Args:
            value (float): value for IDD Field `Frame Thermal Hemispherical Emissivity`
                Default value: 0.9
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `frame_thermal_hemispherical_emissivity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `frame_thermal_hemispherical_emissivity`')
        self._data["Frame Thermal Hemispherical Emissivity"] = value

    @property
    def divider_type(self):
        """Get divider_type

        Returns:
            str: the value of `divider_type` or None if not set
        """
        return self._data["Divider Type"]

    @divider_type.setter
    def divider_type(self, value="DividedLite"):
        """  Corresponds to IDD Field `Divider Type`

        Args:
            value (str): value for IDD Field `Divider Type`
                Accepted values are:
                      - DividedLite
                      - Suspended
                Default value: DividedLite
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `divider_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `divider_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `divider_type`')
            vals = {}
            vals["dividedlite"] = "DividedLite"
            vals["suspended"] = "Suspended"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `divider_type`'.format(value))
            value = vals[value_lower]
        self._data["Divider Type"] = value

    @property
    def divider_width(self):
        """Get divider_width

        Returns:
            float: the value of `divider_width` or None if not set
        """
        return self._data["Divider Width"]

    @divider_width.setter
    def divider_width(self, value=0.0):
        """  Corresponds to IDD Field `Divider Width`
        Width of dividers in plane of window
        Width assumed the same for all dividers

        Args:
            value (float): value for IDD Field `Divider Width`
                Units: m
                Default value: 0.0
                value >= 0.0
                value <= 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `divider_width`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `divider_width`')
            if value > 0.5:
                raise ValueError('value need to be smaller 0.5 '
                                 'for field `divider_width`')
        self._data["Divider Width"] = value

    @property
    def number_of_horizontal_dividers(self):
        """Get number_of_horizontal_dividers

        Returns:
            float: the value of `number_of_horizontal_dividers` or None if not set
        """
        return self._data["Number of Horizontal Dividers"]

    @number_of_horizontal_dividers.setter
    def number_of_horizontal_dividers(self, value=0.0):
        """  Corresponds to IDD Field `Number of Horizontal Dividers`
        "Horizontal" means parallel to local window X-axis

        Args:
            value (float): value for IDD Field `Number of Horizontal Dividers`
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_horizontal_dividers`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `number_of_horizontal_dividers`')
        self._data["Number of Horizontal Dividers"] = value

    @property
    def number_of_vertical_dividers(self):
        """Get number_of_vertical_dividers

        Returns:
            float: the value of `number_of_vertical_dividers` or None if not set
        """
        return self._data["Number of Vertical Dividers"]

    @number_of_vertical_dividers.setter
    def number_of_vertical_dividers(self, value=0.0):
        """  Corresponds to IDD Field `Number of Vertical Dividers`
        "Vertical" means parallel to local window Y-axis

        Args:
            value (float): value for IDD Field `Number of Vertical Dividers`
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_vertical_dividers`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `number_of_vertical_dividers`')
        self._data["Number of Vertical Dividers"] = value

    @property
    def divider_outside_projection(self):
        """Get divider_outside_projection

        Returns:
            float: the value of `divider_outside_projection` or None if not set
        """
        return self._data["Divider Outside Projection"]

    @divider_outside_projection.setter
    def divider_outside_projection(self, value=0.0):
        """  Corresponds to IDD Field `Divider Outside Projection`
        Amount that divider projects outward from the outside face of the glazing
        Outside projection assumed the same for all divider elements

        Args:
            value (float): value for IDD Field `Divider Outside Projection`
                Units: m
                Default value: 0.0
                value >= 0.0
                value <= 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `divider_outside_projection`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `divider_outside_projection`')
            if value > 0.5:
                raise ValueError('value need to be smaller 0.5 '
                                 'for field `divider_outside_projection`')
        self._data["Divider Outside Projection"] = value

    @property
    def divider_inside_projection(self):
        """Get divider_inside_projection

        Returns:
            float: the value of `divider_inside_projection` or None if not set
        """
        return self._data["Divider Inside Projection"]

    @divider_inside_projection.setter
    def divider_inside_projection(self, value=0.0):
        """  Corresponds to IDD Field `Divider Inside Projection`
        Amount that divider projects inward from the inside face of the glazing
        Inside projection assumed the same for all divider elements

        Args:
            value (float): value for IDD Field `Divider Inside Projection`
                Units: m
                Default value: 0.0
                value >= 0.0
                value <= 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `divider_inside_projection`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `divider_inside_projection`')
            if value > 0.5:
                raise ValueError('value need to be smaller 0.5 '
                                 'for field `divider_inside_projection`')
        self._data["Divider Inside Projection"] = value

    @property
    def divider_conductance(self):
        """Get divider_conductance

        Returns:
            float: the value of `divider_conductance` or None if not set
        """
        return self._data["Divider Conductance"]

    @divider_conductance.setter
    def divider_conductance(self, value=0.0):
        """  Corresponds to IDD Field `Divider Conductance`
        Effective conductance of divider
        Excludes air films
        Obtained from WINDOW 5 or other 2-D calculation

        Args:
            value (float): value for IDD Field `Divider Conductance`
                Units: W/m2-K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `divider_conductance`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `divider_conductance`')
        self._data["Divider Conductance"] = value

    @property
    def ratio_of_divideredge_glass_conductance_to_centerofglass_conductance(self):
        """Get ratio_of_divideredge_glass_conductance_to_centerofglass_conductance

        Returns:
            float: the value of `ratio_of_divideredge_glass_conductance_to_centerofglass_conductance` or None if not set
        """
        return self._data["Ratio of Divider-Edge Glass Conductance to Center-Of-Glass Conductance"]

    @ratio_of_divideredge_glass_conductance_to_centerofglass_conductance.setter
    def ratio_of_divideredge_glass_conductance_to_centerofglass_conductance(self, value=1.0):
        """  Corresponds to IDD Field `Ratio of Divider-Edge Glass Conductance to Center-Of-Glass Conductance`
        Excludes air films
        Obtained from WINDOW 5 or other 2-D calculation

        Args:
            value (float): value for IDD Field `Ratio of Divider-Edge Glass Conductance to Center-Of-Glass Conductance`
                Default value: 1.0
                value > 0.0
                value <= 4.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `ratio_of_divideredge_glass_conductance_to_centerofglass_conductance`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `ratio_of_divideredge_glass_conductance_to_centerofglass_conductance`')
            if value > 4.0:
                raise ValueError('value need to be smaller 4.0 '
                                 'for field `ratio_of_divideredge_glass_conductance_to_centerofglass_conductance`')
        self._data["Ratio of Divider-Edge Glass Conductance to Center-Of-Glass Conductance"] = value

    @property
    def divider_solar_absorptance(self):
        """Get divider_solar_absorptance

        Returns:
            float: the value of `divider_solar_absorptance` or None if not set
        """
        return self._data["Divider Solar Absorptance"]

    @divider_solar_absorptance.setter
    def divider_solar_absorptance(self, value=0.0):
        """  Corresponds to IDD Field `Divider Solar Absorptance`
        Assumed same on outside and inside of divider

        Args:
            value (float): value for IDD Field `Divider Solar Absorptance`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `divider_solar_absorptance`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `divider_solar_absorptance`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `divider_solar_absorptance`')
        self._data["Divider Solar Absorptance"] = value

    @property
    def divider_visible_absorptance(self):
        """Get divider_visible_absorptance

        Returns:
            float: the value of `divider_visible_absorptance` or None if not set
        """
        return self._data["Divider Visible Absorptance"]

    @divider_visible_absorptance.setter
    def divider_visible_absorptance(self, value=0.0):
        """  Corresponds to IDD Field `Divider Visible Absorptance`
        Assumed same on outside and inside of divider

        Args:
            value (float): value for IDD Field `Divider Visible Absorptance`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `divider_visible_absorptance`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `divider_visible_absorptance`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `divider_visible_absorptance`')
        self._data["Divider Visible Absorptance"] = value

    @property
    def divider_thermal_hemispherical_emissivity(self):
        """Get divider_thermal_hemispherical_emissivity

        Returns:
            float: the value of `divider_thermal_hemispherical_emissivity` or None if not set
        """
        return self._data["Divider Thermal Hemispherical Emissivity"]

    @divider_thermal_hemispherical_emissivity.setter
    def divider_thermal_hemispherical_emissivity(self, value=0.9):
        """  Corresponds to IDD Field `Divider Thermal Hemispherical Emissivity`
        Assumed same on outside and inside of divider

        Args:
            value (float): value for IDD Field `Divider Thermal Hemispherical Emissivity`
                Default value: 0.9
                value > 0.0
                value < 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `divider_thermal_hemispherical_emissivity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `divider_thermal_hemispherical_emissivity`')
            if value >= 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `divider_thermal_hemispherical_emissivity`')
        self._data["Divider Thermal Hemispherical Emissivity"] = value

    @property
    def outside_reveal_solar_absorptance(self):
        """Get outside_reveal_solar_absorptance

        Returns:
            float: the value of `outside_reveal_solar_absorptance` or None if not set
        """
        return self._data["Outside Reveal Solar Absorptance"]

    @outside_reveal_solar_absorptance.setter
    def outside_reveal_solar_absorptance(self, value=0.0):
        """  Corresponds to IDD Field `Outside Reveal Solar Absorptance`

        Args:
            value (float): value for IDD Field `Outside Reveal Solar Absorptance`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `outside_reveal_solar_absorptance`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outside_reveal_solar_absorptance`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `outside_reveal_solar_absorptance`')
        self._data["Outside Reveal Solar Absorptance"] = value

    @property
    def inside_sill_depth(self):
        """Get inside_sill_depth

        Returns:
            float: the value of `inside_sill_depth` or None if not set
        """
        return self._data["Inside Sill Depth"]

    @inside_sill_depth.setter
    def inside_sill_depth(self, value=0.0):
        """  Corresponds to IDD Field `Inside Sill Depth`

        Args:
            value (float): value for IDD Field `Inside Sill Depth`
                Units: m
                Default value: 0.0
                value >= 0.0
                value <= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `inside_sill_depth`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `inside_sill_depth`')
            if value > 2.0:
                raise ValueError('value need to be smaller 2.0 '
                                 'for field `inside_sill_depth`')
        self._data["Inside Sill Depth"] = value

    @property
    def inside_sill_solar_absorptance(self):
        """Get inside_sill_solar_absorptance

        Returns:
            float: the value of `inside_sill_solar_absorptance` or None if not set
        """
        return self._data["Inside Sill Solar Absorptance"]

    @inside_sill_solar_absorptance.setter
    def inside_sill_solar_absorptance(self, value=0.0):
        """  Corresponds to IDD Field `Inside Sill Solar Absorptance`

        Args:
            value (float): value for IDD Field `Inside Sill Solar Absorptance`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `inside_sill_solar_absorptance`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `inside_sill_solar_absorptance`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `inside_sill_solar_absorptance`')
        self._data["Inside Sill Solar Absorptance"] = value

    @property
    def inside_reveal_depth(self):
        """Get inside_reveal_depth

        Returns:
            float: the value of `inside_reveal_depth` or None if not set
        """
        return self._data["Inside Reveal Depth"]

    @inside_reveal_depth.setter
    def inside_reveal_depth(self, value=0.0):
        """  Corresponds to IDD Field `Inside Reveal Depth`
        Distance from plane of inside surface of glazing
        to plane of inside surface of wall.
        Outside reveal depth is determined from the geometry
        of the window and the wall it is on; it is non-zero if the plane of
        the outside surface of the glazing is set back from the plane of the
        outside surface of the wall.

        Args:
            value (float): value for IDD Field `Inside Reveal Depth`
                Units: m
                Default value: 0.0
                value >= 0.0
                value <= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `inside_reveal_depth`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `inside_reveal_depth`')
            if value > 2.0:
                raise ValueError('value need to be smaller 2.0 '
                                 'for field `inside_reveal_depth`')
        self._data["Inside Reveal Depth"] = value

    @property
    def inside_reveal_solar_absorptance(self):
        """Get inside_reveal_solar_absorptance

        Returns:
            float: the value of `inside_reveal_solar_absorptance` or None if not set
        """
        return self._data["Inside Reveal Solar Absorptance"]

    @inside_reveal_solar_absorptance.setter
    def inside_reveal_solar_absorptance(self, value=0.0):
        """  Corresponds to IDD Field `Inside Reveal Solar Absorptance`

        Args:
            value (float): value for IDD Field `Inside Reveal Solar Absorptance`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `inside_reveal_solar_absorptance`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `inside_reveal_solar_absorptance`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `inside_reveal_solar_absorptance`')
        self._data["Inside Reveal Solar Absorptance"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class WindowPropertyAirflowControl(object):
    """ Corresponds to IDD object `WindowProperty:AirflowControl`
        Used to control forced airflow through a gap between glass layers
    
    """
    internal_name = "WindowProperty:AirflowControl"
    field_count = 7
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `WindowProperty:AirflowControl`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Airflow Source"] = None
        self._data["Airflow Destination"] = None
        self._data["Maximum Flow Rate"] = None
        self._data["Airflow Control Type"] = None
        self._data["Airflow Is Scheduled"] = None
        self._data["Airflow Multiplier Schedule Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.airflow_source = None
        else:
            self.airflow_source = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.airflow_destination = None
        else:
            self.airflow_destination = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_flow_rate = None
        else:
            self.maximum_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.airflow_control_type = None
        else:
            self.airflow_control_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.airflow_is_scheduled = None
        else:
            self.airflow_is_scheduled = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.airflow_multiplier_schedule_name = None
        else:
            self.airflow_multiplier_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        Name must be that of an exterior window with two or three glass layers.

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def airflow_source(self):
        """Get airflow_source

        Returns:
            str: the value of `airflow_source` or None if not set
        """
        return self._data["Airflow Source"]

    @airflow_source.setter
    def airflow_source(self, value="IndoorAir"):
        """  Corresponds to IDD Field `Airflow Source`

        Args:
            value (str): value for IDD Field `Airflow Source`
                Accepted values are:
                      - IndoorAir
                      - OutdoorAir
                Default value: IndoorAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `airflow_source`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `airflow_source`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `airflow_source`')
            vals = {}
            vals["indoorair"] = "IndoorAir"
            vals["outdoorair"] = "OutdoorAir"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `airflow_source`'.format(value))
            value = vals[value_lower]
        self._data["Airflow Source"] = value

    @property
    def airflow_destination(self):
        """Get airflow_destination

        Returns:
            str: the value of `airflow_destination` or None if not set
        """
        return self._data["Airflow Destination"]

    @airflow_destination.setter
    def airflow_destination(self, value="OutdoorAir"):
        """  Corresponds to IDD Field `Airflow Destination`

        Args:
            value (str): value for IDD Field `Airflow Destination`
                Accepted values are:
                      - IndoorAir
                      - OutdoorAir
                      - ReturnAir
                Default value: OutdoorAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `airflow_destination`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `airflow_destination`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `airflow_destination`')
            vals = {}
            vals["indoorair"] = "IndoorAir"
            vals["outdoorair"] = "OutdoorAir"
            vals["returnair"] = "ReturnAir"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `airflow_destination`'.format(value))
            value = vals[value_lower]
        self._data["Airflow Destination"] = value

    @property
    def maximum_flow_rate(self):
        """Get maximum_flow_rate

        Returns:
            float: the value of `maximum_flow_rate` or None if not set
        """
        return self._data["Maximum Flow Rate"]

    @maximum_flow_rate.setter
    def maximum_flow_rate(self, value=0.0):
        """  Corresponds to IDD Field `Maximum Flow Rate`
        Above is m3/s per m of glazing width

        Args:
            value (float): value for IDD Field `Maximum Flow Rate`
                Units: m3/s-m
                IP-Units: ft3/min-ft
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_flow_rate`')
        self._data["Maximum Flow Rate"] = value

    @property
    def airflow_control_type(self):
        """Get airflow_control_type

        Returns:
            str: the value of `airflow_control_type` or None if not set
        """
        return self._data["Airflow Control Type"]

    @airflow_control_type.setter
    def airflow_control_type(self, value="AlwaysOnAtMaximumFlow"):
        """  Corresponds to IDD Field `Airflow Control Type`
        ScheduledOnly requires that Airflow Has Multiplier Schedule Name = Yes
        and that Airflow Multiplier Schedule Name is specified.

        Args:
            value (str): value for IDD Field `Airflow Control Type`
                Accepted values are:
                      - AlwaysOnAtMaximumFlow
                      - AlwaysOff
                      - ScheduledOnly
                Default value: AlwaysOnAtMaximumFlow
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `airflow_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `airflow_control_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `airflow_control_type`')
            vals = {}
            vals["alwaysonatmaximumflow"] = "AlwaysOnAtMaximumFlow"
            vals["alwaysoff"] = "AlwaysOff"
            vals["scheduledonly"] = "ScheduledOnly"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `airflow_control_type`'.format(value))
            value = vals[value_lower]
        self._data["Airflow Control Type"] = value

    @property
    def airflow_is_scheduled(self):
        """Get airflow_is_scheduled

        Returns:
            str: the value of `airflow_is_scheduled` or None if not set
        """
        return self._data["Airflow Is Scheduled"]

    @airflow_is_scheduled.setter
    def airflow_is_scheduled(self, value="No"):
        """  Corresponds to IDD Field `Airflow Is Scheduled`
        If Yes, then Airflow Multiplier Schedule Name must be specified

        Args:
            value (str): value for IDD Field `Airflow Is Scheduled`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `airflow_is_scheduled`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `airflow_is_scheduled`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `airflow_is_scheduled`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `airflow_is_scheduled`'.format(value))
            value = vals[value_lower]
        self._data["Airflow Is Scheduled"] = value

    @property
    def airflow_multiplier_schedule_name(self):
        """Get airflow_multiplier_schedule_name

        Returns:
            str: the value of `airflow_multiplier_schedule_name` or None if not set
        """
        return self._data["Airflow Multiplier Schedule Name"]

    @airflow_multiplier_schedule_name.setter
    def airflow_multiplier_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Airflow Multiplier Schedule Name`
        Required if Airflow Is Scheduled = Yes.
        Schedule values are 0.0 or 1.0 and multiply Maximum Air Flow.

        Args:
            value (str): value for IDD Field `Airflow Multiplier Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `airflow_multiplier_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `airflow_multiplier_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `airflow_multiplier_schedule_name`')
        self._data["Airflow Multiplier Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class WindowPropertyStormWindow(object):
    """ Corresponds to IDD object `WindowProperty:StormWindow`
        This is a movable exterior glass layer that is usually applied in the winter
        and removed in the summer.
    
    """
    internal_name = "WindowProperty:StormWindow"
    field_count = 7
    required_fields = ["Window Name", "Storm Glass Layer Name", "Month that Storm Glass Layer is Put On", "Day of Month that Storm Glass Layer is Put On", "Month that Storm Glass Layer is Taken Off", "Day of Month that Storm Glass Layer is Taken Off"]

    def __init__(self):
        """ Init data dictionary object for IDD  `WindowProperty:StormWindow`
        """
        self._data = OrderedDict()
        self._data["Window Name"] = None
        self._data["Storm Glass Layer Name"] = None
        self._data["Distance Between Storm Glass Layer and Adjacent Glass"] = None
        self._data["Month that Storm Glass Layer is Put On"] = None
        self._data["Day of Month that Storm Glass Layer is Put On"] = None
        self._data["Month that Storm Glass Layer is Taken Off"] = None
        self._data["Day of Month that Storm Glass Layer is Taken Off"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.window_name = None
        else:
            self.window_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.storm_glass_layer_name = None
        else:
            self.storm_glass_layer_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.distance_between_storm_glass_layer_and_adjacent_glass = None
        else:
            self.distance_between_storm_glass_layer_and_adjacent_glass = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.month_that_storm_glass_layer_is_put_on = None
        else:
            self.month_that_storm_glass_layer_is_put_on = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.day_of_month_that_storm_glass_layer_is_put_on = None
        else:
            self.day_of_month_that_storm_glass_layer_is_put_on = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.month_that_storm_glass_layer_is_taken_off = None
        else:
            self.month_that_storm_glass_layer_is_taken_off = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.day_of_month_that_storm_glass_layer_is_taken_off = None
        else:
            self.day_of_month_that_storm_glass_layer_is_taken_off = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def window_name(self):
        """Get window_name

        Returns:
            str: the value of `window_name` or None if not set
        """
        return self._data["Window Name"]

    @window_name.setter
    def window_name(self, value=None):
        """  Corresponds to IDD Field `Window Name`
        Must be the name of a FenestrationSurface:Detailed object with Surface Type = WINDOW.
        The WindowProperty:StormWindow object can only be used with exterior windows.

        Args:
            value (str): value for IDD Field `Window Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `window_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `window_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `window_name`')
        self._data["Window Name"] = value

    @property
    def storm_glass_layer_name(self):
        """Get storm_glass_layer_name

        Returns:
            str: the value of `storm_glass_layer_name` or None if not set
        """
        return self._data["Storm Glass Layer Name"]

    @storm_glass_layer_name.setter
    def storm_glass_layer_name(self, value=None):
        """  Corresponds to IDD Field `Storm Glass Layer Name`
        Must be a WindowMaterial:Glazing or WindowMaterial:Glazing:RefractionExtinctionMethod
        Gap between storm glass layer and adjacent glass layer is assumed to be filled
        with Air

        Args:
            value (str): value for IDD Field `Storm Glass Layer Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `storm_glass_layer_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `storm_glass_layer_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `storm_glass_layer_name`')
        self._data["Storm Glass Layer Name"] = value

    @property
    def distance_between_storm_glass_layer_and_adjacent_glass(self):
        """Get distance_between_storm_glass_layer_and_adjacent_glass

        Returns:
            float: the value of `distance_between_storm_glass_layer_and_adjacent_glass` or None if not set
        """
        return self._data["Distance Between Storm Glass Layer and Adjacent Glass"]

    @distance_between_storm_glass_layer_and_adjacent_glass.setter
    def distance_between_storm_glass_layer_and_adjacent_glass(self, value=0.05):
        """  Corresponds to IDD Field `Distance Between Storm Glass Layer and Adjacent Glass`

        Args:
            value (float): value for IDD Field `Distance Between Storm Glass Layer and Adjacent Glass`
                Units: m
                Default value: 0.05
                value > 0.0
                value <= 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `distance_between_storm_glass_layer_and_adjacent_glass`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `distance_between_storm_glass_layer_and_adjacent_glass`')
            if value > 0.5:
                raise ValueError('value need to be smaller 0.5 '
                                 'for field `distance_between_storm_glass_layer_and_adjacent_glass`')
        self._data["Distance Between Storm Glass Layer and Adjacent Glass"] = value

    @property
    def month_that_storm_glass_layer_is_put_on(self):
        """Get month_that_storm_glass_layer_is_put_on

        Returns:
            int: the value of `month_that_storm_glass_layer_is_put_on` or None if not set
        """
        return self._data["Month that Storm Glass Layer is Put On"]

    @month_that_storm_glass_layer_is_put_on.setter
    def month_that_storm_glass_layer_is_put_on(self, value=None):
        """  Corresponds to IDD Field `Month that Storm Glass Layer is Put On`

        Args:
            value (int): value for IDD Field `Month that Storm Glass Layer is Put On`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `month_that_storm_glass_layer_is_put_on`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `month_that_storm_glass_layer_is_put_on`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `month_that_storm_glass_layer_is_put_on`')
        self._data["Month that Storm Glass Layer is Put On"] = value

    @property
    def day_of_month_that_storm_glass_layer_is_put_on(self):
        """Get day_of_month_that_storm_glass_layer_is_put_on

        Returns:
            int: the value of `day_of_month_that_storm_glass_layer_is_put_on` or None if not set
        """
        return self._data["Day of Month that Storm Glass Layer is Put On"]

    @day_of_month_that_storm_glass_layer_is_put_on.setter
    def day_of_month_that_storm_glass_layer_is_put_on(self, value=None):
        """  Corresponds to IDD Field `Day of Month that Storm Glass Layer is Put On`

        Args:
            value (int): value for IDD Field `Day of Month that Storm Glass Layer is Put On`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `day_of_month_that_storm_glass_layer_is_put_on`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `day_of_month_that_storm_glass_layer_is_put_on`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `day_of_month_that_storm_glass_layer_is_put_on`')
        self._data["Day of Month that Storm Glass Layer is Put On"] = value

    @property
    def month_that_storm_glass_layer_is_taken_off(self):
        """Get month_that_storm_glass_layer_is_taken_off

        Returns:
            int: the value of `month_that_storm_glass_layer_is_taken_off` or None if not set
        """
        return self._data["Month that Storm Glass Layer is Taken Off"]

    @month_that_storm_glass_layer_is_taken_off.setter
    def month_that_storm_glass_layer_is_taken_off(self, value=None):
        """  Corresponds to IDD Field `Month that Storm Glass Layer is Taken Off`

        Args:
            value (int): value for IDD Field `Month that Storm Glass Layer is Taken Off`
                value >= 1
                value <= 12
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `month_that_storm_glass_layer_is_taken_off`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `month_that_storm_glass_layer_is_taken_off`')
            if value > 12:
                raise ValueError('value need to be smaller 12 '
                                 'for field `month_that_storm_glass_layer_is_taken_off`')
        self._data["Month that Storm Glass Layer is Taken Off"] = value

    @property
    def day_of_month_that_storm_glass_layer_is_taken_off(self):
        """Get day_of_month_that_storm_glass_layer_is_taken_off

        Returns:
            int: the value of `day_of_month_that_storm_glass_layer_is_taken_off` or None if not set
        """
        return self._data["Day of Month that Storm Glass Layer is Taken Off"]

    @day_of_month_that_storm_glass_layer_is_taken_off.setter
    def day_of_month_that_storm_glass_layer_is_taken_off(self, value=None):
        """  Corresponds to IDD Field `Day of Month that Storm Glass Layer is Taken Off`

        Args:
            value (int): value for IDD Field `Day of Month that Storm Glass Layer is Taken Off`
                value >= 1
                value <= 31
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `day_of_month_that_storm_glass_layer_is_taken_off`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `day_of_month_that_storm_glass_layer_is_taken_off`')
            if value > 31:
                raise ValueError('value need to be smaller 31 '
                                 'for field `day_of_month_that_storm_glass_layer_is_taken_off`')
        self._data["Day of Month that Storm Glass Layer is Taken Off"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class InternalMass(object):
    """ Corresponds to IDD object `InternalMass`
        Used to describe internal zone surface area that does not need to be part of geometric
        representation. This should be the total surface area exposed to the zone air.
    
    """
    internal_name = "InternalMass"
    field_count = 4
    required_fields = ["Name", "Construction Name", "Zone Name", "Surface Area"]

    def __init__(self):
        """ Init data dictionary object for IDD  `InternalMass`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Construction Name"] = None
        self._data["Zone Name"] = None
        self._data["Surface Area"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.construction_name = None
        else:
            self.construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.surface_area = None
        else:
            self.surface_area = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def construction_name(self):
        """Get construction_name

        Returns:
            str: the value of `construction_name` or None if not set
        """
        return self._data["Construction Name"]

    @construction_name.setter
    def construction_name(self, value=None):
        """  Corresponds to IDD Field `Construction Name`
        To be matched with a construction in this input file

        Args:
            value (str): value for IDD Field `Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `construction_name`')
        self._data["Construction Name"] = value

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        Zone the surface is a part of
        used to be Interior Environment

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def surface_area(self):
        """Get surface_area

        Returns:
            float: the value of `surface_area` or None if not set
        """
        return self._data["Surface Area"]

    @surface_area.setter
    def surface_area(self, value=None):
        """  Corresponds to IDD Field `Surface Area`

        Args:
            value (float): value for IDD Field `Surface Area`
                Units: m2
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `surface_area`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `surface_area`')
        self._data["Surface Area"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ShadingSite(object):
    """ Corresponds to IDD object `Shading:Site`
        used for shading elements such as trees
        these items are fixed in space and would not move with relative geometry
    
    """
    internal_name = "Shading:Site"
    field_count = 8
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Shading:Site`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Azimuth Angle"] = None
        self._data["Tilt Angle"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Y Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Height"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.azimuth_angle = None
        else:
            self.azimuth_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tilt_angle = None
        else:
            self.tilt_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_y_coordinate = None
        else:
            self.starting_y_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.height = None
        else:
            self.height = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def azimuth_angle(self):
        """Get azimuth_angle

        Returns:
            float: the value of `azimuth_angle` or None if not set
        """
        return self._data["Azimuth Angle"]

    @azimuth_angle.setter
    def azimuth_angle(self, value=None):
        """  Corresponds to IDD Field `Azimuth Angle`
        Facing direction of outside of shading device (S=180,N=0,E=90,W=270)

        Args:
            value (float): value for IDD Field `Azimuth Angle`
                Units: deg
                value >= 0.0
                value <= 360.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `azimuth_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `azimuth_angle`')
            if value > 360.0:
                raise ValueError('value need to be smaller 360.0 '
                                 'for field `azimuth_angle`')
        self._data["Azimuth Angle"] = value

    @property
    def tilt_angle(self):
        """Get tilt_angle

        Returns:
            float: the value of `tilt_angle` or None if not set
        """
        return self._data["Tilt Angle"]

    @tilt_angle.setter
    def tilt_angle(self, value=90.0):
        """  Corresponds to IDD Field `Tilt Angle`

        Args:
            value (float): value for IDD Field `Tilt Angle`
                Units: deg
                Default value: 90.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tilt_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tilt_angle`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `tilt_angle`')
        self._data["Tilt Angle"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        Starting coordinate is the Lower Left Corner of the Shade

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_y_coordinate(self):
        """Get starting_y_coordinate

        Returns:
            float: the value of `starting_y_coordinate` or None if not set
        """
        return self._data["Starting Y Coordinate"]

    @starting_y_coordinate.setter
    def starting_y_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Y Coordinate`

        Args:
            value (float): value for IDD Field `Starting Y Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_y_coordinate`'.format(value))
        self._data["Starting Y Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def height(self):
        """Get height

        Returns:
            float: the value of `height` or None if not set
        """
        return self._data["Height"]

    @height.setter
    def height(self, value=None):
        """  Corresponds to IDD Field `Height`

        Args:
            value (float): value for IDD Field `Height`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `height`'.format(value))
        self._data["Height"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ShadingBuilding(object):
    """ Corresponds to IDD object `Shading:Building`
        used for shading elements such as trees, other buildings, parts of this building not being modeled
        these items are relative to the current building and would move with relative geometry
    
    """
    internal_name = "Shading:Building"
    field_count = 8
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Shading:Building`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Azimuth Angle"] = None
        self._data["Tilt Angle"] = None
        self._data["Starting X Coordinate"] = None
        self._data["Starting Y Coordinate"] = None
        self._data["Starting Z Coordinate"] = None
        self._data["Length"] = None
        self._data["Height"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.azimuth_angle = None
        else:
            self.azimuth_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tilt_angle = None
        else:
            self.tilt_angle = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_x_coordinate = None
        else:
            self.starting_x_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_y_coordinate = None
        else:
            self.starting_y_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.starting_z_coordinate = None
        else:
            self.starting_z_coordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.length = None
        else:
            self.length = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.height = None
        else:
            self.height = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def azimuth_angle(self):
        """Get azimuth_angle

        Returns:
            float: the value of `azimuth_angle` or None if not set
        """
        return self._data["Azimuth Angle"]

    @azimuth_angle.setter
    def azimuth_angle(self, value=None):
        """  Corresponds to IDD Field `Azimuth Angle`
        Facing direction of outside of shading device (S=180,N=0,E=90,W=270)

        Args:
            value (float): value for IDD Field `Azimuth Angle`
                Units: deg
                value >= 0.0
                value <= 360.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `azimuth_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `azimuth_angle`')
            if value > 360.0:
                raise ValueError('value need to be smaller 360.0 '
                                 'for field `azimuth_angle`')
        self._data["Azimuth Angle"] = value

    @property
    def tilt_angle(self):
        """Get tilt_angle

        Returns:
            float: the value of `tilt_angle` or None if not set
        """
        return self._data["Tilt Angle"]

    @tilt_angle.setter
    def tilt_angle(self, value=90.0):
        """  Corresponds to IDD Field `Tilt Angle`

        Args:
            value (float): value for IDD Field `Tilt Angle`
                Units: deg
                Default value: 90.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tilt_angle`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tilt_angle`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `tilt_angle`')
        self._data["Tilt Angle"] = value

    @property
    def starting_x_coordinate(self):
        """Get starting_x_coordinate

        Returns:
            float: the value of `starting_x_coordinate` or None if not set
        """
        return self._data["Starting X Coordinate"]

    @starting_x_coordinate.setter
    def starting_x_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting X Coordinate`
        Starting coordinate is the Lower Left Corner of the Shade

        Args:
            value (float): value for IDD Field `Starting X Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_x_coordinate`'.format(value))
        self._data["Starting X Coordinate"] = value

    @property
    def starting_y_coordinate(self):
        """Get starting_y_coordinate

        Returns:
            float: the value of `starting_y_coordinate` or None if not set
        """
        return self._data["Starting Y Coordinate"]

    @starting_y_coordinate.setter
    def starting_y_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Y Coordinate`

        Args:
            value (float): value for IDD Field `Starting Y Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_y_coordinate`'.format(value))
        self._data["Starting Y Coordinate"] = value

    @property
    def starting_z_coordinate(self):
        """Get starting_z_coordinate

        Returns:
            float: the value of `starting_z_coordinate` or None if not set
        """
        return self._data["Starting Z Coordinate"]

    @starting_z_coordinate.setter
    def starting_z_coordinate(self, value=None):
        """  Corresponds to IDD Field `Starting Z Coordinate`

        Args:
            value (float): value for IDD Field `Starting Z Coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `starting_z_coordinate`'.format(value))
        self._data["Starting Z Coordinate"] = value

    @property
    def length(self):
        """Get length

        Returns:
            float: the value of `length` or None if not set
        """
        return self._data["Length"]

    @length.setter
    def length(self, value=None):
        """  Corresponds to IDD Field `Length`

        Args:
            value (float): value for IDD Field `Length`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `length`'.format(value))
        self._data["Length"] = value

    @property
    def height(self):
        """Get height

        Returns:
            float: the value of `height` or None if not set
        """
        return self._data["Height"]

    @height.setter
    def height(self, value=None):
        """  Corresponds to IDD Field `Height`

        Args:
            value (float): value for IDD Field `Height`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `height`'.format(value))
        self._data["Height"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ShadingSiteDetailed(object):
    """ Corresponds to IDD object `Shading:Site:Detailed`
        used for shading elements such as trees
        these items are fixed in space and would not move with relative geometry
    
    """
    internal_name = "Shading:Site:Detailed"
    field_count = 363
    required_fields = ["Name", "Number of Vertices", "Vertex 1 X-coordinate", "Vertex 1 Y-coordinate", "Vertex 1 Z-coordinate", "Vertex 2 X-coordinate", "Vertex 2 Y-coordinate", "Vertex 2 Z-coordinate", "Vertex 3 X-coordinate", "Vertex 3 Y-coordinate", "Vertex 3 Z-coordinate"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Shading:Site:Detailed`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Transmittance Schedule Name"] = None
        self._data["Number of Vertices"] = None
        self._data["Vertex 1 X-coordinate"] = None
        self._data["Vertex 1 Y-coordinate"] = None
        self._data["Vertex 1 Z-coordinate"] = None
        self._data["Vertex 2 X-coordinate"] = None
        self._data["Vertex 2 Y-coordinate"] = None
        self._data["Vertex 2 Z-coordinate"] = None
        self._data["Vertex 3 X-coordinate"] = None
        self._data["Vertex 3 Y-coordinate"] = None
        self._data["Vertex 3 Z-coordinate"] = None
        self._data["Vertex 4 X-coordinate"] = None
        self._data["Vertex 4 Y-coordinate"] = None
        self._data["Vertex 4 Z-coordinate"] = None
        self._data["Vertex 5 X-coordinate"] = None
        self._data["Vertex 5 Y-coordinate"] = None
        self._data["Vertex 5 Z-coordinate"] = None
        self._data["Vertex 6 X-coordinate"] = None
        self._data["Vertex 6 Y-coordinate"] = None
        self._data["Vertex 6 Z-coordinate"] = None
        self._data["Vertex 7 X-coordinate"] = None
        self._data["Vertex 7 Y-coordinate"] = None
        self._data["Vertex 7 Z-coordinate"] = None
        self._data["Vertex 8 X-coordinate"] = None
        self._data["Vertex 8 Y-coordinate"] = None
        self._data["Vertex 8 Z-coordinate"] = None
        self._data["Vertex 9 X-coordinate"] = None
        self._data["Vertex 9 Y-coordinate"] = None
        self._data["Vertex 9 Z-coordinate"] = None
        self._data["Vertex 10 X-coordinate"] = None
        self._data["Vertex 10 Y-coordinate"] = None
        self._data["Vertex 10 Z-coordinate"] = None
        self._data["Vertex 11 X-coordinate"] = None
        self._data["Vertex 11 Y-coordinate"] = None
        self._data["Vertex 11 Z-coordinate"] = None
        self._data["Vertex 12 X-coordinate"] = None
        self._data["Vertex 12 Y-coordinate"] = None
        self._data["Vertex 12 Z-coordinate"] = None
        self._data["Vertex 13 X-coordinate"] = None
        self._data["Vertex 13 Y-coordinate"] = None
        self._data["Vertex 13 Z-coordinate"] = None
        self._data["Vertex 14 X-coordinate"] = None
        self._data["Vertex 14 Y-coordinate"] = None
        self._data["Vertex 14 Z-coordinate"] = None
        self._data["Vertex 15 X-coordinate"] = None
        self._data["Vertex 15 Y-coordinate"] = None
        self._data["Vertex 15 Z-coordinate"] = None
        self._data["Vertex 16 X-coordinate"] = None
        self._data["Vertex 16 Y-coordinate"] = None
        self._data["Vertex 16 Z-coordinate"] = None
        self._data["Vertex 17 X-coordinate"] = None
        self._data["Vertex 17 Y-coordinate"] = None
        self._data["Vertex 17 Z-coordinate"] = None
        self._data["Vertex 18 X-coordinate"] = None
        self._data["Vertex 18 Y-coordinate"] = None
        self._data["Vertex 18 Z-coordinate"] = None
        self._data["Vertex 19 X-coordinate"] = None
        self._data["Vertex 19 Y-coordinate"] = None
        self._data["Vertex 19 Z-coordinate"] = None
        self._data["Vertex 20 X-coordinate"] = None
        self._data["Vertex 20 Y-coordinate"] = None
        self._data["Vertex 20 Z-coordinate"] = None
        self._data["Vertex 21 X-coordinate"] = None
        self._data["Vertex 21 Y-coordinate"] = None
        self._data["Vertex 21 Z-coordinate"] = None
        self._data["Vertex 22 X-coordinate"] = None
        self._data["Vertex 22 Y-coordinate"] = None
        self._data["Vertex 22 Z-coordinate"] = None
        self._data["Vertex 23 X-coordinate"] = None
        self._data["Vertex 23 Y-coordinate"] = None
        self._data["Vertex 23 Z-coordinate"] = None
        self._data["Vertex 24 X-coordinate"] = None
        self._data["Vertex 24 Y-coordinate"] = None
        self._data["Vertex 24 Z-coordinate"] = None
        self._data["Vertex 25 X-coordinate"] = None
        self._data["Vertex 25 Y-coordinate"] = None
        self._data["Vertex 25 Z-coordinate"] = None
        self._data["Vertex 26 X-coordinate"] = None
        self._data["Vertex 26 Y-coordinate"] = None
        self._data["Vertex 26 Z-coordinate"] = None
        self._data["Vertex 27 X-coordinate"] = None
        self._data["Vertex 27 Y-coordinate"] = None
        self._data["Vertex 27 Z-coordinate"] = None
        self._data["Vertex 28 X-coordinate"] = None
        self._data["Vertex 28 Y-coordinate"] = None
        self._data["Vertex 28 Z-coordinate"] = None
        self._data["Vertex 29 X-coordinate"] = None
        self._data["Vertex 29 Y-coordinate"] = None
        self._data["Vertex 29 Z-coordinate"] = None
        self._data["Vertex 30 X-coordinate"] = None
        self._data["Vertex 30 Y-coordinate"] = None
        self._data["Vertex 30 Z-coordinate"] = None
        self._data["Vertex 31 X-coordinate"] = None
        self._data["Vertex 31 Y-coordinate"] = None
        self._data["Vertex 31 Z-coordinate"] = None
        self._data["Vertex 32 X-coordinate"] = None
        self._data["Vertex 32 Y-coordinate"] = None
        self._data["Vertex 32 Z-coordinate"] = None
        self._data["Vertex 33 X-coordinate"] = None
        self._data["Vertex 33 Y-coordinate"] = None
        self._data["Vertex 33 Z-coordinate"] = None
        self._data["Vertex 34 X-coordinate"] = None
        self._data["Vertex 34 Y-coordinate"] = None
        self._data["Vertex 34 Z-coordinate"] = None
        self._data["Vertex 35 X-coordinate"] = None
        self._data["Vertex 35 Y-coordinate"] = None
        self._data["Vertex 35 Z-coordinate"] = None
        self._data["Vertex 36 X-coordinate"] = None
        self._data["Vertex 36 Y-coordinate"] = None
        self._data["Vertex 36 Z-coordinate"] = None
        self._data["Vertex 37 X-coordinate"] = None
        self._data["Vertex 37 Y-coordinate"] = None
        self._data["Vertex 37 Z-coordinate"] = None
        self._data["Vertex 38 X-coordinate"] = None
        self._data["Vertex 38 Y-coordinate"] = None
        self._data["Vertex 38 Z-coordinate"] = None
        self._data["Vertex 39 X-coordinate"] = None
        self._data["Vertex 39 Y-coordinate"] = None
        self._data["Vertex 39 Z-coordinate"] = None
        self._data["Vertex 40 X-coordinate"] = None
        self._data["Vertex 40 Y-coordinate"] = None
        self._data["Vertex 40 Z-coordinate"] = None
        self._data["Vertex 41 X-coordinate"] = None
        self._data["Vertex 41 Y-coordinate"] = None
        self._data["Vertex 41 Z-coordinate"] = None
        self._data["Vertex 42 X-coordinate"] = None
        self._data["Vertex 42 Y-coordinate"] = None
        self._data["Vertex 42 Z-coordinate"] = None
        self._data["Vertex 43 X-coordinate"] = None
        self._data["Vertex 43 Y-coordinate"] = None
        self._data["Vertex 43 Z-coordinate"] = None
        self._data["Vertex 44 X-coordinate"] = None
        self._data["Vertex 44 Y-coordinate"] = None
        self._data["Vertex 44 Z-coordinate"] = None
        self._data["Vertex 45 X-coordinate"] = None
        self._data["Vertex 45 Y-coordinate"] = None
        self._data["Vertex 45 Z-coordinate"] = None
        self._data["Vertex 46 X-coordinate"] = None
        self._data["Vertex 46 Y-coordinate"] = None
        self._data["Vertex 46 Z-coordinate"] = None
        self._data["Vertex 47 X-coordinate"] = None
        self._data["Vertex 47 Y-coordinate"] = None
        self._data["Vertex 47 Z-coordinate"] = None
        self._data["Vertex 48 X-coordinate"] = None
        self._data["Vertex 48 Y-coordinate"] = None
        self._data["Vertex 48 Z-coordinate"] = None
        self._data["Vertex 49 X-coordinate"] = None
        self._data["Vertex 49 Y-coordinate"] = None
        self._data["Vertex 49 Z-coordinate"] = None
        self._data["Vertex 50 X-coordinate"] = None
        self._data["Vertex 50 Y-coordinate"] = None
        self._data["Vertex 50 Z-coordinate"] = None
        self._data["Vertex 51 X-coordinate"] = None
        self._data["Vertex 51 Y-coordinate"] = None
        self._data["Vertex 51 Z-coordinate"] = None
        self._data["Vertex 52 X-coordinate"] = None
        self._data["Vertex 52 Y-coordinate"] = None
        self._data["Vertex 52 Z-coordinate"] = None
        self._data["Vertex 53 X-coordinate"] = None
        self._data["Vertex 53 Y-coordinate"] = None
        self._data["Vertex 53 Z-coordinate"] = None
        self._data["Vertex 54 X-coordinate"] = None
        self._data["Vertex 54 Y-coordinate"] = None
        self._data["Vertex 54 Z-coordinate"] = None
        self._data["Vertex 55 X-coordinate"] = None
        self._data["Vertex 55 Y-coordinate"] = None
        self._data["Vertex 55 Z-coordinate"] = None
        self._data["Vertex 56 X-coordinate"] = None
        self._data["Vertex 56 Y-coordinate"] = None
        self._data["Vertex 56 Z-coordinate"] = None
        self._data["Vertex 57 X-coordinate"] = None
        self._data["Vertex 57 Y-coordinate"] = None
        self._data["Vertex 57 Z-coordinate"] = None
        self._data["Vertex 58 X-coordinate"] = None
        self._data["Vertex 58 Y-coordinate"] = None
        self._data["Vertex 58 Z-coordinate"] = None
        self._data["Vertex 59 X-coordinate"] = None
        self._data["Vertex 59 Y-coordinate"] = None
        self._data["Vertex 59 Z-coordinate"] = None
        self._data["Vertex 60 X-coordinate"] = None
        self._data["Vertex 60 Y-coordinate"] = None
        self._data["Vertex 60 Z-coordinate"] = None
        self._data["Vertex 61 X-coordinate"] = None
        self._data["Vertex 61 Y-coordinate"] = None
        self._data["Vertex 61 Z-coordinate"] = None
        self._data["Vertex 62 X-coordinate"] = None
        self._data["Vertex 62 Y-coordinate"] = None
        self._data["Vertex 62 Z-coordinate"] = None
        self._data["Vertex 63 X-coordinate"] = None
        self._data["Vertex 63 Y-coordinate"] = None
        self._data["Vertex 63 Z-coordinate"] = None
        self._data["Vertex 64 X-coordinate"] = None
        self._data["Vertex 64 Y-coordinate"] = None
        self._data["Vertex 64 Z-coordinate"] = None
        self._data["Vertex 65 X-coordinate"] = None
        self._data["Vertex 65 Y-coordinate"] = None
        self._data["Vertex 65 Z-coordinate"] = None
        self._data["Vertex 66 X-coordinate"] = None
        self._data["Vertex 66 Y-coordinate"] = None
        self._data["Vertex 66 Z-coordinate"] = None
        self._data["Vertex 67 X-coordinate"] = None
        self._data["Vertex 67 Y-coordinate"] = None
        self._data["Vertex 67 Z-coordinate"] = None
        self._data["Vertex 68 X-coordinate"] = None
        self._data["Vertex 68 Y-coordinate"] = None
        self._data["Vertex 68 Z-coordinate"] = None
        self._data["Vertex 69 X-coordinate"] = None
        self._data["Vertex 69 Y-coordinate"] = None
        self._data["Vertex 69 Z-coordinate"] = None
        self._data["Vertex 70 X-coordinate"] = None
        self._data["Vertex 70 Y-coordinate"] = None
        self._data["Vertex 70 Z-coordinate"] = None
        self._data["Vertex 71 X-coordinate"] = None
        self._data["Vertex 71 Y-coordinate"] = None
        self._data["Vertex 71 Z-coordinate"] = None
        self._data["Vertex 72 X-coordinate"] = None
        self._data["Vertex 72 Y-coordinate"] = None
        self._data["Vertex 72 Z-coordinate"] = None
        self._data["Vertex 73 X-coordinate"] = None
        self._data["Vertex 73 Y-coordinate"] = None
        self._data["Vertex 73 Z-coordinate"] = None
        self._data["Vertex 74 X-coordinate"] = None
        self._data["Vertex 74 Y-coordinate"] = None
        self._data["Vertex 74 Z-coordinate"] = None
        self._data["Vertex 75 X-coordinate"] = None
        self._data["Vertex 75 Y-coordinate"] = None
        self._data["Vertex 75 Z-coordinate"] = None
        self._data["Vertex 76 X-coordinate"] = None
        self._data["Vertex 76 Y-coordinate"] = None
        self._data["Vertex 76 Z-coordinate"] = None
        self._data["Vertex 77 X-coordinate"] = None
        self._data["Vertex 77 Y-coordinate"] = None
        self._data["Vertex 77 Z-coordinate"] = None
        self._data["Vertex 78 X-coordinate"] = None
        self._data["Vertex 78 Y-coordinate"] = None
        self._data["Vertex 78 Z-coordinate"] = None
        self._data["Vertex 79 X-coordinate"] = None
        self._data["Vertex 79 Y-coordinate"] = None
        self._data["Vertex 79 Z-coordinate"] = None
        self._data["Vertex 80 X-coordinate"] = None
        self._data["Vertex 80 Y-coordinate"] = None
        self._data["Vertex 80 Z-coordinate"] = None
        self._data["Vertex 81 X-coordinate"] = None
        self._data["Vertex 81 Y-coordinate"] = None
        self._data["Vertex 81 Z-coordinate"] = None
        self._data["Vertex 82 X-coordinate"] = None
        self._data["Vertex 82 Y-coordinate"] = None
        self._data["Vertex 82 Z-coordinate"] = None
        self._data["Vertex 83 X-coordinate"] = None
        self._data["Vertex 83 Y-coordinate"] = None
        self._data["Vertex 83 Z-coordinate"] = None
        self._data["Vertex 84 X-coordinate"] = None
        self._data["Vertex 84 Y-coordinate"] = None
        self._data["Vertex 84 Z-coordinate"] = None
        self._data["Vertex 85 X-coordinate"] = None
        self._data["Vertex 85 Y-coordinate"] = None
        self._data["Vertex 85 Z-coordinate"] = None
        self._data["Vertex 86 X-coordinate"] = None
        self._data["Vertex 86 Y-coordinate"] = None
        self._data["Vertex 86 Z-coordinate"] = None
        self._data["Vertex 87 X-coordinate"] = None
        self._data["Vertex 87 Y-coordinate"] = None
        self._data["Vertex 87 Z-coordinate"] = None
        self._data["Vertex 88 X-coordinate"] = None
        self._data["Vertex 88 Y-coordinate"] = None
        self._data["Vertex 88 Z-coordinate"] = None
        self._data["Vertex 89 X-coordinate"] = None
        self._data["Vertex 89 Y-coordinate"] = None
        self._data["Vertex 89 Z-coordinate"] = None
        self._data["Vertex 90 X-coordinate"] = None
        self._data["Vertex 90 Y-coordinate"] = None
        self._data["Vertex 90 Z-coordinate"] = None
        self._data["Vertex 91 X-coordinate"] = None
        self._data["Vertex 91 Y-coordinate"] = None
        self._data["Vertex 91 Z-coordinate"] = None
        self._data["Vertex 92 X-coordinate"] = None
        self._data["Vertex 92 Y-coordinate"] = None
        self._data["Vertex 92 Z-coordinate"] = None
        self._data["Vertex 93 X-coordinate"] = None
        self._data["Vertex 93 Y-coordinate"] = None
        self._data["Vertex 93 Z-coordinate"] = None
        self._data["Vertex 94 X-coordinate"] = None
        self._data["Vertex 94 Y-coordinate"] = None
        self._data["Vertex 94 Z-coordinate"] = None
        self._data["Vertex 95 X-coordinate"] = None
        self._data["Vertex 95 Y-coordinate"] = None
        self._data["Vertex 95 Z-coordinate"] = None
        self._data["Vertex 96 X-coordinate"] = None
        self._data["Vertex 96 Y-coordinate"] = None
        self._data["Vertex 96 Z-coordinate"] = None
        self._data["Vertex 97 X-coordinate"] = None
        self._data["Vertex 97 Y-coordinate"] = None
        self._data["Vertex 97 Z-coordinate"] = None
        self._data["Vertex 98 X-coordinate"] = None
        self._data["Vertex 98 Y-coordinate"] = None
        self._data["Vertex 98 Z-coordinate"] = None
        self._data["Vertex 99 X-coordinate"] = None
        self._data["Vertex 99 Y-coordinate"] = None
        self._data["Vertex 99 Z-coordinate"] = None
        self._data["Vertex 100 X-coordinate"] = None
        self._data["Vertex 100 Y-coordinate"] = None
        self._data["Vertex 100 Z-coordinate"] = None
        self._data["Vertex 101 X-coordinate"] = None
        self._data["Vertex 101 Y-coordinate"] = None
        self._data["Vertex 101 Z-coordinate"] = None
        self._data["Vertex 102 X-coordinate"] = None
        self._data["Vertex 102 Y-coordinate"] = None
        self._data["Vertex 102 Z-coordinate"] = None
        self._data["Vertex 103 X-coordinate"] = None
        self._data["Vertex 103 Y-coordinate"] = None
        self._data["Vertex 103 Z-coordinate"] = None
        self._data["Vertex 104 X-coordinate"] = None
        self._data["Vertex 104 Y-coordinate"] = None
        self._data["Vertex 104 Z-coordinate"] = None
        self._data["Vertex 105 X-coordinate"] = None
        self._data["Vertex 105 Y-coordinate"] = None
        self._data["Vertex 105 Z-coordinate"] = None
        self._data["Vertex 106 X-coordinate"] = None
        self._data["Vertex 106 Y-coordinate"] = None
        self._data["Vertex 106 Z-coordinate"] = None
        self._data["Vertex 107 X-coordinate"] = None
        self._data["Vertex 107 Y-coordinate"] = None
        self._data["Vertex 107 Z-coordinate"] = None
        self._data["Vertex 108 X-coordinate"] = None
        self._data["Vertex 108 Y-coordinate"] = None
        self._data["Vertex 108 Z-coordinate"] = None
        self._data["Vertex 109 X-coordinate"] = None
        self._data["Vertex 109 Y-coordinate"] = None
        self._data["Vertex 109 Z-coordinate"] = None
        self._data["Vertex 110 X-coordinate"] = None
        self._data["Vertex 110 Y-coordinate"] = None
        self._data["Vertex 110 Z-coordinate"] = None
        self._data["Vertex 111 X-coordinate"] = None
        self._data["Vertex 111 Y-coordinate"] = None
        self._data["Vertex 111 Z-coordinate"] = None
        self._data["Vertex 112 X-coordinate"] = None
        self._data["Vertex 112 Y-coordinate"] = None
        self._data["Vertex 112 Z-coordinate"] = None
        self._data["Vertex 113 X-coordinate"] = None
        self._data["Vertex 113 Y-coordinate"] = None
        self._data["Vertex 113 Z-coordinate"] = None
        self._data["Vertex 114 X-coordinate"] = None
        self._data["Vertex 114 Y-coordinate"] = None
        self._data["Vertex 114 Z-coordinate"] = None
        self._data["Vertex 115 X-coordinate"] = None
        self._data["Vertex 115 Y-coordinate"] = None
        self._data["Vertex 115 Z-coordinate"] = None
        self._data["Vertex 116 X-coordinate"] = None
        self._data["Vertex 116 Y-coordinate"] = None
        self._data["Vertex 116 Z-coordinate"] = None
        self._data["Vertex 117 X-coordinate"] = None
        self._data["Vertex 117 Y-coordinate"] = None
        self._data["Vertex 117 Z-coordinate"] = None
        self._data["Vertex 118 X-coordinate"] = None
        self._data["Vertex 118 Y-coordinate"] = None
        self._data["Vertex 118 Z-coordinate"] = None
        self._data["Vertex 119 X-coordinate"] = None
        self._data["Vertex 119 Y-coordinate"] = None
        self._data["Vertex 119 Z-coordinate"] = None
        self._data["Vertex 120 X-coordinate"] = None
        self._data["Vertex 120 Y-coordinate"] = None
        self._data["Vertex 120 Z-coordinate"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.transmittance_schedule_name = None
        else:
            self.transmittance_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_vertices = None
        else:
            self.number_of_vertices = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_xcoordinate = None
        else:
            self.vertex_1_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_ycoordinate = None
        else:
            self.vertex_1_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_zcoordinate = None
        else:
            self.vertex_1_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_xcoordinate = None
        else:
            self.vertex_2_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_ycoordinate = None
        else:
            self.vertex_2_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_zcoordinate = None
        else:
            self.vertex_2_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_xcoordinate = None
        else:
            self.vertex_3_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_ycoordinate = None
        else:
            self.vertex_3_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_zcoordinate = None
        else:
            self.vertex_3_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_xcoordinate = None
        else:
            self.vertex_4_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_ycoordinate = None
        else:
            self.vertex_4_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_zcoordinate = None
        else:
            self.vertex_4_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_xcoordinate = None
        else:
            self.vertex_5_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_ycoordinate = None
        else:
            self.vertex_5_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_zcoordinate = None
        else:
            self.vertex_5_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_xcoordinate = None
        else:
            self.vertex_6_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_ycoordinate = None
        else:
            self.vertex_6_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_zcoordinate = None
        else:
            self.vertex_6_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_xcoordinate = None
        else:
            self.vertex_7_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_ycoordinate = None
        else:
            self.vertex_7_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_zcoordinate = None
        else:
            self.vertex_7_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_xcoordinate = None
        else:
            self.vertex_8_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_ycoordinate = None
        else:
            self.vertex_8_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_zcoordinate = None
        else:
            self.vertex_8_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_xcoordinate = None
        else:
            self.vertex_9_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_ycoordinate = None
        else:
            self.vertex_9_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_zcoordinate = None
        else:
            self.vertex_9_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_xcoordinate = None
        else:
            self.vertex_10_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_ycoordinate = None
        else:
            self.vertex_10_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_zcoordinate = None
        else:
            self.vertex_10_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_11_xcoordinate = None
        else:
            self.vertex_11_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_11_ycoordinate = None
        else:
            self.vertex_11_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_11_zcoordinate = None
        else:
            self.vertex_11_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_12_xcoordinate = None
        else:
            self.vertex_12_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_12_ycoordinate = None
        else:
            self.vertex_12_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_12_zcoordinate = None
        else:
            self.vertex_12_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_13_xcoordinate = None
        else:
            self.vertex_13_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_13_ycoordinate = None
        else:
            self.vertex_13_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_13_zcoordinate = None
        else:
            self.vertex_13_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_14_xcoordinate = None
        else:
            self.vertex_14_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_14_ycoordinate = None
        else:
            self.vertex_14_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_14_zcoordinate = None
        else:
            self.vertex_14_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_15_xcoordinate = None
        else:
            self.vertex_15_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_15_ycoordinate = None
        else:
            self.vertex_15_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_15_zcoordinate = None
        else:
            self.vertex_15_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_16_xcoordinate = None
        else:
            self.vertex_16_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_16_ycoordinate = None
        else:
            self.vertex_16_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_16_zcoordinate = None
        else:
            self.vertex_16_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_17_xcoordinate = None
        else:
            self.vertex_17_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_17_ycoordinate = None
        else:
            self.vertex_17_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_17_zcoordinate = None
        else:
            self.vertex_17_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_18_xcoordinate = None
        else:
            self.vertex_18_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_18_ycoordinate = None
        else:
            self.vertex_18_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_18_zcoordinate = None
        else:
            self.vertex_18_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_19_xcoordinate = None
        else:
            self.vertex_19_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_19_ycoordinate = None
        else:
            self.vertex_19_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_19_zcoordinate = None
        else:
            self.vertex_19_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_20_xcoordinate = None
        else:
            self.vertex_20_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_20_ycoordinate = None
        else:
            self.vertex_20_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_20_zcoordinate = None
        else:
            self.vertex_20_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_21_xcoordinate = None
        else:
            self.vertex_21_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_21_ycoordinate = None
        else:
            self.vertex_21_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_21_zcoordinate = None
        else:
            self.vertex_21_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_22_xcoordinate = None
        else:
            self.vertex_22_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_22_ycoordinate = None
        else:
            self.vertex_22_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_22_zcoordinate = None
        else:
            self.vertex_22_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_23_xcoordinate = None
        else:
            self.vertex_23_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_23_ycoordinate = None
        else:
            self.vertex_23_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_23_zcoordinate = None
        else:
            self.vertex_23_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_24_xcoordinate = None
        else:
            self.vertex_24_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_24_ycoordinate = None
        else:
            self.vertex_24_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_24_zcoordinate = None
        else:
            self.vertex_24_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_25_xcoordinate = None
        else:
            self.vertex_25_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_25_ycoordinate = None
        else:
            self.vertex_25_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_25_zcoordinate = None
        else:
            self.vertex_25_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_26_xcoordinate = None
        else:
            self.vertex_26_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_26_ycoordinate = None
        else:
            self.vertex_26_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_26_zcoordinate = None
        else:
            self.vertex_26_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_27_xcoordinate = None
        else:
            self.vertex_27_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_27_ycoordinate = None
        else:
            self.vertex_27_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_27_zcoordinate = None
        else:
            self.vertex_27_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_28_xcoordinate = None
        else:
            self.vertex_28_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_28_ycoordinate = None
        else:
            self.vertex_28_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_28_zcoordinate = None
        else:
            self.vertex_28_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_29_xcoordinate = None
        else:
            self.vertex_29_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_29_ycoordinate = None
        else:
            self.vertex_29_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_29_zcoordinate = None
        else:
            self.vertex_29_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_30_xcoordinate = None
        else:
            self.vertex_30_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_30_ycoordinate = None
        else:
            self.vertex_30_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_30_zcoordinate = None
        else:
            self.vertex_30_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_31_xcoordinate = None
        else:
            self.vertex_31_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_31_ycoordinate = None
        else:
            self.vertex_31_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_31_zcoordinate = None
        else:
            self.vertex_31_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_32_xcoordinate = None
        else:
            self.vertex_32_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_32_ycoordinate = None
        else:
            self.vertex_32_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_32_zcoordinate = None
        else:
            self.vertex_32_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_33_xcoordinate = None
        else:
            self.vertex_33_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_33_ycoordinate = None
        else:
            self.vertex_33_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_33_zcoordinate = None
        else:
            self.vertex_33_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_34_xcoordinate = None
        else:
            self.vertex_34_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_34_ycoordinate = None
        else:
            self.vertex_34_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_34_zcoordinate = None
        else:
            self.vertex_34_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_35_xcoordinate = None
        else:
            self.vertex_35_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_35_ycoordinate = None
        else:
            self.vertex_35_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_35_zcoordinate = None
        else:
            self.vertex_35_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_36_xcoordinate = None
        else:
            self.vertex_36_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_36_ycoordinate = None
        else:
            self.vertex_36_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_36_zcoordinate = None
        else:
            self.vertex_36_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_37_xcoordinate = None
        else:
            self.vertex_37_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_37_ycoordinate = None
        else:
            self.vertex_37_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_37_zcoordinate = None
        else:
            self.vertex_37_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_38_xcoordinate = None
        else:
            self.vertex_38_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_38_ycoordinate = None
        else:
            self.vertex_38_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_38_zcoordinate = None
        else:
            self.vertex_38_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_39_xcoordinate = None
        else:
            self.vertex_39_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_39_ycoordinate = None
        else:
            self.vertex_39_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_39_zcoordinate = None
        else:
            self.vertex_39_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_40_xcoordinate = None
        else:
            self.vertex_40_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_40_ycoordinate = None
        else:
            self.vertex_40_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_40_zcoordinate = None
        else:
            self.vertex_40_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_41_xcoordinate = None
        else:
            self.vertex_41_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_41_ycoordinate = None
        else:
            self.vertex_41_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_41_zcoordinate = None
        else:
            self.vertex_41_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_42_xcoordinate = None
        else:
            self.vertex_42_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_42_ycoordinate = None
        else:
            self.vertex_42_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_42_zcoordinate = None
        else:
            self.vertex_42_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_43_xcoordinate = None
        else:
            self.vertex_43_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_43_ycoordinate = None
        else:
            self.vertex_43_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_43_zcoordinate = None
        else:
            self.vertex_43_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_44_xcoordinate = None
        else:
            self.vertex_44_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_44_ycoordinate = None
        else:
            self.vertex_44_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_44_zcoordinate = None
        else:
            self.vertex_44_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_45_xcoordinate = None
        else:
            self.vertex_45_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_45_ycoordinate = None
        else:
            self.vertex_45_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_45_zcoordinate = None
        else:
            self.vertex_45_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_46_xcoordinate = None
        else:
            self.vertex_46_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_46_ycoordinate = None
        else:
            self.vertex_46_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_46_zcoordinate = None
        else:
            self.vertex_46_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_47_xcoordinate = None
        else:
            self.vertex_47_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_47_ycoordinate = None
        else:
            self.vertex_47_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_47_zcoordinate = None
        else:
            self.vertex_47_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_48_xcoordinate = None
        else:
            self.vertex_48_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_48_ycoordinate = None
        else:
            self.vertex_48_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_48_zcoordinate = None
        else:
            self.vertex_48_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_49_xcoordinate = None
        else:
            self.vertex_49_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_49_ycoordinate = None
        else:
            self.vertex_49_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_49_zcoordinate = None
        else:
            self.vertex_49_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_50_xcoordinate = None
        else:
            self.vertex_50_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_50_ycoordinate = None
        else:
            self.vertex_50_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_50_zcoordinate = None
        else:
            self.vertex_50_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_51_xcoordinate = None
        else:
            self.vertex_51_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_51_ycoordinate = None
        else:
            self.vertex_51_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_51_zcoordinate = None
        else:
            self.vertex_51_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_52_xcoordinate = None
        else:
            self.vertex_52_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_52_ycoordinate = None
        else:
            self.vertex_52_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_52_zcoordinate = None
        else:
            self.vertex_52_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_53_xcoordinate = None
        else:
            self.vertex_53_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_53_ycoordinate = None
        else:
            self.vertex_53_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_53_zcoordinate = None
        else:
            self.vertex_53_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_54_xcoordinate = None
        else:
            self.vertex_54_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_54_ycoordinate = None
        else:
            self.vertex_54_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_54_zcoordinate = None
        else:
            self.vertex_54_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_55_xcoordinate = None
        else:
            self.vertex_55_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_55_ycoordinate = None
        else:
            self.vertex_55_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_55_zcoordinate = None
        else:
            self.vertex_55_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_56_xcoordinate = None
        else:
            self.vertex_56_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_56_ycoordinate = None
        else:
            self.vertex_56_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_56_zcoordinate = None
        else:
            self.vertex_56_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_57_xcoordinate = None
        else:
            self.vertex_57_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_57_ycoordinate = None
        else:
            self.vertex_57_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_57_zcoordinate = None
        else:
            self.vertex_57_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_58_xcoordinate = None
        else:
            self.vertex_58_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_58_ycoordinate = None
        else:
            self.vertex_58_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_58_zcoordinate = None
        else:
            self.vertex_58_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_59_xcoordinate = None
        else:
            self.vertex_59_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_59_ycoordinate = None
        else:
            self.vertex_59_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_59_zcoordinate = None
        else:
            self.vertex_59_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_60_xcoordinate = None
        else:
            self.vertex_60_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_60_ycoordinate = None
        else:
            self.vertex_60_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_60_zcoordinate = None
        else:
            self.vertex_60_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_61_xcoordinate = None
        else:
            self.vertex_61_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_61_ycoordinate = None
        else:
            self.vertex_61_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_61_zcoordinate = None
        else:
            self.vertex_61_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_62_xcoordinate = None
        else:
            self.vertex_62_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_62_ycoordinate = None
        else:
            self.vertex_62_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_62_zcoordinate = None
        else:
            self.vertex_62_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_63_xcoordinate = None
        else:
            self.vertex_63_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_63_ycoordinate = None
        else:
            self.vertex_63_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_63_zcoordinate = None
        else:
            self.vertex_63_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_64_xcoordinate = None
        else:
            self.vertex_64_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_64_ycoordinate = None
        else:
            self.vertex_64_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_64_zcoordinate = None
        else:
            self.vertex_64_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_65_xcoordinate = None
        else:
            self.vertex_65_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_65_ycoordinate = None
        else:
            self.vertex_65_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_65_zcoordinate = None
        else:
            self.vertex_65_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_66_xcoordinate = None
        else:
            self.vertex_66_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_66_ycoordinate = None
        else:
            self.vertex_66_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_66_zcoordinate = None
        else:
            self.vertex_66_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_67_xcoordinate = None
        else:
            self.vertex_67_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_67_ycoordinate = None
        else:
            self.vertex_67_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_67_zcoordinate = None
        else:
            self.vertex_67_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_68_xcoordinate = None
        else:
            self.vertex_68_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_68_ycoordinate = None
        else:
            self.vertex_68_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_68_zcoordinate = None
        else:
            self.vertex_68_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_69_xcoordinate = None
        else:
            self.vertex_69_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_69_ycoordinate = None
        else:
            self.vertex_69_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_69_zcoordinate = None
        else:
            self.vertex_69_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_70_xcoordinate = None
        else:
            self.vertex_70_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_70_ycoordinate = None
        else:
            self.vertex_70_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_70_zcoordinate = None
        else:
            self.vertex_70_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_71_xcoordinate = None
        else:
            self.vertex_71_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_71_ycoordinate = None
        else:
            self.vertex_71_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_71_zcoordinate = None
        else:
            self.vertex_71_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_72_xcoordinate = None
        else:
            self.vertex_72_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_72_ycoordinate = None
        else:
            self.vertex_72_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_72_zcoordinate = None
        else:
            self.vertex_72_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_73_xcoordinate = None
        else:
            self.vertex_73_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_73_ycoordinate = None
        else:
            self.vertex_73_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_73_zcoordinate = None
        else:
            self.vertex_73_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_74_xcoordinate = None
        else:
            self.vertex_74_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_74_ycoordinate = None
        else:
            self.vertex_74_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_74_zcoordinate = None
        else:
            self.vertex_74_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_75_xcoordinate = None
        else:
            self.vertex_75_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_75_ycoordinate = None
        else:
            self.vertex_75_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_75_zcoordinate = None
        else:
            self.vertex_75_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_76_xcoordinate = None
        else:
            self.vertex_76_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_76_ycoordinate = None
        else:
            self.vertex_76_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_76_zcoordinate = None
        else:
            self.vertex_76_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_77_xcoordinate = None
        else:
            self.vertex_77_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_77_ycoordinate = None
        else:
            self.vertex_77_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_77_zcoordinate = None
        else:
            self.vertex_77_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_78_xcoordinate = None
        else:
            self.vertex_78_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_78_ycoordinate = None
        else:
            self.vertex_78_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_78_zcoordinate = None
        else:
            self.vertex_78_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_79_xcoordinate = None
        else:
            self.vertex_79_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_79_ycoordinate = None
        else:
            self.vertex_79_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_79_zcoordinate = None
        else:
            self.vertex_79_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_80_xcoordinate = None
        else:
            self.vertex_80_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_80_ycoordinate = None
        else:
            self.vertex_80_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_80_zcoordinate = None
        else:
            self.vertex_80_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_81_xcoordinate = None
        else:
            self.vertex_81_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_81_ycoordinate = None
        else:
            self.vertex_81_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_81_zcoordinate = None
        else:
            self.vertex_81_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_82_xcoordinate = None
        else:
            self.vertex_82_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_82_ycoordinate = None
        else:
            self.vertex_82_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_82_zcoordinate = None
        else:
            self.vertex_82_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_83_xcoordinate = None
        else:
            self.vertex_83_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_83_ycoordinate = None
        else:
            self.vertex_83_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_83_zcoordinate = None
        else:
            self.vertex_83_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_84_xcoordinate = None
        else:
            self.vertex_84_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_84_ycoordinate = None
        else:
            self.vertex_84_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_84_zcoordinate = None
        else:
            self.vertex_84_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_85_xcoordinate = None
        else:
            self.vertex_85_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_85_ycoordinate = None
        else:
            self.vertex_85_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_85_zcoordinate = None
        else:
            self.vertex_85_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_86_xcoordinate = None
        else:
            self.vertex_86_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_86_ycoordinate = None
        else:
            self.vertex_86_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_86_zcoordinate = None
        else:
            self.vertex_86_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_87_xcoordinate = None
        else:
            self.vertex_87_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_87_ycoordinate = None
        else:
            self.vertex_87_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_87_zcoordinate = None
        else:
            self.vertex_87_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_88_xcoordinate = None
        else:
            self.vertex_88_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_88_ycoordinate = None
        else:
            self.vertex_88_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_88_zcoordinate = None
        else:
            self.vertex_88_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_89_xcoordinate = None
        else:
            self.vertex_89_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_89_ycoordinate = None
        else:
            self.vertex_89_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_89_zcoordinate = None
        else:
            self.vertex_89_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_90_xcoordinate = None
        else:
            self.vertex_90_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_90_ycoordinate = None
        else:
            self.vertex_90_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_90_zcoordinate = None
        else:
            self.vertex_90_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_91_xcoordinate = None
        else:
            self.vertex_91_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_91_ycoordinate = None
        else:
            self.vertex_91_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_91_zcoordinate = None
        else:
            self.vertex_91_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_92_xcoordinate = None
        else:
            self.vertex_92_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_92_ycoordinate = None
        else:
            self.vertex_92_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_92_zcoordinate = None
        else:
            self.vertex_92_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_93_xcoordinate = None
        else:
            self.vertex_93_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_93_ycoordinate = None
        else:
            self.vertex_93_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_93_zcoordinate = None
        else:
            self.vertex_93_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_94_xcoordinate = None
        else:
            self.vertex_94_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_94_ycoordinate = None
        else:
            self.vertex_94_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_94_zcoordinate = None
        else:
            self.vertex_94_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_95_xcoordinate = None
        else:
            self.vertex_95_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_95_ycoordinate = None
        else:
            self.vertex_95_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_95_zcoordinate = None
        else:
            self.vertex_95_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_96_xcoordinate = None
        else:
            self.vertex_96_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_96_ycoordinate = None
        else:
            self.vertex_96_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_96_zcoordinate = None
        else:
            self.vertex_96_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_97_xcoordinate = None
        else:
            self.vertex_97_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_97_ycoordinate = None
        else:
            self.vertex_97_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_97_zcoordinate = None
        else:
            self.vertex_97_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_98_xcoordinate = None
        else:
            self.vertex_98_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_98_ycoordinate = None
        else:
            self.vertex_98_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_98_zcoordinate = None
        else:
            self.vertex_98_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_99_xcoordinate = None
        else:
            self.vertex_99_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_99_ycoordinate = None
        else:
            self.vertex_99_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_99_zcoordinate = None
        else:
            self.vertex_99_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_100_xcoordinate = None
        else:
            self.vertex_100_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_100_ycoordinate = None
        else:
            self.vertex_100_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_100_zcoordinate = None
        else:
            self.vertex_100_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_101_xcoordinate = None
        else:
            self.vertex_101_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_101_ycoordinate = None
        else:
            self.vertex_101_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_101_zcoordinate = None
        else:
            self.vertex_101_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_102_xcoordinate = None
        else:
            self.vertex_102_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_102_ycoordinate = None
        else:
            self.vertex_102_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_102_zcoordinate = None
        else:
            self.vertex_102_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_103_xcoordinate = None
        else:
            self.vertex_103_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_103_ycoordinate = None
        else:
            self.vertex_103_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_103_zcoordinate = None
        else:
            self.vertex_103_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_104_xcoordinate = None
        else:
            self.vertex_104_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_104_ycoordinate = None
        else:
            self.vertex_104_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_104_zcoordinate = None
        else:
            self.vertex_104_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_105_xcoordinate = None
        else:
            self.vertex_105_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_105_ycoordinate = None
        else:
            self.vertex_105_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_105_zcoordinate = None
        else:
            self.vertex_105_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_106_xcoordinate = None
        else:
            self.vertex_106_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_106_ycoordinate = None
        else:
            self.vertex_106_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_106_zcoordinate = None
        else:
            self.vertex_106_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_107_xcoordinate = None
        else:
            self.vertex_107_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_107_ycoordinate = None
        else:
            self.vertex_107_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_107_zcoordinate = None
        else:
            self.vertex_107_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_108_xcoordinate = None
        else:
            self.vertex_108_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_108_ycoordinate = None
        else:
            self.vertex_108_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_108_zcoordinate = None
        else:
            self.vertex_108_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_109_xcoordinate = None
        else:
            self.vertex_109_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_109_ycoordinate = None
        else:
            self.vertex_109_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_109_zcoordinate = None
        else:
            self.vertex_109_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_110_xcoordinate = None
        else:
            self.vertex_110_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_110_ycoordinate = None
        else:
            self.vertex_110_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_110_zcoordinate = None
        else:
            self.vertex_110_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_111_xcoordinate = None
        else:
            self.vertex_111_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_111_ycoordinate = None
        else:
            self.vertex_111_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_111_zcoordinate = None
        else:
            self.vertex_111_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_112_xcoordinate = None
        else:
            self.vertex_112_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_112_ycoordinate = None
        else:
            self.vertex_112_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_112_zcoordinate = None
        else:
            self.vertex_112_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_113_xcoordinate = None
        else:
            self.vertex_113_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_113_ycoordinate = None
        else:
            self.vertex_113_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_113_zcoordinate = None
        else:
            self.vertex_113_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_114_xcoordinate = None
        else:
            self.vertex_114_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_114_ycoordinate = None
        else:
            self.vertex_114_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_114_zcoordinate = None
        else:
            self.vertex_114_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_115_xcoordinate = None
        else:
            self.vertex_115_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_115_ycoordinate = None
        else:
            self.vertex_115_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_115_zcoordinate = None
        else:
            self.vertex_115_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_116_xcoordinate = None
        else:
            self.vertex_116_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_116_ycoordinate = None
        else:
            self.vertex_116_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_116_zcoordinate = None
        else:
            self.vertex_116_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_117_xcoordinate = None
        else:
            self.vertex_117_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_117_ycoordinate = None
        else:
            self.vertex_117_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_117_zcoordinate = None
        else:
            self.vertex_117_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_118_xcoordinate = None
        else:
            self.vertex_118_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_118_ycoordinate = None
        else:
            self.vertex_118_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_118_zcoordinate = None
        else:
            self.vertex_118_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_119_xcoordinate = None
        else:
            self.vertex_119_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_119_ycoordinate = None
        else:
            self.vertex_119_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_119_zcoordinate = None
        else:
            self.vertex_119_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_120_xcoordinate = None
        else:
            self.vertex_120_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_120_ycoordinate = None
        else:
            self.vertex_120_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_120_zcoordinate = None
        else:
            self.vertex_120_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def transmittance_schedule_name(self):
        """Get transmittance_schedule_name

        Returns:
            str: the value of `transmittance_schedule_name` or None if not set
        """
        return self._data["Transmittance Schedule Name"]

    @transmittance_schedule_name.setter
    def transmittance_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Transmittance Schedule Name`
        Transmittance schedule for the shading device, defaults to zero (always opaque)

        Args:
            value (str): value for IDD Field `Transmittance Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `transmittance_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `transmittance_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `transmittance_schedule_name`')
        self._data["Transmittance Schedule Name"] = value

    @property
    def number_of_vertices(self):
        """Get number_of_vertices

        Returns:
            float: the value of `number_of_vertices` or None if not set
        """
        return self._data["Number of Vertices"]

    @number_of_vertices.setter
    def number_of_vertices(self, value="autocalculate"):
        """  Corresponds to IDD Field `Number of Vertices`
        shown with 6 vertex coordinates -- extensible object
        Rules for vertices are given in GlobalGeometryRules coordinates --
        For this object all surface coordinates are in world coordinates.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Number of Vertices`
                Default value: "autocalculate"
                value >= 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Number of Vertices"] = "Autocalculate"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_vertices`'.format(value))
            if value < 3.0:
                raise ValueError('value need to be greater or equal 3.0 '
                                 'for field `number_of_vertices`')
        self._data["Number of Vertices"] = value

    @property
    def vertex_1_xcoordinate(self):
        """Get vertex_1_xcoordinate

        Returns:
            float: the value of `vertex_1_xcoordinate` or None if not set
        """
        return self._data["Vertex 1 X-coordinate"]

    @vertex_1_xcoordinate.setter
    def vertex_1_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_xcoordinate`'.format(value))
        self._data["Vertex 1 X-coordinate"] = value

    @property
    def vertex_1_ycoordinate(self):
        """Get vertex_1_ycoordinate

        Returns:
            float: the value of `vertex_1_ycoordinate` or None if not set
        """
        return self._data["Vertex 1 Y-coordinate"]

    @vertex_1_ycoordinate.setter
    def vertex_1_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_ycoordinate`'.format(value))
        self._data["Vertex 1 Y-coordinate"] = value

    @property
    def vertex_1_zcoordinate(self):
        """Get vertex_1_zcoordinate

        Returns:
            float: the value of `vertex_1_zcoordinate` or None if not set
        """
        return self._data["Vertex 1 Z-coordinate"]

    @vertex_1_zcoordinate.setter
    def vertex_1_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_zcoordinate`'.format(value))
        self._data["Vertex 1 Z-coordinate"] = value

    @property
    def vertex_2_xcoordinate(self):
        """Get vertex_2_xcoordinate

        Returns:
            float: the value of `vertex_2_xcoordinate` or None if not set
        """
        return self._data["Vertex 2 X-coordinate"]

    @vertex_2_xcoordinate.setter
    def vertex_2_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_xcoordinate`'.format(value))
        self._data["Vertex 2 X-coordinate"] = value

    @property
    def vertex_2_ycoordinate(self):
        """Get vertex_2_ycoordinate

        Returns:
            float: the value of `vertex_2_ycoordinate` or None if not set
        """
        return self._data["Vertex 2 Y-coordinate"]

    @vertex_2_ycoordinate.setter
    def vertex_2_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_ycoordinate`'.format(value))
        self._data["Vertex 2 Y-coordinate"] = value

    @property
    def vertex_2_zcoordinate(self):
        """Get vertex_2_zcoordinate

        Returns:
            float: the value of `vertex_2_zcoordinate` or None if not set
        """
        return self._data["Vertex 2 Z-coordinate"]

    @vertex_2_zcoordinate.setter
    def vertex_2_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_zcoordinate`'.format(value))
        self._data["Vertex 2 Z-coordinate"] = value

    @property
    def vertex_3_xcoordinate(self):
        """Get vertex_3_xcoordinate

        Returns:
            float: the value of `vertex_3_xcoordinate` or None if not set
        """
        return self._data["Vertex 3 X-coordinate"]

    @vertex_3_xcoordinate.setter
    def vertex_3_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_xcoordinate`'.format(value))
        self._data["Vertex 3 X-coordinate"] = value

    @property
    def vertex_3_ycoordinate(self):
        """Get vertex_3_ycoordinate

        Returns:
            float: the value of `vertex_3_ycoordinate` or None if not set
        """
        return self._data["Vertex 3 Y-coordinate"]

    @vertex_3_ycoordinate.setter
    def vertex_3_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_ycoordinate`'.format(value))
        self._data["Vertex 3 Y-coordinate"] = value

    @property
    def vertex_3_zcoordinate(self):
        """Get vertex_3_zcoordinate

        Returns:
            float: the value of `vertex_3_zcoordinate` or None if not set
        """
        return self._data["Vertex 3 Z-coordinate"]

    @vertex_3_zcoordinate.setter
    def vertex_3_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_zcoordinate`'.format(value))
        self._data["Vertex 3 Z-coordinate"] = value

    @property
    def vertex_4_xcoordinate(self):
        """Get vertex_4_xcoordinate

        Returns:
            float: the value of `vertex_4_xcoordinate` or None if not set
        """
        return self._data["Vertex 4 X-coordinate"]

    @vertex_4_xcoordinate.setter
    def vertex_4_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_xcoordinate`'.format(value))
        self._data["Vertex 4 X-coordinate"] = value

    @property
    def vertex_4_ycoordinate(self):
        """Get vertex_4_ycoordinate

        Returns:
            float: the value of `vertex_4_ycoordinate` or None if not set
        """
        return self._data["Vertex 4 Y-coordinate"]

    @vertex_4_ycoordinate.setter
    def vertex_4_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_ycoordinate`'.format(value))
        self._data["Vertex 4 Y-coordinate"] = value

    @property
    def vertex_4_zcoordinate(self):
        """Get vertex_4_zcoordinate

        Returns:
            float: the value of `vertex_4_zcoordinate` or None if not set
        """
        return self._data["Vertex 4 Z-coordinate"]

    @vertex_4_zcoordinate.setter
    def vertex_4_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_zcoordinate`'.format(value))
        self._data["Vertex 4 Z-coordinate"] = value

    @property
    def vertex_5_xcoordinate(self):
        """Get vertex_5_xcoordinate

        Returns:
            float: the value of `vertex_5_xcoordinate` or None if not set
        """
        return self._data["Vertex 5 X-coordinate"]

    @vertex_5_xcoordinate.setter
    def vertex_5_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_xcoordinate`'.format(value))
        self._data["Vertex 5 X-coordinate"] = value

    @property
    def vertex_5_ycoordinate(self):
        """Get vertex_5_ycoordinate

        Returns:
            float: the value of `vertex_5_ycoordinate` or None if not set
        """
        return self._data["Vertex 5 Y-coordinate"]

    @vertex_5_ycoordinate.setter
    def vertex_5_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_ycoordinate`'.format(value))
        self._data["Vertex 5 Y-coordinate"] = value

    @property
    def vertex_5_zcoordinate(self):
        """Get vertex_5_zcoordinate

        Returns:
            float: the value of `vertex_5_zcoordinate` or None if not set
        """
        return self._data["Vertex 5 Z-coordinate"]

    @vertex_5_zcoordinate.setter
    def vertex_5_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_zcoordinate`'.format(value))
        self._data["Vertex 5 Z-coordinate"] = value

    @property
    def vertex_6_xcoordinate(self):
        """Get vertex_6_xcoordinate

        Returns:
            float: the value of `vertex_6_xcoordinate` or None if not set
        """
        return self._data["Vertex 6 X-coordinate"]

    @vertex_6_xcoordinate.setter
    def vertex_6_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_xcoordinate`'.format(value))
        self._data["Vertex 6 X-coordinate"] = value

    @property
    def vertex_6_ycoordinate(self):
        """Get vertex_6_ycoordinate

        Returns:
            float: the value of `vertex_6_ycoordinate` or None if not set
        """
        return self._data["Vertex 6 Y-coordinate"]

    @vertex_6_ycoordinate.setter
    def vertex_6_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_ycoordinate`'.format(value))
        self._data["Vertex 6 Y-coordinate"] = value

    @property
    def vertex_6_zcoordinate(self):
        """Get vertex_6_zcoordinate

        Returns:
            float: the value of `vertex_6_zcoordinate` or None if not set
        """
        return self._data["Vertex 6 Z-coordinate"]

    @vertex_6_zcoordinate.setter
    def vertex_6_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_zcoordinate`'.format(value))
        self._data["Vertex 6 Z-coordinate"] = value

    @property
    def vertex_7_xcoordinate(self):
        """Get vertex_7_xcoordinate

        Returns:
            float: the value of `vertex_7_xcoordinate` or None if not set
        """
        return self._data["Vertex 7 X-coordinate"]

    @vertex_7_xcoordinate.setter
    def vertex_7_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_xcoordinate`'.format(value))
        self._data["Vertex 7 X-coordinate"] = value

    @property
    def vertex_7_ycoordinate(self):
        """Get vertex_7_ycoordinate

        Returns:
            float: the value of `vertex_7_ycoordinate` or None if not set
        """
        return self._data["Vertex 7 Y-coordinate"]

    @vertex_7_ycoordinate.setter
    def vertex_7_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_ycoordinate`'.format(value))
        self._data["Vertex 7 Y-coordinate"] = value

    @property
    def vertex_7_zcoordinate(self):
        """Get vertex_7_zcoordinate

        Returns:
            float: the value of `vertex_7_zcoordinate` or None if not set
        """
        return self._data["Vertex 7 Z-coordinate"]

    @vertex_7_zcoordinate.setter
    def vertex_7_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_zcoordinate`'.format(value))
        self._data["Vertex 7 Z-coordinate"] = value

    @property
    def vertex_8_xcoordinate(self):
        """Get vertex_8_xcoordinate

        Returns:
            float: the value of `vertex_8_xcoordinate` or None if not set
        """
        return self._data["Vertex 8 X-coordinate"]

    @vertex_8_xcoordinate.setter
    def vertex_8_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_xcoordinate`'.format(value))
        self._data["Vertex 8 X-coordinate"] = value

    @property
    def vertex_8_ycoordinate(self):
        """Get vertex_8_ycoordinate

        Returns:
            float: the value of `vertex_8_ycoordinate` or None if not set
        """
        return self._data["Vertex 8 Y-coordinate"]

    @vertex_8_ycoordinate.setter
    def vertex_8_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_ycoordinate`'.format(value))
        self._data["Vertex 8 Y-coordinate"] = value

    @property
    def vertex_8_zcoordinate(self):
        """Get vertex_8_zcoordinate

        Returns:
            float: the value of `vertex_8_zcoordinate` or None if not set
        """
        return self._data["Vertex 8 Z-coordinate"]

    @vertex_8_zcoordinate.setter
    def vertex_8_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_zcoordinate`'.format(value))
        self._data["Vertex 8 Z-coordinate"] = value

    @property
    def vertex_9_xcoordinate(self):
        """Get vertex_9_xcoordinate

        Returns:
            float: the value of `vertex_9_xcoordinate` or None if not set
        """
        return self._data["Vertex 9 X-coordinate"]

    @vertex_9_xcoordinate.setter
    def vertex_9_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_xcoordinate`'.format(value))
        self._data["Vertex 9 X-coordinate"] = value

    @property
    def vertex_9_ycoordinate(self):
        """Get vertex_9_ycoordinate

        Returns:
            float: the value of `vertex_9_ycoordinate` or None if not set
        """
        return self._data["Vertex 9 Y-coordinate"]

    @vertex_9_ycoordinate.setter
    def vertex_9_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_ycoordinate`'.format(value))
        self._data["Vertex 9 Y-coordinate"] = value

    @property
    def vertex_9_zcoordinate(self):
        """Get vertex_9_zcoordinate

        Returns:
            float: the value of `vertex_9_zcoordinate` or None if not set
        """
        return self._data["Vertex 9 Z-coordinate"]

    @vertex_9_zcoordinate.setter
    def vertex_9_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_zcoordinate`'.format(value))
        self._data["Vertex 9 Z-coordinate"] = value

    @property
    def vertex_10_xcoordinate(self):
        """Get vertex_10_xcoordinate

        Returns:
            float: the value of `vertex_10_xcoordinate` or None if not set
        """
        return self._data["Vertex 10 X-coordinate"]

    @vertex_10_xcoordinate.setter
    def vertex_10_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_xcoordinate`'.format(value))
        self._data["Vertex 10 X-coordinate"] = value

    @property
    def vertex_10_ycoordinate(self):
        """Get vertex_10_ycoordinate

        Returns:
            float: the value of `vertex_10_ycoordinate` or None if not set
        """
        return self._data["Vertex 10 Y-coordinate"]

    @vertex_10_ycoordinate.setter
    def vertex_10_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_ycoordinate`'.format(value))
        self._data["Vertex 10 Y-coordinate"] = value

    @property
    def vertex_10_zcoordinate(self):
        """Get vertex_10_zcoordinate

        Returns:
            float: the value of `vertex_10_zcoordinate` or None if not set
        """
        return self._data["Vertex 10 Z-coordinate"]

    @vertex_10_zcoordinate.setter
    def vertex_10_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_zcoordinate`'.format(value))
        self._data["Vertex 10 Z-coordinate"] = value

    @property
    def vertex_11_xcoordinate(self):
        """Get vertex_11_xcoordinate

        Returns:
            float: the value of `vertex_11_xcoordinate` or None if not set
        """
        return self._data["Vertex 11 X-coordinate"]

    @vertex_11_xcoordinate.setter
    def vertex_11_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 11 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 11 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_11_xcoordinate`'.format(value))
        self._data["Vertex 11 X-coordinate"] = value

    @property
    def vertex_11_ycoordinate(self):
        """Get vertex_11_ycoordinate

        Returns:
            float: the value of `vertex_11_ycoordinate` or None if not set
        """
        return self._data["Vertex 11 Y-coordinate"]

    @vertex_11_ycoordinate.setter
    def vertex_11_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 11 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 11 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_11_ycoordinate`'.format(value))
        self._data["Vertex 11 Y-coordinate"] = value

    @property
    def vertex_11_zcoordinate(self):
        """Get vertex_11_zcoordinate

        Returns:
            float: the value of `vertex_11_zcoordinate` or None if not set
        """
        return self._data["Vertex 11 Z-coordinate"]

    @vertex_11_zcoordinate.setter
    def vertex_11_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 11 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 11 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_11_zcoordinate`'.format(value))
        self._data["Vertex 11 Z-coordinate"] = value

    @property
    def vertex_12_xcoordinate(self):
        """Get vertex_12_xcoordinate

        Returns:
            float: the value of `vertex_12_xcoordinate` or None if not set
        """
        return self._data["Vertex 12 X-coordinate"]

    @vertex_12_xcoordinate.setter
    def vertex_12_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 12 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 12 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_12_xcoordinate`'.format(value))
        self._data["Vertex 12 X-coordinate"] = value

    @property
    def vertex_12_ycoordinate(self):
        """Get vertex_12_ycoordinate

        Returns:
            float: the value of `vertex_12_ycoordinate` or None if not set
        """
        return self._data["Vertex 12 Y-coordinate"]

    @vertex_12_ycoordinate.setter
    def vertex_12_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 12 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 12 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_12_ycoordinate`'.format(value))
        self._data["Vertex 12 Y-coordinate"] = value

    @property
    def vertex_12_zcoordinate(self):
        """Get vertex_12_zcoordinate

        Returns:
            float: the value of `vertex_12_zcoordinate` or None if not set
        """
        return self._data["Vertex 12 Z-coordinate"]

    @vertex_12_zcoordinate.setter
    def vertex_12_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 12 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 12 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_12_zcoordinate`'.format(value))
        self._data["Vertex 12 Z-coordinate"] = value

    @property
    def vertex_13_xcoordinate(self):
        """Get vertex_13_xcoordinate

        Returns:
            float: the value of `vertex_13_xcoordinate` or None if not set
        """
        return self._data["Vertex 13 X-coordinate"]

    @vertex_13_xcoordinate.setter
    def vertex_13_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 13 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 13 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_13_xcoordinate`'.format(value))
        self._data["Vertex 13 X-coordinate"] = value

    @property
    def vertex_13_ycoordinate(self):
        """Get vertex_13_ycoordinate

        Returns:
            float: the value of `vertex_13_ycoordinate` or None if not set
        """
        return self._data["Vertex 13 Y-coordinate"]

    @vertex_13_ycoordinate.setter
    def vertex_13_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 13 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 13 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_13_ycoordinate`'.format(value))
        self._data["Vertex 13 Y-coordinate"] = value

    @property
    def vertex_13_zcoordinate(self):
        """Get vertex_13_zcoordinate

        Returns:
            float: the value of `vertex_13_zcoordinate` or None if not set
        """
        return self._data["Vertex 13 Z-coordinate"]

    @vertex_13_zcoordinate.setter
    def vertex_13_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 13 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 13 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_13_zcoordinate`'.format(value))
        self._data["Vertex 13 Z-coordinate"] = value

    @property
    def vertex_14_xcoordinate(self):
        """Get vertex_14_xcoordinate

        Returns:
            float: the value of `vertex_14_xcoordinate` or None if not set
        """
        return self._data["Vertex 14 X-coordinate"]

    @vertex_14_xcoordinate.setter
    def vertex_14_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 14 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 14 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_14_xcoordinate`'.format(value))
        self._data["Vertex 14 X-coordinate"] = value

    @property
    def vertex_14_ycoordinate(self):
        """Get vertex_14_ycoordinate

        Returns:
            float: the value of `vertex_14_ycoordinate` or None if not set
        """
        return self._data["Vertex 14 Y-coordinate"]

    @vertex_14_ycoordinate.setter
    def vertex_14_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 14 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 14 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_14_ycoordinate`'.format(value))
        self._data["Vertex 14 Y-coordinate"] = value

    @property
    def vertex_14_zcoordinate(self):
        """Get vertex_14_zcoordinate

        Returns:
            float: the value of `vertex_14_zcoordinate` or None if not set
        """
        return self._data["Vertex 14 Z-coordinate"]

    @vertex_14_zcoordinate.setter
    def vertex_14_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 14 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 14 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_14_zcoordinate`'.format(value))
        self._data["Vertex 14 Z-coordinate"] = value

    @property
    def vertex_15_xcoordinate(self):
        """Get vertex_15_xcoordinate

        Returns:
            float: the value of `vertex_15_xcoordinate` or None if not set
        """
        return self._data["Vertex 15 X-coordinate"]

    @vertex_15_xcoordinate.setter
    def vertex_15_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 15 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 15 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_15_xcoordinate`'.format(value))
        self._data["Vertex 15 X-coordinate"] = value

    @property
    def vertex_15_ycoordinate(self):
        """Get vertex_15_ycoordinate

        Returns:
            float: the value of `vertex_15_ycoordinate` or None if not set
        """
        return self._data["Vertex 15 Y-coordinate"]

    @vertex_15_ycoordinate.setter
    def vertex_15_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 15 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 15 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_15_ycoordinate`'.format(value))
        self._data["Vertex 15 Y-coordinate"] = value

    @property
    def vertex_15_zcoordinate(self):
        """Get vertex_15_zcoordinate

        Returns:
            float: the value of `vertex_15_zcoordinate` or None if not set
        """
        return self._data["Vertex 15 Z-coordinate"]

    @vertex_15_zcoordinate.setter
    def vertex_15_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 15 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 15 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_15_zcoordinate`'.format(value))
        self._data["Vertex 15 Z-coordinate"] = value

    @property
    def vertex_16_xcoordinate(self):
        """Get vertex_16_xcoordinate

        Returns:
            float: the value of `vertex_16_xcoordinate` or None if not set
        """
        return self._data["Vertex 16 X-coordinate"]

    @vertex_16_xcoordinate.setter
    def vertex_16_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 16 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 16 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_16_xcoordinate`'.format(value))
        self._data["Vertex 16 X-coordinate"] = value

    @property
    def vertex_16_ycoordinate(self):
        """Get vertex_16_ycoordinate

        Returns:
            float: the value of `vertex_16_ycoordinate` or None if not set
        """
        return self._data["Vertex 16 Y-coordinate"]

    @vertex_16_ycoordinate.setter
    def vertex_16_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 16 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 16 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_16_ycoordinate`'.format(value))
        self._data["Vertex 16 Y-coordinate"] = value

    @property
    def vertex_16_zcoordinate(self):
        """Get vertex_16_zcoordinate

        Returns:
            float: the value of `vertex_16_zcoordinate` or None if not set
        """
        return self._data["Vertex 16 Z-coordinate"]

    @vertex_16_zcoordinate.setter
    def vertex_16_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 16 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 16 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_16_zcoordinate`'.format(value))
        self._data["Vertex 16 Z-coordinate"] = value

    @property
    def vertex_17_xcoordinate(self):
        """Get vertex_17_xcoordinate

        Returns:
            float: the value of `vertex_17_xcoordinate` or None if not set
        """
        return self._data["Vertex 17 X-coordinate"]

    @vertex_17_xcoordinate.setter
    def vertex_17_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 17 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 17 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_17_xcoordinate`'.format(value))
        self._data["Vertex 17 X-coordinate"] = value

    @property
    def vertex_17_ycoordinate(self):
        """Get vertex_17_ycoordinate

        Returns:
            float: the value of `vertex_17_ycoordinate` or None if not set
        """
        return self._data["Vertex 17 Y-coordinate"]

    @vertex_17_ycoordinate.setter
    def vertex_17_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 17 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 17 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_17_ycoordinate`'.format(value))
        self._data["Vertex 17 Y-coordinate"] = value

    @property
    def vertex_17_zcoordinate(self):
        """Get vertex_17_zcoordinate

        Returns:
            float: the value of `vertex_17_zcoordinate` or None if not set
        """
        return self._data["Vertex 17 Z-coordinate"]

    @vertex_17_zcoordinate.setter
    def vertex_17_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 17 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 17 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_17_zcoordinate`'.format(value))
        self._data["Vertex 17 Z-coordinate"] = value

    @property
    def vertex_18_xcoordinate(self):
        """Get vertex_18_xcoordinate

        Returns:
            float: the value of `vertex_18_xcoordinate` or None if not set
        """
        return self._data["Vertex 18 X-coordinate"]

    @vertex_18_xcoordinate.setter
    def vertex_18_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 18 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 18 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_18_xcoordinate`'.format(value))
        self._data["Vertex 18 X-coordinate"] = value

    @property
    def vertex_18_ycoordinate(self):
        """Get vertex_18_ycoordinate

        Returns:
            float: the value of `vertex_18_ycoordinate` or None if not set
        """
        return self._data["Vertex 18 Y-coordinate"]

    @vertex_18_ycoordinate.setter
    def vertex_18_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 18 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 18 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_18_ycoordinate`'.format(value))
        self._data["Vertex 18 Y-coordinate"] = value

    @property
    def vertex_18_zcoordinate(self):
        """Get vertex_18_zcoordinate

        Returns:
            float: the value of `vertex_18_zcoordinate` or None if not set
        """
        return self._data["Vertex 18 Z-coordinate"]

    @vertex_18_zcoordinate.setter
    def vertex_18_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 18 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 18 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_18_zcoordinate`'.format(value))
        self._data["Vertex 18 Z-coordinate"] = value

    @property
    def vertex_19_xcoordinate(self):
        """Get vertex_19_xcoordinate

        Returns:
            float: the value of `vertex_19_xcoordinate` or None if not set
        """
        return self._data["Vertex 19 X-coordinate"]

    @vertex_19_xcoordinate.setter
    def vertex_19_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 19 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 19 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_19_xcoordinate`'.format(value))
        self._data["Vertex 19 X-coordinate"] = value

    @property
    def vertex_19_ycoordinate(self):
        """Get vertex_19_ycoordinate

        Returns:
            float: the value of `vertex_19_ycoordinate` or None if not set
        """
        return self._data["Vertex 19 Y-coordinate"]

    @vertex_19_ycoordinate.setter
    def vertex_19_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 19 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 19 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_19_ycoordinate`'.format(value))
        self._data["Vertex 19 Y-coordinate"] = value

    @property
    def vertex_19_zcoordinate(self):
        """Get vertex_19_zcoordinate

        Returns:
            float: the value of `vertex_19_zcoordinate` or None if not set
        """
        return self._data["Vertex 19 Z-coordinate"]

    @vertex_19_zcoordinate.setter
    def vertex_19_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 19 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 19 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_19_zcoordinate`'.format(value))
        self._data["Vertex 19 Z-coordinate"] = value

    @property
    def vertex_20_xcoordinate(self):
        """Get vertex_20_xcoordinate

        Returns:
            float: the value of `vertex_20_xcoordinate` or None if not set
        """
        return self._data["Vertex 20 X-coordinate"]

    @vertex_20_xcoordinate.setter
    def vertex_20_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 20 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 20 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_20_xcoordinate`'.format(value))
        self._data["Vertex 20 X-coordinate"] = value

    @property
    def vertex_20_ycoordinate(self):
        """Get vertex_20_ycoordinate

        Returns:
            float: the value of `vertex_20_ycoordinate` or None if not set
        """
        return self._data["Vertex 20 Y-coordinate"]

    @vertex_20_ycoordinate.setter
    def vertex_20_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 20 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 20 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_20_ycoordinate`'.format(value))
        self._data["Vertex 20 Y-coordinate"] = value

    @property
    def vertex_20_zcoordinate(self):
        """Get vertex_20_zcoordinate

        Returns:
            float: the value of `vertex_20_zcoordinate` or None if not set
        """
        return self._data["Vertex 20 Z-coordinate"]

    @vertex_20_zcoordinate.setter
    def vertex_20_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 20 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 20 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_20_zcoordinate`'.format(value))
        self._data["Vertex 20 Z-coordinate"] = value

    @property
    def vertex_21_xcoordinate(self):
        """Get vertex_21_xcoordinate

        Returns:
            float: the value of `vertex_21_xcoordinate` or None if not set
        """
        return self._data["Vertex 21 X-coordinate"]

    @vertex_21_xcoordinate.setter
    def vertex_21_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 21 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 21 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_21_xcoordinate`'.format(value))
        self._data["Vertex 21 X-coordinate"] = value

    @property
    def vertex_21_ycoordinate(self):
        """Get vertex_21_ycoordinate

        Returns:
            float: the value of `vertex_21_ycoordinate` or None if not set
        """
        return self._data["Vertex 21 Y-coordinate"]

    @vertex_21_ycoordinate.setter
    def vertex_21_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 21 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 21 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_21_ycoordinate`'.format(value))
        self._data["Vertex 21 Y-coordinate"] = value

    @property
    def vertex_21_zcoordinate(self):
        """Get vertex_21_zcoordinate

        Returns:
            float: the value of `vertex_21_zcoordinate` or None if not set
        """
        return self._data["Vertex 21 Z-coordinate"]

    @vertex_21_zcoordinate.setter
    def vertex_21_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 21 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 21 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_21_zcoordinate`'.format(value))
        self._data["Vertex 21 Z-coordinate"] = value

    @property
    def vertex_22_xcoordinate(self):
        """Get vertex_22_xcoordinate

        Returns:
            float: the value of `vertex_22_xcoordinate` or None if not set
        """
        return self._data["Vertex 22 X-coordinate"]

    @vertex_22_xcoordinate.setter
    def vertex_22_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 22 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 22 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_22_xcoordinate`'.format(value))
        self._data["Vertex 22 X-coordinate"] = value

    @property
    def vertex_22_ycoordinate(self):
        """Get vertex_22_ycoordinate

        Returns:
            float: the value of `vertex_22_ycoordinate` or None if not set
        """
        return self._data["Vertex 22 Y-coordinate"]

    @vertex_22_ycoordinate.setter
    def vertex_22_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 22 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 22 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_22_ycoordinate`'.format(value))
        self._data["Vertex 22 Y-coordinate"] = value

    @property
    def vertex_22_zcoordinate(self):
        """Get vertex_22_zcoordinate

        Returns:
            float: the value of `vertex_22_zcoordinate` or None if not set
        """
        return self._data["Vertex 22 Z-coordinate"]

    @vertex_22_zcoordinate.setter
    def vertex_22_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 22 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 22 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_22_zcoordinate`'.format(value))
        self._data["Vertex 22 Z-coordinate"] = value

    @property
    def vertex_23_xcoordinate(self):
        """Get vertex_23_xcoordinate

        Returns:
            float: the value of `vertex_23_xcoordinate` or None if not set
        """
        return self._data["Vertex 23 X-coordinate"]

    @vertex_23_xcoordinate.setter
    def vertex_23_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 23 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 23 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_23_xcoordinate`'.format(value))
        self._data["Vertex 23 X-coordinate"] = value

    @property
    def vertex_23_ycoordinate(self):
        """Get vertex_23_ycoordinate

        Returns:
            float: the value of `vertex_23_ycoordinate` or None if not set
        """
        return self._data["Vertex 23 Y-coordinate"]

    @vertex_23_ycoordinate.setter
    def vertex_23_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 23 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 23 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_23_ycoordinate`'.format(value))
        self._data["Vertex 23 Y-coordinate"] = value

    @property
    def vertex_23_zcoordinate(self):
        """Get vertex_23_zcoordinate

        Returns:
            float: the value of `vertex_23_zcoordinate` or None if not set
        """
        return self._data["Vertex 23 Z-coordinate"]

    @vertex_23_zcoordinate.setter
    def vertex_23_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 23 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 23 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_23_zcoordinate`'.format(value))
        self._data["Vertex 23 Z-coordinate"] = value

    @property
    def vertex_24_xcoordinate(self):
        """Get vertex_24_xcoordinate

        Returns:
            float: the value of `vertex_24_xcoordinate` or None if not set
        """
        return self._data["Vertex 24 X-coordinate"]

    @vertex_24_xcoordinate.setter
    def vertex_24_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 24 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 24 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_24_xcoordinate`'.format(value))
        self._data["Vertex 24 X-coordinate"] = value

    @property
    def vertex_24_ycoordinate(self):
        """Get vertex_24_ycoordinate

        Returns:
            float: the value of `vertex_24_ycoordinate` or None if not set
        """
        return self._data["Vertex 24 Y-coordinate"]

    @vertex_24_ycoordinate.setter
    def vertex_24_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 24 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 24 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_24_ycoordinate`'.format(value))
        self._data["Vertex 24 Y-coordinate"] = value

    @property
    def vertex_24_zcoordinate(self):
        """Get vertex_24_zcoordinate

        Returns:
            float: the value of `vertex_24_zcoordinate` or None if not set
        """
        return self._data["Vertex 24 Z-coordinate"]

    @vertex_24_zcoordinate.setter
    def vertex_24_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 24 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 24 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_24_zcoordinate`'.format(value))
        self._data["Vertex 24 Z-coordinate"] = value

    @property
    def vertex_25_xcoordinate(self):
        """Get vertex_25_xcoordinate

        Returns:
            float: the value of `vertex_25_xcoordinate` or None if not set
        """
        return self._data["Vertex 25 X-coordinate"]

    @vertex_25_xcoordinate.setter
    def vertex_25_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 25 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 25 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_25_xcoordinate`'.format(value))
        self._data["Vertex 25 X-coordinate"] = value

    @property
    def vertex_25_ycoordinate(self):
        """Get vertex_25_ycoordinate

        Returns:
            float: the value of `vertex_25_ycoordinate` or None if not set
        """
        return self._data["Vertex 25 Y-coordinate"]

    @vertex_25_ycoordinate.setter
    def vertex_25_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 25 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 25 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_25_ycoordinate`'.format(value))
        self._data["Vertex 25 Y-coordinate"] = value

    @property
    def vertex_25_zcoordinate(self):
        """Get vertex_25_zcoordinate

        Returns:
            float: the value of `vertex_25_zcoordinate` or None if not set
        """
        return self._data["Vertex 25 Z-coordinate"]

    @vertex_25_zcoordinate.setter
    def vertex_25_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 25 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 25 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_25_zcoordinate`'.format(value))
        self._data["Vertex 25 Z-coordinate"] = value

    @property
    def vertex_26_xcoordinate(self):
        """Get vertex_26_xcoordinate

        Returns:
            float: the value of `vertex_26_xcoordinate` or None if not set
        """
        return self._data["Vertex 26 X-coordinate"]

    @vertex_26_xcoordinate.setter
    def vertex_26_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 26 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 26 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_26_xcoordinate`'.format(value))
        self._data["Vertex 26 X-coordinate"] = value

    @property
    def vertex_26_ycoordinate(self):
        """Get vertex_26_ycoordinate

        Returns:
            float: the value of `vertex_26_ycoordinate` or None if not set
        """
        return self._data["Vertex 26 Y-coordinate"]

    @vertex_26_ycoordinate.setter
    def vertex_26_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 26 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 26 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_26_ycoordinate`'.format(value))
        self._data["Vertex 26 Y-coordinate"] = value

    @property
    def vertex_26_zcoordinate(self):
        """Get vertex_26_zcoordinate

        Returns:
            float: the value of `vertex_26_zcoordinate` or None if not set
        """
        return self._data["Vertex 26 Z-coordinate"]

    @vertex_26_zcoordinate.setter
    def vertex_26_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 26 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 26 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_26_zcoordinate`'.format(value))
        self._data["Vertex 26 Z-coordinate"] = value

    @property
    def vertex_27_xcoordinate(self):
        """Get vertex_27_xcoordinate

        Returns:
            float: the value of `vertex_27_xcoordinate` or None if not set
        """
        return self._data["Vertex 27 X-coordinate"]

    @vertex_27_xcoordinate.setter
    def vertex_27_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 27 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 27 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_27_xcoordinate`'.format(value))
        self._data["Vertex 27 X-coordinate"] = value

    @property
    def vertex_27_ycoordinate(self):
        """Get vertex_27_ycoordinate

        Returns:
            float: the value of `vertex_27_ycoordinate` or None if not set
        """
        return self._data["Vertex 27 Y-coordinate"]

    @vertex_27_ycoordinate.setter
    def vertex_27_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 27 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 27 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_27_ycoordinate`'.format(value))
        self._data["Vertex 27 Y-coordinate"] = value

    @property
    def vertex_27_zcoordinate(self):
        """Get vertex_27_zcoordinate

        Returns:
            float: the value of `vertex_27_zcoordinate` or None if not set
        """
        return self._data["Vertex 27 Z-coordinate"]

    @vertex_27_zcoordinate.setter
    def vertex_27_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 27 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 27 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_27_zcoordinate`'.format(value))
        self._data["Vertex 27 Z-coordinate"] = value

    @property
    def vertex_28_xcoordinate(self):
        """Get vertex_28_xcoordinate

        Returns:
            float: the value of `vertex_28_xcoordinate` or None if not set
        """
        return self._data["Vertex 28 X-coordinate"]

    @vertex_28_xcoordinate.setter
    def vertex_28_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 28 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 28 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_28_xcoordinate`'.format(value))
        self._data["Vertex 28 X-coordinate"] = value

    @property
    def vertex_28_ycoordinate(self):
        """Get vertex_28_ycoordinate

        Returns:
            float: the value of `vertex_28_ycoordinate` or None if not set
        """
        return self._data["Vertex 28 Y-coordinate"]

    @vertex_28_ycoordinate.setter
    def vertex_28_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 28 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 28 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_28_ycoordinate`'.format(value))
        self._data["Vertex 28 Y-coordinate"] = value

    @property
    def vertex_28_zcoordinate(self):
        """Get vertex_28_zcoordinate

        Returns:
            float: the value of `vertex_28_zcoordinate` or None if not set
        """
        return self._data["Vertex 28 Z-coordinate"]

    @vertex_28_zcoordinate.setter
    def vertex_28_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 28 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 28 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_28_zcoordinate`'.format(value))
        self._data["Vertex 28 Z-coordinate"] = value

    @property
    def vertex_29_xcoordinate(self):
        """Get vertex_29_xcoordinate

        Returns:
            float: the value of `vertex_29_xcoordinate` or None if not set
        """
        return self._data["Vertex 29 X-coordinate"]

    @vertex_29_xcoordinate.setter
    def vertex_29_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 29 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 29 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_29_xcoordinate`'.format(value))
        self._data["Vertex 29 X-coordinate"] = value

    @property
    def vertex_29_ycoordinate(self):
        """Get vertex_29_ycoordinate

        Returns:
            float: the value of `vertex_29_ycoordinate` or None if not set
        """
        return self._data["Vertex 29 Y-coordinate"]

    @vertex_29_ycoordinate.setter
    def vertex_29_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 29 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 29 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_29_ycoordinate`'.format(value))
        self._data["Vertex 29 Y-coordinate"] = value

    @property
    def vertex_29_zcoordinate(self):
        """Get vertex_29_zcoordinate

        Returns:
            float: the value of `vertex_29_zcoordinate` or None if not set
        """
        return self._data["Vertex 29 Z-coordinate"]

    @vertex_29_zcoordinate.setter
    def vertex_29_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 29 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 29 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_29_zcoordinate`'.format(value))
        self._data["Vertex 29 Z-coordinate"] = value

    @property
    def vertex_30_xcoordinate(self):
        """Get vertex_30_xcoordinate

        Returns:
            float: the value of `vertex_30_xcoordinate` or None if not set
        """
        return self._data["Vertex 30 X-coordinate"]

    @vertex_30_xcoordinate.setter
    def vertex_30_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 30 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 30 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_30_xcoordinate`'.format(value))
        self._data["Vertex 30 X-coordinate"] = value

    @property
    def vertex_30_ycoordinate(self):
        """Get vertex_30_ycoordinate

        Returns:
            float: the value of `vertex_30_ycoordinate` or None if not set
        """
        return self._data["Vertex 30 Y-coordinate"]

    @vertex_30_ycoordinate.setter
    def vertex_30_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 30 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 30 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_30_ycoordinate`'.format(value))
        self._data["Vertex 30 Y-coordinate"] = value

    @property
    def vertex_30_zcoordinate(self):
        """Get vertex_30_zcoordinate

        Returns:
            float: the value of `vertex_30_zcoordinate` or None if not set
        """
        return self._data["Vertex 30 Z-coordinate"]

    @vertex_30_zcoordinate.setter
    def vertex_30_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 30 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 30 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_30_zcoordinate`'.format(value))
        self._data["Vertex 30 Z-coordinate"] = value

    @property
    def vertex_31_xcoordinate(self):
        """Get vertex_31_xcoordinate

        Returns:
            float: the value of `vertex_31_xcoordinate` or None if not set
        """
        return self._data["Vertex 31 X-coordinate"]

    @vertex_31_xcoordinate.setter
    def vertex_31_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 31 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 31 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_31_xcoordinate`'.format(value))
        self._data["Vertex 31 X-coordinate"] = value

    @property
    def vertex_31_ycoordinate(self):
        """Get vertex_31_ycoordinate

        Returns:
            float: the value of `vertex_31_ycoordinate` or None if not set
        """
        return self._data["Vertex 31 Y-coordinate"]

    @vertex_31_ycoordinate.setter
    def vertex_31_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 31 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 31 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_31_ycoordinate`'.format(value))
        self._data["Vertex 31 Y-coordinate"] = value

    @property
    def vertex_31_zcoordinate(self):
        """Get vertex_31_zcoordinate

        Returns:
            float: the value of `vertex_31_zcoordinate` or None if not set
        """
        return self._data["Vertex 31 Z-coordinate"]

    @vertex_31_zcoordinate.setter
    def vertex_31_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 31 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 31 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_31_zcoordinate`'.format(value))
        self._data["Vertex 31 Z-coordinate"] = value

    @property
    def vertex_32_xcoordinate(self):
        """Get vertex_32_xcoordinate

        Returns:
            float: the value of `vertex_32_xcoordinate` or None if not set
        """
        return self._data["Vertex 32 X-coordinate"]

    @vertex_32_xcoordinate.setter
    def vertex_32_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 32 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 32 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_32_xcoordinate`'.format(value))
        self._data["Vertex 32 X-coordinate"] = value

    @property
    def vertex_32_ycoordinate(self):
        """Get vertex_32_ycoordinate

        Returns:
            float: the value of `vertex_32_ycoordinate` or None if not set
        """
        return self._data["Vertex 32 Y-coordinate"]

    @vertex_32_ycoordinate.setter
    def vertex_32_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 32 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 32 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_32_ycoordinate`'.format(value))
        self._data["Vertex 32 Y-coordinate"] = value

    @property
    def vertex_32_zcoordinate(self):
        """Get vertex_32_zcoordinate

        Returns:
            float: the value of `vertex_32_zcoordinate` or None if not set
        """
        return self._data["Vertex 32 Z-coordinate"]

    @vertex_32_zcoordinate.setter
    def vertex_32_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 32 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 32 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_32_zcoordinate`'.format(value))
        self._data["Vertex 32 Z-coordinate"] = value

    @property
    def vertex_33_xcoordinate(self):
        """Get vertex_33_xcoordinate

        Returns:
            float: the value of `vertex_33_xcoordinate` or None if not set
        """
        return self._data["Vertex 33 X-coordinate"]

    @vertex_33_xcoordinate.setter
    def vertex_33_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 33 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 33 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_33_xcoordinate`'.format(value))
        self._data["Vertex 33 X-coordinate"] = value

    @property
    def vertex_33_ycoordinate(self):
        """Get vertex_33_ycoordinate

        Returns:
            float: the value of `vertex_33_ycoordinate` or None if not set
        """
        return self._data["Vertex 33 Y-coordinate"]

    @vertex_33_ycoordinate.setter
    def vertex_33_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 33 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 33 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_33_ycoordinate`'.format(value))
        self._data["Vertex 33 Y-coordinate"] = value

    @property
    def vertex_33_zcoordinate(self):
        """Get vertex_33_zcoordinate

        Returns:
            float: the value of `vertex_33_zcoordinate` or None if not set
        """
        return self._data["Vertex 33 Z-coordinate"]

    @vertex_33_zcoordinate.setter
    def vertex_33_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 33 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 33 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_33_zcoordinate`'.format(value))
        self._data["Vertex 33 Z-coordinate"] = value

    @property
    def vertex_34_xcoordinate(self):
        """Get vertex_34_xcoordinate

        Returns:
            float: the value of `vertex_34_xcoordinate` or None if not set
        """
        return self._data["Vertex 34 X-coordinate"]

    @vertex_34_xcoordinate.setter
    def vertex_34_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 34 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 34 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_34_xcoordinate`'.format(value))
        self._data["Vertex 34 X-coordinate"] = value

    @property
    def vertex_34_ycoordinate(self):
        """Get vertex_34_ycoordinate

        Returns:
            float: the value of `vertex_34_ycoordinate` or None if not set
        """
        return self._data["Vertex 34 Y-coordinate"]

    @vertex_34_ycoordinate.setter
    def vertex_34_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 34 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 34 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_34_ycoordinate`'.format(value))
        self._data["Vertex 34 Y-coordinate"] = value

    @property
    def vertex_34_zcoordinate(self):
        """Get vertex_34_zcoordinate

        Returns:
            float: the value of `vertex_34_zcoordinate` or None if not set
        """
        return self._data["Vertex 34 Z-coordinate"]

    @vertex_34_zcoordinate.setter
    def vertex_34_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 34 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 34 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_34_zcoordinate`'.format(value))
        self._data["Vertex 34 Z-coordinate"] = value

    @property
    def vertex_35_xcoordinate(self):
        """Get vertex_35_xcoordinate

        Returns:
            float: the value of `vertex_35_xcoordinate` or None if not set
        """
        return self._data["Vertex 35 X-coordinate"]

    @vertex_35_xcoordinate.setter
    def vertex_35_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 35 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 35 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_35_xcoordinate`'.format(value))
        self._data["Vertex 35 X-coordinate"] = value

    @property
    def vertex_35_ycoordinate(self):
        """Get vertex_35_ycoordinate

        Returns:
            float: the value of `vertex_35_ycoordinate` or None if not set
        """
        return self._data["Vertex 35 Y-coordinate"]

    @vertex_35_ycoordinate.setter
    def vertex_35_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 35 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 35 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_35_ycoordinate`'.format(value))
        self._data["Vertex 35 Y-coordinate"] = value

    @property
    def vertex_35_zcoordinate(self):
        """Get vertex_35_zcoordinate

        Returns:
            float: the value of `vertex_35_zcoordinate` or None if not set
        """
        return self._data["Vertex 35 Z-coordinate"]

    @vertex_35_zcoordinate.setter
    def vertex_35_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 35 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 35 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_35_zcoordinate`'.format(value))
        self._data["Vertex 35 Z-coordinate"] = value

    @property
    def vertex_36_xcoordinate(self):
        """Get vertex_36_xcoordinate

        Returns:
            float: the value of `vertex_36_xcoordinate` or None if not set
        """
        return self._data["Vertex 36 X-coordinate"]

    @vertex_36_xcoordinate.setter
    def vertex_36_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 36 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 36 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_36_xcoordinate`'.format(value))
        self._data["Vertex 36 X-coordinate"] = value

    @property
    def vertex_36_ycoordinate(self):
        """Get vertex_36_ycoordinate

        Returns:
            float: the value of `vertex_36_ycoordinate` or None if not set
        """
        return self._data["Vertex 36 Y-coordinate"]

    @vertex_36_ycoordinate.setter
    def vertex_36_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 36 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 36 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_36_ycoordinate`'.format(value))
        self._data["Vertex 36 Y-coordinate"] = value

    @property
    def vertex_36_zcoordinate(self):
        """Get vertex_36_zcoordinate

        Returns:
            float: the value of `vertex_36_zcoordinate` or None if not set
        """
        return self._data["Vertex 36 Z-coordinate"]

    @vertex_36_zcoordinate.setter
    def vertex_36_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 36 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 36 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_36_zcoordinate`'.format(value))
        self._data["Vertex 36 Z-coordinate"] = value

    @property
    def vertex_37_xcoordinate(self):
        """Get vertex_37_xcoordinate

        Returns:
            float: the value of `vertex_37_xcoordinate` or None if not set
        """
        return self._data["Vertex 37 X-coordinate"]

    @vertex_37_xcoordinate.setter
    def vertex_37_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 37 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 37 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_37_xcoordinate`'.format(value))
        self._data["Vertex 37 X-coordinate"] = value

    @property
    def vertex_37_ycoordinate(self):
        """Get vertex_37_ycoordinate

        Returns:
            float: the value of `vertex_37_ycoordinate` or None if not set
        """
        return self._data["Vertex 37 Y-coordinate"]

    @vertex_37_ycoordinate.setter
    def vertex_37_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 37 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 37 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_37_ycoordinate`'.format(value))
        self._data["Vertex 37 Y-coordinate"] = value

    @property
    def vertex_37_zcoordinate(self):
        """Get vertex_37_zcoordinate

        Returns:
            float: the value of `vertex_37_zcoordinate` or None if not set
        """
        return self._data["Vertex 37 Z-coordinate"]

    @vertex_37_zcoordinate.setter
    def vertex_37_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 37 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 37 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_37_zcoordinate`'.format(value))
        self._data["Vertex 37 Z-coordinate"] = value

    @property
    def vertex_38_xcoordinate(self):
        """Get vertex_38_xcoordinate

        Returns:
            float: the value of `vertex_38_xcoordinate` or None if not set
        """
        return self._data["Vertex 38 X-coordinate"]

    @vertex_38_xcoordinate.setter
    def vertex_38_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 38 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 38 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_38_xcoordinate`'.format(value))
        self._data["Vertex 38 X-coordinate"] = value

    @property
    def vertex_38_ycoordinate(self):
        """Get vertex_38_ycoordinate

        Returns:
            float: the value of `vertex_38_ycoordinate` or None if not set
        """
        return self._data["Vertex 38 Y-coordinate"]

    @vertex_38_ycoordinate.setter
    def vertex_38_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 38 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 38 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_38_ycoordinate`'.format(value))
        self._data["Vertex 38 Y-coordinate"] = value

    @property
    def vertex_38_zcoordinate(self):
        """Get vertex_38_zcoordinate

        Returns:
            float: the value of `vertex_38_zcoordinate` or None if not set
        """
        return self._data["Vertex 38 Z-coordinate"]

    @vertex_38_zcoordinate.setter
    def vertex_38_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 38 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 38 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_38_zcoordinate`'.format(value))
        self._data["Vertex 38 Z-coordinate"] = value

    @property
    def vertex_39_xcoordinate(self):
        """Get vertex_39_xcoordinate

        Returns:
            float: the value of `vertex_39_xcoordinate` or None if not set
        """
        return self._data["Vertex 39 X-coordinate"]

    @vertex_39_xcoordinate.setter
    def vertex_39_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 39 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 39 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_39_xcoordinate`'.format(value))
        self._data["Vertex 39 X-coordinate"] = value

    @property
    def vertex_39_ycoordinate(self):
        """Get vertex_39_ycoordinate

        Returns:
            float: the value of `vertex_39_ycoordinate` or None if not set
        """
        return self._data["Vertex 39 Y-coordinate"]

    @vertex_39_ycoordinate.setter
    def vertex_39_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 39 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 39 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_39_ycoordinate`'.format(value))
        self._data["Vertex 39 Y-coordinate"] = value

    @property
    def vertex_39_zcoordinate(self):
        """Get vertex_39_zcoordinate

        Returns:
            float: the value of `vertex_39_zcoordinate` or None if not set
        """
        return self._data["Vertex 39 Z-coordinate"]

    @vertex_39_zcoordinate.setter
    def vertex_39_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 39 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 39 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_39_zcoordinate`'.format(value))
        self._data["Vertex 39 Z-coordinate"] = value

    @property
    def vertex_40_xcoordinate(self):
        """Get vertex_40_xcoordinate

        Returns:
            float: the value of `vertex_40_xcoordinate` or None if not set
        """
        return self._data["Vertex 40 X-coordinate"]

    @vertex_40_xcoordinate.setter
    def vertex_40_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 40 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 40 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_40_xcoordinate`'.format(value))
        self._data["Vertex 40 X-coordinate"] = value

    @property
    def vertex_40_ycoordinate(self):
        """Get vertex_40_ycoordinate

        Returns:
            float: the value of `vertex_40_ycoordinate` or None if not set
        """
        return self._data["Vertex 40 Y-coordinate"]

    @vertex_40_ycoordinate.setter
    def vertex_40_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 40 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 40 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_40_ycoordinate`'.format(value))
        self._data["Vertex 40 Y-coordinate"] = value

    @property
    def vertex_40_zcoordinate(self):
        """Get vertex_40_zcoordinate

        Returns:
            float: the value of `vertex_40_zcoordinate` or None if not set
        """
        return self._data["Vertex 40 Z-coordinate"]

    @vertex_40_zcoordinate.setter
    def vertex_40_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 40 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 40 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_40_zcoordinate`'.format(value))
        self._data["Vertex 40 Z-coordinate"] = value

    @property
    def vertex_41_xcoordinate(self):
        """Get vertex_41_xcoordinate

        Returns:
            float: the value of `vertex_41_xcoordinate` or None if not set
        """
        return self._data["Vertex 41 X-coordinate"]

    @vertex_41_xcoordinate.setter
    def vertex_41_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 41 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 41 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_41_xcoordinate`'.format(value))
        self._data["Vertex 41 X-coordinate"] = value

    @property
    def vertex_41_ycoordinate(self):
        """Get vertex_41_ycoordinate

        Returns:
            float: the value of `vertex_41_ycoordinate` or None if not set
        """
        return self._data["Vertex 41 Y-coordinate"]

    @vertex_41_ycoordinate.setter
    def vertex_41_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 41 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 41 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_41_ycoordinate`'.format(value))
        self._data["Vertex 41 Y-coordinate"] = value

    @property
    def vertex_41_zcoordinate(self):
        """Get vertex_41_zcoordinate

        Returns:
            float: the value of `vertex_41_zcoordinate` or None if not set
        """
        return self._data["Vertex 41 Z-coordinate"]

    @vertex_41_zcoordinate.setter
    def vertex_41_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 41 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 41 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_41_zcoordinate`'.format(value))
        self._data["Vertex 41 Z-coordinate"] = value

    @property
    def vertex_42_xcoordinate(self):
        """Get vertex_42_xcoordinate

        Returns:
            float: the value of `vertex_42_xcoordinate` or None if not set
        """
        return self._data["Vertex 42 X-coordinate"]

    @vertex_42_xcoordinate.setter
    def vertex_42_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 42 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 42 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_42_xcoordinate`'.format(value))
        self._data["Vertex 42 X-coordinate"] = value

    @property
    def vertex_42_ycoordinate(self):
        """Get vertex_42_ycoordinate

        Returns:
            float: the value of `vertex_42_ycoordinate` or None if not set
        """
        return self._data["Vertex 42 Y-coordinate"]

    @vertex_42_ycoordinate.setter
    def vertex_42_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 42 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 42 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_42_ycoordinate`'.format(value))
        self._data["Vertex 42 Y-coordinate"] = value

    @property
    def vertex_42_zcoordinate(self):
        """Get vertex_42_zcoordinate

        Returns:
            float: the value of `vertex_42_zcoordinate` or None if not set
        """
        return self._data["Vertex 42 Z-coordinate"]

    @vertex_42_zcoordinate.setter
    def vertex_42_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 42 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 42 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_42_zcoordinate`'.format(value))
        self._data["Vertex 42 Z-coordinate"] = value

    @property
    def vertex_43_xcoordinate(self):
        """Get vertex_43_xcoordinate

        Returns:
            float: the value of `vertex_43_xcoordinate` or None if not set
        """
        return self._data["Vertex 43 X-coordinate"]

    @vertex_43_xcoordinate.setter
    def vertex_43_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 43 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 43 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_43_xcoordinate`'.format(value))
        self._data["Vertex 43 X-coordinate"] = value

    @property
    def vertex_43_ycoordinate(self):
        """Get vertex_43_ycoordinate

        Returns:
            float: the value of `vertex_43_ycoordinate` or None if not set
        """
        return self._data["Vertex 43 Y-coordinate"]

    @vertex_43_ycoordinate.setter
    def vertex_43_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 43 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 43 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_43_ycoordinate`'.format(value))
        self._data["Vertex 43 Y-coordinate"] = value

    @property
    def vertex_43_zcoordinate(self):
        """Get vertex_43_zcoordinate

        Returns:
            float: the value of `vertex_43_zcoordinate` or None if not set
        """
        return self._data["Vertex 43 Z-coordinate"]

    @vertex_43_zcoordinate.setter
    def vertex_43_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 43 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 43 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_43_zcoordinate`'.format(value))
        self._data["Vertex 43 Z-coordinate"] = value

    @property
    def vertex_44_xcoordinate(self):
        """Get vertex_44_xcoordinate

        Returns:
            float: the value of `vertex_44_xcoordinate` or None if not set
        """
        return self._data["Vertex 44 X-coordinate"]

    @vertex_44_xcoordinate.setter
    def vertex_44_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 44 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 44 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_44_xcoordinate`'.format(value))
        self._data["Vertex 44 X-coordinate"] = value

    @property
    def vertex_44_ycoordinate(self):
        """Get vertex_44_ycoordinate

        Returns:
            float: the value of `vertex_44_ycoordinate` or None if not set
        """
        return self._data["Vertex 44 Y-coordinate"]

    @vertex_44_ycoordinate.setter
    def vertex_44_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 44 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 44 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_44_ycoordinate`'.format(value))
        self._data["Vertex 44 Y-coordinate"] = value

    @property
    def vertex_44_zcoordinate(self):
        """Get vertex_44_zcoordinate

        Returns:
            float: the value of `vertex_44_zcoordinate` or None if not set
        """
        return self._data["Vertex 44 Z-coordinate"]

    @vertex_44_zcoordinate.setter
    def vertex_44_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 44 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 44 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_44_zcoordinate`'.format(value))
        self._data["Vertex 44 Z-coordinate"] = value

    @property
    def vertex_45_xcoordinate(self):
        """Get vertex_45_xcoordinate

        Returns:
            float: the value of `vertex_45_xcoordinate` or None if not set
        """
        return self._data["Vertex 45 X-coordinate"]

    @vertex_45_xcoordinate.setter
    def vertex_45_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 45 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 45 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_45_xcoordinate`'.format(value))
        self._data["Vertex 45 X-coordinate"] = value

    @property
    def vertex_45_ycoordinate(self):
        """Get vertex_45_ycoordinate

        Returns:
            float: the value of `vertex_45_ycoordinate` or None if not set
        """
        return self._data["Vertex 45 Y-coordinate"]

    @vertex_45_ycoordinate.setter
    def vertex_45_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 45 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 45 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_45_ycoordinate`'.format(value))
        self._data["Vertex 45 Y-coordinate"] = value

    @property
    def vertex_45_zcoordinate(self):
        """Get vertex_45_zcoordinate

        Returns:
            float: the value of `vertex_45_zcoordinate` or None if not set
        """
        return self._data["Vertex 45 Z-coordinate"]

    @vertex_45_zcoordinate.setter
    def vertex_45_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 45 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 45 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_45_zcoordinate`'.format(value))
        self._data["Vertex 45 Z-coordinate"] = value

    @property
    def vertex_46_xcoordinate(self):
        """Get vertex_46_xcoordinate

        Returns:
            float: the value of `vertex_46_xcoordinate` or None if not set
        """
        return self._data["Vertex 46 X-coordinate"]

    @vertex_46_xcoordinate.setter
    def vertex_46_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 46 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 46 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_46_xcoordinate`'.format(value))
        self._data["Vertex 46 X-coordinate"] = value

    @property
    def vertex_46_ycoordinate(self):
        """Get vertex_46_ycoordinate

        Returns:
            float: the value of `vertex_46_ycoordinate` or None if not set
        """
        return self._data["Vertex 46 Y-coordinate"]

    @vertex_46_ycoordinate.setter
    def vertex_46_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 46 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 46 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_46_ycoordinate`'.format(value))
        self._data["Vertex 46 Y-coordinate"] = value

    @property
    def vertex_46_zcoordinate(self):
        """Get vertex_46_zcoordinate

        Returns:
            float: the value of `vertex_46_zcoordinate` or None if not set
        """
        return self._data["Vertex 46 Z-coordinate"]

    @vertex_46_zcoordinate.setter
    def vertex_46_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 46 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 46 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_46_zcoordinate`'.format(value))
        self._data["Vertex 46 Z-coordinate"] = value

    @property
    def vertex_47_xcoordinate(self):
        """Get vertex_47_xcoordinate

        Returns:
            float: the value of `vertex_47_xcoordinate` or None if not set
        """
        return self._data["Vertex 47 X-coordinate"]

    @vertex_47_xcoordinate.setter
    def vertex_47_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 47 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 47 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_47_xcoordinate`'.format(value))
        self._data["Vertex 47 X-coordinate"] = value

    @property
    def vertex_47_ycoordinate(self):
        """Get vertex_47_ycoordinate

        Returns:
            float: the value of `vertex_47_ycoordinate` or None if not set
        """
        return self._data["Vertex 47 Y-coordinate"]

    @vertex_47_ycoordinate.setter
    def vertex_47_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 47 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 47 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_47_ycoordinate`'.format(value))
        self._data["Vertex 47 Y-coordinate"] = value

    @property
    def vertex_47_zcoordinate(self):
        """Get vertex_47_zcoordinate

        Returns:
            float: the value of `vertex_47_zcoordinate` or None if not set
        """
        return self._data["Vertex 47 Z-coordinate"]

    @vertex_47_zcoordinate.setter
    def vertex_47_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 47 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 47 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_47_zcoordinate`'.format(value))
        self._data["Vertex 47 Z-coordinate"] = value

    @property
    def vertex_48_xcoordinate(self):
        """Get vertex_48_xcoordinate

        Returns:
            float: the value of `vertex_48_xcoordinate` or None if not set
        """
        return self._data["Vertex 48 X-coordinate"]

    @vertex_48_xcoordinate.setter
    def vertex_48_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 48 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 48 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_48_xcoordinate`'.format(value))
        self._data["Vertex 48 X-coordinate"] = value

    @property
    def vertex_48_ycoordinate(self):
        """Get vertex_48_ycoordinate

        Returns:
            float: the value of `vertex_48_ycoordinate` or None if not set
        """
        return self._data["Vertex 48 Y-coordinate"]

    @vertex_48_ycoordinate.setter
    def vertex_48_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 48 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 48 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_48_ycoordinate`'.format(value))
        self._data["Vertex 48 Y-coordinate"] = value

    @property
    def vertex_48_zcoordinate(self):
        """Get vertex_48_zcoordinate

        Returns:
            float: the value of `vertex_48_zcoordinate` or None if not set
        """
        return self._data["Vertex 48 Z-coordinate"]

    @vertex_48_zcoordinate.setter
    def vertex_48_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 48 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 48 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_48_zcoordinate`'.format(value))
        self._data["Vertex 48 Z-coordinate"] = value

    @property
    def vertex_49_xcoordinate(self):
        """Get vertex_49_xcoordinate

        Returns:
            float: the value of `vertex_49_xcoordinate` or None if not set
        """
        return self._data["Vertex 49 X-coordinate"]

    @vertex_49_xcoordinate.setter
    def vertex_49_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 49 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 49 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_49_xcoordinate`'.format(value))
        self._data["Vertex 49 X-coordinate"] = value

    @property
    def vertex_49_ycoordinate(self):
        """Get vertex_49_ycoordinate

        Returns:
            float: the value of `vertex_49_ycoordinate` or None if not set
        """
        return self._data["Vertex 49 Y-coordinate"]

    @vertex_49_ycoordinate.setter
    def vertex_49_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 49 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 49 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_49_ycoordinate`'.format(value))
        self._data["Vertex 49 Y-coordinate"] = value

    @property
    def vertex_49_zcoordinate(self):
        """Get vertex_49_zcoordinate

        Returns:
            float: the value of `vertex_49_zcoordinate` or None if not set
        """
        return self._data["Vertex 49 Z-coordinate"]

    @vertex_49_zcoordinate.setter
    def vertex_49_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 49 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 49 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_49_zcoordinate`'.format(value))
        self._data["Vertex 49 Z-coordinate"] = value

    @property
    def vertex_50_xcoordinate(self):
        """Get vertex_50_xcoordinate

        Returns:
            float: the value of `vertex_50_xcoordinate` or None if not set
        """
        return self._data["Vertex 50 X-coordinate"]

    @vertex_50_xcoordinate.setter
    def vertex_50_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 50 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 50 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_50_xcoordinate`'.format(value))
        self._data["Vertex 50 X-coordinate"] = value

    @property
    def vertex_50_ycoordinate(self):
        """Get vertex_50_ycoordinate

        Returns:
            float: the value of `vertex_50_ycoordinate` or None if not set
        """
        return self._data["Vertex 50 Y-coordinate"]

    @vertex_50_ycoordinate.setter
    def vertex_50_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 50 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 50 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_50_ycoordinate`'.format(value))
        self._data["Vertex 50 Y-coordinate"] = value

    @property
    def vertex_50_zcoordinate(self):
        """Get vertex_50_zcoordinate

        Returns:
            float: the value of `vertex_50_zcoordinate` or None if not set
        """
        return self._data["Vertex 50 Z-coordinate"]

    @vertex_50_zcoordinate.setter
    def vertex_50_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 50 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 50 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_50_zcoordinate`'.format(value))
        self._data["Vertex 50 Z-coordinate"] = value

    @property
    def vertex_51_xcoordinate(self):
        """Get vertex_51_xcoordinate

        Returns:
            float: the value of `vertex_51_xcoordinate` or None if not set
        """
        return self._data["Vertex 51 X-coordinate"]

    @vertex_51_xcoordinate.setter
    def vertex_51_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 51 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 51 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_51_xcoordinate`'.format(value))
        self._data["Vertex 51 X-coordinate"] = value

    @property
    def vertex_51_ycoordinate(self):
        """Get vertex_51_ycoordinate

        Returns:
            float: the value of `vertex_51_ycoordinate` or None if not set
        """
        return self._data["Vertex 51 Y-coordinate"]

    @vertex_51_ycoordinate.setter
    def vertex_51_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 51 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 51 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_51_ycoordinate`'.format(value))
        self._data["Vertex 51 Y-coordinate"] = value

    @property
    def vertex_51_zcoordinate(self):
        """Get vertex_51_zcoordinate

        Returns:
            float: the value of `vertex_51_zcoordinate` or None if not set
        """
        return self._data["Vertex 51 Z-coordinate"]

    @vertex_51_zcoordinate.setter
    def vertex_51_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 51 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 51 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_51_zcoordinate`'.format(value))
        self._data["Vertex 51 Z-coordinate"] = value

    @property
    def vertex_52_xcoordinate(self):
        """Get vertex_52_xcoordinate

        Returns:
            float: the value of `vertex_52_xcoordinate` or None if not set
        """
        return self._data["Vertex 52 X-coordinate"]

    @vertex_52_xcoordinate.setter
    def vertex_52_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 52 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 52 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_52_xcoordinate`'.format(value))
        self._data["Vertex 52 X-coordinate"] = value

    @property
    def vertex_52_ycoordinate(self):
        """Get vertex_52_ycoordinate

        Returns:
            float: the value of `vertex_52_ycoordinate` or None if not set
        """
        return self._data["Vertex 52 Y-coordinate"]

    @vertex_52_ycoordinate.setter
    def vertex_52_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 52 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 52 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_52_ycoordinate`'.format(value))
        self._data["Vertex 52 Y-coordinate"] = value

    @property
    def vertex_52_zcoordinate(self):
        """Get vertex_52_zcoordinate

        Returns:
            float: the value of `vertex_52_zcoordinate` or None if not set
        """
        return self._data["Vertex 52 Z-coordinate"]

    @vertex_52_zcoordinate.setter
    def vertex_52_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 52 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 52 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_52_zcoordinate`'.format(value))
        self._data["Vertex 52 Z-coordinate"] = value

    @property
    def vertex_53_xcoordinate(self):
        """Get vertex_53_xcoordinate

        Returns:
            float: the value of `vertex_53_xcoordinate` or None if not set
        """
        return self._data["Vertex 53 X-coordinate"]

    @vertex_53_xcoordinate.setter
    def vertex_53_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 53 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 53 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_53_xcoordinate`'.format(value))
        self._data["Vertex 53 X-coordinate"] = value

    @property
    def vertex_53_ycoordinate(self):
        """Get vertex_53_ycoordinate

        Returns:
            float: the value of `vertex_53_ycoordinate` or None if not set
        """
        return self._data["Vertex 53 Y-coordinate"]

    @vertex_53_ycoordinate.setter
    def vertex_53_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 53 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 53 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_53_ycoordinate`'.format(value))
        self._data["Vertex 53 Y-coordinate"] = value

    @property
    def vertex_53_zcoordinate(self):
        """Get vertex_53_zcoordinate

        Returns:
            float: the value of `vertex_53_zcoordinate` or None if not set
        """
        return self._data["Vertex 53 Z-coordinate"]

    @vertex_53_zcoordinate.setter
    def vertex_53_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 53 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 53 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_53_zcoordinate`'.format(value))
        self._data["Vertex 53 Z-coordinate"] = value

    @property
    def vertex_54_xcoordinate(self):
        """Get vertex_54_xcoordinate

        Returns:
            float: the value of `vertex_54_xcoordinate` or None if not set
        """
        return self._data["Vertex 54 X-coordinate"]

    @vertex_54_xcoordinate.setter
    def vertex_54_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 54 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 54 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_54_xcoordinate`'.format(value))
        self._data["Vertex 54 X-coordinate"] = value

    @property
    def vertex_54_ycoordinate(self):
        """Get vertex_54_ycoordinate

        Returns:
            float: the value of `vertex_54_ycoordinate` or None if not set
        """
        return self._data["Vertex 54 Y-coordinate"]

    @vertex_54_ycoordinate.setter
    def vertex_54_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 54 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 54 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_54_ycoordinate`'.format(value))
        self._data["Vertex 54 Y-coordinate"] = value

    @property
    def vertex_54_zcoordinate(self):
        """Get vertex_54_zcoordinate

        Returns:
            float: the value of `vertex_54_zcoordinate` or None if not set
        """
        return self._data["Vertex 54 Z-coordinate"]

    @vertex_54_zcoordinate.setter
    def vertex_54_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 54 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 54 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_54_zcoordinate`'.format(value))
        self._data["Vertex 54 Z-coordinate"] = value

    @property
    def vertex_55_xcoordinate(self):
        """Get vertex_55_xcoordinate

        Returns:
            float: the value of `vertex_55_xcoordinate` or None if not set
        """
        return self._data["Vertex 55 X-coordinate"]

    @vertex_55_xcoordinate.setter
    def vertex_55_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 55 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 55 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_55_xcoordinate`'.format(value))
        self._data["Vertex 55 X-coordinate"] = value

    @property
    def vertex_55_ycoordinate(self):
        """Get vertex_55_ycoordinate

        Returns:
            float: the value of `vertex_55_ycoordinate` or None if not set
        """
        return self._data["Vertex 55 Y-coordinate"]

    @vertex_55_ycoordinate.setter
    def vertex_55_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 55 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 55 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_55_ycoordinate`'.format(value))
        self._data["Vertex 55 Y-coordinate"] = value

    @property
    def vertex_55_zcoordinate(self):
        """Get vertex_55_zcoordinate

        Returns:
            float: the value of `vertex_55_zcoordinate` or None if not set
        """
        return self._data["Vertex 55 Z-coordinate"]

    @vertex_55_zcoordinate.setter
    def vertex_55_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 55 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 55 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_55_zcoordinate`'.format(value))
        self._data["Vertex 55 Z-coordinate"] = value

    @property
    def vertex_56_xcoordinate(self):
        """Get vertex_56_xcoordinate

        Returns:
            float: the value of `vertex_56_xcoordinate` or None if not set
        """
        return self._data["Vertex 56 X-coordinate"]

    @vertex_56_xcoordinate.setter
    def vertex_56_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 56 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 56 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_56_xcoordinate`'.format(value))
        self._data["Vertex 56 X-coordinate"] = value

    @property
    def vertex_56_ycoordinate(self):
        """Get vertex_56_ycoordinate

        Returns:
            float: the value of `vertex_56_ycoordinate` or None if not set
        """
        return self._data["Vertex 56 Y-coordinate"]

    @vertex_56_ycoordinate.setter
    def vertex_56_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 56 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 56 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_56_ycoordinate`'.format(value))
        self._data["Vertex 56 Y-coordinate"] = value

    @property
    def vertex_56_zcoordinate(self):
        """Get vertex_56_zcoordinate

        Returns:
            float: the value of `vertex_56_zcoordinate` or None if not set
        """
        return self._data["Vertex 56 Z-coordinate"]

    @vertex_56_zcoordinate.setter
    def vertex_56_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 56 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 56 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_56_zcoordinate`'.format(value))
        self._data["Vertex 56 Z-coordinate"] = value

    @property
    def vertex_57_xcoordinate(self):
        """Get vertex_57_xcoordinate

        Returns:
            float: the value of `vertex_57_xcoordinate` or None if not set
        """
        return self._data["Vertex 57 X-coordinate"]

    @vertex_57_xcoordinate.setter
    def vertex_57_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 57 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 57 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_57_xcoordinate`'.format(value))
        self._data["Vertex 57 X-coordinate"] = value

    @property
    def vertex_57_ycoordinate(self):
        """Get vertex_57_ycoordinate

        Returns:
            float: the value of `vertex_57_ycoordinate` or None if not set
        """
        return self._data["Vertex 57 Y-coordinate"]

    @vertex_57_ycoordinate.setter
    def vertex_57_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 57 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 57 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_57_ycoordinate`'.format(value))
        self._data["Vertex 57 Y-coordinate"] = value

    @property
    def vertex_57_zcoordinate(self):
        """Get vertex_57_zcoordinate

        Returns:
            float: the value of `vertex_57_zcoordinate` or None if not set
        """
        return self._data["Vertex 57 Z-coordinate"]

    @vertex_57_zcoordinate.setter
    def vertex_57_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 57 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 57 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_57_zcoordinate`'.format(value))
        self._data["Vertex 57 Z-coordinate"] = value

    @property
    def vertex_58_xcoordinate(self):
        """Get vertex_58_xcoordinate

        Returns:
            float: the value of `vertex_58_xcoordinate` or None if not set
        """
        return self._data["Vertex 58 X-coordinate"]

    @vertex_58_xcoordinate.setter
    def vertex_58_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 58 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 58 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_58_xcoordinate`'.format(value))
        self._data["Vertex 58 X-coordinate"] = value

    @property
    def vertex_58_ycoordinate(self):
        """Get vertex_58_ycoordinate

        Returns:
            float: the value of `vertex_58_ycoordinate` or None if not set
        """
        return self._data["Vertex 58 Y-coordinate"]

    @vertex_58_ycoordinate.setter
    def vertex_58_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 58 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 58 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_58_ycoordinate`'.format(value))
        self._data["Vertex 58 Y-coordinate"] = value

    @property
    def vertex_58_zcoordinate(self):
        """Get vertex_58_zcoordinate

        Returns:
            float: the value of `vertex_58_zcoordinate` or None if not set
        """
        return self._data["Vertex 58 Z-coordinate"]

    @vertex_58_zcoordinate.setter
    def vertex_58_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 58 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 58 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_58_zcoordinate`'.format(value))
        self._data["Vertex 58 Z-coordinate"] = value

    @property
    def vertex_59_xcoordinate(self):
        """Get vertex_59_xcoordinate

        Returns:
            float: the value of `vertex_59_xcoordinate` or None if not set
        """
        return self._data["Vertex 59 X-coordinate"]

    @vertex_59_xcoordinate.setter
    def vertex_59_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 59 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 59 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_59_xcoordinate`'.format(value))
        self._data["Vertex 59 X-coordinate"] = value

    @property
    def vertex_59_ycoordinate(self):
        """Get vertex_59_ycoordinate

        Returns:
            float: the value of `vertex_59_ycoordinate` or None if not set
        """
        return self._data["Vertex 59 Y-coordinate"]

    @vertex_59_ycoordinate.setter
    def vertex_59_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 59 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 59 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_59_ycoordinate`'.format(value))
        self._data["Vertex 59 Y-coordinate"] = value

    @property
    def vertex_59_zcoordinate(self):
        """Get vertex_59_zcoordinate

        Returns:
            float: the value of `vertex_59_zcoordinate` or None if not set
        """
        return self._data["Vertex 59 Z-coordinate"]

    @vertex_59_zcoordinate.setter
    def vertex_59_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 59 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 59 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_59_zcoordinate`'.format(value))
        self._data["Vertex 59 Z-coordinate"] = value

    @property
    def vertex_60_xcoordinate(self):
        """Get vertex_60_xcoordinate

        Returns:
            float: the value of `vertex_60_xcoordinate` or None if not set
        """
        return self._data["Vertex 60 X-coordinate"]

    @vertex_60_xcoordinate.setter
    def vertex_60_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 60 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 60 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_60_xcoordinate`'.format(value))
        self._data["Vertex 60 X-coordinate"] = value

    @property
    def vertex_60_ycoordinate(self):
        """Get vertex_60_ycoordinate

        Returns:
            float: the value of `vertex_60_ycoordinate` or None if not set
        """
        return self._data["Vertex 60 Y-coordinate"]

    @vertex_60_ycoordinate.setter
    def vertex_60_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 60 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 60 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_60_ycoordinate`'.format(value))
        self._data["Vertex 60 Y-coordinate"] = value

    @property
    def vertex_60_zcoordinate(self):
        """Get vertex_60_zcoordinate

        Returns:
            float: the value of `vertex_60_zcoordinate` or None if not set
        """
        return self._data["Vertex 60 Z-coordinate"]

    @vertex_60_zcoordinate.setter
    def vertex_60_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 60 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 60 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_60_zcoordinate`'.format(value))
        self._data["Vertex 60 Z-coordinate"] = value

    @property
    def vertex_61_xcoordinate(self):
        """Get vertex_61_xcoordinate

        Returns:
            float: the value of `vertex_61_xcoordinate` or None if not set
        """
        return self._data["Vertex 61 X-coordinate"]

    @vertex_61_xcoordinate.setter
    def vertex_61_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 61 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 61 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_61_xcoordinate`'.format(value))
        self._data["Vertex 61 X-coordinate"] = value

    @property
    def vertex_61_ycoordinate(self):
        """Get vertex_61_ycoordinate

        Returns:
            float: the value of `vertex_61_ycoordinate` or None if not set
        """
        return self._data["Vertex 61 Y-coordinate"]

    @vertex_61_ycoordinate.setter
    def vertex_61_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 61 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 61 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_61_ycoordinate`'.format(value))
        self._data["Vertex 61 Y-coordinate"] = value

    @property
    def vertex_61_zcoordinate(self):
        """Get vertex_61_zcoordinate

        Returns:
            float: the value of `vertex_61_zcoordinate` or None if not set
        """
        return self._data["Vertex 61 Z-coordinate"]

    @vertex_61_zcoordinate.setter
    def vertex_61_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 61 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 61 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_61_zcoordinate`'.format(value))
        self._data["Vertex 61 Z-coordinate"] = value

    @property
    def vertex_62_xcoordinate(self):
        """Get vertex_62_xcoordinate

        Returns:
            float: the value of `vertex_62_xcoordinate` or None if not set
        """
        return self._data["Vertex 62 X-coordinate"]

    @vertex_62_xcoordinate.setter
    def vertex_62_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 62 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 62 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_62_xcoordinate`'.format(value))
        self._data["Vertex 62 X-coordinate"] = value

    @property
    def vertex_62_ycoordinate(self):
        """Get vertex_62_ycoordinate

        Returns:
            float: the value of `vertex_62_ycoordinate` or None if not set
        """
        return self._data["Vertex 62 Y-coordinate"]

    @vertex_62_ycoordinate.setter
    def vertex_62_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 62 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 62 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_62_ycoordinate`'.format(value))
        self._data["Vertex 62 Y-coordinate"] = value

    @property
    def vertex_62_zcoordinate(self):
        """Get vertex_62_zcoordinate

        Returns:
            float: the value of `vertex_62_zcoordinate` or None if not set
        """
        return self._data["Vertex 62 Z-coordinate"]

    @vertex_62_zcoordinate.setter
    def vertex_62_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 62 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 62 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_62_zcoordinate`'.format(value))
        self._data["Vertex 62 Z-coordinate"] = value

    @property
    def vertex_63_xcoordinate(self):
        """Get vertex_63_xcoordinate

        Returns:
            float: the value of `vertex_63_xcoordinate` or None if not set
        """
        return self._data["Vertex 63 X-coordinate"]

    @vertex_63_xcoordinate.setter
    def vertex_63_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 63 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 63 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_63_xcoordinate`'.format(value))
        self._data["Vertex 63 X-coordinate"] = value

    @property
    def vertex_63_ycoordinate(self):
        """Get vertex_63_ycoordinate

        Returns:
            float: the value of `vertex_63_ycoordinate` or None if not set
        """
        return self._data["Vertex 63 Y-coordinate"]

    @vertex_63_ycoordinate.setter
    def vertex_63_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 63 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 63 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_63_ycoordinate`'.format(value))
        self._data["Vertex 63 Y-coordinate"] = value

    @property
    def vertex_63_zcoordinate(self):
        """Get vertex_63_zcoordinate

        Returns:
            float: the value of `vertex_63_zcoordinate` or None if not set
        """
        return self._data["Vertex 63 Z-coordinate"]

    @vertex_63_zcoordinate.setter
    def vertex_63_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 63 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 63 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_63_zcoordinate`'.format(value))
        self._data["Vertex 63 Z-coordinate"] = value

    @property
    def vertex_64_xcoordinate(self):
        """Get vertex_64_xcoordinate

        Returns:
            float: the value of `vertex_64_xcoordinate` or None if not set
        """
        return self._data["Vertex 64 X-coordinate"]

    @vertex_64_xcoordinate.setter
    def vertex_64_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 64 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 64 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_64_xcoordinate`'.format(value))
        self._data["Vertex 64 X-coordinate"] = value

    @property
    def vertex_64_ycoordinate(self):
        """Get vertex_64_ycoordinate

        Returns:
            float: the value of `vertex_64_ycoordinate` or None if not set
        """
        return self._data["Vertex 64 Y-coordinate"]

    @vertex_64_ycoordinate.setter
    def vertex_64_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 64 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 64 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_64_ycoordinate`'.format(value))
        self._data["Vertex 64 Y-coordinate"] = value

    @property
    def vertex_64_zcoordinate(self):
        """Get vertex_64_zcoordinate

        Returns:
            float: the value of `vertex_64_zcoordinate` or None if not set
        """
        return self._data["Vertex 64 Z-coordinate"]

    @vertex_64_zcoordinate.setter
    def vertex_64_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 64 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 64 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_64_zcoordinate`'.format(value))
        self._data["Vertex 64 Z-coordinate"] = value

    @property
    def vertex_65_xcoordinate(self):
        """Get vertex_65_xcoordinate

        Returns:
            float: the value of `vertex_65_xcoordinate` or None if not set
        """
        return self._data["Vertex 65 X-coordinate"]

    @vertex_65_xcoordinate.setter
    def vertex_65_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 65 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 65 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_65_xcoordinate`'.format(value))
        self._data["Vertex 65 X-coordinate"] = value

    @property
    def vertex_65_ycoordinate(self):
        """Get vertex_65_ycoordinate

        Returns:
            float: the value of `vertex_65_ycoordinate` or None if not set
        """
        return self._data["Vertex 65 Y-coordinate"]

    @vertex_65_ycoordinate.setter
    def vertex_65_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 65 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 65 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_65_ycoordinate`'.format(value))
        self._data["Vertex 65 Y-coordinate"] = value

    @property
    def vertex_65_zcoordinate(self):
        """Get vertex_65_zcoordinate

        Returns:
            float: the value of `vertex_65_zcoordinate` or None if not set
        """
        return self._data["Vertex 65 Z-coordinate"]

    @vertex_65_zcoordinate.setter
    def vertex_65_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 65 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 65 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_65_zcoordinate`'.format(value))
        self._data["Vertex 65 Z-coordinate"] = value

    @property
    def vertex_66_xcoordinate(self):
        """Get vertex_66_xcoordinate

        Returns:
            float: the value of `vertex_66_xcoordinate` or None if not set
        """
        return self._data["Vertex 66 X-coordinate"]

    @vertex_66_xcoordinate.setter
    def vertex_66_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 66 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 66 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_66_xcoordinate`'.format(value))
        self._data["Vertex 66 X-coordinate"] = value

    @property
    def vertex_66_ycoordinate(self):
        """Get vertex_66_ycoordinate

        Returns:
            float: the value of `vertex_66_ycoordinate` or None if not set
        """
        return self._data["Vertex 66 Y-coordinate"]

    @vertex_66_ycoordinate.setter
    def vertex_66_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 66 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 66 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_66_ycoordinate`'.format(value))
        self._data["Vertex 66 Y-coordinate"] = value

    @property
    def vertex_66_zcoordinate(self):
        """Get vertex_66_zcoordinate

        Returns:
            float: the value of `vertex_66_zcoordinate` or None if not set
        """
        return self._data["Vertex 66 Z-coordinate"]

    @vertex_66_zcoordinate.setter
    def vertex_66_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 66 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 66 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_66_zcoordinate`'.format(value))
        self._data["Vertex 66 Z-coordinate"] = value

    @property
    def vertex_67_xcoordinate(self):
        """Get vertex_67_xcoordinate

        Returns:
            float: the value of `vertex_67_xcoordinate` or None if not set
        """
        return self._data["Vertex 67 X-coordinate"]

    @vertex_67_xcoordinate.setter
    def vertex_67_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 67 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 67 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_67_xcoordinate`'.format(value))
        self._data["Vertex 67 X-coordinate"] = value

    @property
    def vertex_67_ycoordinate(self):
        """Get vertex_67_ycoordinate

        Returns:
            float: the value of `vertex_67_ycoordinate` or None if not set
        """
        return self._data["Vertex 67 Y-coordinate"]

    @vertex_67_ycoordinate.setter
    def vertex_67_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 67 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 67 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_67_ycoordinate`'.format(value))
        self._data["Vertex 67 Y-coordinate"] = value

    @property
    def vertex_67_zcoordinate(self):
        """Get vertex_67_zcoordinate

        Returns:
            float: the value of `vertex_67_zcoordinate` or None if not set
        """
        return self._data["Vertex 67 Z-coordinate"]

    @vertex_67_zcoordinate.setter
    def vertex_67_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 67 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 67 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_67_zcoordinate`'.format(value))
        self._data["Vertex 67 Z-coordinate"] = value

    @property
    def vertex_68_xcoordinate(self):
        """Get vertex_68_xcoordinate

        Returns:
            float: the value of `vertex_68_xcoordinate` or None if not set
        """
        return self._data["Vertex 68 X-coordinate"]

    @vertex_68_xcoordinate.setter
    def vertex_68_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 68 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 68 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_68_xcoordinate`'.format(value))
        self._data["Vertex 68 X-coordinate"] = value

    @property
    def vertex_68_ycoordinate(self):
        """Get vertex_68_ycoordinate

        Returns:
            float: the value of `vertex_68_ycoordinate` or None if not set
        """
        return self._data["Vertex 68 Y-coordinate"]

    @vertex_68_ycoordinate.setter
    def vertex_68_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 68 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 68 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_68_ycoordinate`'.format(value))
        self._data["Vertex 68 Y-coordinate"] = value

    @property
    def vertex_68_zcoordinate(self):
        """Get vertex_68_zcoordinate

        Returns:
            float: the value of `vertex_68_zcoordinate` or None if not set
        """
        return self._data["Vertex 68 Z-coordinate"]

    @vertex_68_zcoordinate.setter
    def vertex_68_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 68 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 68 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_68_zcoordinate`'.format(value))
        self._data["Vertex 68 Z-coordinate"] = value

    @property
    def vertex_69_xcoordinate(self):
        """Get vertex_69_xcoordinate

        Returns:
            float: the value of `vertex_69_xcoordinate` or None if not set
        """
        return self._data["Vertex 69 X-coordinate"]

    @vertex_69_xcoordinate.setter
    def vertex_69_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 69 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 69 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_69_xcoordinate`'.format(value))
        self._data["Vertex 69 X-coordinate"] = value

    @property
    def vertex_69_ycoordinate(self):
        """Get vertex_69_ycoordinate

        Returns:
            float: the value of `vertex_69_ycoordinate` or None if not set
        """
        return self._data["Vertex 69 Y-coordinate"]

    @vertex_69_ycoordinate.setter
    def vertex_69_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 69 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 69 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_69_ycoordinate`'.format(value))
        self._data["Vertex 69 Y-coordinate"] = value

    @property
    def vertex_69_zcoordinate(self):
        """Get vertex_69_zcoordinate

        Returns:
            float: the value of `vertex_69_zcoordinate` or None if not set
        """
        return self._data["Vertex 69 Z-coordinate"]

    @vertex_69_zcoordinate.setter
    def vertex_69_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 69 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 69 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_69_zcoordinate`'.format(value))
        self._data["Vertex 69 Z-coordinate"] = value

    @property
    def vertex_70_xcoordinate(self):
        """Get vertex_70_xcoordinate

        Returns:
            float: the value of `vertex_70_xcoordinate` or None if not set
        """
        return self._data["Vertex 70 X-coordinate"]

    @vertex_70_xcoordinate.setter
    def vertex_70_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 70 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 70 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_70_xcoordinate`'.format(value))
        self._data["Vertex 70 X-coordinate"] = value

    @property
    def vertex_70_ycoordinate(self):
        """Get vertex_70_ycoordinate

        Returns:
            float: the value of `vertex_70_ycoordinate` or None if not set
        """
        return self._data["Vertex 70 Y-coordinate"]

    @vertex_70_ycoordinate.setter
    def vertex_70_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 70 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 70 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_70_ycoordinate`'.format(value))
        self._data["Vertex 70 Y-coordinate"] = value

    @property
    def vertex_70_zcoordinate(self):
        """Get vertex_70_zcoordinate

        Returns:
            float: the value of `vertex_70_zcoordinate` or None if not set
        """
        return self._data["Vertex 70 Z-coordinate"]

    @vertex_70_zcoordinate.setter
    def vertex_70_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 70 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 70 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_70_zcoordinate`'.format(value))
        self._data["Vertex 70 Z-coordinate"] = value

    @property
    def vertex_71_xcoordinate(self):
        """Get vertex_71_xcoordinate

        Returns:
            float: the value of `vertex_71_xcoordinate` or None if not set
        """
        return self._data["Vertex 71 X-coordinate"]

    @vertex_71_xcoordinate.setter
    def vertex_71_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 71 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 71 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_71_xcoordinate`'.format(value))
        self._data["Vertex 71 X-coordinate"] = value

    @property
    def vertex_71_ycoordinate(self):
        """Get vertex_71_ycoordinate

        Returns:
            float: the value of `vertex_71_ycoordinate` or None if not set
        """
        return self._data["Vertex 71 Y-coordinate"]

    @vertex_71_ycoordinate.setter
    def vertex_71_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 71 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 71 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_71_ycoordinate`'.format(value))
        self._data["Vertex 71 Y-coordinate"] = value

    @property
    def vertex_71_zcoordinate(self):
        """Get vertex_71_zcoordinate

        Returns:
            float: the value of `vertex_71_zcoordinate` or None if not set
        """
        return self._data["Vertex 71 Z-coordinate"]

    @vertex_71_zcoordinate.setter
    def vertex_71_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 71 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 71 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_71_zcoordinate`'.format(value))
        self._data["Vertex 71 Z-coordinate"] = value

    @property
    def vertex_72_xcoordinate(self):
        """Get vertex_72_xcoordinate

        Returns:
            float: the value of `vertex_72_xcoordinate` or None if not set
        """
        return self._data["Vertex 72 X-coordinate"]

    @vertex_72_xcoordinate.setter
    def vertex_72_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 72 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 72 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_72_xcoordinate`'.format(value))
        self._data["Vertex 72 X-coordinate"] = value

    @property
    def vertex_72_ycoordinate(self):
        """Get vertex_72_ycoordinate

        Returns:
            float: the value of `vertex_72_ycoordinate` or None if not set
        """
        return self._data["Vertex 72 Y-coordinate"]

    @vertex_72_ycoordinate.setter
    def vertex_72_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 72 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 72 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_72_ycoordinate`'.format(value))
        self._data["Vertex 72 Y-coordinate"] = value

    @property
    def vertex_72_zcoordinate(self):
        """Get vertex_72_zcoordinate

        Returns:
            float: the value of `vertex_72_zcoordinate` or None if not set
        """
        return self._data["Vertex 72 Z-coordinate"]

    @vertex_72_zcoordinate.setter
    def vertex_72_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 72 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 72 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_72_zcoordinate`'.format(value))
        self._data["Vertex 72 Z-coordinate"] = value

    @property
    def vertex_73_xcoordinate(self):
        """Get vertex_73_xcoordinate

        Returns:
            float: the value of `vertex_73_xcoordinate` or None if not set
        """
        return self._data["Vertex 73 X-coordinate"]

    @vertex_73_xcoordinate.setter
    def vertex_73_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 73 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 73 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_73_xcoordinate`'.format(value))
        self._data["Vertex 73 X-coordinate"] = value

    @property
    def vertex_73_ycoordinate(self):
        """Get vertex_73_ycoordinate

        Returns:
            float: the value of `vertex_73_ycoordinate` or None if not set
        """
        return self._data["Vertex 73 Y-coordinate"]

    @vertex_73_ycoordinate.setter
    def vertex_73_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 73 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 73 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_73_ycoordinate`'.format(value))
        self._data["Vertex 73 Y-coordinate"] = value

    @property
    def vertex_73_zcoordinate(self):
        """Get vertex_73_zcoordinate

        Returns:
            float: the value of `vertex_73_zcoordinate` or None if not set
        """
        return self._data["Vertex 73 Z-coordinate"]

    @vertex_73_zcoordinate.setter
    def vertex_73_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 73 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 73 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_73_zcoordinate`'.format(value))
        self._data["Vertex 73 Z-coordinate"] = value

    @property
    def vertex_74_xcoordinate(self):
        """Get vertex_74_xcoordinate

        Returns:
            float: the value of `vertex_74_xcoordinate` or None if not set
        """
        return self._data["Vertex 74 X-coordinate"]

    @vertex_74_xcoordinate.setter
    def vertex_74_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 74 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 74 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_74_xcoordinate`'.format(value))
        self._data["Vertex 74 X-coordinate"] = value

    @property
    def vertex_74_ycoordinate(self):
        """Get vertex_74_ycoordinate

        Returns:
            float: the value of `vertex_74_ycoordinate` or None if not set
        """
        return self._data["Vertex 74 Y-coordinate"]

    @vertex_74_ycoordinate.setter
    def vertex_74_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 74 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 74 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_74_ycoordinate`'.format(value))
        self._data["Vertex 74 Y-coordinate"] = value

    @property
    def vertex_74_zcoordinate(self):
        """Get vertex_74_zcoordinate

        Returns:
            float: the value of `vertex_74_zcoordinate` or None if not set
        """
        return self._data["Vertex 74 Z-coordinate"]

    @vertex_74_zcoordinate.setter
    def vertex_74_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 74 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 74 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_74_zcoordinate`'.format(value))
        self._data["Vertex 74 Z-coordinate"] = value

    @property
    def vertex_75_xcoordinate(self):
        """Get vertex_75_xcoordinate

        Returns:
            float: the value of `vertex_75_xcoordinate` or None if not set
        """
        return self._data["Vertex 75 X-coordinate"]

    @vertex_75_xcoordinate.setter
    def vertex_75_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 75 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 75 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_75_xcoordinate`'.format(value))
        self._data["Vertex 75 X-coordinate"] = value

    @property
    def vertex_75_ycoordinate(self):
        """Get vertex_75_ycoordinate

        Returns:
            float: the value of `vertex_75_ycoordinate` or None if not set
        """
        return self._data["Vertex 75 Y-coordinate"]

    @vertex_75_ycoordinate.setter
    def vertex_75_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 75 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 75 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_75_ycoordinate`'.format(value))
        self._data["Vertex 75 Y-coordinate"] = value

    @property
    def vertex_75_zcoordinate(self):
        """Get vertex_75_zcoordinate

        Returns:
            float: the value of `vertex_75_zcoordinate` or None if not set
        """
        return self._data["Vertex 75 Z-coordinate"]

    @vertex_75_zcoordinate.setter
    def vertex_75_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 75 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 75 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_75_zcoordinate`'.format(value))
        self._data["Vertex 75 Z-coordinate"] = value

    @property
    def vertex_76_xcoordinate(self):
        """Get vertex_76_xcoordinate

        Returns:
            float: the value of `vertex_76_xcoordinate` or None if not set
        """
        return self._data["Vertex 76 X-coordinate"]

    @vertex_76_xcoordinate.setter
    def vertex_76_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 76 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 76 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_76_xcoordinate`'.format(value))
        self._data["Vertex 76 X-coordinate"] = value

    @property
    def vertex_76_ycoordinate(self):
        """Get vertex_76_ycoordinate

        Returns:
            float: the value of `vertex_76_ycoordinate` or None if not set
        """
        return self._data["Vertex 76 Y-coordinate"]

    @vertex_76_ycoordinate.setter
    def vertex_76_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 76 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 76 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_76_ycoordinate`'.format(value))
        self._data["Vertex 76 Y-coordinate"] = value

    @property
    def vertex_76_zcoordinate(self):
        """Get vertex_76_zcoordinate

        Returns:
            float: the value of `vertex_76_zcoordinate` or None if not set
        """
        return self._data["Vertex 76 Z-coordinate"]

    @vertex_76_zcoordinate.setter
    def vertex_76_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 76 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 76 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_76_zcoordinate`'.format(value))
        self._data["Vertex 76 Z-coordinate"] = value

    @property
    def vertex_77_xcoordinate(self):
        """Get vertex_77_xcoordinate

        Returns:
            float: the value of `vertex_77_xcoordinate` or None if not set
        """
        return self._data["Vertex 77 X-coordinate"]

    @vertex_77_xcoordinate.setter
    def vertex_77_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 77 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 77 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_77_xcoordinate`'.format(value))
        self._data["Vertex 77 X-coordinate"] = value

    @property
    def vertex_77_ycoordinate(self):
        """Get vertex_77_ycoordinate

        Returns:
            float: the value of `vertex_77_ycoordinate` or None if not set
        """
        return self._data["Vertex 77 Y-coordinate"]

    @vertex_77_ycoordinate.setter
    def vertex_77_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 77 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 77 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_77_ycoordinate`'.format(value))
        self._data["Vertex 77 Y-coordinate"] = value

    @property
    def vertex_77_zcoordinate(self):
        """Get vertex_77_zcoordinate

        Returns:
            float: the value of `vertex_77_zcoordinate` or None if not set
        """
        return self._data["Vertex 77 Z-coordinate"]

    @vertex_77_zcoordinate.setter
    def vertex_77_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 77 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 77 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_77_zcoordinate`'.format(value))
        self._data["Vertex 77 Z-coordinate"] = value

    @property
    def vertex_78_xcoordinate(self):
        """Get vertex_78_xcoordinate

        Returns:
            float: the value of `vertex_78_xcoordinate` or None if not set
        """
        return self._data["Vertex 78 X-coordinate"]

    @vertex_78_xcoordinate.setter
    def vertex_78_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 78 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 78 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_78_xcoordinate`'.format(value))
        self._data["Vertex 78 X-coordinate"] = value

    @property
    def vertex_78_ycoordinate(self):
        """Get vertex_78_ycoordinate

        Returns:
            float: the value of `vertex_78_ycoordinate` or None if not set
        """
        return self._data["Vertex 78 Y-coordinate"]

    @vertex_78_ycoordinate.setter
    def vertex_78_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 78 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 78 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_78_ycoordinate`'.format(value))
        self._data["Vertex 78 Y-coordinate"] = value

    @property
    def vertex_78_zcoordinate(self):
        """Get vertex_78_zcoordinate

        Returns:
            float: the value of `vertex_78_zcoordinate` or None if not set
        """
        return self._data["Vertex 78 Z-coordinate"]

    @vertex_78_zcoordinate.setter
    def vertex_78_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 78 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 78 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_78_zcoordinate`'.format(value))
        self._data["Vertex 78 Z-coordinate"] = value

    @property
    def vertex_79_xcoordinate(self):
        """Get vertex_79_xcoordinate

        Returns:
            float: the value of `vertex_79_xcoordinate` or None if not set
        """
        return self._data["Vertex 79 X-coordinate"]

    @vertex_79_xcoordinate.setter
    def vertex_79_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 79 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 79 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_79_xcoordinate`'.format(value))
        self._data["Vertex 79 X-coordinate"] = value

    @property
    def vertex_79_ycoordinate(self):
        """Get vertex_79_ycoordinate

        Returns:
            float: the value of `vertex_79_ycoordinate` or None if not set
        """
        return self._data["Vertex 79 Y-coordinate"]

    @vertex_79_ycoordinate.setter
    def vertex_79_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 79 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 79 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_79_ycoordinate`'.format(value))
        self._data["Vertex 79 Y-coordinate"] = value

    @property
    def vertex_79_zcoordinate(self):
        """Get vertex_79_zcoordinate

        Returns:
            float: the value of `vertex_79_zcoordinate` or None if not set
        """
        return self._data["Vertex 79 Z-coordinate"]

    @vertex_79_zcoordinate.setter
    def vertex_79_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 79 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 79 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_79_zcoordinate`'.format(value))
        self._data["Vertex 79 Z-coordinate"] = value

    @property
    def vertex_80_xcoordinate(self):
        """Get vertex_80_xcoordinate

        Returns:
            float: the value of `vertex_80_xcoordinate` or None if not set
        """
        return self._data["Vertex 80 X-coordinate"]

    @vertex_80_xcoordinate.setter
    def vertex_80_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 80 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 80 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_80_xcoordinate`'.format(value))
        self._data["Vertex 80 X-coordinate"] = value

    @property
    def vertex_80_ycoordinate(self):
        """Get vertex_80_ycoordinate

        Returns:
            float: the value of `vertex_80_ycoordinate` or None if not set
        """
        return self._data["Vertex 80 Y-coordinate"]

    @vertex_80_ycoordinate.setter
    def vertex_80_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 80 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 80 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_80_ycoordinate`'.format(value))
        self._data["Vertex 80 Y-coordinate"] = value

    @property
    def vertex_80_zcoordinate(self):
        """Get vertex_80_zcoordinate

        Returns:
            float: the value of `vertex_80_zcoordinate` or None if not set
        """
        return self._data["Vertex 80 Z-coordinate"]

    @vertex_80_zcoordinate.setter
    def vertex_80_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 80 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 80 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_80_zcoordinate`'.format(value))
        self._data["Vertex 80 Z-coordinate"] = value

    @property
    def vertex_81_xcoordinate(self):
        """Get vertex_81_xcoordinate

        Returns:
            float: the value of `vertex_81_xcoordinate` or None if not set
        """
        return self._data["Vertex 81 X-coordinate"]

    @vertex_81_xcoordinate.setter
    def vertex_81_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 81 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 81 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_81_xcoordinate`'.format(value))
        self._data["Vertex 81 X-coordinate"] = value

    @property
    def vertex_81_ycoordinate(self):
        """Get vertex_81_ycoordinate

        Returns:
            float: the value of `vertex_81_ycoordinate` or None if not set
        """
        return self._data["Vertex 81 Y-coordinate"]

    @vertex_81_ycoordinate.setter
    def vertex_81_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 81 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 81 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_81_ycoordinate`'.format(value))
        self._data["Vertex 81 Y-coordinate"] = value

    @property
    def vertex_81_zcoordinate(self):
        """Get vertex_81_zcoordinate

        Returns:
            float: the value of `vertex_81_zcoordinate` or None if not set
        """
        return self._data["Vertex 81 Z-coordinate"]

    @vertex_81_zcoordinate.setter
    def vertex_81_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 81 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 81 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_81_zcoordinate`'.format(value))
        self._data["Vertex 81 Z-coordinate"] = value

    @property
    def vertex_82_xcoordinate(self):
        """Get vertex_82_xcoordinate

        Returns:
            float: the value of `vertex_82_xcoordinate` or None if not set
        """
        return self._data["Vertex 82 X-coordinate"]

    @vertex_82_xcoordinate.setter
    def vertex_82_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 82 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 82 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_82_xcoordinate`'.format(value))
        self._data["Vertex 82 X-coordinate"] = value

    @property
    def vertex_82_ycoordinate(self):
        """Get vertex_82_ycoordinate

        Returns:
            float: the value of `vertex_82_ycoordinate` or None if not set
        """
        return self._data["Vertex 82 Y-coordinate"]

    @vertex_82_ycoordinate.setter
    def vertex_82_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 82 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 82 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_82_ycoordinate`'.format(value))
        self._data["Vertex 82 Y-coordinate"] = value

    @property
    def vertex_82_zcoordinate(self):
        """Get vertex_82_zcoordinate

        Returns:
            float: the value of `vertex_82_zcoordinate` or None if not set
        """
        return self._data["Vertex 82 Z-coordinate"]

    @vertex_82_zcoordinate.setter
    def vertex_82_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 82 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 82 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_82_zcoordinate`'.format(value))
        self._data["Vertex 82 Z-coordinate"] = value

    @property
    def vertex_83_xcoordinate(self):
        """Get vertex_83_xcoordinate

        Returns:
            float: the value of `vertex_83_xcoordinate` or None if not set
        """
        return self._data["Vertex 83 X-coordinate"]

    @vertex_83_xcoordinate.setter
    def vertex_83_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 83 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 83 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_83_xcoordinate`'.format(value))
        self._data["Vertex 83 X-coordinate"] = value

    @property
    def vertex_83_ycoordinate(self):
        """Get vertex_83_ycoordinate

        Returns:
            float: the value of `vertex_83_ycoordinate` or None if not set
        """
        return self._data["Vertex 83 Y-coordinate"]

    @vertex_83_ycoordinate.setter
    def vertex_83_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 83 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 83 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_83_ycoordinate`'.format(value))
        self._data["Vertex 83 Y-coordinate"] = value

    @property
    def vertex_83_zcoordinate(self):
        """Get vertex_83_zcoordinate

        Returns:
            float: the value of `vertex_83_zcoordinate` or None if not set
        """
        return self._data["Vertex 83 Z-coordinate"]

    @vertex_83_zcoordinate.setter
    def vertex_83_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 83 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 83 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_83_zcoordinate`'.format(value))
        self._data["Vertex 83 Z-coordinate"] = value

    @property
    def vertex_84_xcoordinate(self):
        """Get vertex_84_xcoordinate

        Returns:
            float: the value of `vertex_84_xcoordinate` or None if not set
        """
        return self._data["Vertex 84 X-coordinate"]

    @vertex_84_xcoordinate.setter
    def vertex_84_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 84 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 84 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_84_xcoordinate`'.format(value))
        self._data["Vertex 84 X-coordinate"] = value

    @property
    def vertex_84_ycoordinate(self):
        """Get vertex_84_ycoordinate

        Returns:
            float: the value of `vertex_84_ycoordinate` or None if not set
        """
        return self._data["Vertex 84 Y-coordinate"]

    @vertex_84_ycoordinate.setter
    def vertex_84_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 84 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 84 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_84_ycoordinate`'.format(value))
        self._data["Vertex 84 Y-coordinate"] = value

    @property
    def vertex_84_zcoordinate(self):
        """Get vertex_84_zcoordinate

        Returns:
            float: the value of `vertex_84_zcoordinate` or None if not set
        """
        return self._data["Vertex 84 Z-coordinate"]

    @vertex_84_zcoordinate.setter
    def vertex_84_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 84 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 84 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_84_zcoordinate`'.format(value))
        self._data["Vertex 84 Z-coordinate"] = value

    @property
    def vertex_85_xcoordinate(self):
        """Get vertex_85_xcoordinate

        Returns:
            float: the value of `vertex_85_xcoordinate` or None if not set
        """
        return self._data["Vertex 85 X-coordinate"]

    @vertex_85_xcoordinate.setter
    def vertex_85_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 85 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 85 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_85_xcoordinate`'.format(value))
        self._data["Vertex 85 X-coordinate"] = value

    @property
    def vertex_85_ycoordinate(self):
        """Get vertex_85_ycoordinate

        Returns:
            float: the value of `vertex_85_ycoordinate` or None if not set
        """
        return self._data["Vertex 85 Y-coordinate"]

    @vertex_85_ycoordinate.setter
    def vertex_85_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 85 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 85 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_85_ycoordinate`'.format(value))
        self._data["Vertex 85 Y-coordinate"] = value

    @property
    def vertex_85_zcoordinate(self):
        """Get vertex_85_zcoordinate

        Returns:
            float: the value of `vertex_85_zcoordinate` or None if not set
        """
        return self._data["Vertex 85 Z-coordinate"]

    @vertex_85_zcoordinate.setter
    def vertex_85_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 85 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 85 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_85_zcoordinate`'.format(value))
        self._data["Vertex 85 Z-coordinate"] = value

    @property
    def vertex_86_xcoordinate(self):
        """Get vertex_86_xcoordinate

        Returns:
            float: the value of `vertex_86_xcoordinate` or None if not set
        """
        return self._data["Vertex 86 X-coordinate"]

    @vertex_86_xcoordinate.setter
    def vertex_86_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 86 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 86 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_86_xcoordinate`'.format(value))
        self._data["Vertex 86 X-coordinate"] = value

    @property
    def vertex_86_ycoordinate(self):
        """Get vertex_86_ycoordinate

        Returns:
            float: the value of `vertex_86_ycoordinate` or None if not set
        """
        return self._data["Vertex 86 Y-coordinate"]

    @vertex_86_ycoordinate.setter
    def vertex_86_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 86 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 86 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_86_ycoordinate`'.format(value))
        self._data["Vertex 86 Y-coordinate"] = value

    @property
    def vertex_86_zcoordinate(self):
        """Get vertex_86_zcoordinate

        Returns:
            float: the value of `vertex_86_zcoordinate` or None if not set
        """
        return self._data["Vertex 86 Z-coordinate"]

    @vertex_86_zcoordinate.setter
    def vertex_86_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 86 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 86 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_86_zcoordinate`'.format(value))
        self._data["Vertex 86 Z-coordinate"] = value

    @property
    def vertex_87_xcoordinate(self):
        """Get vertex_87_xcoordinate

        Returns:
            float: the value of `vertex_87_xcoordinate` or None if not set
        """
        return self._data["Vertex 87 X-coordinate"]

    @vertex_87_xcoordinate.setter
    def vertex_87_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 87 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 87 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_87_xcoordinate`'.format(value))
        self._data["Vertex 87 X-coordinate"] = value

    @property
    def vertex_87_ycoordinate(self):
        """Get vertex_87_ycoordinate

        Returns:
            float: the value of `vertex_87_ycoordinate` or None if not set
        """
        return self._data["Vertex 87 Y-coordinate"]

    @vertex_87_ycoordinate.setter
    def vertex_87_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 87 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 87 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_87_ycoordinate`'.format(value))
        self._data["Vertex 87 Y-coordinate"] = value

    @property
    def vertex_87_zcoordinate(self):
        """Get vertex_87_zcoordinate

        Returns:
            float: the value of `vertex_87_zcoordinate` or None if not set
        """
        return self._data["Vertex 87 Z-coordinate"]

    @vertex_87_zcoordinate.setter
    def vertex_87_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 87 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 87 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_87_zcoordinate`'.format(value))
        self._data["Vertex 87 Z-coordinate"] = value

    @property
    def vertex_88_xcoordinate(self):
        """Get vertex_88_xcoordinate

        Returns:
            float: the value of `vertex_88_xcoordinate` or None if not set
        """
        return self._data["Vertex 88 X-coordinate"]

    @vertex_88_xcoordinate.setter
    def vertex_88_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 88 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 88 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_88_xcoordinate`'.format(value))
        self._data["Vertex 88 X-coordinate"] = value

    @property
    def vertex_88_ycoordinate(self):
        """Get vertex_88_ycoordinate

        Returns:
            float: the value of `vertex_88_ycoordinate` or None if not set
        """
        return self._data["Vertex 88 Y-coordinate"]

    @vertex_88_ycoordinate.setter
    def vertex_88_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 88 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 88 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_88_ycoordinate`'.format(value))
        self._data["Vertex 88 Y-coordinate"] = value

    @property
    def vertex_88_zcoordinate(self):
        """Get vertex_88_zcoordinate

        Returns:
            float: the value of `vertex_88_zcoordinate` or None if not set
        """
        return self._data["Vertex 88 Z-coordinate"]

    @vertex_88_zcoordinate.setter
    def vertex_88_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 88 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 88 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_88_zcoordinate`'.format(value))
        self._data["Vertex 88 Z-coordinate"] = value

    @property
    def vertex_89_xcoordinate(self):
        """Get vertex_89_xcoordinate

        Returns:
            float: the value of `vertex_89_xcoordinate` or None if not set
        """
        return self._data["Vertex 89 X-coordinate"]

    @vertex_89_xcoordinate.setter
    def vertex_89_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 89 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 89 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_89_xcoordinate`'.format(value))
        self._data["Vertex 89 X-coordinate"] = value

    @property
    def vertex_89_ycoordinate(self):
        """Get vertex_89_ycoordinate

        Returns:
            float: the value of `vertex_89_ycoordinate` or None if not set
        """
        return self._data["Vertex 89 Y-coordinate"]

    @vertex_89_ycoordinate.setter
    def vertex_89_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 89 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 89 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_89_ycoordinate`'.format(value))
        self._data["Vertex 89 Y-coordinate"] = value

    @property
    def vertex_89_zcoordinate(self):
        """Get vertex_89_zcoordinate

        Returns:
            float: the value of `vertex_89_zcoordinate` or None if not set
        """
        return self._data["Vertex 89 Z-coordinate"]

    @vertex_89_zcoordinate.setter
    def vertex_89_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 89 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 89 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_89_zcoordinate`'.format(value))
        self._data["Vertex 89 Z-coordinate"] = value

    @property
    def vertex_90_xcoordinate(self):
        """Get vertex_90_xcoordinate

        Returns:
            float: the value of `vertex_90_xcoordinate` or None if not set
        """
        return self._data["Vertex 90 X-coordinate"]

    @vertex_90_xcoordinate.setter
    def vertex_90_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 90 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 90 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_90_xcoordinate`'.format(value))
        self._data["Vertex 90 X-coordinate"] = value

    @property
    def vertex_90_ycoordinate(self):
        """Get vertex_90_ycoordinate

        Returns:
            float: the value of `vertex_90_ycoordinate` or None if not set
        """
        return self._data["Vertex 90 Y-coordinate"]

    @vertex_90_ycoordinate.setter
    def vertex_90_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 90 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 90 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_90_ycoordinate`'.format(value))
        self._data["Vertex 90 Y-coordinate"] = value

    @property
    def vertex_90_zcoordinate(self):
        """Get vertex_90_zcoordinate

        Returns:
            float: the value of `vertex_90_zcoordinate` or None if not set
        """
        return self._data["Vertex 90 Z-coordinate"]

    @vertex_90_zcoordinate.setter
    def vertex_90_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 90 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 90 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_90_zcoordinate`'.format(value))
        self._data["Vertex 90 Z-coordinate"] = value

    @property
    def vertex_91_xcoordinate(self):
        """Get vertex_91_xcoordinate

        Returns:
            float: the value of `vertex_91_xcoordinate` or None if not set
        """
        return self._data["Vertex 91 X-coordinate"]

    @vertex_91_xcoordinate.setter
    def vertex_91_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 91 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 91 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_91_xcoordinate`'.format(value))
        self._data["Vertex 91 X-coordinate"] = value

    @property
    def vertex_91_ycoordinate(self):
        """Get vertex_91_ycoordinate

        Returns:
            float: the value of `vertex_91_ycoordinate` or None if not set
        """
        return self._data["Vertex 91 Y-coordinate"]

    @vertex_91_ycoordinate.setter
    def vertex_91_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 91 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 91 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_91_ycoordinate`'.format(value))
        self._data["Vertex 91 Y-coordinate"] = value

    @property
    def vertex_91_zcoordinate(self):
        """Get vertex_91_zcoordinate

        Returns:
            float: the value of `vertex_91_zcoordinate` or None if not set
        """
        return self._data["Vertex 91 Z-coordinate"]

    @vertex_91_zcoordinate.setter
    def vertex_91_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 91 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 91 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_91_zcoordinate`'.format(value))
        self._data["Vertex 91 Z-coordinate"] = value

    @property
    def vertex_92_xcoordinate(self):
        """Get vertex_92_xcoordinate

        Returns:
            float: the value of `vertex_92_xcoordinate` or None if not set
        """
        return self._data["Vertex 92 X-coordinate"]

    @vertex_92_xcoordinate.setter
    def vertex_92_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 92 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 92 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_92_xcoordinate`'.format(value))
        self._data["Vertex 92 X-coordinate"] = value

    @property
    def vertex_92_ycoordinate(self):
        """Get vertex_92_ycoordinate

        Returns:
            float: the value of `vertex_92_ycoordinate` or None if not set
        """
        return self._data["Vertex 92 Y-coordinate"]

    @vertex_92_ycoordinate.setter
    def vertex_92_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 92 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 92 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_92_ycoordinate`'.format(value))
        self._data["Vertex 92 Y-coordinate"] = value

    @property
    def vertex_92_zcoordinate(self):
        """Get vertex_92_zcoordinate

        Returns:
            float: the value of `vertex_92_zcoordinate` or None if not set
        """
        return self._data["Vertex 92 Z-coordinate"]

    @vertex_92_zcoordinate.setter
    def vertex_92_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 92 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 92 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_92_zcoordinate`'.format(value))
        self._data["Vertex 92 Z-coordinate"] = value

    @property
    def vertex_93_xcoordinate(self):
        """Get vertex_93_xcoordinate

        Returns:
            float: the value of `vertex_93_xcoordinate` or None if not set
        """
        return self._data["Vertex 93 X-coordinate"]

    @vertex_93_xcoordinate.setter
    def vertex_93_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 93 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 93 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_93_xcoordinate`'.format(value))
        self._data["Vertex 93 X-coordinate"] = value

    @property
    def vertex_93_ycoordinate(self):
        """Get vertex_93_ycoordinate

        Returns:
            float: the value of `vertex_93_ycoordinate` or None if not set
        """
        return self._data["Vertex 93 Y-coordinate"]

    @vertex_93_ycoordinate.setter
    def vertex_93_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 93 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 93 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_93_ycoordinate`'.format(value))
        self._data["Vertex 93 Y-coordinate"] = value

    @property
    def vertex_93_zcoordinate(self):
        """Get vertex_93_zcoordinate

        Returns:
            float: the value of `vertex_93_zcoordinate` or None if not set
        """
        return self._data["Vertex 93 Z-coordinate"]

    @vertex_93_zcoordinate.setter
    def vertex_93_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 93 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 93 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_93_zcoordinate`'.format(value))
        self._data["Vertex 93 Z-coordinate"] = value

    @property
    def vertex_94_xcoordinate(self):
        """Get vertex_94_xcoordinate

        Returns:
            float: the value of `vertex_94_xcoordinate` or None if not set
        """
        return self._data["Vertex 94 X-coordinate"]

    @vertex_94_xcoordinate.setter
    def vertex_94_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 94 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 94 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_94_xcoordinate`'.format(value))
        self._data["Vertex 94 X-coordinate"] = value

    @property
    def vertex_94_ycoordinate(self):
        """Get vertex_94_ycoordinate

        Returns:
            float: the value of `vertex_94_ycoordinate` or None if not set
        """
        return self._data["Vertex 94 Y-coordinate"]

    @vertex_94_ycoordinate.setter
    def vertex_94_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 94 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 94 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_94_ycoordinate`'.format(value))
        self._data["Vertex 94 Y-coordinate"] = value

    @property
    def vertex_94_zcoordinate(self):
        """Get vertex_94_zcoordinate

        Returns:
            float: the value of `vertex_94_zcoordinate` or None if not set
        """
        return self._data["Vertex 94 Z-coordinate"]

    @vertex_94_zcoordinate.setter
    def vertex_94_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 94 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 94 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_94_zcoordinate`'.format(value))
        self._data["Vertex 94 Z-coordinate"] = value

    @property
    def vertex_95_xcoordinate(self):
        """Get vertex_95_xcoordinate

        Returns:
            float: the value of `vertex_95_xcoordinate` or None if not set
        """
        return self._data["Vertex 95 X-coordinate"]

    @vertex_95_xcoordinate.setter
    def vertex_95_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 95 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 95 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_95_xcoordinate`'.format(value))
        self._data["Vertex 95 X-coordinate"] = value

    @property
    def vertex_95_ycoordinate(self):
        """Get vertex_95_ycoordinate

        Returns:
            float: the value of `vertex_95_ycoordinate` or None if not set
        """
        return self._data["Vertex 95 Y-coordinate"]

    @vertex_95_ycoordinate.setter
    def vertex_95_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 95 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 95 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_95_ycoordinate`'.format(value))
        self._data["Vertex 95 Y-coordinate"] = value

    @property
    def vertex_95_zcoordinate(self):
        """Get vertex_95_zcoordinate

        Returns:
            float: the value of `vertex_95_zcoordinate` or None if not set
        """
        return self._data["Vertex 95 Z-coordinate"]

    @vertex_95_zcoordinate.setter
    def vertex_95_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 95 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 95 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_95_zcoordinate`'.format(value))
        self._data["Vertex 95 Z-coordinate"] = value

    @property
    def vertex_96_xcoordinate(self):
        """Get vertex_96_xcoordinate

        Returns:
            float: the value of `vertex_96_xcoordinate` or None if not set
        """
        return self._data["Vertex 96 X-coordinate"]

    @vertex_96_xcoordinate.setter
    def vertex_96_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 96 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 96 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_96_xcoordinate`'.format(value))
        self._data["Vertex 96 X-coordinate"] = value

    @property
    def vertex_96_ycoordinate(self):
        """Get vertex_96_ycoordinate

        Returns:
            float: the value of `vertex_96_ycoordinate` or None if not set
        """
        return self._data["Vertex 96 Y-coordinate"]

    @vertex_96_ycoordinate.setter
    def vertex_96_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 96 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 96 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_96_ycoordinate`'.format(value))
        self._data["Vertex 96 Y-coordinate"] = value

    @property
    def vertex_96_zcoordinate(self):
        """Get vertex_96_zcoordinate

        Returns:
            float: the value of `vertex_96_zcoordinate` or None if not set
        """
        return self._data["Vertex 96 Z-coordinate"]

    @vertex_96_zcoordinate.setter
    def vertex_96_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 96 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 96 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_96_zcoordinate`'.format(value))
        self._data["Vertex 96 Z-coordinate"] = value

    @property
    def vertex_97_xcoordinate(self):
        """Get vertex_97_xcoordinate

        Returns:
            float: the value of `vertex_97_xcoordinate` or None if not set
        """
        return self._data["Vertex 97 X-coordinate"]

    @vertex_97_xcoordinate.setter
    def vertex_97_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 97 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 97 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_97_xcoordinate`'.format(value))
        self._data["Vertex 97 X-coordinate"] = value

    @property
    def vertex_97_ycoordinate(self):
        """Get vertex_97_ycoordinate

        Returns:
            float: the value of `vertex_97_ycoordinate` or None if not set
        """
        return self._data["Vertex 97 Y-coordinate"]

    @vertex_97_ycoordinate.setter
    def vertex_97_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 97 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 97 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_97_ycoordinate`'.format(value))
        self._data["Vertex 97 Y-coordinate"] = value

    @property
    def vertex_97_zcoordinate(self):
        """Get vertex_97_zcoordinate

        Returns:
            float: the value of `vertex_97_zcoordinate` or None if not set
        """
        return self._data["Vertex 97 Z-coordinate"]

    @vertex_97_zcoordinate.setter
    def vertex_97_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 97 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 97 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_97_zcoordinate`'.format(value))
        self._data["Vertex 97 Z-coordinate"] = value

    @property
    def vertex_98_xcoordinate(self):
        """Get vertex_98_xcoordinate

        Returns:
            float: the value of `vertex_98_xcoordinate` or None if not set
        """
        return self._data["Vertex 98 X-coordinate"]

    @vertex_98_xcoordinate.setter
    def vertex_98_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 98 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 98 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_98_xcoordinate`'.format(value))
        self._data["Vertex 98 X-coordinate"] = value

    @property
    def vertex_98_ycoordinate(self):
        """Get vertex_98_ycoordinate

        Returns:
            float: the value of `vertex_98_ycoordinate` or None if not set
        """
        return self._data["Vertex 98 Y-coordinate"]

    @vertex_98_ycoordinate.setter
    def vertex_98_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 98 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 98 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_98_ycoordinate`'.format(value))
        self._data["Vertex 98 Y-coordinate"] = value

    @property
    def vertex_98_zcoordinate(self):
        """Get vertex_98_zcoordinate

        Returns:
            float: the value of `vertex_98_zcoordinate` or None if not set
        """
        return self._data["Vertex 98 Z-coordinate"]

    @vertex_98_zcoordinate.setter
    def vertex_98_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 98 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 98 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_98_zcoordinate`'.format(value))
        self._data["Vertex 98 Z-coordinate"] = value

    @property
    def vertex_99_xcoordinate(self):
        """Get vertex_99_xcoordinate

        Returns:
            float: the value of `vertex_99_xcoordinate` or None if not set
        """
        return self._data["Vertex 99 X-coordinate"]

    @vertex_99_xcoordinate.setter
    def vertex_99_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 99 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 99 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_99_xcoordinate`'.format(value))
        self._data["Vertex 99 X-coordinate"] = value

    @property
    def vertex_99_ycoordinate(self):
        """Get vertex_99_ycoordinate

        Returns:
            float: the value of `vertex_99_ycoordinate` or None if not set
        """
        return self._data["Vertex 99 Y-coordinate"]

    @vertex_99_ycoordinate.setter
    def vertex_99_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 99 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 99 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_99_ycoordinate`'.format(value))
        self._data["Vertex 99 Y-coordinate"] = value

    @property
    def vertex_99_zcoordinate(self):
        """Get vertex_99_zcoordinate

        Returns:
            float: the value of `vertex_99_zcoordinate` or None if not set
        """
        return self._data["Vertex 99 Z-coordinate"]

    @vertex_99_zcoordinate.setter
    def vertex_99_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 99 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 99 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_99_zcoordinate`'.format(value))
        self._data["Vertex 99 Z-coordinate"] = value

    @property
    def vertex_100_xcoordinate(self):
        """Get vertex_100_xcoordinate

        Returns:
            float: the value of `vertex_100_xcoordinate` or None if not set
        """
        return self._data["Vertex 100 X-coordinate"]

    @vertex_100_xcoordinate.setter
    def vertex_100_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 100 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 100 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_100_xcoordinate`'.format(value))
        self._data["Vertex 100 X-coordinate"] = value

    @property
    def vertex_100_ycoordinate(self):
        """Get vertex_100_ycoordinate

        Returns:
            float: the value of `vertex_100_ycoordinate` or None if not set
        """
        return self._data["Vertex 100 Y-coordinate"]

    @vertex_100_ycoordinate.setter
    def vertex_100_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 100 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 100 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_100_ycoordinate`'.format(value))
        self._data["Vertex 100 Y-coordinate"] = value

    @property
    def vertex_100_zcoordinate(self):
        """Get vertex_100_zcoordinate

        Returns:
            float: the value of `vertex_100_zcoordinate` or None if not set
        """
        return self._data["Vertex 100 Z-coordinate"]

    @vertex_100_zcoordinate.setter
    def vertex_100_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 100 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 100 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_100_zcoordinate`'.format(value))
        self._data["Vertex 100 Z-coordinate"] = value

    @property
    def vertex_101_xcoordinate(self):
        """Get vertex_101_xcoordinate

        Returns:
            float: the value of `vertex_101_xcoordinate` or None if not set
        """
        return self._data["Vertex 101 X-coordinate"]

    @vertex_101_xcoordinate.setter
    def vertex_101_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 101 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 101 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_101_xcoordinate`'.format(value))
        self._data["Vertex 101 X-coordinate"] = value

    @property
    def vertex_101_ycoordinate(self):
        """Get vertex_101_ycoordinate

        Returns:
            float: the value of `vertex_101_ycoordinate` or None if not set
        """
        return self._data["Vertex 101 Y-coordinate"]

    @vertex_101_ycoordinate.setter
    def vertex_101_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 101 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 101 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_101_ycoordinate`'.format(value))
        self._data["Vertex 101 Y-coordinate"] = value

    @property
    def vertex_101_zcoordinate(self):
        """Get vertex_101_zcoordinate

        Returns:
            float: the value of `vertex_101_zcoordinate` or None if not set
        """
        return self._data["Vertex 101 Z-coordinate"]

    @vertex_101_zcoordinate.setter
    def vertex_101_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 101 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 101 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_101_zcoordinate`'.format(value))
        self._data["Vertex 101 Z-coordinate"] = value

    @property
    def vertex_102_xcoordinate(self):
        """Get vertex_102_xcoordinate

        Returns:
            float: the value of `vertex_102_xcoordinate` or None if not set
        """
        return self._data["Vertex 102 X-coordinate"]

    @vertex_102_xcoordinate.setter
    def vertex_102_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 102 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 102 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_102_xcoordinate`'.format(value))
        self._data["Vertex 102 X-coordinate"] = value

    @property
    def vertex_102_ycoordinate(self):
        """Get vertex_102_ycoordinate

        Returns:
            float: the value of `vertex_102_ycoordinate` or None if not set
        """
        return self._data["Vertex 102 Y-coordinate"]

    @vertex_102_ycoordinate.setter
    def vertex_102_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 102 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 102 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_102_ycoordinate`'.format(value))
        self._data["Vertex 102 Y-coordinate"] = value

    @property
    def vertex_102_zcoordinate(self):
        """Get vertex_102_zcoordinate

        Returns:
            float: the value of `vertex_102_zcoordinate` or None if not set
        """
        return self._data["Vertex 102 Z-coordinate"]

    @vertex_102_zcoordinate.setter
    def vertex_102_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 102 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 102 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_102_zcoordinate`'.format(value))
        self._data["Vertex 102 Z-coordinate"] = value

    @property
    def vertex_103_xcoordinate(self):
        """Get vertex_103_xcoordinate

        Returns:
            float: the value of `vertex_103_xcoordinate` or None if not set
        """
        return self._data["Vertex 103 X-coordinate"]

    @vertex_103_xcoordinate.setter
    def vertex_103_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 103 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 103 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_103_xcoordinate`'.format(value))
        self._data["Vertex 103 X-coordinate"] = value

    @property
    def vertex_103_ycoordinate(self):
        """Get vertex_103_ycoordinate

        Returns:
            float: the value of `vertex_103_ycoordinate` or None if not set
        """
        return self._data["Vertex 103 Y-coordinate"]

    @vertex_103_ycoordinate.setter
    def vertex_103_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 103 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 103 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_103_ycoordinate`'.format(value))
        self._data["Vertex 103 Y-coordinate"] = value

    @property
    def vertex_103_zcoordinate(self):
        """Get vertex_103_zcoordinate

        Returns:
            float: the value of `vertex_103_zcoordinate` or None if not set
        """
        return self._data["Vertex 103 Z-coordinate"]

    @vertex_103_zcoordinate.setter
    def vertex_103_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 103 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 103 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_103_zcoordinate`'.format(value))
        self._data["Vertex 103 Z-coordinate"] = value

    @property
    def vertex_104_xcoordinate(self):
        """Get vertex_104_xcoordinate

        Returns:
            float: the value of `vertex_104_xcoordinate` or None if not set
        """
        return self._data["Vertex 104 X-coordinate"]

    @vertex_104_xcoordinate.setter
    def vertex_104_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 104 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 104 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_104_xcoordinate`'.format(value))
        self._data["Vertex 104 X-coordinate"] = value

    @property
    def vertex_104_ycoordinate(self):
        """Get vertex_104_ycoordinate

        Returns:
            float: the value of `vertex_104_ycoordinate` or None if not set
        """
        return self._data["Vertex 104 Y-coordinate"]

    @vertex_104_ycoordinate.setter
    def vertex_104_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 104 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 104 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_104_ycoordinate`'.format(value))
        self._data["Vertex 104 Y-coordinate"] = value

    @property
    def vertex_104_zcoordinate(self):
        """Get vertex_104_zcoordinate

        Returns:
            float: the value of `vertex_104_zcoordinate` or None if not set
        """
        return self._data["Vertex 104 Z-coordinate"]

    @vertex_104_zcoordinate.setter
    def vertex_104_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 104 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 104 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_104_zcoordinate`'.format(value))
        self._data["Vertex 104 Z-coordinate"] = value

    @property
    def vertex_105_xcoordinate(self):
        """Get vertex_105_xcoordinate

        Returns:
            float: the value of `vertex_105_xcoordinate` or None if not set
        """
        return self._data["Vertex 105 X-coordinate"]

    @vertex_105_xcoordinate.setter
    def vertex_105_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 105 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 105 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_105_xcoordinate`'.format(value))
        self._data["Vertex 105 X-coordinate"] = value

    @property
    def vertex_105_ycoordinate(self):
        """Get vertex_105_ycoordinate

        Returns:
            float: the value of `vertex_105_ycoordinate` or None if not set
        """
        return self._data["Vertex 105 Y-coordinate"]

    @vertex_105_ycoordinate.setter
    def vertex_105_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 105 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 105 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_105_ycoordinate`'.format(value))
        self._data["Vertex 105 Y-coordinate"] = value

    @property
    def vertex_105_zcoordinate(self):
        """Get vertex_105_zcoordinate

        Returns:
            float: the value of `vertex_105_zcoordinate` or None if not set
        """
        return self._data["Vertex 105 Z-coordinate"]

    @vertex_105_zcoordinate.setter
    def vertex_105_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 105 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 105 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_105_zcoordinate`'.format(value))
        self._data["Vertex 105 Z-coordinate"] = value

    @property
    def vertex_106_xcoordinate(self):
        """Get vertex_106_xcoordinate

        Returns:
            float: the value of `vertex_106_xcoordinate` or None if not set
        """
        return self._data["Vertex 106 X-coordinate"]

    @vertex_106_xcoordinate.setter
    def vertex_106_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 106 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 106 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_106_xcoordinate`'.format(value))
        self._data["Vertex 106 X-coordinate"] = value

    @property
    def vertex_106_ycoordinate(self):
        """Get vertex_106_ycoordinate

        Returns:
            float: the value of `vertex_106_ycoordinate` or None if not set
        """
        return self._data["Vertex 106 Y-coordinate"]

    @vertex_106_ycoordinate.setter
    def vertex_106_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 106 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 106 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_106_ycoordinate`'.format(value))
        self._data["Vertex 106 Y-coordinate"] = value

    @property
    def vertex_106_zcoordinate(self):
        """Get vertex_106_zcoordinate

        Returns:
            float: the value of `vertex_106_zcoordinate` or None if not set
        """
        return self._data["Vertex 106 Z-coordinate"]

    @vertex_106_zcoordinate.setter
    def vertex_106_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 106 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 106 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_106_zcoordinate`'.format(value))
        self._data["Vertex 106 Z-coordinate"] = value

    @property
    def vertex_107_xcoordinate(self):
        """Get vertex_107_xcoordinate

        Returns:
            float: the value of `vertex_107_xcoordinate` or None if not set
        """
        return self._data["Vertex 107 X-coordinate"]

    @vertex_107_xcoordinate.setter
    def vertex_107_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 107 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 107 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_107_xcoordinate`'.format(value))
        self._data["Vertex 107 X-coordinate"] = value

    @property
    def vertex_107_ycoordinate(self):
        """Get vertex_107_ycoordinate

        Returns:
            float: the value of `vertex_107_ycoordinate` or None if not set
        """
        return self._data["Vertex 107 Y-coordinate"]

    @vertex_107_ycoordinate.setter
    def vertex_107_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 107 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 107 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_107_ycoordinate`'.format(value))
        self._data["Vertex 107 Y-coordinate"] = value

    @property
    def vertex_107_zcoordinate(self):
        """Get vertex_107_zcoordinate

        Returns:
            float: the value of `vertex_107_zcoordinate` or None if not set
        """
        return self._data["Vertex 107 Z-coordinate"]

    @vertex_107_zcoordinate.setter
    def vertex_107_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 107 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 107 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_107_zcoordinate`'.format(value))
        self._data["Vertex 107 Z-coordinate"] = value

    @property
    def vertex_108_xcoordinate(self):
        """Get vertex_108_xcoordinate

        Returns:
            float: the value of `vertex_108_xcoordinate` or None if not set
        """
        return self._data["Vertex 108 X-coordinate"]

    @vertex_108_xcoordinate.setter
    def vertex_108_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 108 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 108 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_108_xcoordinate`'.format(value))
        self._data["Vertex 108 X-coordinate"] = value

    @property
    def vertex_108_ycoordinate(self):
        """Get vertex_108_ycoordinate

        Returns:
            float: the value of `vertex_108_ycoordinate` or None if not set
        """
        return self._data["Vertex 108 Y-coordinate"]

    @vertex_108_ycoordinate.setter
    def vertex_108_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 108 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 108 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_108_ycoordinate`'.format(value))
        self._data["Vertex 108 Y-coordinate"] = value

    @property
    def vertex_108_zcoordinate(self):
        """Get vertex_108_zcoordinate

        Returns:
            float: the value of `vertex_108_zcoordinate` or None if not set
        """
        return self._data["Vertex 108 Z-coordinate"]

    @vertex_108_zcoordinate.setter
    def vertex_108_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 108 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 108 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_108_zcoordinate`'.format(value))
        self._data["Vertex 108 Z-coordinate"] = value

    @property
    def vertex_109_xcoordinate(self):
        """Get vertex_109_xcoordinate

        Returns:
            float: the value of `vertex_109_xcoordinate` or None if not set
        """
        return self._data["Vertex 109 X-coordinate"]

    @vertex_109_xcoordinate.setter
    def vertex_109_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 109 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 109 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_109_xcoordinate`'.format(value))
        self._data["Vertex 109 X-coordinate"] = value

    @property
    def vertex_109_ycoordinate(self):
        """Get vertex_109_ycoordinate

        Returns:
            float: the value of `vertex_109_ycoordinate` or None if not set
        """
        return self._data["Vertex 109 Y-coordinate"]

    @vertex_109_ycoordinate.setter
    def vertex_109_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 109 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 109 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_109_ycoordinate`'.format(value))
        self._data["Vertex 109 Y-coordinate"] = value

    @property
    def vertex_109_zcoordinate(self):
        """Get vertex_109_zcoordinate

        Returns:
            float: the value of `vertex_109_zcoordinate` or None if not set
        """
        return self._data["Vertex 109 Z-coordinate"]

    @vertex_109_zcoordinate.setter
    def vertex_109_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 109 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 109 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_109_zcoordinate`'.format(value))
        self._data["Vertex 109 Z-coordinate"] = value

    @property
    def vertex_110_xcoordinate(self):
        """Get vertex_110_xcoordinate

        Returns:
            float: the value of `vertex_110_xcoordinate` or None if not set
        """
        return self._data["Vertex 110 X-coordinate"]

    @vertex_110_xcoordinate.setter
    def vertex_110_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 110 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 110 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_110_xcoordinate`'.format(value))
        self._data["Vertex 110 X-coordinate"] = value

    @property
    def vertex_110_ycoordinate(self):
        """Get vertex_110_ycoordinate

        Returns:
            float: the value of `vertex_110_ycoordinate` or None if not set
        """
        return self._data["Vertex 110 Y-coordinate"]

    @vertex_110_ycoordinate.setter
    def vertex_110_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 110 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 110 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_110_ycoordinate`'.format(value))
        self._data["Vertex 110 Y-coordinate"] = value

    @property
    def vertex_110_zcoordinate(self):
        """Get vertex_110_zcoordinate

        Returns:
            float: the value of `vertex_110_zcoordinate` or None if not set
        """
        return self._data["Vertex 110 Z-coordinate"]

    @vertex_110_zcoordinate.setter
    def vertex_110_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 110 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 110 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_110_zcoordinate`'.format(value))
        self._data["Vertex 110 Z-coordinate"] = value

    @property
    def vertex_111_xcoordinate(self):
        """Get vertex_111_xcoordinate

        Returns:
            float: the value of `vertex_111_xcoordinate` or None if not set
        """
        return self._data["Vertex 111 X-coordinate"]

    @vertex_111_xcoordinate.setter
    def vertex_111_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 111 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 111 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_111_xcoordinate`'.format(value))
        self._data["Vertex 111 X-coordinate"] = value

    @property
    def vertex_111_ycoordinate(self):
        """Get vertex_111_ycoordinate

        Returns:
            float: the value of `vertex_111_ycoordinate` or None if not set
        """
        return self._data["Vertex 111 Y-coordinate"]

    @vertex_111_ycoordinate.setter
    def vertex_111_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 111 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 111 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_111_ycoordinate`'.format(value))
        self._data["Vertex 111 Y-coordinate"] = value

    @property
    def vertex_111_zcoordinate(self):
        """Get vertex_111_zcoordinate

        Returns:
            float: the value of `vertex_111_zcoordinate` or None if not set
        """
        return self._data["Vertex 111 Z-coordinate"]

    @vertex_111_zcoordinate.setter
    def vertex_111_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 111 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 111 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_111_zcoordinate`'.format(value))
        self._data["Vertex 111 Z-coordinate"] = value

    @property
    def vertex_112_xcoordinate(self):
        """Get vertex_112_xcoordinate

        Returns:
            float: the value of `vertex_112_xcoordinate` or None if not set
        """
        return self._data["Vertex 112 X-coordinate"]

    @vertex_112_xcoordinate.setter
    def vertex_112_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 112 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 112 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_112_xcoordinate`'.format(value))
        self._data["Vertex 112 X-coordinate"] = value

    @property
    def vertex_112_ycoordinate(self):
        """Get vertex_112_ycoordinate

        Returns:
            float: the value of `vertex_112_ycoordinate` or None if not set
        """
        return self._data["Vertex 112 Y-coordinate"]

    @vertex_112_ycoordinate.setter
    def vertex_112_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 112 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 112 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_112_ycoordinate`'.format(value))
        self._data["Vertex 112 Y-coordinate"] = value

    @property
    def vertex_112_zcoordinate(self):
        """Get vertex_112_zcoordinate

        Returns:
            float: the value of `vertex_112_zcoordinate` or None if not set
        """
        return self._data["Vertex 112 Z-coordinate"]

    @vertex_112_zcoordinate.setter
    def vertex_112_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 112 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 112 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_112_zcoordinate`'.format(value))
        self._data["Vertex 112 Z-coordinate"] = value

    @property
    def vertex_113_xcoordinate(self):
        """Get vertex_113_xcoordinate

        Returns:
            float: the value of `vertex_113_xcoordinate` or None if not set
        """
        return self._data["Vertex 113 X-coordinate"]

    @vertex_113_xcoordinate.setter
    def vertex_113_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 113 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 113 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_113_xcoordinate`'.format(value))
        self._data["Vertex 113 X-coordinate"] = value

    @property
    def vertex_113_ycoordinate(self):
        """Get vertex_113_ycoordinate

        Returns:
            float: the value of `vertex_113_ycoordinate` or None if not set
        """
        return self._data["Vertex 113 Y-coordinate"]

    @vertex_113_ycoordinate.setter
    def vertex_113_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 113 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 113 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_113_ycoordinate`'.format(value))
        self._data["Vertex 113 Y-coordinate"] = value

    @property
    def vertex_113_zcoordinate(self):
        """Get vertex_113_zcoordinate

        Returns:
            float: the value of `vertex_113_zcoordinate` or None if not set
        """
        return self._data["Vertex 113 Z-coordinate"]

    @vertex_113_zcoordinate.setter
    def vertex_113_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 113 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 113 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_113_zcoordinate`'.format(value))
        self._data["Vertex 113 Z-coordinate"] = value

    @property
    def vertex_114_xcoordinate(self):
        """Get vertex_114_xcoordinate

        Returns:
            float: the value of `vertex_114_xcoordinate` or None if not set
        """
        return self._data["Vertex 114 X-coordinate"]

    @vertex_114_xcoordinate.setter
    def vertex_114_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 114 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 114 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_114_xcoordinate`'.format(value))
        self._data["Vertex 114 X-coordinate"] = value

    @property
    def vertex_114_ycoordinate(self):
        """Get vertex_114_ycoordinate

        Returns:
            float: the value of `vertex_114_ycoordinate` or None if not set
        """
        return self._data["Vertex 114 Y-coordinate"]

    @vertex_114_ycoordinate.setter
    def vertex_114_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 114 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 114 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_114_ycoordinate`'.format(value))
        self._data["Vertex 114 Y-coordinate"] = value

    @property
    def vertex_114_zcoordinate(self):
        """Get vertex_114_zcoordinate

        Returns:
            float: the value of `vertex_114_zcoordinate` or None if not set
        """
        return self._data["Vertex 114 Z-coordinate"]

    @vertex_114_zcoordinate.setter
    def vertex_114_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 114 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 114 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_114_zcoordinate`'.format(value))
        self._data["Vertex 114 Z-coordinate"] = value

    @property
    def vertex_115_xcoordinate(self):
        """Get vertex_115_xcoordinate

        Returns:
            float: the value of `vertex_115_xcoordinate` or None if not set
        """
        return self._data["Vertex 115 X-coordinate"]

    @vertex_115_xcoordinate.setter
    def vertex_115_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 115 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 115 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_115_xcoordinate`'.format(value))
        self._data["Vertex 115 X-coordinate"] = value

    @property
    def vertex_115_ycoordinate(self):
        """Get vertex_115_ycoordinate

        Returns:
            float: the value of `vertex_115_ycoordinate` or None if not set
        """
        return self._data["Vertex 115 Y-coordinate"]

    @vertex_115_ycoordinate.setter
    def vertex_115_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 115 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 115 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_115_ycoordinate`'.format(value))
        self._data["Vertex 115 Y-coordinate"] = value

    @property
    def vertex_115_zcoordinate(self):
        """Get vertex_115_zcoordinate

        Returns:
            float: the value of `vertex_115_zcoordinate` or None if not set
        """
        return self._data["Vertex 115 Z-coordinate"]

    @vertex_115_zcoordinate.setter
    def vertex_115_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 115 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 115 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_115_zcoordinate`'.format(value))
        self._data["Vertex 115 Z-coordinate"] = value

    @property
    def vertex_116_xcoordinate(self):
        """Get vertex_116_xcoordinate

        Returns:
            float: the value of `vertex_116_xcoordinate` or None if not set
        """
        return self._data["Vertex 116 X-coordinate"]

    @vertex_116_xcoordinate.setter
    def vertex_116_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 116 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 116 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_116_xcoordinate`'.format(value))
        self._data["Vertex 116 X-coordinate"] = value

    @property
    def vertex_116_ycoordinate(self):
        """Get vertex_116_ycoordinate

        Returns:
            float: the value of `vertex_116_ycoordinate` or None if not set
        """
        return self._data["Vertex 116 Y-coordinate"]

    @vertex_116_ycoordinate.setter
    def vertex_116_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 116 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 116 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_116_ycoordinate`'.format(value))
        self._data["Vertex 116 Y-coordinate"] = value

    @property
    def vertex_116_zcoordinate(self):
        """Get vertex_116_zcoordinate

        Returns:
            float: the value of `vertex_116_zcoordinate` or None if not set
        """
        return self._data["Vertex 116 Z-coordinate"]

    @vertex_116_zcoordinate.setter
    def vertex_116_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 116 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 116 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_116_zcoordinate`'.format(value))
        self._data["Vertex 116 Z-coordinate"] = value

    @property
    def vertex_117_xcoordinate(self):
        """Get vertex_117_xcoordinate

        Returns:
            float: the value of `vertex_117_xcoordinate` or None if not set
        """
        return self._data["Vertex 117 X-coordinate"]

    @vertex_117_xcoordinate.setter
    def vertex_117_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 117 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 117 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_117_xcoordinate`'.format(value))
        self._data["Vertex 117 X-coordinate"] = value

    @property
    def vertex_117_ycoordinate(self):
        """Get vertex_117_ycoordinate

        Returns:
            float: the value of `vertex_117_ycoordinate` or None if not set
        """
        return self._data["Vertex 117 Y-coordinate"]

    @vertex_117_ycoordinate.setter
    def vertex_117_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 117 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 117 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_117_ycoordinate`'.format(value))
        self._data["Vertex 117 Y-coordinate"] = value

    @property
    def vertex_117_zcoordinate(self):
        """Get vertex_117_zcoordinate

        Returns:
            float: the value of `vertex_117_zcoordinate` or None if not set
        """
        return self._data["Vertex 117 Z-coordinate"]

    @vertex_117_zcoordinate.setter
    def vertex_117_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 117 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 117 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_117_zcoordinate`'.format(value))
        self._data["Vertex 117 Z-coordinate"] = value

    @property
    def vertex_118_xcoordinate(self):
        """Get vertex_118_xcoordinate

        Returns:
            float: the value of `vertex_118_xcoordinate` or None if not set
        """
        return self._data["Vertex 118 X-coordinate"]

    @vertex_118_xcoordinate.setter
    def vertex_118_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 118 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 118 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_118_xcoordinate`'.format(value))
        self._data["Vertex 118 X-coordinate"] = value

    @property
    def vertex_118_ycoordinate(self):
        """Get vertex_118_ycoordinate

        Returns:
            float: the value of `vertex_118_ycoordinate` or None if not set
        """
        return self._data["Vertex 118 Y-coordinate"]

    @vertex_118_ycoordinate.setter
    def vertex_118_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 118 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 118 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_118_ycoordinate`'.format(value))
        self._data["Vertex 118 Y-coordinate"] = value

    @property
    def vertex_118_zcoordinate(self):
        """Get vertex_118_zcoordinate

        Returns:
            float: the value of `vertex_118_zcoordinate` or None if not set
        """
        return self._data["Vertex 118 Z-coordinate"]

    @vertex_118_zcoordinate.setter
    def vertex_118_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 118 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 118 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_118_zcoordinate`'.format(value))
        self._data["Vertex 118 Z-coordinate"] = value

    @property
    def vertex_119_xcoordinate(self):
        """Get vertex_119_xcoordinate

        Returns:
            float: the value of `vertex_119_xcoordinate` or None if not set
        """
        return self._data["Vertex 119 X-coordinate"]

    @vertex_119_xcoordinate.setter
    def vertex_119_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 119 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 119 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_119_xcoordinate`'.format(value))
        self._data["Vertex 119 X-coordinate"] = value

    @property
    def vertex_119_ycoordinate(self):
        """Get vertex_119_ycoordinate

        Returns:
            float: the value of `vertex_119_ycoordinate` or None if not set
        """
        return self._data["Vertex 119 Y-coordinate"]

    @vertex_119_ycoordinate.setter
    def vertex_119_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 119 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 119 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_119_ycoordinate`'.format(value))
        self._data["Vertex 119 Y-coordinate"] = value

    @property
    def vertex_119_zcoordinate(self):
        """Get vertex_119_zcoordinate

        Returns:
            float: the value of `vertex_119_zcoordinate` or None if not set
        """
        return self._data["Vertex 119 Z-coordinate"]

    @vertex_119_zcoordinate.setter
    def vertex_119_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 119 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 119 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_119_zcoordinate`'.format(value))
        self._data["Vertex 119 Z-coordinate"] = value

    @property
    def vertex_120_xcoordinate(self):
        """Get vertex_120_xcoordinate

        Returns:
            float: the value of `vertex_120_xcoordinate` or None if not set
        """
        return self._data["Vertex 120 X-coordinate"]

    @vertex_120_xcoordinate.setter
    def vertex_120_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 120 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 120 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_120_xcoordinate`'.format(value))
        self._data["Vertex 120 X-coordinate"] = value

    @property
    def vertex_120_ycoordinate(self):
        """Get vertex_120_ycoordinate

        Returns:
            float: the value of `vertex_120_ycoordinate` or None if not set
        """
        return self._data["Vertex 120 Y-coordinate"]

    @vertex_120_ycoordinate.setter
    def vertex_120_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 120 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 120 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_120_ycoordinate`'.format(value))
        self._data["Vertex 120 Y-coordinate"] = value

    @property
    def vertex_120_zcoordinate(self):
        """Get vertex_120_zcoordinate

        Returns:
            float: the value of `vertex_120_zcoordinate` or None if not set
        """
        return self._data["Vertex 120 Z-coordinate"]

    @vertex_120_zcoordinate.setter
    def vertex_120_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 120 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 120 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_120_zcoordinate`'.format(value))
        self._data["Vertex 120 Z-coordinate"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ShadingBuildingDetailed(object):
    """ Corresponds to IDD object `Shading:Building:Detailed`
        used for shading elements such as trees, other buildings, parts of this building not being modeled
        these items are relative to the current building and would move with relative geometry
    
    """
    internal_name = "Shading:Building:Detailed"
    field_count = 363
    required_fields = ["Name", "Number of Vertices", "Vertex 1 X-coordinate", "Vertex 1 Y-coordinate", "Vertex 1 Z-coordinate", "Vertex 2 X-coordinate", "Vertex 2 Y-coordinate", "Vertex 2 Z-coordinate", "Vertex 3 X-coordinate", "Vertex 3 Y-coordinate", "Vertex 3 Z-coordinate"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Shading:Building:Detailed`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Transmittance Schedule Name"] = None
        self._data["Number of Vertices"] = None
        self._data["Vertex 1 X-coordinate"] = None
        self._data["Vertex 1 Y-coordinate"] = None
        self._data["Vertex 1 Z-coordinate"] = None
        self._data["Vertex 2 X-coordinate"] = None
        self._data["Vertex 2 Y-coordinate"] = None
        self._data["Vertex 2 Z-coordinate"] = None
        self._data["Vertex 3 X-coordinate"] = None
        self._data["Vertex 3 Y-coordinate"] = None
        self._data["Vertex 3 Z-coordinate"] = None
        self._data["Vertex 4 X-coordinate"] = None
        self._data["Vertex 4 Y-coordinate"] = None
        self._data["Vertex 4 Z-coordinate"] = None
        self._data["Vertex 5 X-coordinate"] = None
        self._data["Vertex 5 Y-coordinate"] = None
        self._data["Vertex 5 Z-coordinate"] = None
        self._data["Vertex 6 X-coordinate"] = None
        self._data["Vertex 6 Y-coordinate"] = None
        self._data["Vertex 6 Z-coordinate"] = None
        self._data["Vertex 7 X-coordinate"] = None
        self._data["Vertex 7 Y-coordinate"] = None
        self._data["Vertex 7 Z-coordinate"] = None
        self._data["Vertex 8 X-coordinate"] = None
        self._data["Vertex 8 Y-coordinate"] = None
        self._data["Vertex 8 Z-coordinate"] = None
        self._data["Vertex 9 X-coordinate"] = None
        self._data["Vertex 9 Y-coordinate"] = None
        self._data["Vertex 9 Z-coordinate"] = None
        self._data["Vertex 10 X-coordinate"] = None
        self._data["Vertex 10 Y-coordinate"] = None
        self._data["Vertex 10 Z-coordinate"] = None
        self._data["Vertex 11 X-coordinate"] = None
        self._data["Vertex 11 Y-coordinate"] = None
        self._data["Vertex 11 Z-coordinate"] = None
        self._data["Vertex 12 X-coordinate"] = None
        self._data["Vertex 12 Y-coordinate"] = None
        self._data["Vertex 12 Z-coordinate"] = None
        self._data["Vertex 13 X-coordinate"] = None
        self._data["Vertex 13 Y-coordinate"] = None
        self._data["Vertex 13 Z-coordinate"] = None
        self._data["Vertex 14 X-coordinate"] = None
        self._data["Vertex 14 Y-coordinate"] = None
        self._data["Vertex 14 Z-coordinate"] = None
        self._data["Vertex 15 X-coordinate"] = None
        self._data["Vertex 15 Y-coordinate"] = None
        self._data["Vertex 15 Z-coordinate"] = None
        self._data["Vertex 16 X-coordinate"] = None
        self._data["Vertex 16 Y-coordinate"] = None
        self._data["Vertex 16 Z-coordinate"] = None
        self._data["Vertex 17 X-coordinate"] = None
        self._data["Vertex 17 Y-coordinate"] = None
        self._data["Vertex 17 Z-coordinate"] = None
        self._data["Vertex 18 X-coordinate"] = None
        self._data["Vertex 18 Y-coordinate"] = None
        self._data["Vertex 18 Z-coordinate"] = None
        self._data["Vertex 19 X-coordinate"] = None
        self._data["Vertex 19 Y-coordinate"] = None
        self._data["Vertex 19 Z-coordinate"] = None
        self._data["Vertex 20 X-coordinate"] = None
        self._data["Vertex 20 Y-coordinate"] = None
        self._data["Vertex 20 Z-coordinate"] = None
        self._data["Vertex 21 X-coordinate"] = None
        self._data["Vertex 21 Y-coordinate"] = None
        self._data["Vertex 21 Z-coordinate"] = None
        self._data["Vertex 22 X-coordinate"] = None
        self._data["Vertex 22 Y-coordinate"] = None
        self._data["Vertex 22 Z-coordinate"] = None
        self._data["Vertex 23 X-coordinate"] = None
        self._data["Vertex 23 Y-coordinate"] = None
        self._data["Vertex 23 Z-coordinate"] = None
        self._data["Vertex 24 X-coordinate"] = None
        self._data["Vertex 24 Y-coordinate"] = None
        self._data["Vertex 24 Z-coordinate"] = None
        self._data["Vertex 25 X-coordinate"] = None
        self._data["Vertex 25 Y-coordinate"] = None
        self._data["Vertex 25 Z-coordinate"] = None
        self._data["Vertex 26 X-coordinate"] = None
        self._data["Vertex 26 Y-coordinate"] = None
        self._data["Vertex 26 Z-coordinate"] = None
        self._data["Vertex 27 X-coordinate"] = None
        self._data["Vertex 27 Y-coordinate"] = None
        self._data["Vertex 27 Z-coordinate"] = None
        self._data["Vertex 28 X-coordinate"] = None
        self._data["Vertex 28 Y-coordinate"] = None
        self._data["Vertex 28 Z-coordinate"] = None
        self._data["Vertex 29 X-coordinate"] = None
        self._data["Vertex 29 Y-coordinate"] = None
        self._data["Vertex 29 Z-coordinate"] = None
        self._data["Vertex 30 X-coordinate"] = None
        self._data["Vertex 30 Y-coordinate"] = None
        self._data["Vertex 30 Z-coordinate"] = None
        self._data["Vertex 31 X-coordinate"] = None
        self._data["Vertex 31 Y-coordinate"] = None
        self._data["Vertex 31 Z-coordinate"] = None
        self._data["Vertex 32 X-coordinate"] = None
        self._data["Vertex 32 Y-coordinate"] = None
        self._data["Vertex 32 Z-coordinate"] = None
        self._data["Vertex 33 X-coordinate"] = None
        self._data["Vertex 33 Y-coordinate"] = None
        self._data["Vertex 33 Z-coordinate"] = None
        self._data["Vertex 34 X-coordinate"] = None
        self._data["Vertex 34 Y-coordinate"] = None
        self._data["Vertex 34 Z-coordinate"] = None
        self._data["Vertex 35 X-coordinate"] = None
        self._data["Vertex 35 Y-coordinate"] = None
        self._data["Vertex 35 Z-coordinate"] = None
        self._data["Vertex 36 X-coordinate"] = None
        self._data["Vertex 36 Y-coordinate"] = None
        self._data["Vertex 36 Z-coordinate"] = None
        self._data["Vertex 37 X-coordinate"] = None
        self._data["Vertex 37 Y-coordinate"] = None
        self._data["Vertex 37 Z-coordinate"] = None
        self._data["Vertex 38 X-coordinate"] = None
        self._data["Vertex 38 Y-coordinate"] = None
        self._data["Vertex 38 Z-coordinate"] = None
        self._data["Vertex 39 X-coordinate"] = None
        self._data["Vertex 39 Y-coordinate"] = None
        self._data["Vertex 39 Z-coordinate"] = None
        self._data["Vertex 40 X-coordinate"] = None
        self._data["Vertex 40 Y-coordinate"] = None
        self._data["Vertex 40 Z-coordinate"] = None
        self._data["Vertex 41 X-coordinate"] = None
        self._data["Vertex 41 Y-coordinate"] = None
        self._data["Vertex 41 Z-coordinate"] = None
        self._data["Vertex 42 X-coordinate"] = None
        self._data["Vertex 42 Y-coordinate"] = None
        self._data["Vertex 42 Z-coordinate"] = None
        self._data["Vertex 43 X-coordinate"] = None
        self._data["Vertex 43 Y-coordinate"] = None
        self._data["Vertex 43 Z-coordinate"] = None
        self._data["Vertex 44 X-coordinate"] = None
        self._data["Vertex 44 Y-coordinate"] = None
        self._data["Vertex 44 Z-coordinate"] = None
        self._data["Vertex 45 X-coordinate"] = None
        self._data["Vertex 45 Y-coordinate"] = None
        self._data["Vertex 45 Z-coordinate"] = None
        self._data["Vertex 46 X-coordinate"] = None
        self._data["Vertex 46 Y-coordinate"] = None
        self._data["Vertex 46 Z-coordinate"] = None
        self._data["Vertex 47 X-coordinate"] = None
        self._data["Vertex 47 Y-coordinate"] = None
        self._data["Vertex 47 Z-coordinate"] = None
        self._data["Vertex 48 X-coordinate"] = None
        self._data["Vertex 48 Y-coordinate"] = None
        self._data["Vertex 48 Z-coordinate"] = None
        self._data["Vertex 49 X-coordinate"] = None
        self._data["Vertex 49 Y-coordinate"] = None
        self._data["Vertex 49 Z-coordinate"] = None
        self._data["Vertex 50 X-coordinate"] = None
        self._data["Vertex 50 Y-coordinate"] = None
        self._data["Vertex 50 Z-coordinate"] = None
        self._data["Vertex 51 X-coordinate"] = None
        self._data["Vertex 51 Y-coordinate"] = None
        self._data["Vertex 51 Z-coordinate"] = None
        self._data["Vertex 52 X-coordinate"] = None
        self._data["Vertex 52 Y-coordinate"] = None
        self._data["Vertex 52 Z-coordinate"] = None
        self._data["Vertex 53 X-coordinate"] = None
        self._data["Vertex 53 Y-coordinate"] = None
        self._data["Vertex 53 Z-coordinate"] = None
        self._data["Vertex 54 X-coordinate"] = None
        self._data["Vertex 54 Y-coordinate"] = None
        self._data["Vertex 54 Z-coordinate"] = None
        self._data["Vertex 55 X-coordinate"] = None
        self._data["Vertex 55 Y-coordinate"] = None
        self._data["Vertex 55 Z-coordinate"] = None
        self._data["Vertex 56 X-coordinate"] = None
        self._data["Vertex 56 Y-coordinate"] = None
        self._data["Vertex 56 Z-coordinate"] = None
        self._data["Vertex 57 X-coordinate"] = None
        self._data["Vertex 57 Y-coordinate"] = None
        self._data["Vertex 57 Z-coordinate"] = None
        self._data["Vertex 58 X-coordinate"] = None
        self._data["Vertex 58 Y-coordinate"] = None
        self._data["Vertex 58 Z-coordinate"] = None
        self._data["Vertex 59 X-coordinate"] = None
        self._data["Vertex 59 Y-coordinate"] = None
        self._data["Vertex 59 Z-coordinate"] = None
        self._data["Vertex 60 X-coordinate"] = None
        self._data["Vertex 60 Y-coordinate"] = None
        self._data["Vertex 60 Z-coordinate"] = None
        self._data["Vertex 61 X-coordinate"] = None
        self._data["Vertex 61 Y-coordinate"] = None
        self._data["Vertex 61 Z-coordinate"] = None
        self._data["Vertex 62 X-coordinate"] = None
        self._data["Vertex 62 Y-coordinate"] = None
        self._data["Vertex 62 Z-coordinate"] = None
        self._data["Vertex 63 X-coordinate"] = None
        self._data["Vertex 63 Y-coordinate"] = None
        self._data["Vertex 63 Z-coordinate"] = None
        self._data["Vertex 64 X-coordinate"] = None
        self._data["Vertex 64 Y-coordinate"] = None
        self._data["Vertex 64 Z-coordinate"] = None
        self._data["Vertex 65 X-coordinate"] = None
        self._data["Vertex 65 Y-coordinate"] = None
        self._data["Vertex 65 Z-coordinate"] = None
        self._data["Vertex 66 X-coordinate"] = None
        self._data["Vertex 66 Y-coordinate"] = None
        self._data["Vertex 66 Z-coordinate"] = None
        self._data["Vertex 67 X-coordinate"] = None
        self._data["Vertex 67 Y-coordinate"] = None
        self._data["Vertex 67 Z-coordinate"] = None
        self._data["Vertex 68 X-coordinate"] = None
        self._data["Vertex 68 Y-coordinate"] = None
        self._data["Vertex 68 Z-coordinate"] = None
        self._data["Vertex 69 X-coordinate"] = None
        self._data["Vertex 69 Y-coordinate"] = None
        self._data["Vertex 69 Z-coordinate"] = None
        self._data["Vertex 70 X-coordinate"] = None
        self._data["Vertex 70 Y-coordinate"] = None
        self._data["Vertex 70 Z-coordinate"] = None
        self._data["Vertex 71 X-coordinate"] = None
        self._data["Vertex 71 Y-coordinate"] = None
        self._data["Vertex 71 Z-coordinate"] = None
        self._data["Vertex 72 X-coordinate"] = None
        self._data["Vertex 72 Y-coordinate"] = None
        self._data["Vertex 72 Z-coordinate"] = None
        self._data["Vertex 73 X-coordinate"] = None
        self._data["Vertex 73 Y-coordinate"] = None
        self._data["Vertex 73 Z-coordinate"] = None
        self._data["Vertex 74 X-coordinate"] = None
        self._data["Vertex 74 Y-coordinate"] = None
        self._data["Vertex 74 Z-coordinate"] = None
        self._data["Vertex 75 X-coordinate"] = None
        self._data["Vertex 75 Y-coordinate"] = None
        self._data["Vertex 75 Z-coordinate"] = None
        self._data["Vertex 76 X-coordinate"] = None
        self._data["Vertex 76 Y-coordinate"] = None
        self._data["Vertex 76 Z-coordinate"] = None
        self._data["Vertex 77 X-coordinate"] = None
        self._data["Vertex 77 Y-coordinate"] = None
        self._data["Vertex 77 Z-coordinate"] = None
        self._data["Vertex 78 X-coordinate"] = None
        self._data["Vertex 78 Y-coordinate"] = None
        self._data["Vertex 78 Z-coordinate"] = None
        self._data["Vertex 79 X-coordinate"] = None
        self._data["Vertex 79 Y-coordinate"] = None
        self._data["Vertex 79 Z-coordinate"] = None
        self._data["Vertex 80 X-coordinate"] = None
        self._data["Vertex 80 Y-coordinate"] = None
        self._data["Vertex 80 Z-coordinate"] = None
        self._data["Vertex 81 X-coordinate"] = None
        self._data["Vertex 81 Y-coordinate"] = None
        self._data["Vertex 81 Z-coordinate"] = None
        self._data["Vertex 82 X-coordinate"] = None
        self._data["Vertex 82 Y-coordinate"] = None
        self._data["Vertex 82 Z-coordinate"] = None
        self._data["Vertex 83 X-coordinate"] = None
        self._data["Vertex 83 Y-coordinate"] = None
        self._data["Vertex 83 Z-coordinate"] = None
        self._data["Vertex 84 X-coordinate"] = None
        self._data["Vertex 84 Y-coordinate"] = None
        self._data["Vertex 84 Z-coordinate"] = None
        self._data["Vertex 85 X-coordinate"] = None
        self._data["Vertex 85 Y-coordinate"] = None
        self._data["Vertex 85 Z-coordinate"] = None
        self._data["Vertex 86 X-coordinate"] = None
        self._data["Vertex 86 Y-coordinate"] = None
        self._data["Vertex 86 Z-coordinate"] = None
        self._data["Vertex 87 X-coordinate"] = None
        self._data["Vertex 87 Y-coordinate"] = None
        self._data["Vertex 87 Z-coordinate"] = None
        self._data["Vertex 88 X-coordinate"] = None
        self._data["Vertex 88 Y-coordinate"] = None
        self._data["Vertex 88 Z-coordinate"] = None
        self._data["Vertex 89 X-coordinate"] = None
        self._data["Vertex 89 Y-coordinate"] = None
        self._data["Vertex 89 Z-coordinate"] = None
        self._data["Vertex 90 X-coordinate"] = None
        self._data["Vertex 90 Y-coordinate"] = None
        self._data["Vertex 90 Z-coordinate"] = None
        self._data["Vertex 91 X-coordinate"] = None
        self._data["Vertex 91 Y-coordinate"] = None
        self._data["Vertex 91 Z-coordinate"] = None
        self._data["Vertex 92 X-coordinate"] = None
        self._data["Vertex 92 Y-coordinate"] = None
        self._data["Vertex 92 Z-coordinate"] = None
        self._data["Vertex 93 X-coordinate"] = None
        self._data["Vertex 93 Y-coordinate"] = None
        self._data["Vertex 93 Z-coordinate"] = None
        self._data["Vertex 94 X-coordinate"] = None
        self._data["Vertex 94 Y-coordinate"] = None
        self._data["Vertex 94 Z-coordinate"] = None
        self._data["Vertex 95 X-coordinate"] = None
        self._data["Vertex 95 Y-coordinate"] = None
        self._data["Vertex 95 Z-coordinate"] = None
        self._data["Vertex 96 X-coordinate"] = None
        self._data["Vertex 96 Y-coordinate"] = None
        self._data["Vertex 96 Z-coordinate"] = None
        self._data["Vertex 97 X-coordinate"] = None
        self._data["Vertex 97 Y-coordinate"] = None
        self._data["Vertex 97 Z-coordinate"] = None
        self._data["Vertex 98 X-coordinate"] = None
        self._data["Vertex 98 Y-coordinate"] = None
        self._data["Vertex 98 Z-coordinate"] = None
        self._data["Vertex 99 X-coordinate"] = None
        self._data["Vertex 99 Y-coordinate"] = None
        self._data["Vertex 99 Z-coordinate"] = None
        self._data["Vertex 100 X-coordinate"] = None
        self._data["Vertex 100 Y-coordinate"] = None
        self._data["Vertex 100 Z-coordinate"] = None
        self._data["Vertex 101 X-coordinate"] = None
        self._data["Vertex 101 Y-coordinate"] = None
        self._data["Vertex 101 Z-coordinate"] = None
        self._data["Vertex 102 X-coordinate"] = None
        self._data["Vertex 102 Y-coordinate"] = None
        self._data["Vertex 102 Z-coordinate"] = None
        self._data["Vertex 103 X-coordinate"] = None
        self._data["Vertex 103 Y-coordinate"] = None
        self._data["Vertex 103 Z-coordinate"] = None
        self._data["Vertex 104 X-coordinate"] = None
        self._data["Vertex 104 Y-coordinate"] = None
        self._data["Vertex 104 Z-coordinate"] = None
        self._data["Vertex 105 X-coordinate"] = None
        self._data["Vertex 105 Y-coordinate"] = None
        self._data["Vertex 105 Z-coordinate"] = None
        self._data["Vertex 106 X-coordinate"] = None
        self._data["Vertex 106 Y-coordinate"] = None
        self._data["Vertex 106 Z-coordinate"] = None
        self._data["Vertex 107 X-coordinate"] = None
        self._data["Vertex 107 Y-coordinate"] = None
        self._data["Vertex 107 Z-coordinate"] = None
        self._data["Vertex 108 X-coordinate"] = None
        self._data["Vertex 108 Y-coordinate"] = None
        self._data["Vertex 108 Z-coordinate"] = None
        self._data["Vertex 109 X-coordinate"] = None
        self._data["Vertex 109 Y-coordinate"] = None
        self._data["Vertex 109 Z-coordinate"] = None
        self._data["Vertex 110 X-coordinate"] = None
        self._data["Vertex 110 Y-coordinate"] = None
        self._data["Vertex 110 Z-coordinate"] = None
        self._data["Vertex 111 X-coordinate"] = None
        self._data["Vertex 111 Y-coordinate"] = None
        self._data["Vertex 111 Z-coordinate"] = None
        self._data["Vertex 112 X-coordinate"] = None
        self._data["Vertex 112 Y-coordinate"] = None
        self._data["Vertex 112 Z-coordinate"] = None
        self._data["Vertex 113 X-coordinate"] = None
        self._data["Vertex 113 Y-coordinate"] = None
        self._data["Vertex 113 Z-coordinate"] = None
        self._data["Vertex 114 X-coordinate"] = None
        self._data["Vertex 114 Y-coordinate"] = None
        self._data["Vertex 114 Z-coordinate"] = None
        self._data["Vertex 115 X-coordinate"] = None
        self._data["Vertex 115 Y-coordinate"] = None
        self._data["Vertex 115 Z-coordinate"] = None
        self._data["Vertex 116 X-coordinate"] = None
        self._data["Vertex 116 Y-coordinate"] = None
        self._data["Vertex 116 Z-coordinate"] = None
        self._data["Vertex 117 X-coordinate"] = None
        self._data["Vertex 117 Y-coordinate"] = None
        self._data["Vertex 117 Z-coordinate"] = None
        self._data["Vertex 118 X-coordinate"] = None
        self._data["Vertex 118 Y-coordinate"] = None
        self._data["Vertex 118 Z-coordinate"] = None
        self._data["Vertex 119 X-coordinate"] = None
        self._data["Vertex 119 Y-coordinate"] = None
        self._data["Vertex 119 Z-coordinate"] = None
        self._data["Vertex 120 X-coordinate"] = None
        self._data["Vertex 120 Y-coordinate"] = None
        self._data["Vertex 120 Z-coordinate"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.transmittance_schedule_name = None
        else:
            self.transmittance_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_vertices = None
        else:
            self.number_of_vertices = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_xcoordinate = None
        else:
            self.vertex_1_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_ycoordinate = None
        else:
            self.vertex_1_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_zcoordinate = None
        else:
            self.vertex_1_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_xcoordinate = None
        else:
            self.vertex_2_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_ycoordinate = None
        else:
            self.vertex_2_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_zcoordinate = None
        else:
            self.vertex_2_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_xcoordinate = None
        else:
            self.vertex_3_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_ycoordinate = None
        else:
            self.vertex_3_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_zcoordinate = None
        else:
            self.vertex_3_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_xcoordinate = None
        else:
            self.vertex_4_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_ycoordinate = None
        else:
            self.vertex_4_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_zcoordinate = None
        else:
            self.vertex_4_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_xcoordinate = None
        else:
            self.vertex_5_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_ycoordinate = None
        else:
            self.vertex_5_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_zcoordinate = None
        else:
            self.vertex_5_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_xcoordinate = None
        else:
            self.vertex_6_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_ycoordinate = None
        else:
            self.vertex_6_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_zcoordinate = None
        else:
            self.vertex_6_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_xcoordinate = None
        else:
            self.vertex_7_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_ycoordinate = None
        else:
            self.vertex_7_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_zcoordinate = None
        else:
            self.vertex_7_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_xcoordinate = None
        else:
            self.vertex_8_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_ycoordinate = None
        else:
            self.vertex_8_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_zcoordinate = None
        else:
            self.vertex_8_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_xcoordinate = None
        else:
            self.vertex_9_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_ycoordinate = None
        else:
            self.vertex_9_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_zcoordinate = None
        else:
            self.vertex_9_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_xcoordinate = None
        else:
            self.vertex_10_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_ycoordinate = None
        else:
            self.vertex_10_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_zcoordinate = None
        else:
            self.vertex_10_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_11_xcoordinate = None
        else:
            self.vertex_11_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_11_ycoordinate = None
        else:
            self.vertex_11_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_11_zcoordinate = None
        else:
            self.vertex_11_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_12_xcoordinate = None
        else:
            self.vertex_12_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_12_ycoordinate = None
        else:
            self.vertex_12_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_12_zcoordinate = None
        else:
            self.vertex_12_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_13_xcoordinate = None
        else:
            self.vertex_13_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_13_ycoordinate = None
        else:
            self.vertex_13_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_13_zcoordinate = None
        else:
            self.vertex_13_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_14_xcoordinate = None
        else:
            self.vertex_14_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_14_ycoordinate = None
        else:
            self.vertex_14_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_14_zcoordinate = None
        else:
            self.vertex_14_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_15_xcoordinate = None
        else:
            self.vertex_15_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_15_ycoordinate = None
        else:
            self.vertex_15_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_15_zcoordinate = None
        else:
            self.vertex_15_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_16_xcoordinate = None
        else:
            self.vertex_16_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_16_ycoordinate = None
        else:
            self.vertex_16_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_16_zcoordinate = None
        else:
            self.vertex_16_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_17_xcoordinate = None
        else:
            self.vertex_17_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_17_ycoordinate = None
        else:
            self.vertex_17_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_17_zcoordinate = None
        else:
            self.vertex_17_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_18_xcoordinate = None
        else:
            self.vertex_18_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_18_ycoordinate = None
        else:
            self.vertex_18_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_18_zcoordinate = None
        else:
            self.vertex_18_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_19_xcoordinate = None
        else:
            self.vertex_19_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_19_ycoordinate = None
        else:
            self.vertex_19_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_19_zcoordinate = None
        else:
            self.vertex_19_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_20_xcoordinate = None
        else:
            self.vertex_20_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_20_ycoordinate = None
        else:
            self.vertex_20_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_20_zcoordinate = None
        else:
            self.vertex_20_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_21_xcoordinate = None
        else:
            self.vertex_21_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_21_ycoordinate = None
        else:
            self.vertex_21_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_21_zcoordinate = None
        else:
            self.vertex_21_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_22_xcoordinate = None
        else:
            self.vertex_22_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_22_ycoordinate = None
        else:
            self.vertex_22_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_22_zcoordinate = None
        else:
            self.vertex_22_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_23_xcoordinate = None
        else:
            self.vertex_23_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_23_ycoordinate = None
        else:
            self.vertex_23_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_23_zcoordinate = None
        else:
            self.vertex_23_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_24_xcoordinate = None
        else:
            self.vertex_24_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_24_ycoordinate = None
        else:
            self.vertex_24_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_24_zcoordinate = None
        else:
            self.vertex_24_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_25_xcoordinate = None
        else:
            self.vertex_25_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_25_ycoordinate = None
        else:
            self.vertex_25_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_25_zcoordinate = None
        else:
            self.vertex_25_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_26_xcoordinate = None
        else:
            self.vertex_26_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_26_ycoordinate = None
        else:
            self.vertex_26_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_26_zcoordinate = None
        else:
            self.vertex_26_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_27_xcoordinate = None
        else:
            self.vertex_27_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_27_ycoordinate = None
        else:
            self.vertex_27_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_27_zcoordinate = None
        else:
            self.vertex_27_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_28_xcoordinate = None
        else:
            self.vertex_28_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_28_ycoordinate = None
        else:
            self.vertex_28_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_28_zcoordinate = None
        else:
            self.vertex_28_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_29_xcoordinate = None
        else:
            self.vertex_29_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_29_ycoordinate = None
        else:
            self.vertex_29_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_29_zcoordinate = None
        else:
            self.vertex_29_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_30_xcoordinate = None
        else:
            self.vertex_30_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_30_ycoordinate = None
        else:
            self.vertex_30_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_30_zcoordinate = None
        else:
            self.vertex_30_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_31_xcoordinate = None
        else:
            self.vertex_31_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_31_ycoordinate = None
        else:
            self.vertex_31_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_31_zcoordinate = None
        else:
            self.vertex_31_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_32_xcoordinate = None
        else:
            self.vertex_32_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_32_ycoordinate = None
        else:
            self.vertex_32_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_32_zcoordinate = None
        else:
            self.vertex_32_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_33_xcoordinate = None
        else:
            self.vertex_33_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_33_ycoordinate = None
        else:
            self.vertex_33_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_33_zcoordinate = None
        else:
            self.vertex_33_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_34_xcoordinate = None
        else:
            self.vertex_34_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_34_ycoordinate = None
        else:
            self.vertex_34_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_34_zcoordinate = None
        else:
            self.vertex_34_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_35_xcoordinate = None
        else:
            self.vertex_35_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_35_ycoordinate = None
        else:
            self.vertex_35_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_35_zcoordinate = None
        else:
            self.vertex_35_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_36_xcoordinate = None
        else:
            self.vertex_36_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_36_ycoordinate = None
        else:
            self.vertex_36_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_36_zcoordinate = None
        else:
            self.vertex_36_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_37_xcoordinate = None
        else:
            self.vertex_37_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_37_ycoordinate = None
        else:
            self.vertex_37_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_37_zcoordinate = None
        else:
            self.vertex_37_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_38_xcoordinate = None
        else:
            self.vertex_38_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_38_ycoordinate = None
        else:
            self.vertex_38_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_38_zcoordinate = None
        else:
            self.vertex_38_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_39_xcoordinate = None
        else:
            self.vertex_39_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_39_ycoordinate = None
        else:
            self.vertex_39_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_39_zcoordinate = None
        else:
            self.vertex_39_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_40_xcoordinate = None
        else:
            self.vertex_40_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_40_ycoordinate = None
        else:
            self.vertex_40_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_40_zcoordinate = None
        else:
            self.vertex_40_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_41_xcoordinate = None
        else:
            self.vertex_41_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_41_ycoordinate = None
        else:
            self.vertex_41_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_41_zcoordinate = None
        else:
            self.vertex_41_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_42_xcoordinate = None
        else:
            self.vertex_42_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_42_ycoordinate = None
        else:
            self.vertex_42_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_42_zcoordinate = None
        else:
            self.vertex_42_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_43_xcoordinate = None
        else:
            self.vertex_43_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_43_ycoordinate = None
        else:
            self.vertex_43_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_43_zcoordinate = None
        else:
            self.vertex_43_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_44_xcoordinate = None
        else:
            self.vertex_44_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_44_ycoordinate = None
        else:
            self.vertex_44_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_44_zcoordinate = None
        else:
            self.vertex_44_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_45_xcoordinate = None
        else:
            self.vertex_45_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_45_ycoordinate = None
        else:
            self.vertex_45_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_45_zcoordinate = None
        else:
            self.vertex_45_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_46_xcoordinate = None
        else:
            self.vertex_46_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_46_ycoordinate = None
        else:
            self.vertex_46_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_46_zcoordinate = None
        else:
            self.vertex_46_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_47_xcoordinate = None
        else:
            self.vertex_47_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_47_ycoordinate = None
        else:
            self.vertex_47_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_47_zcoordinate = None
        else:
            self.vertex_47_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_48_xcoordinate = None
        else:
            self.vertex_48_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_48_ycoordinate = None
        else:
            self.vertex_48_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_48_zcoordinate = None
        else:
            self.vertex_48_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_49_xcoordinate = None
        else:
            self.vertex_49_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_49_ycoordinate = None
        else:
            self.vertex_49_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_49_zcoordinate = None
        else:
            self.vertex_49_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_50_xcoordinate = None
        else:
            self.vertex_50_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_50_ycoordinate = None
        else:
            self.vertex_50_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_50_zcoordinate = None
        else:
            self.vertex_50_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_51_xcoordinate = None
        else:
            self.vertex_51_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_51_ycoordinate = None
        else:
            self.vertex_51_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_51_zcoordinate = None
        else:
            self.vertex_51_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_52_xcoordinate = None
        else:
            self.vertex_52_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_52_ycoordinate = None
        else:
            self.vertex_52_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_52_zcoordinate = None
        else:
            self.vertex_52_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_53_xcoordinate = None
        else:
            self.vertex_53_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_53_ycoordinate = None
        else:
            self.vertex_53_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_53_zcoordinate = None
        else:
            self.vertex_53_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_54_xcoordinate = None
        else:
            self.vertex_54_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_54_ycoordinate = None
        else:
            self.vertex_54_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_54_zcoordinate = None
        else:
            self.vertex_54_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_55_xcoordinate = None
        else:
            self.vertex_55_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_55_ycoordinate = None
        else:
            self.vertex_55_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_55_zcoordinate = None
        else:
            self.vertex_55_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_56_xcoordinate = None
        else:
            self.vertex_56_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_56_ycoordinate = None
        else:
            self.vertex_56_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_56_zcoordinate = None
        else:
            self.vertex_56_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_57_xcoordinate = None
        else:
            self.vertex_57_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_57_ycoordinate = None
        else:
            self.vertex_57_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_57_zcoordinate = None
        else:
            self.vertex_57_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_58_xcoordinate = None
        else:
            self.vertex_58_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_58_ycoordinate = None
        else:
            self.vertex_58_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_58_zcoordinate = None
        else:
            self.vertex_58_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_59_xcoordinate = None
        else:
            self.vertex_59_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_59_ycoordinate = None
        else:
            self.vertex_59_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_59_zcoordinate = None
        else:
            self.vertex_59_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_60_xcoordinate = None
        else:
            self.vertex_60_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_60_ycoordinate = None
        else:
            self.vertex_60_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_60_zcoordinate = None
        else:
            self.vertex_60_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_61_xcoordinate = None
        else:
            self.vertex_61_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_61_ycoordinate = None
        else:
            self.vertex_61_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_61_zcoordinate = None
        else:
            self.vertex_61_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_62_xcoordinate = None
        else:
            self.vertex_62_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_62_ycoordinate = None
        else:
            self.vertex_62_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_62_zcoordinate = None
        else:
            self.vertex_62_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_63_xcoordinate = None
        else:
            self.vertex_63_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_63_ycoordinate = None
        else:
            self.vertex_63_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_63_zcoordinate = None
        else:
            self.vertex_63_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_64_xcoordinate = None
        else:
            self.vertex_64_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_64_ycoordinate = None
        else:
            self.vertex_64_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_64_zcoordinate = None
        else:
            self.vertex_64_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_65_xcoordinate = None
        else:
            self.vertex_65_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_65_ycoordinate = None
        else:
            self.vertex_65_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_65_zcoordinate = None
        else:
            self.vertex_65_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_66_xcoordinate = None
        else:
            self.vertex_66_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_66_ycoordinate = None
        else:
            self.vertex_66_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_66_zcoordinate = None
        else:
            self.vertex_66_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_67_xcoordinate = None
        else:
            self.vertex_67_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_67_ycoordinate = None
        else:
            self.vertex_67_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_67_zcoordinate = None
        else:
            self.vertex_67_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_68_xcoordinate = None
        else:
            self.vertex_68_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_68_ycoordinate = None
        else:
            self.vertex_68_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_68_zcoordinate = None
        else:
            self.vertex_68_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_69_xcoordinate = None
        else:
            self.vertex_69_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_69_ycoordinate = None
        else:
            self.vertex_69_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_69_zcoordinate = None
        else:
            self.vertex_69_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_70_xcoordinate = None
        else:
            self.vertex_70_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_70_ycoordinate = None
        else:
            self.vertex_70_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_70_zcoordinate = None
        else:
            self.vertex_70_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_71_xcoordinate = None
        else:
            self.vertex_71_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_71_ycoordinate = None
        else:
            self.vertex_71_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_71_zcoordinate = None
        else:
            self.vertex_71_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_72_xcoordinate = None
        else:
            self.vertex_72_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_72_ycoordinate = None
        else:
            self.vertex_72_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_72_zcoordinate = None
        else:
            self.vertex_72_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_73_xcoordinate = None
        else:
            self.vertex_73_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_73_ycoordinate = None
        else:
            self.vertex_73_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_73_zcoordinate = None
        else:
            self.vertex_73_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_74_xcoordinate = None
        else:
            self.vertex_74_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_74_ycoordinate = None
        else:
            self.vertex_74_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_74_zcoordinate = None
        else:
            self.vertex_74_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_75_xcoordinate = None
        else:
            self.vertex_75_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_75_ycoordinate = None
        else:
            self.vertex_75_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_75_zcoordinate = None
        else:
            self.vertex_75_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_76_xcoordinate = None
        else:
            self.vertex_76_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_76_ycoordinate = None
        else:
            self.vertex_76_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_76_zcoordinate = None
        else:
            self.vertex_76_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_77_xcoordinate = None
        else:
            self.vertex_77_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_77_ycoordinate = None
        else:
            self.vertex_77_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_77_zcoordinate = None
        else:
            self.vertex_77_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_78_xcoordinate = None
        else:
            self.vertex_78_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_78_ycoordinate = None
        else:
            self.vertex_78_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_78_zcoordinate = None
        else:
            self.vertex_78_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_79_xcoordinate = None
        else:
            self.vertex_79_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_79_ycoordinate = None
        else:
            self.vertex_79_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_79_zcoordinate = None
        else:
            self.vertex_79_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_80_xcoordinate = None
        else:
            self.vertex_80_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_80_ycoordinate = None
        else:
            self.vertex_80_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_80_zcoordinate = None
        else:
            self.vertex_80_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_81_xcoordinate = None
        else:
            self.vertex_81_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_81_ycoordinate = None
        else:
            self.vertex_81_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_81_zcoordinate = None
        else:
            self.vertex_81_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_82_xcoordinate = None
        else:
            self.vertex_82_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_82_ycoordinate = None
        else:
            self.vertex_82_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_82_zcoordinate = None
        else:
            self.vertex_82_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_83_xcoordinate = None
        else:
            self.vertex_83_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_83_ycoordinate = None
        else:
            self.vertex_83_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_83_zcoordinate = None
        else:
            self.vertex_83_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_84_xcoordinate = None
        else:
            self.vertex_84_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_84_ycoordinate = None
        else:
            self.vertex_84_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_84_zcoordinate = None
        else:
            self.vertex_84_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_85_xcoordinate = None
        else:
            self.vertex_85_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_85_ycoordinate = None
        else:
            self.vertex_85_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_85_zcoordinate = None
        else:
            self.vertex_85_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_86_xcoordinate = None
        else:
            self.vertex_86_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_86_ycoordinate = None
        else:
            self.vertex_86_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_86_zcoordinate = None
        else:
            self.vertex_86_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_87_xcoordinate = None
        else:
            self.vertex_87_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_87_ycoordinate = None
        else:
            self.vertex_87_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_87_zcoordinate = None
        else:
            self.vertex_87_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_88_xcoordinate = None
        else:
            self.vertex_88_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_88_ycoordinate = None
        else:
            self.vertex_88_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_88_zcoordinate = None
        else:
            self.vertex_88_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_89_xcoordinate = None
        else:
            self.vertex_89_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_89_ycoordinate = None
        else:
            self.vertex_89_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_89_zcoordinate = None
        else:
            self.vertex_89_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_90_xcoordinate = None
        else:
            self.vertex_90_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_90_ycoordinate = None
        else:
            self.vertex_90_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_90_zcoordinate = None
        else:
            self.vertex_90_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_91_xcoordinate = None
        else:
            self.vertex_91_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_91_ycoordinate = None
        else:
            self.vertex_91_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_91_zcoordinate = None
        else:
            self.vertex_91_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_92_xcoordinate = None
        else:
            self.vertex_92_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_92_ycoordinate = None
        else:
            self.vertex_92_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_92_zcoordinate = None
        else:
            self.vertex_92_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_93_xcoordinate = None
        else:
            self.vertex_93_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_93_ycoordinate = None
        else:
            self.vertex_93_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_93_zcoordinate = None
        else:
            self.vertex_93_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_94_xcoordinate = None
        else:
            self.vertex_94_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_94_ycoordinate = None
        else:
            self.vertex_94_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_94_zcoordinate = None
        else:
            self.vertex_94_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_95_xcoordinate = None
        else:
            self.vertex_95_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_95_ycoordinate = None
        else:
            self.vertex_95_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_95_zcoordinate = None
        else:
            self.vertex_95_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_96_xcoordinate = None
        else:
            self.vertex_96_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_96_ycoordinate = None
        else:
            self.vertex_96_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_96_zcoordinate = None
        else:
            self.vertex_96_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_97_xcoordinate = None
        else:
            self.vertex_97_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_97_ycoordinate = None
        else:
            self.vertex_97_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_97_zcoordinate = None
        else:
            self.vertex_97_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_98_xcoordinate = None
        else:
            self.vertex_98_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_98_ycoordinate = None
        else:
            self.vertex_98_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_98_zcoordinate = None
        else:
            self.vertex_98_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_99_xcoordinate = None
        else:
            self.vertex_99_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_99_ycoordinate = None
        else:
            self.vertex_99_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_99_zcoordinate = None
        else:
            self.vertex_99_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_100_xcoordinate = None
        else:
            self.vertex_100_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_100_ycoordinate = None
        else:
            self.vertex_100_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_100_zcoordinate = None
        else:
            self.vertex_100_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_101_xcoordinate = None
        else:
            self.vertex_101_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_101_ycoordinate = None
        else:
            self.vertex_101_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_101_zcoordinate = None
        else:
            self.vertex_101_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_102_xcoordinate = None
        else:
            self.vertex_102_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_102_ycoordinate = None
        else:
            self.vertex_102_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_102_zcoordinate = None
        else:
            self.vertex_102_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_103_xcoordinate = None
        else:
            self.vertex_103_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_103_ycoordinate = None
        else:
            self.vertex_103_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_103_zcoordinate = None
        else:
            self.vertex_103_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_104_xcoordinate = None
        else:
            self.vertex_104_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_104_ycoordinate = None
        else:
            self.vertex_104_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_104_zcoordinate = None
        else:
            self.vertex_104_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_105_xcoordinate = None
        else:
            self.vertex_105_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_105_ycoordinate = None
        else:
            self.vertex_105_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_105_zcoordinate = None
        else:
            self.vertex_105_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_106_xcoordinate = None
        else:
            self.vertex_106_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_106_ycoordinate = None
        else:
            self.vertex_106_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_106_zcoordinate = None
        else:
            self.vertex_106_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_107_xcoordinate = None
        else:
            self.vertex_107_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_107_ycoordinate = None
        else:
            self.vertex_107_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_107_zcoordinate = None
        else:
            self.vertex_107_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_108_xcoordinate = None
        else:
            self.vertex_108_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_108_ycoordinate = None
        else:
            self.vertex_108_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_108_zcoordinate = None
        else:
            self.vertex_108_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_109_xcoordinate = None
        else:
            self.vertex_109_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_109_ycoordinate = None
        else:
            self.vertex_109_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_109_zcoordinate = None
        else:
            self.vertex_109_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_110_xcoordinate = None
        else:
            self.vertex_110_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_110_ycoordinate = None
        else:
            self.vertex_110_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_110_zcoordinate = None
        else:
            self.vertex_110_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_111_xcoordinate = None
        else:
            self.vertex_111_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_111_ycoordinate = None
        else:
            self.vertex_111_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_111_zcoordinate = None
        else:
            self.vertex_111_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_112_xcoordinate = None
        else:
            self.vertex_112_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_112_ycoordinate = None
        else:
            self.vertex_112_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_112_zcoordinate = None
        else:
            self.vertex_112_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_113_xcoordinate = None
        else:
            self.vertex_113_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_113_ycoordinate = None
        else:
            self.vertex_113_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_113_zcoordinate = None
        else:
            self.vertex_113_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_114_xcoordinate = None
        else:
            self.vertex_114_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_114_ycoordinate = None
        else:
            self.vertex_114_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_114_zcoordinate = None
        else:
            self.vertex_114_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_115_xcoordinate = None
        else:
            self.vertex_115_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_115_ycoordinate = None
        else:
            self.vertex_115_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_115_zcoordinate = None
        else:
            self.vertex_115_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_116_xcoordinate = None
        else:
            self.vertex_116_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_116_ycoordinate = None
        else:
            self.vertex_116_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_116_zcoordinate = None
        else:
            self.vertex_116_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_117_xcoordinate = None
        else:
            self.vertex_117_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_117_ycoordinate = None
        else:
            self.vertex_117_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_117_zcoordinate = None
        else:
            self.vertex_117_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_118_xcoordinate = None
        else:
            self.vertex_118_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_118_ycoordinate = None
        else:
            self.vertex_118_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_118_zcoordinate = None
        else:
            self.vertex_118_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_119_xcoordinate = None
        else:
            self.vertex_119_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_119_ycoordinate = None
        else:
            self.vertex_119_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_119_zcoordinate = None
        else:
            self.vertex_119_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_120_xcoordinate = None
        else:
            self.vertex_120_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_120_ycoordinate = None
        else:
            self.vertex_120_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_120_zcoordinate = None
        else:
            self.vertex_120_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def transmittance_schedule_name(self):
        """Get transmittance_schedule_name

        Returns:
            str: the value of `transmittance_schedule_name` or None if not set
        """
        return self._data["Transmittance Schedule Name"]

    @transmittance_schedule_name.setter
    def transmittance_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Transmittance Schedule Name`
        Transmittance schedule for the shading device, defaults to zero (always opaque)

        Args:
            value (str): value for IDD Field `Transmittance Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `transmittance_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `transmittance_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `transmittance_schedule_name`')
        self._data["Transmittance Schedule Name"] = value

    @property
    def number_of_vertices(self):
        """Get number_of_vertices

        Returns:
            float: the value of `number_of_vertices` or None if not set
        """
        return self._data["Number of Vertices"]

    @number_of_vertices.setter
    def number_of_vertices(self, value="autocalculate"):
        """  Corresponds to IDD Field `Number of Vertices`
        shown with 6 vertex coordinates -- extensible object
        Rules for vertices are given in GlobalGeometryRules coordinates --
        For this object all surface coordinates are relative to the building origin (0,0,0)
        and will rotate with the BUILDING north axis.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Number of Vertices`
                Default value: "autocalculate"
                value >= 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Number of Vertices"] = "Autocalculate"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_vertices`'.format(value))
            if value < 3.0:
                raise ValueError('value need to be greater or equal 3.0 '
                                 'for field `number_of_vertices`')
        self._data["Number of Vertices"] = value

    @property
    def vertex_1_xcoordinate(self):
        """Get vertex_1_xcoordinate

        Returns:
            float: the value of `vertex_1_xcoordinate` or None if not set
        """
        return self._data["Vertex 1 X-coordinate"]

    @vertex_1_xcoordinate.setter
    def vertex_1_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_xcoordinate`'.format(value))
        self._data["Vertex 1 X-coordinate"] = value

    @property
    def vertex_1_ycoordinate(self):
        """Get vertex_1_ycoordinate

        Returns:
            float: the value of `vertex_1_ycoordinate` or None if not set
        """
        return self._data["Vertex 1 Y-coordinate"]

    @vertex_1_ycoordinate.setter
    def vertex_1_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_ycoordinate`'.format(value))
        self._data["Vertex 1 Y-coordinate"] = value

    @property
    def vertex_1_zcoordinate(self):
        """Get vertex_1_zcoordinate

        Returns:
            float: the value of `vertex_1_zcoordinate` or None if not set
        """
        return self._data["Vertex 1 Z-coordinate"]

    @vertex_1_zcoordinate.setter
    def vertex_1_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_zcoordinate`'.format(value))
        self._data["Vertex 1 Z-coordinate"] = value

    @property
    def vertex_2_xcoordinate(self):
        """Get vertex_2_xcoordinate

        Returns:
            float: the value of `vertex_2_xcoordinate` or None if not set
        """
        return self._data["Vertex 2 X-coordinate"]

    @vertex_2_xcoordinate.setter
    def vertex_2_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_xcoordinate`'.format(value))
        self._data["Vertex 2 X-coordinate"] = value

    @property
    def vertex_2_ycoordinate(self):
        """Get vertex_2_ycoordinate

        Returns:
            float: the value of `vertex_2_ycoordinate` or None if not set
        """
        return self._data["Vertex 2 Y-coordinate"]

    @vertex_2_ycoordinate.setter
    def vertex_2_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_ycoordinate`'.format(value))
        self._data["Vertex 2 Y-coordinate"] = value

    @property
    def vertex_2_zcoordinate(self):
        """Get vertex_2_zcoordinate

        Returns:
            float: the value of `vertex_2_zcoordinate` or None if not set
        """
        return self._data["Vertex 2 Z-coordinate"]

    @vertex_2_zcoordinate.setter
    def vertex_2_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_zcoordinate`'.format(value))
        self._data["Vertex 2 Z-coordinate"] = value

    @property
    def vertex_3_xcoordinate(self):
        """Get vertex_3_xcoordinate

        Returns:
            float: the value of `vertex_3_xcoordinate` or None if not set
        """
        return self._data["Vertex 3 X-coordinate"]

    @vertex_3_xcoordinate.setter
    def vertex_3_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_xcoordinate`'.format(value))
        self._data["Vertex 3 X-coordinate"] = value

    @property
    def vertex_3_ycoordinate(self):
        """Get vertex_3_ycoordinate

        Returns:
            float: the value of `vertex_3_ycoordinate` or None if not set
        """
        return self._data["Vertex 3 Y-coordinate"]

    @vertex_3_ycoordinate.setter
    def vertex_3_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_ycoordinate`'.format(value))
        self._data["Vertex 3 Y-coordinate"] = value

    @property
    def vertex_3_zcoordinate(self):
        """Get vertex_3_zcoordinate

        Returns:
            float: the value of `vertex_3_zcoordinate` or None if not set
        """
        return self._data["Vertex 3 Z-coordinate"]

    @vertex_3_zcoordinate.setter
    def vertex_3_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_zcoordinate`'.format(value))
        self._data["Vertex 3 Z-coordinate"] = value

    @property
    def vertex_4_xcoordinate(self):
        """Get vertex_4_xcoordinate

        Returns:
            float: the value of `vertex_4_xcoordinate` or None if not set
        """
        return self._data["Vertex 4 X-coordinate"]

    @vertex_4_xcoordinate.setter
    def vertex_4_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_xcoordinate`'.format(value))
        self._data["Vertex 4 X-coordinate"] = value

    @property
    def vertex_4_ycoordinate(self):
        """Get vertex_4_ycoordinate

        Returns:
            float: the value of `vertex_4_ycoordinate` or None if not set
        """
        return self._data["Vertex 4 Y-coordinate"]

    @vertex_4_ycoordinate.setter
    def vertex_4_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_ycoordinate`'.format(value))
        self._data["Vertex 4 Y-coordinate"] = value

    @property
    def vertex_4_zcoordinate(self):
        """Get vertex_4_zcoordinate

        Returns:
            float: the value of `vertex_4_zcoordinate` or None if not set
        """
        return self._data["Vertex 4 Z-coordinate"]

    @vertex_4_zcoordinate.setter
    def vertex_4_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_zcoordinate`'.format(value))
        self._data["Vertex 4 Z-coordinate"] = value

    @property
    def vertex_5_xcoordinate(self):
        """Get vertex_5_xcoordinate

        Returns:
            float: the value of `vertex_5_xcoordinate` or None if not set
        """
        return self._data["Vertex 5 X-coordinate"]

    @vertex_5_xcoordinate.setter
    def vertex_5_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_xcoordinate`'.format(value))
        self._data["Vertex 5 X-coordinate"] = value

    @property
    def vertex_5_ycoordinate(self):
        """Get vertex_5_ycoordinate

        Returns:
            float: the value of `vertex_5_ycoordinate` or None if not set
        """
        return self._data["Vertex 5 Y-coordinate"]

    @vertex_5_ycoordinate.setter
    def vertex_5_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_ycoordinate`'.format(value))
        self._data["Vertex 5 Y-coordinate"] = value

    @property
    def vertex_5_zcoordinate(self):
        """Get vertex_5_zcoordinate

        Returns:
            float: the value of `vertex_5_zcoordinate` or None if not set
        """
        return self._data["Vertex 5 Z-coordinate"]

    @vertex_5_zcoordinate.setter
    def vertex_5_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_zcoordinate`'.format(value))
        self._data["Vertex 5 Z-coordinate"] = value

    @property
    def vertex_6_xcoordinate(self):
        """Get vertex_6_xcoordinate

        Returns:
            float: the value of `vertex_6_xcoordinate` or None if not set
        """
        return self._data["Vertex 6 X-coordinate"]

    @vertex_6_xcoordinate.setter
    def vertex_6_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_xcoordinate`'.format(value))
        self._data["Vertex 6 X-coordinate"] = value

    @property
    def vertex_6_ycoordinate(self):
        """Get vertex_6_ycoordinate

        Returns:
            float: the value of `vertex_6_ycoordinate` or None if not set
        """
        return self._data["Vertex 6 Y-coordinate"]

    @vertex_6_ycoordinate.setter
    def vertex_6_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_ycoordinate`'.format(value))
        self._data["Vertex 6 Y-coordinate"] = value

    @property
    def vertex_6_zcoordinate(self):
        """Get vertex_6_zcoordinate

        Returns:
            float: the value of `vertex_6_zcoordinate` or None if not set
        """
        return self._data["Vertex 6 Z-coordinate"]

    @vertex_6_zcoordinate.setter
    def vertex_6_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_zcoordinate`'.format(value))
        self._data["Vertex 6 Z-coordinate"] = value

    @property
    def vertex_7_xcoordinate(self):
        """Get vertex_7_xcoordinate

        Returns:
            float: the value of `vertex_7_xcoordinate` or None if not set
        """
        return self._data["Vertex 7 X-coordinate"]

    @vertex_7_xcoordinate.setter
    def vertex_7_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_xcoordinate`'.format(value))
        self._data["Vertex 7 X-coordinate"] = value

    @property
    def vertex_7_ycoordinate(self):
        """Get vertex_7_ycoordinate

        Returns:
            float: the value of `vertex_7_ycoordinate` or None if not set
        """
        return self._data["Vertex 7 Y-coordinate"]

    @vertex_7_ycoordinate.setter
    def vertex_7_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_ycoordinate`'.format(value))
        self._data["Vertex 7 Y-coordinate"] = value

    @property
    def vertex_7_zcoordinate(self):
        """Get vertex_7_zcoordinate

        Returns:
            float: the value of `vertex_7_zcoordinate` or None if not set
        """
        return self._data["Vertex 7 Z-coordinate"]

    @vertex_7_zcoordinate.setter
    def vertex_7_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_zcoordinate`'.format(value))
        self._data["Vertex 7 Z-coordinate"] = value

    @property
    def vertex_8_xcoordinate(self):
        """Get vertex_8_xcoordinate

        Returns:
            float: the value of `vertex_8_xcoordinate` or None if not set
        """
        return self._data["Vertex 8 X-coordinate"]

    @vertex_8_xcoordinate.setter
    def vertex_8_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_xcoordinate`'.format(value))
        self._data["Vertex 8 X-coordinate"] = value

    @property
    def vertex_8_ycoordinate(self):
        """Get vertex_8_ycoordinate

        Returns:
            float: the value of `vertex_8_ycoordinate` or None if not set
        """
        return self._data["Vertex 8 Y-coordinate"]

    @vertex_8_ycoordinate.setter
    def vertex_8_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_ycoordinate`'.format(value))
        self._data["Vertex 8 Y-coordinate"] = value

    @property
    def vertex_8_zcoordinate(self):
        """Get vertex_8_zcoordinate

        Returns:
            float: the value of `vertex_8_zcoordinate` or None if not set
        """
        return self._data["Vertex 8 Z-coordinate"]

    @vertex_8_zcoordinate.setter
    def vertex_8_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_zcoordinate`'.format(value))
        self._data["Vertex 8 Z-coordinate"] = value

    @property
    def vertex_9_xcoordinate(self):
        """Get vertex_9_xcoordinate

        Returns:
            float: the value of `vertex_9_xcoordinate` or None if not set
        """
        return self._data["Vertex 9 X-coordinate"]

    @vertex_9_xcoordinate.setter
    def vertex_9_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_xcoordinate`'.format(value))
        self._data["Vertex 9 X-coordinate"] = value

    @property
    def vertex_9_ycoordinate(self):
        """Get vertex_9_ycoordinate

        Returns:
            float: the value of `vertex_9_ycoordinate` or None if not set
        """
        return self._data["Vertex 9 Y-coordinate"]

    @vertex_9_ycoordinate.setter
    def vertex_9_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_ycoordinate`'.format(value))
        self._data["Vertex 9 Y-coordinate"] = value

    @property
    def vertex_9_zcoordinate(self):
        """Get vertex_9_zcoordinate

        Returns:
            float: the value of `vertex_9_zcoordinate` or None if not set
        """
        return self._data["Vertex 9 Z-coordinate"]

    @vertex_9_zcoordinate.setter
    def vertex_9_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_zcoordinate`'.format(value))
        self._data["Vertex 9 Z-coordinate"] = value

    @property
    def vertex_10_xcoordinate(self):
        """Get vertex_10_xcoordinate

        Returns:
            float: the value of `vertex_10_xcoordinate` or None if not set
        """
        return self._data["Vertex 10 X-coordinate"]

    @vertex_10_xcoordinate.setter
    def vertex_10_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_xcoordinate`'.format(value))
        self._data["Vertex 10 X-coordinate"] = value

    @property
    def vertex_10_ycoordinate(self):
        """Get vertex_10_ycoordinate

        Returns:
            float: the value of `vertex_10_ycoordinate` or None if not set
        """
        return self._data["Vertex 10 Y-coordinate"]

    @vertex_10_ycoordinate.setter
    def vertex_10_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_ycoordinate`'.format(value))
        self._data["Vertex 10 Y-coordinate"] = value

    @property
    def vertex_10_zcoordinate(self):
        """Get vertex_10_zcoordinate

        Returns:
            float: the value of `vertex_10_zcoordinate` or None if not set
        """
        return self._data["Vertex 10 Z-coordinate"]

    @vertex_10_zcoordinate.setter
    def vertex_10_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_zcoordinate`'.format(value))
        self._data["Vertex 10 Z-coordinate"] = value

    @property
    def vertex_11_xcoordinate(self):
        """Get vertex_11_xcoordinate

        Returns:
            float: the value of `vertex_11_xcoordinate` or None if not set
        """
        return self._data["Vertex 11 X-coordinate"]

    @vertex_11_xcoordinate.setter
    def vertex_11_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 11 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 11 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_11_xcoordinate`'.format(value))
        self._data["Vertex 11 X-coordinate"] = value

    @property
    def vertex_11_ycoordinate(self):
        """Get vertex_11_ycoordinate

        Returns:
            float: the value of `vertex_11_ycoordinate` or None if not set
        """
        return self._data["Vertex 11 Y-coordinate"]

    @vertex_11_ycoordinate.setter
    def vertex_11_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 11 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 11 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_11_ycoordinate`'.format(value))
        self._data["Vertex 11 Y-coordinate"] = value

    @property
    def vertex_11_zcoordinate(self):
        """Get vertex_11_zcoordinate

        Returns:
            float: the value of `vertex_11_zcoordinate` or None if not set
        """
        return self._data["Vertex 11 Z-coordinate"]

    @vertex_11_zcoordinate.setter
    def vertex_11_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 11 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 11 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_11_zcoordinate`'.format(value))
        self._data["Vertex 11 Z-coordinate"] = value

    @property
    def vertex_12_xcoordinate(self):
        """Get vertex_12_xcoordinate

        Returns:
            float: the value of `vertex_12_xcoordinate` or None if not set
        """
        return self._data["Vertex 12 X-coordinate"]

    @vertex_12_xcoordinate.setter
    def vertex_12_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 12 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 12 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_12_xcoordinate`'.format(value))
        self._data["Vertex 12 X-coordinate"] = value

    @property
    def vertex_12_ycoordinate(self):
        """Get vertex_12_ycoordinate

        Returns:
            float: the value of `vertex_12_ycoordinate` or None if not set
        """
        return self._data["Vertex 12 Y-coordinate"]

    @vertex_12_ycoordinate.setter
    def vertex_12_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 12 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 12 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_12_ycoordinate`'.format(value))
        self._data["Vertex 12 Y-coordinate"] = value

    @property
    def vertex_12_zcoordinate(self):
        """Get vertex_12_zcoordinate

        Returns:
            float: the value of `vertex_12_zcoordinate` or None if not set
        """
        return self._data["Vertex 12 Z-coordinate"]

    @vertex_12_zcoordinate.setter
    def vertex_12_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 12 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 12 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_12_zcoordinate`'.format(value))
        self._data["Vertex 12 Z-coordinate"] = value

    @property
    def vertex_13_xcoordinate(self):
        """Get vertex_13_xcoordinate

        Returns:
            float: the value of `vertex_13_xcoordinate` or None if not set
        """
        return self._data["Vertex 13 X-coordinate"]

    @vertex_13_xcoordinate.setter
    def vertex_13_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 13 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 13 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_13_xcoordinate`'.format(value))
        self._data["Vertex 13 X-coordinate"] = value

    @property
    def vertex_13_ycoordinate(self):
        """Get vertex_13_ycoordinate

        Returns:
            float: the value of `vertex_13_ycoordinate` or None if not set
        """
        return self._data["Vertex 13 Y-coordinate"]

    @vertex_13_ycoordinate.setter
    def vertex_13_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 13 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 13 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_13_ycoordinate`'.format(value))
        self._data["Vertex 13 Y-coordinate"] = value

    @property
    def vertex_13_zcoordinate(self):
        """Get vertex_13_zcoordinate

        Returns:
            float: the value of `vertex_13_zcoordinate` or None if not set
        """
        return self._data["Vertex 13 Z-coordinate"]

    @vertex_13_zcoordinate.setter
    def vertex_13_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 13 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 13 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_13_zcoordinate`'.format(value))
        self._data["Vertex 13 Z-coordinate"] = value

    @property
    def vertex_14_xcoordinate(self):
        """Get vertex_14_xcoordinate

        Returns:
            float: the value of `vertex_14_xcoordinate` or None if not set
        """
        return self._data["Vertex 14 X-coordinate"]

    @vertex_14_xcoordinate.setter
    def vertex_14_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 14 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 14 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_14_xcoordinate`'.format(value))
        self._data["Vertex 14 X-coordinate"] = value

    @property
    def vertex_14_ycoordinate(self):
        """Get vertex_14_ycoordinate

        Returns:
            float: the value of `vertex_14_ycoordinate` or None if not set
        """
        return self._data["Vertex 14 Y-coordinate"]

    @vertex_14_ycoordinate.setter
    def vertex_14_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 14 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 14 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_14_ycoordinate`'.format(value))
        self._data["Vertex 14 Y-coordinate"] = value

    @property
    def vertex_14_zcoordinate(self):
        """Get vertex_14_zcoordinate

        Returns:
            float: the value of `vertex_14_zcoordinate` or None if not set
        """
        return self._data["Vertex 14 Z-coordinate"]

    @vertex_14_zcoordinate.setter
    def vertex_14_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 14 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 14 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_14_zcoordinate`'.format(value))
        self._data["Vertex 14 Z-coordinate"] = value

    @property
    def vertex_15_xcoordinate(self):
        """Get vertex_15_xcoordinate

        Returns:
            float: the value of `vertex_15_xcoordinate` or None if not set
        """
        return self._data["Vertex 15 X-coordinate"]

    @vertex_15_xcoordinate.setter
    def vertex_15_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 15 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 15 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_15_xcoordinate`'.format(value))
        self._data["Vertex 15 X-coordinate"] = value

    @property
    def vertex_15_ycoordinate(self):
        """Get vertex_15_ycoordinate

        Returns:
            float: the value of `vertex_15_ycoordinate` or None if not set
        """
        return self._data["Vertex 15 Y-coordinate"]

    @vertex_15_ycoordinate.setter
    def vertex_15_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 15 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 15 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_15_ycoordinate`'.format(value))
        self._data["Vertex 15 Y-coordinate"] = value

    @property
    def vertex_15_zcoordinate(self):
        """Get vertex_15_zcoordinate

        Returns:
            float: the value of `vertex_15_zcoordinate` or None if not set
        """
        return self._data["Vertex 15 Z-coordinate"]

    @vertex_15_zcoordinate.setter
    def vertex_15_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 15 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 15 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_15_zcoordinate`'.format(value))
        self._data["Vertex 15 Z-coordinate"] = value

    @property
    def vertex_16_xcoordinate(self):
        """Get vertex_16_xcoordinate

        Returns:
            float: the value of `vertex_16_xcoordinate` or None if not set
        """
        return self._data["Vertex 16 X-coordinate"]

    @vertex_16_xcoordinate.setter
    def vertex_16_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 16 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 16 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_16_xcoordinate`'.format(value))
        self._data["Vertex 16 X-coordinate"] = value

    @property
    def vertex_16_ycoordinate(self):
        """Get vertex_16_ycoordinate

        Returns:
            float: the value of `vertex_16_ycoordinate` or None if not set
        """
        return self._data["Vertex 16 Y-coordinate"]

    @vertex_16_ycoordinate.setter
    def vertex_16_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 16 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 16 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_16_ycoordinate`'.format(value))
        self._data["Vertex 16 Y-coordinate"] = value

    @property
    def vertex_16_zcoordinate(self):
        """Get vertex_16_zcoordinate

        Returns:
            float: the value of `vertex_16_zcoordinate` or None if not set
        """
        return self._data["Vertex 16 Z-coordinate"]

    @vertex_16_zcoordinate.setter
    def vertex_16_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 16 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 16 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_16_zcoordinate`'.format(value))
        self._data["Vertex 16 Z-coordinate"] = value

    @property
    def vertex_17_xcoordinate(self):
        """Get vertex_17_xcoordinate

        Returns:
            float: the value of `vertex_17_xcoordinate` or None if not set
        """
        return self._data["Vertex 17 X-coordinate"]

    @vertex_17_xcoordinate.setter
    def vertex_17_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 17 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 17 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_17_xcoordinate`'.format(value))
        self._data["Vertex 17 X-coordinate"] = value

    @property
    def vertex_17_ycoordinate(self):
        """Get vertex_17_ycoordinate

        Returns:
            float: the value of `vertex_17_ycoordinate` or None if not set
        """
        return self._data["Vertex 17 Y-coordinate"]

    @vertex_17_ycoordinate.setter
    def vertex_17_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 17 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 17 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_17_ycoordinate`'.format(value))
        self._data["Vertex 17 Y-coordinate"] = value

    @property
    def vertex_17_zcoordinate(self):
        """Get vertex_17_zcoordinate

        Returns:
            float: the value of `vertex_17_zcoordinate` or None if not set
        """
        return self._data["Vertex 17 Z-coordinate"]

    @vertex_17_zcoordinate.setter
    def vertex_17_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 17 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 17 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_17_zcoordinate`'.format(value))
        self._data["Vertex 17 Z-coordinate"] = value

    @property
    def vertex_18_xcoordinate(self):
        """Get vertex_18_xcoordinate

        Returns:
            float: the value of `vertex_18_xcoordinate` or None if not set
        """
        return self._data["Vertex 18 X-coordinate"]

    @vertex_18_xcoordinate.setter
    def vertex_18_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 18 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 18 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_18_xcoordinate`'.format(value))
        self._data["Vertex 18 X-coordinate"] = value

    @property
    def vertex_18_ycoordinate(self):
        """Get vertex_18_ycoordinate

        Returns:
            float: the value of `vertex_18_ycoordinate` or None if not set
        """
        return self._data["Vertex 18 Y-coordinate"]

    @vertex_18_ycoordinate.setter
    def vertex_18_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 18 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 18 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_18_ycoordinate`'.format(value))
        self._data["Vertex 18 Y-coordinate"] = value

    @property
    def vertex_18_zcoordinate(self):
        """Get vertex_18_zcoordinate

        Returns:
            float: the value of `vertex_18_zcoordinate` or None if not set
        """
        return self._data["Vertex 18 Z-coordinate"]

    @vertex_18_zcoordinate.setter
    def vertex_18_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 18 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 18 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_18_zcoordinate`'.format(value))
        self._data["Vertex 18 Z-coordinate"] = value

    @property
    def vertex_19_xcoordinate(self):
        """Get vertex_19_xcoordinate

        Returns:
            float: the value of `vertex_19_xcoordinate` or None if not set
        """
        return self._data["Vertex 19 X-coordinate"]

    @vertex_19_xcoordinate.setter
    def vertex_19_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 19 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 19 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_19_xcoordinate`'.format(value))
        self._data["Vertex 19 X-coordinate"] = value

    @property
    def vertex_19_ycoordinate(self):
        """Get vertex_19_ycoordinate

        Returns:
            float: the value of `vertex_19_ycoordinate` or None if not set
        """
        return self._data["Vertex 19 Y-coordinate"]

    @vertex_19_ycoordinate.setter
    def vertex_19_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 19 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 19 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_19_ycoordinate`'.format(value))
        self._data["Vertex 19 Y-coordinate"] = value

    @property
    def vertex_19_zcoordinate(self):
        """Get vertex_19_zcoordinate

        Returns:
            float: the value of `vertex_19_zcoordinate` or None if not set
        """
        return self._data["Vertex 19 Z-coordinate"]

    @vertex_19_zcoordinate.setter
    def vertex_19_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 19 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 19 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_19_zcoordinate`'.format(value))
        self._data["Vertex 19 Z-coordinate"] = value

    @property
    def vertex_20_xcoordinate(self):
        """Get vertex_20_xcoordinate

        Returns:
            float: the value of `vertex_20_xcoordinate` or None if not set
        """
        return self._data["Vertex 20 X-coordinate"]

    @vertex_20_xcoordinate.setter
    def vertex_20_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 20 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 20 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_20_xcoordinate`'.format(value))
        self._data["Vertex 20 X-coordinate"] = value

    @property
    def vertex_20_ycoordinate(self):
        """Get vertex_20_ycoordinate

        Returns:
            float: the value of `vertex_20_ycoordinate` or None if not set
        """
        return self._data["Vertex 20 Y-coordinate"]

    @vertex_20_ycoordinate.setter
    def vertex_20_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 20 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 20 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_20_ycoordinate`'.format(value))
        self._data["Vertex 20 Y-coordinate"] = value

    @property
    def vertex_20_zcoordinate(self):
        """Get vertex_20_zcoordinate

        Returns:
            float: the value of `vertex_20_zcoordinate` or None if not set
        """
        return self._data["Vertex 20 Z-coordinate"]

    @vertex_20_zcoordinate.setter
    def vertex_20_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 20 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 20 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_20_zcoordinate`'.format(value))
        self._data["Vertex 20 Z-coordinate"] = value

    @property
    def vertex_21_xcoordinate(self):
        """Get vertex_21_xcoordinate

        Returns:
            float: the value of `vertex_21_xcoordinate` or None if not set
        """
        return self._data["Vertex 21 X-coordinate"]

    @vertex_21_xcoordinate.setter
    def vertex_21_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 21 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 21 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_21_xcoordinate`'.format(value))
        self._data["Vertex 21 X-coordinate"] = value

    @property
    def vertex_21_ycoordinate(self):
        """Get vertex_21_ycoordinate

        Returns:
            float: the value of `vertex_21_ycoordinate` or None if not set
        """
        return self._data["Vertex 21 Y-coordinate"]

    @vertex_21_ycoordinate.setter
    def vertex_21_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 21 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 21 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_21_ycoordinate`'.format(value))
        self._data["Vertex 21 Y-coordinate"] = value

    @property
    def vertex_21_zcoordinate(self):
        """Get vertex_21_zcoordinate

        Returns:
            float: the value of `vertex_21_zcoordinate` or None if not set
        """
        return self._data["Vertex 21 Z-coordinate"]

    @vertex_21_zcoordinate.setter
    def vertex_21_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 21 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 21 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_21_zcoordinate`'.format(value))
        self._data["Vertex 21 Z-coordinate"] = value

    @property
    def vertex_22_xcoordinate(self):
        """Get vertex_22_xcoordinate

        Returns:
            float: the value of `vertex_22_xcoordinate` or None if not set
        """
        return self._data["Vertex 22 X-coordinate"]

    @vertex_22_xcoordinate.setter
    def vertex_22_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 22 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 22 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_22_xcoordinate`'.format(value))
        self._data["Vertex 22 X-coordinate"] = value

    @property
    def vertex_22_ycoordinate(self):
        """Get vertex_22_ycoordinate

        Returns:
            float: the value of `vertex_22_ycoordinate` or None if not set
        """
        return self._data["Vertex 22 Y-coordinate"]

    @vertex_22_ycoordinate.setter
    def vertex_22_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 22 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 22 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_22_ycoordinate`'.format(value))
        self._data["Vertex 22 Y-coordinate"] = value

    @property
    def vertex_22_zcoordinate(self):
        """Get vertex_22_zcoordinate

        Returns:
            float: the value of `vertex_22_zcoordinate` or None if not set
        """
        return self._data["Vertex 22 Z-coordinate"]

    @vertex_22_zcoordinate.setter
    def vertex_22_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 22 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 22 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_22_zcoordinate`'.format(value))
        self._data["Vertex 22 Z-coordinate"] = value

    @property
    def vertex_23_xcoordinate(self):
        """Get vertex_23_xcoordinate

        Returns:
            float: the value of `vertex_23_xcoordinate` or None if not set
        """
        return self._data["Vertex 23 X-coordinate"]

    @vertex_23_xcoordinate.setter
    def vertex_23_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 23 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 23 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_23_xcoordinate`'.format(value))
        self._data["Vertex 23 X-coordinate"] = value

    @property
    def vertex_23_ycoordinate(self):
        """Get vertex_23_ycoordinate

        Returns:
            float: the value of `vertex_23_ycoordinate` or None if not set
        """
        return self._data["Vertex 23 Y-coordinate"]

    @vertex_23_ycoordinate.setter
    def vertex_23_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 23 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 23 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_23_ycoordinate`'.format(value))
        self._data["Vertex 23 Y-coordinate"] = value

    @property
    def vertex_23_zcoordinate(self):
        """Get vertex_23_zcoordinate

        Returns:
            float: the value of `vertex_23_zcoordinate` or None if not set
        """
        return self._data["Vertex 23 Z-coordinate"]

    @vertex_23_zcoordinate.setter
    def vertex_23_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 23 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 23 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_23_zcoordinate`'.format(value))
        self._data["Vertex 23 Z-coordinate"] = value

    @property
    def vertex_24_xcoordinate(self):
        """Get vertex_24_xcoordinate

        Returns:
            float: the value of `vertex_24_xcoordinate` or None if not set
        """
        return self._data["Vertex 24 X-coordinate"]

    @vertex_24_xcoordinate.setter
    def vertex_24_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 24 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 24 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_24_xcoordinate`'.format(value))
        self._data["Vertex 24 X-coordinate"] = value

    @property
    def vertex_24_ycoordinate(self):
        """Get vertex_24_ycoordinate

        Returns:
            float: the value of `vertex_24_ycoordinate` or None if not set
        """
        return self._data["Vertex 24 Y-coordinate"]

    @vertex_24_ycoordinate.setter
    def vertex_24_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 24 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 24 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_24_ycoordinate`'.format(value))
        self._data["Vertex 24 Y-coordinate"] = value

    @property
    def vertex_24_zcoordinate(self):
        """Get vertex_24_zcoordinate

        Returns:
            float: the value of `vertex_24_zcoordinate` or None if not set
        """
        return self._data["Vertex 24 Z-coordinate"]

    @vertex_24_zcoordinate.setter
    def vertex_24_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 24 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 24 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_24_zcoordinate`'.format(value))
        self._data["Vertex 24 Z-coordinate"] = value

    @property
    def vertex_25_xcoordinate(self):
        """Get vertex_25_xcoordinate

        Returns:
            float: the value of `vertex_25_xcoordinate` or None if not set
        """
        return self._data["Vertex 25 X-coordinate"]

    @vertex_25_xcoordinate.setter
    def vertex_25_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 25 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 25 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_25_xcoordinate`'.format(value))
        self._data["Vertex 25 X-coordinate"] = value

    @property
    def vertex_25_ycoordinate(self):
        """Get vertex_25_ycoordinate

        Returns:
            float: the value of `vertex_25_ycoordinate` or None if not set
        """
        return self._data["Vertex 25 Y-coordinate"]

    @vertex_25_ycoordinate.setter
    def vertex_25_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 25 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 25 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_25_ycoordinate`'.format(value))
        self._data["Vertex 25 Y-coordinate"] = value

    @property
    def vertex_25_zcoordinate(self):
        """Get vertex_25_zcoordinate

        Returns:
            float: the value of `vertex_25_zcoordinate` or None if not set
        """
        return self._data["Vertex 25 Z-coordinate"]

    @vertex_25_zcoordinate.setter
    def vertex_25_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 25 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 25 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_25_zcoordinate`'.format(value))
        self._data["Vertex 25 Z-coordinate"] = value

    @property
    def vertex_26_xcoordinate(self):
        """Get vertex_26_xcoordinate

        Returns:
            float: the value of `vertex_26_xcoordinate` or None if not set
        """
        return self._data["Vertex 26 X-coordinate"]

    @vertex_26_xcoordinate.setter
    def vertex_26_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 26 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 26 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_26_xcoordinate`'.format(value))
        self._data["Vertex 26 X-coordinate"] = value

    @property
    def vertex_26_ycoordinate(self):
        """Get vertex_26_ycoordinate

        Returns:
            float: the value of `vertex_26_ycoordinate` or None if not set
        """
        return self._data["Vertex 26 Y-coordinate"]

    @vertex_26_ycoordinate.setter
    def vertex_26_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 26 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 26 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_26_ycoordinate`'.format(value))
        self._data["Vertex 26 Y-coordinate"] = value

    @property
    def vertex_26_zcoordinate(self):
        """Get vertex_26_zcoordinate

        Returns:
            float: the value of `vertex_26_zcoordinate` or None if not set
        """
        return self._data["Vertex 26 Z-coordinate"]

    @vertex_26_zcoordinate.setter
    def vertex_26_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 26 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 26 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_26_zcoordinate`'.format(value))
        self._data["Vertex 26 Z-coordinate"] = value

    @property
    def vertex_27_xcoordinate(self):
        """Get vertex_27_xcoordinate

        Returns:
            float: the value of `vertex_27_xcoordinate` or None if not set
        """
        return self._data["Vertex 27 X-coordinate"]

    @vertex_27_xcoordinate.setter
    def vertex_27_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 27 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 27 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_27_xcoordinate`'.format(value))
        self._data["Vertex 27 X-coordinate"] = value

    @property
    def vertex_27_ycoordinate(self):
        """Get vertex_27_ycoordinate

        Returns:
            float: the value of `vertex_27_ycoordinate` or None if not set
        """
        return self._data["Vertex 27 Y-coordinate"]

    @vertex_27_ycoordinate.setter
    def vertex_27_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 27 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 27 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_27_ycoordinate`'.format(value))
        self._data["Vertex 27 Y-coordinate"] = value

    @property
    def vertex_27_zcoordinate(self):
        """Get vertex_27_zcoordinate

        Returns:
            float: the value of `vertex_27_zcoordinate` or None if not set
        """
        return self._data["Vertex 27 Z-coordinate"]

    @vertex_27_zcoordinate.setter
    def vertex_27_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 27 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 27 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_27_zcoordinate`'.format(value))
        self._data["Vertex 27 Z-coordinate"] = value

    @property
    def vertex_28_xcoordinate(self):
        """Get vertex_28_xcoordinate

        Returns:
            float: the value of `vertex_28_xcoordinate` or None if not set
        """
        return self._data["Vertex 28 X-coordinate"]

    @vertex_28_xcoordinate.setter
    def vertex_28_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 28 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 28 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_28_xcoordinate`'.format(value))
        self._data["Vertex 28 X-coordinate"] = value

    @property
    def vertex_28_ycoordinate(self):
        """Get vertex_28_ycoordinate

        Returns:
            float: the value of `vertex_28_ycoordinate` or None if not set
        """
        return self._data["Vertex 28 Y-coordinate"]

    @vertex_28_ycoordinate.setter
    def vertex_28_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 28 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 28 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_28_ycoordinate`'.format(value))
        self._data["Vertex 28 Y-coordinate"] = value

    @property
    def vertex_28_zcoordinate(self):
        """Get vertex_28_zcoordinate

        Returns:
            float: the value of `vertex_28_zcoordinate` or None if not set
        """
        return self._data["Vertex 28 Z-coordinate"]

    @vertex_28_zcoordinate.setter
    def vertex_28_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 28 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 28 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_28_zcoordinate`'.format(value))
        self._data["Vertex 28 Z-coordinate"] = value

    @property
    def vertex_29_xcoordinate(self):
        """Get vertex_29_xcoordinate

        Returns:
            float: the value of `vertex_29_xcoordinate` or None if not set
        """
        return self._data["Vertex 29 X-coordinate"]

    @vertex_29_xcoordinate.setter
    def vertex_29_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 29 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 29 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_29_xcoordinate`'.format(value))
        self._data["Vertex 29 X-coordinate"] = value

    @property
    def vertex_29_ycoordinate(self):
        """Get vertex_29_ycoordinate

        Returns:
            float: the value of `vertex_29_ycoordinate` or None if not set
        """
        return self._data["Vertex 29 Y-coordinate"]

    @vertex_29_ycoordinate.setter
    def vertex_29_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 29 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 29 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_29_ycoordinate`'.format(value))
        self._data["Vertex 29 Y-coordinate"] = value

    @property
    def vertex_29_zcoordinate(self):
        """Get vertex_29_zcoordinate

        Returns:
            float: the value of `vertex_29_zcoordinate` or None if not set
        """
        return self._data["Vertex 29 Z-coordinate"]

    @vertex_29_zcoordinate.setter
    def vertex_29_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 29 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 29 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_29_zcoordinate`'.format(value))
        self._data["Vertex 29 Z-coordinate"] = value

    @property
    def vertex_30_xcoordinate(self):
        """Get vertex_30_xcoordinate

        Returns:
            float: the value of `vertex_30_xcoordinate` or None if not set
        """
        return self._data["Vertex 30 X-coordinate"]

    @vertex_30_xcoordinate.setter
    def vertex_30_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 30 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 30 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_30_xcoordinate`'.format(value))
        self._data["Vertex 30 X-coordinate"] = value

    @property
    def vertex_30_ycoordinate(self):
        """Get vertex_30_ycoordinate

        Returns:
            float: the value of `vertex_30_ycoordinate` or None if not set
        """
        return self._data["Vertex 30 Y-coordinate"]

    @vertex_30_ycoordinate.setter
    def vertex_30_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 30 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 30 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_30_ycoordinate`'.format(value))
        self._data["Vertex 30 Y-coordinate"] = value

    @property
    def vertex_30_zcoordinate(self):
        """Get vertex_30_zcoordinate

        Returns:
            float: the value of `vertex_30_zcoordinate` or None if not set
        """
        return self._data["Vertex 30 Z-coordinate"]

    @vertex_30_zcoordinate.setter
    def vertex_30_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 30 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 30 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_30_zcoordinate`'.format(value))
        self._data["Vertex 30 Z-coordinate"] = value

    @property
    def vertex_31_xcoordinate(self):
        """Get vertex_31_xcoordinate

        Returns:
            float: the value of `vertex_31_xcoordinate` or None if not set
        """
        return self._data["Vertex 31 X-coordinate"]

    @vertex_31_xcoordinate.setter
    def vertex_31_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 31 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 31 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_31_xcoordinate`'.format(value))
        self._data["Vertex 31 X-coordinate"] = value

    @property
    def vertex_31_ycoordinate(self):
        """Get vertex_31_ycoordinate

        Returns:
            float: the value of `vertex_31_ycoordinate` or None if not set
        """
        return self._data["Vertex 31 Y-coordinate"]

    @vertex_31_ycoordinate.setter
    def vertex_31_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 31 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 31 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_31_ycoordinate`'.format(value))
        self._data["Vertex 31 Y-coordinate"] = value

    @property
    def vertex_31_zcoordinate(self):
        """Get vertex_31_zcoordinate

        Returns:
            float: the value of `vertex_31_zcoordinate` or None if not set
        """
        return self._data["Vertex 31 Z-coordinate"]

    @vertex_31_zcoordinate.setter
    def vertex_31_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 31 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 31 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_31_zcoordinate`'.format(value))
        self._data["Vertex 31 Z-coordinate"] = value

    @property
    def vertex_32_xcoordinate(self):
        """Get vertex_32_xcoordinate

        Returns:
            float: the value of `vertex_32_xcoordinate` or None if not set
        """
        return self._data["Vertex 32 X-coordinate"]

    @vertex_32_xcoordinate.setter
    def vertex_32_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 32 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 32 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_32_xcoordinate`'.format(value))
        self._data["Vertex 32 X-coordinate"] = value

    @property
    def vertex_32_ycoordinate(self):
        """Get vertex_32_ycoordinate

        Returns:
            float: the value of `vertex_32_ycoordinate` or None if not set
        """
        return self._data["Vertex 32 Y-coordinate"]

    @vertex_32_ycoordinate.setter
    def vertex_32_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 32 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 32 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_32_ycoordinate`'.format(value))
        self._data["Vertex 32 Y-coordinate"] = value

    @property
    def vertex_32_zcoordinate(self):
        """Get vertex_32_zcoordinate

        Returns:
            float: the value of `vertex_32_zcoordinate` or None if not set
        """
        return self._data["Vertex 32 Z-coordinate"]

    @vertex_32_zcoordinate.setter
    def vertex_32_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 32 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 32 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_32_zcoordinate`'.format(value))
        self._data["Vertex 32 Z-coordinate"] = value

    @property
    def vertex_33_xcoordinate(self):
        """Get vertex_33_xcoordinate

        Returns:
            float: the value of `vertex_33_xcoordinate` or None if not set
        """
        return self._data["Vertex 33 X-coordinate"]

    @vertex_33_xcoordinate.setter
    def vertex_33_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 33 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 33 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_33_xcoordinate`'.format(value))
        self._data["Vertex 33 X-coordinate"] = value

    @property
    def vertex_33_ycoordinate(self):
        """Get vertex_33_ycoordinate

        Returns:
            float: the value of `vertex_33_ycoordinate` or None if not set
        """
        return self._data["Vertex 33 Y-coordinate"]

    @vertex_33_ycoordinate.setter
    def vertex_33_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 33 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 33 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_33_ycoordinate`'.format(value))
        self._data["Vertex 33 Y-coordinate"] = value

    @property
    def vertex_33_zcoordinate(self):
        """Get vertex_33_zcoordinate

        Returns:
            float: the value of `vertex_33_zcoordinate` or None if not set
        """
        return self._data["Vertex 33 Z-coordinate"]

    @vertex_33_zcoordinate.setter
    def vertex_33_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 33 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 33 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_33_zcoordinate`'.format(value))
        self._data["Vertex 33 Z-coordinate"] = value

    @property
    def vertex_34_xcoordinate(self):
        """Get vertex_34_xcoordinate

        Returns:
            float: the value of `vertex_34_xcoordinate` or None if not set
        """
        return self._data["Vertex 34 X-coordinate"]

    @vertex_34_xcoordinate.setter
    def vertex_34_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 34 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 34 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_34_xcoordinate`'.format(value))
        self._data["Vertex 34 X-coordinate"] = value

    @property
    def vertex_34_ycoordinate(self):
        """Get vertex_34_ycoordinate

        Returns:
            float: the value of `vertex_34_ycoordinate` or None if not set
        """
        return self._data["Vertex 34 Y-coordinate"]

    @vertex_34_ycoordinate.setter
    def vertex_34_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 34 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 34 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_34_ycoordinate`'.format(value))
        self._data["Vertex 34 Y-coordinate"] = value

    @property
    def vertex_34_zcoordinate(self):
        """Get vertex_34_zcoordinate

        Returns:
            float: the value of `vertex_34_zcoordinate` or None if not set
        """
        return self._data["Vertex 34 Z-coordinate"]

    @vertex_34_zcoordinate.setter
    def vertex_34_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 34 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 34 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_34_zcoordinate`'.format(value))
        self._data["Vertex 34 Z-coordinate"] = value

    @property
    def vertex_35_xcoordinate(self):
        """Get vertex_35_xcoordinate

        Returns:
            float: the value of `vertex_35_xcoordinate` or None if not set
        """
        return self._data["Vertex 35 X-coordinate"]

    @vertex_35_xcoordinate.setter
    def vertex_35_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 35 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 35 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_35_xcoordinate`'.format(value))
        self._data["Vertex 35 X-coordinate"] = value

    @property
    def vertex_35_ycoordinate(self):
        """Get vertex_35_ycoordinate

        Returns:
            float: the value of `vertex_35_ycoordinate` or None if not set
        """
        return self._data["Vertex 35 Y-coordinate"]

    @vertex_35_ycoordinate.setter
    def vertex_35_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 35 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 35 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_35_ycoordinate`'.format(value))
        self._data["Vertex 35 Y-coordinate"] = value

    @property
    def vertex_35_zcoordinate(self):
        """Get vertex_35_zcoordinate

        Returns:
            float: the value of `vertex_35_zcoordinate` or None if not set
        """
        return self._data["Vertex 35 Z-coordinate"]

    @vertex_35_zcoordinate.setter
    def vertex_35_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 35 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 35 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_35_zcoordinate`'.format(value))
        self._data["Vertex 35 Z-coordinate"] = value

    @property
    def vertex_36_xcoordinate(self):
        """Get vertex_36_xcoordinate

        Returns:
            float: the value of `vertex_36_xcoordinate` or None if not set
        """
        return self._data["Vertex 36 X-coordinate"]

    @vertex_36_xcoordinate.setter
    def vertex_36_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 36 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 36 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_36_xcoordinate`'.format(value))
        self._data["Vertex 36 X-coordinate"] = value

    @property
    def vertex_36_ycoordinate(self):
        """Get vertex_36_ycoordinate

        Returns:
            float: the value of `vertex_36_ycoordinate` or None if not set
        """
        return self._data["Vertex 36 Y-coordinate"]

    @vertex_36_ycoordinate.setter
    def vertex_36_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 36 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 36 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_36_ycoordinate`'.format(value))
        self._data["Vertex 36 Y-coordinate"] = value

    @property
    def vertex_36_zcoordinate(self):
        """Get vertex_36_zcoordinate

        Returns:
            float: the value of `vertex_36_zcoordinate` or None if not set
        """
        return self._data["Vertex 36 Z-coordinate"]

    @vertex_36_zcoordinate.setter
    def vertex_36_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 36 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 36 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_36_zcoordinate`'.format(value))
        self._data["Vertex 36 Z-coordinate"] = value

    @property
    def vertex_37_xcoordinate(self):
        """Get vertex_37_xcoordinate

        Returns:
            float: the value of `vertex_37_xcoordinate` or None if not set
        """
        return self._data["Vertex 37 X-coordinate"]

    @vertex_37_xcoordinate.setter
    def vertex_37_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 37 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 37 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_37_xcoordinate`'.format(value))
        self._data["Vertex 37 X-coordinate"] = value

    @property
    def vertex_37_ycoordinate(self):
        """Get vertex_37_ycoordinate

        Returns:
            float: the value of `vertex_37_ycoordinate` or None if not set
        """
        return self._data["Vertex 37 Y-coordinate"]

    @vertex_37_ycoordinate.setter
    def vertex_37_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 37 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 37 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_37_ycoordinate`'.format(value))
        self._data["Vertex 37 Y-coordinate"] = value

    @property
    def vertex_37_zcoordinate(self):
        """Get vertex_37_zcoordinate

        Returns:
            float: the value of `vertex_37_zcoordinate` or None if not set
        """
        return self._data["Vertex 37 Z-coordinate"]

    @vertex_37_zcoordinate.setter
    def vertex_37_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 37 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 37 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_37_zcoordinate`'.format(value))
        self._data["Vertex 37 Z-coordinate"] = value

    @property
    def vertex_38_xcoordinate(self):
        """Get vertex_38_xcoordinate

        Returns:
            float: the value of `vertex_38_xcoordinate` or None if not set
        """
        return self._data["Vertex 38 X-coordinate"]

    @vertex_38_xcoordinate.setter
    def vertex_38_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 38 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 38 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_38_xcoordinate`'.format(value))
        self._data["Vertex 38 X-coordinate"] = value

    @property
    def vertex_38_ycoordinate(self):
        """Get vertex_38_ycoordinate

        Returns:
            float: the value of `vertex_38_ycoordinate` or None if not set
        """
        return self._data["Vertex 38 Y-coordinate"]

    @vertex_38_ycoordinate.setter
    def vertex_38_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 38 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 38 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_38_ycoordinate`'.format(value))
        self._data["Vertex 38 Y-coordinate"] = value

    @property
    def vertex_38_zcoordinate(self):
        """Get vertex_38_zcoordinate

        Returns:
            float: the value of `vertex_38_zcoordinate` or None if not set
        """
        return self._data["Vertex 38 Z-coordinate"]

    @vertex_38_zcoordinate.setter
    def vertex_38_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 38 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 38 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_38_zcoordinate`'.format(value))
        self._data["Vertex 38 Z-coordinate"] = value

    @property
    def vertex_39_xcoordinate(self):
        """Get vertex_39_xcoordinate

        Returns:
            float: the value of `vertex_39_xcoordinate` or None if not set
        """
        return self._data["Vertex 39 X-coordinate"]

    @vertex_39_xcoordinate.setter
    def vertex_39_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 39 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 39 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_39_xcoordinate`'.format(value))
        self._data["Vertex 39 X-coordinate"] = value

    @property
    def vertex_39_ycoordinate(self):
        """Get vertex_39_ycoordinate

        Returns:
            float: the value of `vertex_39_ycoordinate` or None if not set
        """
        return self._data["Vertex 39 Y-coordinate"]

    @vertex_39_ycoordinate.setter
    def vertex_39_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 39 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 39 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_39_ycoordinate`'.format(value))
        self._data["Vertex 39 Y-coordinate"] = value

    @property
    def vertex_39_zcoordinate(self):
        """Get vertex_39_zcoordinate

        Returns:
            float: the value of `vertex_39_zcoordinate` or None if not set
        """
        return self._data["Vertex 39 Z-coordinate"]

    @vertex_39_zcoordinate.setter
    def vertex_39_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 39 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 39 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_39_zcoordinate`'.format(value))
        self._data["Vertex 39 Z-coordinate"] = value

    @property
    def vertex_40_xcoordinate(self):
        """Get vertex_40_xcoordinate

        Returns:
            float: the value of `vertex_40_xcoordinate` or None if not set
        """
        return self._data["Vertex 40 X-coordinate"]

    @vertex_40_xcoordinate.setter
    def vertex_40_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 40 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 40 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_40_xcoordinate`'.format(value))
        self._data["Vertex 40 X-coordinate"] = value

    @property
    def vertex_40_ycoordinate(self):
        """Get vertex_40_ycoordinate

        Returns:
            float: the value of `vertex_40_ycoordinate` or None if not set
        """
        return self._data["Vertex 40 Y-coordinate"]

    @vertex_40_ycoordinate.setter
    def vertex_40_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 40 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 40 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_40_ycoordinate`'.format(value))
        self._data["Vertex 40 Y-coordinate"] = value

    @property
    def vertex_40_zcoordinate(self):
        """Get vertex_40_zcoordinate

        Returns:
            float: the value of `vertex_40_zcoordinate` or None if not set
        """
        return self._data["Vertex 40 Z-coordinate"]

    @vertex_40_zcoordinate.setter
    def vertex_40_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 40 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 40 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_40_zcoordinate`'.format(value))
        self._data["Vertex 40 Z-coordinate"] = value

    @property
    def vertex_41_xcoordinate(self):
        """Get vertex_41_xcoordinate

        Returns:
            float: the value of `vertex_41_xcoordinate` or None if not set
        """
        return self._data["Vertex 41 X-coordinate"]

    @vertex_41_xcoordinate.setter
    def vertex_41_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 41 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 41 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_41_xcoordinate`'.format(value))
        self._data["Vertex 41 X-coordinate"] = value

    @property
    def vertex_41_ycoordinate(self):
        """Get vertex_41_ycoordinate

        Returns:
            float: the value of `vertex_41_ycoordinate` or None if not set
        """
        return self._data["Vertex 41 Y-coordinate"]

    @vertex_41_ycoordinate.setter
    def vertex_41_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 41 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 41 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_41_ycoordinate`'.format(value))
        self._data["Vertex 41 Y-coordinate"] = value

    @property
    def vertex_41_zcoordinate(self):
        """Get vertex_41_zcoordinate

        Returns:
            float: the value of `vertex_41_zcoordinate` or None if not set
        """
        return self._data["Vertex 41 Z-coordinate"]

    @vertex_41_zcoordinate.setter
    def vertex_41_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 41 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 41 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_41_zcoordinate`'.format(value))
        self._data["Vertex 41 Z-coordinate"] = value

    @property
    def vertex_42_xcoordinate(self):
        """Get vertex_42_xcoordinate

        Returns:
            float: the value of `vertex_42_xcoordinate` or None if not set
        """
        return self._data["Vertex 42 X-coordinate"]

    @vertex_42_xcoordinate.setter
    def vertex_42_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 42 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 42 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_42_xcoordinate`'.format(value))
        self._data["Vertex 42 X-coordinate"] = value

    @property
    def vertex_42_ycoordinate(self):
        """Get vertex_42_ycoordinate

        Returns:
            float: the value of `vertex_42_ycoordinate` or None if not set
        """
        return self._data["Vertex 42 Y-coordinate"]

    @vertex_42_ycoordinate.setter
    def vertex_42_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 42 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 42 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_42_ycoordinate`'.format(value))
        self._data["Vertex 42 Y-coordinate"] = value

    @property
    def vertex_42_zcoordinate(self):
        """Get vertex_42_zcoordinate

        Returns:
            float: the value of `vertex_42_zcoordinate` or None if not set
        """
        return self._data["Vertex 42 Z-coordinate"]

    @vertex_42_zcoordinate.setter
    def vertex_42_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 42 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 42 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_42_zcoordinate`'.format(value))
        self._data["Vertex 42 Z-coordinate"] = value

    @property
    def vertex_43_xcoordinate(self):
        """Get vertex_43_xcoordinate

        Returns:
            float: the value of `vertex_43_xcoordinate` or None if not set
        """
        return self._data["Vertex 43 X-coordinate"]

    @vertex_43_xcoordinate.setter
    def vertex_43_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 43 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 43 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_43_xcoordinate`'.format(value))
        self._data["Vertex 43 X-coordinate"] = value

    @property
    def vertex_43_ycoordinate(self):
        """Get vertex_43_ycoordinate

        Returns:
            float: the value of `vertex_43_ycoordinate` or None if not set
        """
        return self._data["Vertex 43 Y-coordinate"]

    @vertex_43_ycoordinate.setter
    def vertex_43_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 43 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 43 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_43_ycoordinate`'.format(value))
        self._data["Vertex 43 Y-coordinate"] = value

    @property
    def vertex_43_zcoordinate(self):
        """Get vertex_43_zcoordinate

        Returns:
            float: the value of `vertex_43_zcoordinate` or None if not set
        """
        return self._data["Vertex 43 Z-coordinate"]

    @vertex_43_zcoordinate.setter
    def vertex_43_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 43 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 43 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_43_zcoordinate`'.format(value))
        self._data["Vertex 43 Z-coordinate"] = value

    @property
    def vertex_44_xcoordinate(self):
        """Get vertex_44_xcoordinate

        Returns:
            float: the value of `vertex_44_xcoordinate` or None if not set
        """
        return self._data["Vertex 44 X-coordinate"]

    @vertex_44_xcoordinate.setter
    def vertex_44_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 44 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 44 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_44_xcoordinate`'.format(value))
        self._data["Vertex 44 X-coordinate"] = value

    @property
    def vertex_44_ycoordinate(self):
        """Get vertex_44_ycoordinate

        Returns:
            float: the value of `vertex_44_ycoordinate` or None if not set
        """
        return self._data["Vertex 44 Y-coordinate"]

    @vertex_44_ycoordinate.setter
    def vertex_44_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 44 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 44 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_44_ycoordinate`'.format(value))
        self._data["Vertex 44 Y-coordinate"] = value

    @property
    def vertex_44_zcoordinate(self):
        """Get vertex_44_zcoordinate

        Returns:
            float: the value of `vertex_44_zcoordinate` or None if not set
        """
        return self._data["Vertex 44 Z-coordinate"]

    @vertex_44_zcoordinate.setter
    def vertex_44_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 44 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 44 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_44_zcoordinate`'.format(value))
        self._data["Vertex 44 Z-coordinate"] = value

    @property
    def vertex_45_xcoordinate(self):
        """Get vertex_45_xcoordinate

        Returns:
            float: the value of `vertex_45_xcoordinate` or None if not set
        """
        return self._data["Vertex 45 X-coordinate"]

    @vertex_45_xcoordinate.setter
    def vertex_45_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 45 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 45 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_45_xcoordinate`'.format(value))
        self._data["Vertex 45 X-coordinate"] = value

    @property
    def vertex_45_ycoordinate(self):
        """Get vertex_45_ycoordinate

        Returns:
            float: the value of `vertex_45_ycoordinate` or None if not set
        """
        return self._data["Vertex 45 Y-coordinate"]

    @vertex_45_ycoordinate.setter
    def vertex_45_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 45 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 45 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_45_ycoordinate`'.format(value))
        self._data["Vertex 45 Y-coordinate"] = value

    @property
    def vertex_45_zcoordinate(self):
        """Get vertex_45_zcoordinate

        Returns:
            float: the value of `vertex_45_zcoordinate` or None if not set
        """
        return self._data["Vertex 45 Z-coordinate"]

    @vertex_45_zcoordinate.setter
    def vertex_45_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 45 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 45 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_45_zcoordinate`'.format(value))
        self._data["Vertex 45 Z-coordinate"] = value

    @property
    def vertex_46_xcoordinate(self):
        """Get vertex_46_xcoordinate

        Returns:
            float: the value of `vertex_46_xcoordinate` or None if not set
        """
        return self._data["Vertex 46 X-coordinate"]

    @vertex_46_xcoordinate.setter
    def vertex_46_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 46 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 46 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_46_xcoordinate`'.format(value))
        self._data["Vertex 46 X-coordinate"] = value

    @property
    def vertex_46_ycoordinate(self):
        """Get vertex_46_ycoordinate

        Returns:
            float: the value of `vertex_46_ycoordinate` or None if not set
        """
        return self._data["Vertex 46 Y-coordinate"]

    @vertex_46_ycoordinate.setter
    def vertex_46_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 46 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 46 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_46_ycoordinate`'.format(value))
        self._data["Vertex 46 Y-coordinate"] = value

    @property
    def vertex_46_zcoordinate(self):
        """Get vertex_46_zcoordinate

        Returns:
            float: the value of `vertex_46_zcoordinate` or None if not set
        """
        return self._data["Vertex 46 Z-coordinate"]

    @vertex_46_zcoordinate.setter
    def vertex_46_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 46 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 46 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_46_zcoordinate`'.format(value))
        self._data["Vertex 46 Z-coordinate"] = value

    @property
    def vertex_47_xcoordinate(self):
        """Get vertex_47_xcoordinate

        Returns:
            float: the value of `vertex_47_xcoordinate` or None if not set
        """
        return self._data["Vertex 47 X-coordinate"]

    @vertex_47_xcoordinate.setter
    def vertex_47_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 47 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 47 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_47_xcoordinate`'.format(value))
        self._data["Vertex 47 X-coordinate"] = value

    @property
    def vertex_47_ycoordinate(self):
        """Get vertex_47_ycoordinate

        Returns:
            float: the value of `vertex_47_ycoordinate` or None if not set
        """
        return self._data["Vertex 47 Y-coordinate"]

    @vertex_47_ycoordinate.setter
    def vertex_47_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 47 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 47 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_47_ycoordinate`'.format(value))
        self._data["Vertex 47 Y-coordinate"] = value

    @property
    def vertex_47_zcoordinate(self):
        """Get vertex_47_zcoordinate

        Returns:
            float: the value of `vertex_47_zcoordinate` or None if not set
        """
        return self._data["Vertex 47 Z-coordinate"]

    @vertex_47_zcoordinate.setter
    def vertex_47_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 47 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 47 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_47_zcoordinate`'.format(value))
        self._data["Vertex 47 Z-coordinate"] = value

    @property
    def vertex_48_xcoordinate(self):
        """Get vertex_48_xcoordinate

        Returns:
            float: the value of `vertex_48_xcoordinate` or None if not set
        """
        return self._data["Vertex 48 X-coordinate"]

    @vertex_48_xcoordinate.setter
    def vertex_48_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 48 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 48 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_48_xcoordinate`'.format(value))
        self._data["Vertex 48 X-coordinate"] = value

    @property
    def vertex_48_ycoordinate(self):
        """Get vertex_48_ycoordinate

        Returns:
            float: the value of `vertex_48_ycoordinate` or None if not set
        """
        return self._data["Vertex 48 Y-coordinate"]

    @vertex_48_ycoordinate.setter
    def vertex_48_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 48 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 48 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_48_ycoordinate`'.format(value))
        self._data["Vertex 48 Y-coordinate"] = value

    @property
    def vertex_48_zcoordinate(self):
        """Get vertex_48_zcoordinate

        Returns:
            float: the value of `vertex_48_zcoordinate` or None if not set
        """
        return self._data["Vertex 48 Z-coordinate"]

    @vertex_48_zcoordinate.setter
    def vertex_48_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 48 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 48 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_48_zcoordinate`'.format(value))
        self._data["Vertex 48 Z-coordinate"] = value

    @property
    def vertex_49_xcoordinate(self):
        """Get vertex_49_xcoordinate

        Returns:
            float: the value of `vertex_49_xcoordinate` or None if not set
        """
        return self._data["Vertex 49 X-coordinate"]

    @vertex_49_xcoordinate.setter
    def vertex_49_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 49 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 49 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_49_xcoordinate`'.format(value))
        self._data["Vertex 49 X-coordinate"] = value

    @property
    def vertex_49_ycoordinate(self):
        """Get vertex_49_ycoordinate

        Returns:
            float: the value of `vertex_49_ycoordinate` or None if not set
        """
        return self._data["Vertex 49 Y-coordinate"]

    @vertex_49_ycoordinate.setter
    def vertex_49_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 49 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 49 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_49_ycoordinate`'.format(value))
        self._data["Vertex 49 Y-coordinate"] = value

    @property
    def vertex_49_zcoordinate(self):
        """Get vertex_49_zcoordinate

        Returns:
            float: the value of `vertex_49_zcoordinate` or None if not set
        """
        return self._data["Vertex 49 Z-coordinate"]

    @vertex_49_zcoordinate.setter
    def vertex_49_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 49 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 49 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_49_zcoordinate`'.format(value))
        self._data["Vertex 49 Z-coordinate"] = value

    @property
    def vertex_50_xcoordinate(self):
        """Get vertex_50_xcoordinate

        Returns:
            float: the value of `vertex_50_xcoordinate` or None if not set
        """
        return self._data["Vertex 50 X-coordinate"]

    @vertex_50_xcoordinate.setter
    def vertex_50_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 50 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 50 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_50_xcoordinate`'.format(value))
        self._data["Vertex 50 X-coordinate"] = value

    @property
    def vertex_50_ycoordinate(self):
        """Get vertex_50_ycoordinate

        Returns:
            float: the value of `vertex_50_ycoordinate` or None if not set
        """
        return self._data["Vertex 50 Y-coordinate"]

    @vertex_50_ycoordinate.setter
    def vertex_50_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 50 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 50 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_50_ycoordinate`'.format(value))
        self._data["Vertex 50 Y-coordinate"] = value

    @property
    def vertex_50_zcoordinate(self):
        """Get vertex_50_zcoordinate

        Returns:
            float: the value of `vertex_50_zcoordinate` or None if not set
        """
        return self._data["Vertex 50 Z-coordinate"]

    @vertex_50_zcoordinate.setter
    def vertex_50_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 50 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 50 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_50_zcoordinate`'.format(value))
        self._data["Vertex 50 Z-coordinate"] = value

    @property
    def vertex_51_xcoordinate(self):
        """Get vertex_51_xcoordinate

        Returns:
            float: the value of `vertex_51_xcoordinate` or None if not set
        """
        return self._data["Vertex 51 X-coordinate"]

    @vertex_51_xcoordinate.setter
    def vertex_51_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 51 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 51 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_51_xcoordinate`'.format(value))
        self._data["Vertex 51 X-coordinate"] = value

    @property
    def vertex_51_ycoordinate(self):
        """Get vertex_51_ycoordinate

        Returns:
            float: the value of `vertex_51_ycoordinate` or None if not set
        """
        return self._data["Vertex 51 Y-coordinate"]

    @vertex_51_ycoordinate.setter
    def vertex_51_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 51 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 51 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_51_ycoordinate`'.format(value))
        self._data["Vertex 51 Y-coordinate"] = value

    @property
    def vertex_51_zcoordinate(self):
        """Get vertex_51_zcoordinate

        Returns:
            float: the value of `vertex_51_zcoordinate` or None if not set
        """
        return self._data["Vertex 51 Z-coordinate"]

    @vertex_51_zcoordinate.setter
    def vertex_51_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 51 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 51 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_51_zcoordinate`'.format(value))
        self._data["Vertex 51 Z-coordinate"] = value

    @property
    def vertex_52_xcoordinate(self):
        """Get vertex_52_xcoordinate

        Returns:
            float: the value of `vertex_52_xcoordinate` or None if not set
        """
        return self._data["Vertex 52 X-coordinate"]

    @vertex_52_xcoordinate.setter
    def vertex_52_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 52 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 52 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_52_xcoordinate`'.format(value))
        self._data["Vertex 52 X-coordinate"] = value

    @property
    def vertex_52_ycoordinate(self):
        """Get vertex_52_ycoordinate

        Returns:
            float: the value of `vertex_52_ycoordinate` or None if not set
        """
        return self._data["Vertex 52 Y-coordinate"]

    @vertex_52_ycoordinate.setter
    def vertex_52_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 52 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 52 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_52_ycoordinate`'.format(value))
        self._data["Vertex 52 Y-coordinate"] = value

    @property
    def vertex_52_zcoordinate(self):
        """Get vertex_52_zcoordinate

        Returns:
            float: the value of `vertex_52_zcoordinate` or None if not set
        """
        return self._data["Vertex 52 Z-coordinate"]

    @vertex_52_zcoordinate.setter
    def vertex_52_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 52 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 52 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_52_zcoordinate`'.format(value))
        self._data["Vertex 52 Z-coordinate"] = value

    @property
    def vertex_53_xcoordinate(self):
        """Get vertex_53_xcoordinate

        Returns:
            float: the value of `vertex_53_xcoordinate` or None if not set
        """
        return self._data["Vertex 53 X-coordinate"]

    @vertex_53_xcoordinate.setter
    def vertex_53_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 53 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 53 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_53_xcoordinate`'.format(value))
        self._data["Vertex 53 X-coordinate"] = value

    @property
    def vertex_53_ycoordinate(self):
        """Get vertex_53_ycoordinate

        Returns:
            float: the value of `vertex_53_ycoordinate` or None if not set
        """
        return self._data["Vertex 53 Y-coordinate"]

    @vertex_53_ycoordinate.setter
    def vertex_53_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 53 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 53 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_53_ycoordinate`'.format(value))
        self._data["Vertex 53 Y-coordinate"] = value

    @property
    def vertex_53_zcoordinate(self):
        """Get vertex_53_zcoordinate

        Returns:
            float: the value of `vertex_53_zcoordinate` or None if not set
        """
        return self._data["Vertex 53 Z-coordinate"]

    @vertex_53_zcoordinate.setter
    def vertex_53_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 53 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 53 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_53_zcoordinate`'.format(value))
        self._data["Vertex 53 Z-coordinate"] = value

    @property
    def vertex_54_xcoordinate(self):
        """Get vertex_54_xcoordinate

        Returns:
            float: the value of `vertex_54_xcoordinate` or None if not set
        """
        return self._data["Vertex 54 X-coordinate"]

    @vertex_54_xcoordinate.setter
    def vertex_54_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 54 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 54 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_54_xcoordinate`'.format(value))
        self._data["Vertex 54 X-coordinate"] = value

    @property
    def vertex_54_ycoordinate(self):
        """Get vertex_54_ycoordinate

        Returns:
            float: the value of `vertex_54_ycoordinate` or None if not set
        """
        return self._data["Vertex 54 Y-coordinate"]

    @vertex_54_ycoordinate.setter
    def vertex_54_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 54 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 54 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_54_ycoordinate`'.format(value))
        self._data["Vertex 54 Y-coordinate"] = value

    @property
    def vertex_54_zcoordinate(self):
        """Get vertex_54_zcoordinate

        Returns:
            float: the value of `vertex_54_zcoordinate` or None if not set
        """
        return self._data["Vertex 54 Z-coordinate"]

    @vertex_54_zcoordinate.setter
    def vertex_54_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 54 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 54 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_54_zcoordinate`'.format(value))
        self._data["Vertex 54 Z-coordinate"] = value

    @property
    def vertex_55_xcoordinate(self):
        """Get vertex_55_xcoordinate

        Returns:
            float: the value of `vertex_55_xcoordinate` or None if not set
        """
        return self._data["Vertex 55 X-coordinate"]

    @vertex_55_xcoordinate.setter
    def vertex_55_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 55 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 55 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_55_xcoordinate`'.format(value))
        self._data["Vertex 55 X-coordinate"] = value

    @property
    def vertex_55_ycoordinate(self):
        """Get vertex_55_ycoordinate

        Returns:
            float: the value of `vertex_55_ycoordinate` or None if not set
        """
        return self._data["Vertex 55 Y-coordinate"]

    @vertex_55_ycoordinate.setter
    def vertex_55_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 55 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 55 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_55_ycoordinate`'.format(value))
        self._data["Vertex 55 Y-coordinate"] = value

    @property
    def vertex_55_zcoordinate(self):
        """Get vertex_55_zcoordinate

        Returns:
            float: the value of `vertex_55_zcoordinate` or None if not set
        """
        return self._data["Vertex 55 Z-coordinate"]

    @vertex_55_zcoordinate.setter
    def vertex_55_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 55 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 55 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_55_zcoordinate`'.format(value))
        self._data["Vertex 55 Z-coordinate"] = value

    @property
    def vertex_56_xcoordinate(self):
        """Get vertex_56_xcoordinate

        Returns:
            float: the value of `vertex_56_xcoordinate` or None if not set
        """
        return self._data["Vertex 56 X-coordinate"]

    @vertex_56_xcoordinate.setter
    def vertex_56_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 56 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 56 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_56_xcoordinate`'.format(value))
        self._data["Vertex 56 X-coordinate"] = value

    @property
    def vertex_56_ycoordinate(self):
        """Get vertex_56_ycoordinate

        Returns:
            float: the value of `vertex_56_ycoordinate` or None if not set
        """
        return self._data["Vertex 56 Y-coordinate"]

    @vertex_56_ycoordinate.setter
    def vertex_56_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 56 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 56 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_56_ycoordinate`'.format(value))
        self._data["Vertex 56 Y-coordinate"] = value

    @property
    def vertex_56_zcoordinate(self):
        """Get vertex_56_zcoordinate

        Returns:
            float: the value of `vertex_56_zcoordinate` or None if not set
        """
        return self._data["Vertex 56 Z-coordinate"]

    @vertex_56_zcoordinate.setter
    def vertex_56_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 56 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 56 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_56_zcoordinate`'.format(value))
        self._data["Vertex 56 Z-coordinate"] = value

    @property
    def vertex_57_xcoordinate(self):
        """Get vertex_57_xcoordinate

        Returns:
            float: the value of `vertex_57_xcoordinate` or None if not set
        """
        return self._data["Vertex 57 X-coordinate"]

    @vertex_57_xcoordinate.setter
    def vertex_57_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 57 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 57 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_57_xcoordinate`'.format(value))
        self._data["Vertex 57 X-coordinate"] = value

    @property
    def vertex_57_ycoordinate(self):
        """Get vertex_57_ycoordinate

        Returns:
            float: the value of `vertex_57_ycoordinate` or None if not set
        """
        return self._data["Vertex 57 Y-coordinate"]

    @vertex_57_ycoordinate.setter
    def vertex_57_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 57 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 57 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_57_ycoordinate`'.format(value))
        self._data["Vertex 57 Y-coordinate"] = value

    @property
    def vertex_57_zcoordinate(self):
        """Get vertex_57_zcoordinate

        Returns:
            float: the value of `vertex_57_zcoordinate` or None if not set
        """
        return self._data["Vertex 57 Z-coordinate"]

    @vertex_57_zcoordinate.setter
    def vertex_57_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 57 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 57 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_57_zcoordinate`'.format(value))
        self._data["Vertex 57 Z-coordinate"] = value

    @property
    def vertex_58_xcoordinate(self):
        """Get vertex_58_xcoordinate

        Returns:
            float: the value of `vertex_58_xcoordinate` or None if not set
        """
        return self._data["Vertex 58 X-coordinate"]

    @vertex_58_xcoordinate.setter
    def vertex_58_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 58 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 58 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_58_xcoordinate`'.format(value))
        self._data["Vertex 58 X-coordinate"] = value

    @property
    def vertex_58_ycoordinate(self):
        """Get vertex_58_ycoordinate

        Returns:
            float: the value of `vertex_58_ycoordinate` or None if not set
        """
        return self._data["Vertex 58 Y-coordinate"]

    @vertex_58_ycoordinate.setter
    def vertex_58_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 58 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 58 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_58_ycoordinate`'.format(value))
        self._data["Vertex 58 Y-coordinate"] = value

    @property
    def vertex_58_zcoordinate(self):
        """Get vertex_58_zcoordinate

        Returns:
            float: the value of `vertex_58_zcoordinate` or None if not set
        """
        return self._data["Vertex 58 Z-coordinate"]

    @vertex_58_zcoordinate.setter
    def vertex_58_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 58 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 58 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_58_zcoordinate`'.format(value))
        self._data["Vertex 58 Z-coordinate"] = value

    @property
    def vertex_59_xcoordinate(self):
        """Get vertex_59_xcoordinate

        Returns:
            float: the value of `vertex_59_xcoordinate` or None if not set
        """
        return self._data["Vertex 59 X-coordinate"]

    @vertex_59_xcoordinate.setter
    def vertex_59_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 59 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 59 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_59_xcoordinate`'.format(value))
        self._data["Vertex 59 X-coordinate"] = value

    @property
    def vertex_59_ycoordinate(self):
        """Get vertex_59_ycoordinate

        Returns:
            float: the value of `vertex_59_ycoordinate` or None if not set
        """
        return self._data["Vertex 59 Y-coordinate"]

    @vertex_59_ycoordinate.setter
    def vertex_59_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 59 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 59 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_59_ycoordinate`'.format(value))
        self._data["Vertex 59 Y-coordinate"] = value

    @property
    def vertex_59_zcoordinate(self):
        """Get vertex_59_zcoordinate

        Returns:
            float: the value of `vertex_59_zcoordinate` or None if not set
        """
        return self._data["Vertex 59 Z-coordinate"]

    @vertex_59_zcoordinate.setter
    def vertex_59_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 59 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 59 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_59_zcoordinate`'.format(value))
        self._data["Vertex 59 Z-coordinate"] = value

    @property
    def vertex_60_xcoordinate(self):
        """Get vertex_60_xcoordinate

        Returns:
            float: the value of `vertex_60_xcoordinate` or None if not set
        """
        return self._data["Vertex 60 X-coordinate"]

    @vertex_60_xcoordinate.setter
    def vertex_60_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 60 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 60 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_60_xcoordinate`'.format(value))
        self._data["Vertex 60 X-coordinate"] = value

    @property
    def vertex_60_ycoordinate(self):
        """Get vertex_60_ycoordinate

        Returns:
            float: the value of `vertex_60_ycoordinate` or None if not set
        """
        return self._data["Vertex 60 Y-coordinate"]

    @vertex_60_ycoordinate.setter
    def vertex_60_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 60 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 60 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_60_ycoordinate`'.format(value))
        self._data["Vertex 60 Y-coordinate"] = value

    @property
    def vertex_60_zcoordinate(self):
        """Get vertex_60_zcoordinate

        Returns:
            float: the value of `vertex_60_zcoordinate` or None if not set
        """
        return self._data["Vertex 60 Z-coordinate"]

    @vertex_60_zcoordinate.setter
    def vertex_60_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 60 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 60 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_60_zcoordinate`'.format(value))
        self._data["Vertex 60 Z-coordinate"] = value

    @property
    def vertex_61_xcoordinate(self):
        """Get vertex_61_xcoordinate

        Returns:
            float: the value of `vertex_61_xcoordinate` or None if not set
        """
        return self._data["Vertex 61 X-coordinate"]

    @vertex_61_xcoordinate.setter
    def vertex_61_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 61 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 61 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_61_xcoordinate`'.format(value))
        self._data["Vertex 61 X-coordinate"] = value

    @property
    def vertex_61_ycoordinate(self):
        """Get vertex_61_ycoordinate

        Returns:
            float: the value of `vertex_61_ycoordinate` or None if not set
        """
        return self._data["Vertex 61 Y-coordinate"]

    @vertex_61_ycoordinate.setter
    def vertex_61_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 61 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 61 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_61_ycoordinate`'.format(value))
        self._data["Vertex 61 Y-coordinate"] = value

    @property
    def vertex_61_zcoordinate(self):
        """Get vertex_61_zcoordinate

        Returns:
            float: the value of `vertex_61_zcoordinate` or None if not set
        """
        return self._data["Vertex 61 Z-coordinate"]

    @vertex_61_zcoordinate.setter
    def vertex_61_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 61 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 61 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_61_zcoordinate`'.format(value))
        self._data["Vertex 61 Z-coordinate"] = value

    @property
    def vertex_62_xcoordinate(self):
        """Get vertex_62_xcoordinate

        Returns:
            float: the value of `vertex_62_xcoordinate` or None if not set
        """
        return self._data["Vertex 62 X-coordinate"]

    @vertex_62_xcoordinate.setter
    def vertex_62_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 62 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 62 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_62_xcoordinate`'.format(value))
        self._data["Vertex 62 X-coordinate"] = value

    @property
    def vertex_62_ycoordinate(self):
        """Get vertex_62_ycoordinate

        Returns:
            float: the value of `vertex_62_ycoordinate` or None if not set
        """
        return self._data["Vertex 62 Y-coordinate"]

    @vertex_62_ycoordinate.setter
    def vertex_62_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 62 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 62 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_62_ycoordinate`'.format(value))
        self._data["Vertex 62 Y-coordinate"] = value

    @property
    def vertex_62_zcoordinate(self):
        """Get vertex_62_zcoordinate

        Returns:
            float: the value of `vertex_62_zcoordinate` or None if not set
        """
        return self._data["Vertex 62 Z-coordinate"]

    @vertex_62_zcoordinate.setter
    def vertex_62_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 62 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 62 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_62_zcoordinate`'.format(value))
        self._data["Vertex 62 Z-coordinate"] = value

    @property
    def vertex_63_xcoordinate(self):
        """Get vertex_63_xcoordinate

        Returns:
            float: the value of `vertex_63_xcoordinate` or None if not set
        """
        return self._data["Vertex 63 X-coordinate"]

    @vertex_63_xcoordinate.setter
    def vertex_63_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 63 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 63 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_63_xcoordinate`'.format(value))
        self._data["Vertex 63 X-coordinate"] = value

    @property
    def vertex_63_ycoordinate(self):
        """Get vertex_63_ycoordinate

        Returns:
            float: the value of `vertex_63_ycoordinate` or None if not set
        """
        return self._data["Vertex 63 Y-coordinate"]

    @vertex_63_ycoordinate.setter
    def vertex_63_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 63 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 63 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_63_ycoordinate`'.format(value))
        self._data["Vertex 63 Y-coordinate"] = value

    @property
    def vertex_63_zcoordinate(self):
        """Get vertex_63_zcoordinate

        Returns:
            float: the value of `vertex_63_zcoordinate` or None if not set
        """
        return self._data["Vertex 63 Z-coordinate"]

    @vertex_63_zcoordinate.setter
    def vertex_63_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 63 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 63 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_63_zcoordinate`'.format(value))
        self._data["Vertex 63 Z-coordinate"] = value

    @property
    def vertex_64_xcoordinate(self):
        """Get vertex_64_xcoordinate

        Returns:
            float: the value of `vertex_64_xcoordinate` or None if not set
        """
        return self._data["Vertex 64 X-coordinate"]

    @vertex_64_xcoordinate.setter
    def vertex_64_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 64 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 64 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_64_xcoordinate`'.format(value))
        self._data["Vertex 64 X-coordinate"] = value

    @property
    def vertex_64_ycoordinate(self):
        """Get vertex_64_ycoordinate

        Returns:
            float: the value of `vertex_64_ycoordinate` or None if not set
        """
        return self._data["Vertex 64 Y-coordinate"]

    @vertex_64_ycoordinate.setter
    def vertex_64_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 64 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 64 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_64_ycoordinate`'.format(value))
        self._data["Vertex 64 Y-coordinate"] = value

    @property
    def vertex_64_zcoordinate(self):
        """Get vertex_64_zcoordinate

        Returns:
            float: the value of `vertex_64_zcoordinate` or None if not set
        """
        return self._data["Vertex 64 Z-coordinate"]

    @vertex_64_zcoordinate.setter
    def vertex_64_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 64 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 64 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_64_zcoordinate`'.format(value))
        self._data["Vertex 64 Z-coordinate"] = value

    @property
    def vertex_65_xcoordinate(self):
        """Get vertex_65_xcoordinate

        Returns:
            float: the value of `vertex_65_xcoordinate` or None if not set
        """
        return self._data["Vertex 65 X-coordinate"]

    @vertex_65_xcoordinate.setter
    def vertex_65_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 65 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 65 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_65_xcoordinate`'.format(value))
        self._data["Vertex 65 X-coordinate"] = value

    @property
    def vertex_65_ycoordinate(self):
        """Get vertex_65_ycoordinate

        Returns:
            float: the value of `vertex_65_ycoordinate` or None if not set
        """
        return self._data["Vertex 65 Y-coordinate"]

    @vertex_65_ycoordinate.setter
    def vertex_65_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 65 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 65 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_65_ycoordinate`'.format(value))
        self._data["Vertex 65 Y-coordinate"] = value

    @property
    def vertex_65_zcoordinate(self):
        """Get vertex_65_zcoordinate

        Returns:
            float: the value of `vertex_65_zcoordinate` or None if not set
        """
        return self._data["Vertex 65 Z-coordinate"]

    @vertex_65_zcoordinate.setter
    def vertex_65_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 65 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 65 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_65_zcoordinate`'.format(value))
        self._data["Vertex 65 Z-coordinate"] = value

    @property
    def vertex_66_xcoordinate(self):
        """Get vertex_66_xcoordinate

        Returns:
            float: the value of `vertex_66_xcoordinate` or None if not set
        """
        return self._data["Vertex 66 X-coordinate"]

    @vertex_66_xcoordinate.setter
    def vertex_66_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 66 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 66 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_66_xcoordinate`'.format(value))
        self._data["Vertex 66 X-coordinate"] = value

    @property
    def vertex_66_ycoordinate(self):
        """Get vertex_66_ycoordinate

        Returns:
            float: the value of `vertex_66_ycoordinate` or None if not set
        """
        return self._data["Vertex 66 Y-coordinate"]

    @vertex_66_ycoordinate.setter
    def vertex_66_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 66 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 66 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_66_ycoordinate`'.format(value))
        self._data["Vertex 66 Y-coordinate"] = value

    @property
    def vertex_66_zcoordinate(self):
        """Get vertex_66_zcoordinate

        Returns:
            float: the value of `vertex_66_zcoordinate` or None if not set
        """
        return self._data["Vertex 66 Z-coordinate"]

    @vertex_66_zcoordinate.setter
    def vertex_66_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 66 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 66 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_66_zcoordinate`'.format(value))
        self._data["Vertex 66 Z-coordinate"] = value

    @property
    def vertex_67_xcoordinate(self):
        """Get vertex_67_xcoordinate

        Returns:
            float: the value of `vertex_67_xcoordinate` or None if not set
        """
        return self._data["Vertex 67 X-coordinate"]

    @vertex_67_xcoordinate.setter
    def vertex_67_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 67 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 67 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_67_xcoordinate`'.format(value))
        self._data["Vertex 67 X-coordinate"] = value

    @property
    def vertex_67_ycoordinate(self):
        """Get vertex_67_ycoordinate

        Returns:
            float: the value of `vertex_67_ycoordinate` or None if not set
        """
        return self._data["Vertex 67 Y-coordinate"]

    @vertex_67_ycoordinate.setter
    def vertex_67_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 67 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 67 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_67_ycoordinate`'.format(value))
        self._data["Vertex 67 Y-coordinate"] = value

    @property
    def vertex_67_zcoordinate(self):
        """Get vertex_67_zcoordinate

        Returns:
            float: the value of `vertex_67_zcoordinate` or None if not set
        """
        return self._data["Vertex 67 Z-coordinate"]

    @vertex_67_zcoordinate.setter
    def vertex_67_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 67 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 67 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_67_zcoordinate`'.format(value))
        self._data["Vertex 67 Z-coordinate"] = value

    @property
    def vertex_68_xcoordinate(self):
        """Get vertex_68_xcoordinate

        Returns:
            float: the value of `vertex_68_xcoordinate` or None if not set
        """
        return self._data["Vertex 68 X-coordinate"]

    @vertex_68_xcoordinate.setter
    def vertex_68_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 68 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 68 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_68_xcoordinate`'.format(value))
        self._data["Vertex 68 X-coordinate"] = value

    @property
    def vertex_68_ycoordinate(self):
        """Get vertex_68_ycoordinate

        Returns:
            float: the value of `vertex_68_ycoordinate` or None if not set
        """
        return self._data["Vertex 68 Y-coordinate"]

    @vertex_68_ycoordinate.setter
    def vertex_68_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 68 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 68 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_68_ycoordinate`'.format(value))
        self._data["Vertex 68 Y-coordinate"] = value

    @property
    def vertex_68_zcoordinate(self):
        """Get vertex_68_zcoordinate

        Returns:
            float: the value of `vertex_68_zcoordinate` or None if not set
        """
        return self._data["Vertex 68 Z-coordinate"]

    @vertex_68_zcoordinate.setter
    def vertex_68_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 68 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 68 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_68_zcoordinate`'.format(value))
        self._data["Vertex 68 Z-coordinate"] = value

    @property
    def vertex_69_xcoordinate(self):
        """Get vertex_69_xcoordinate

        Returns:
            float: the value of `vertex_69_xcoordinate` or None if not set
        """
        return self._data["Vertex 69 X-coordinate"]

    @vertex_69_xcoordinate.setter
    def vertex_69_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 69 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 69 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_69_xcoordinate`'.format(value))
        self._data["Vertex 69 X-coordinate"] = value

    @property
    def vertex_69_ycoordinate(self):
        """Get vertex_69_ycoordinate

        Returns:
            float: the value of `vertex_69_ycoordinate` or None if not set
        """
        return self._data["Vertex 69 Y-coordinate"]

    @vertex_69_ycoordinate.setter
    def vertex_69_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 69 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 69 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_69_ycoordinate`'.format(value))
        self._data["Vertex 69 Y-coordinate"] = value

    @property
    def vertex_69_zcoordinate(self):
        """Get vertex_69_zcoordinate

        Returns:
            float: the value of `vertex_69_zcoordinate` or None if not set
        """
        return self._data["Vertex 69 Z-coordinate"]

    @vertex_69_zcoordinate.setter
    def vertex_69_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 69 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 69 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_69_zcoordinate`'.format(value))
        self._data["Vertex 69 Z-coordinate"] = value

    @property
    def vertex_70_xcoordinate(self):
        """Get vertex_70_xcoordinate

        Returns:
            float: the value of `vertex_70_xcoordinate` or None if not set
        """
        return self._data["Vertex 70 X-coordinate"]

    @vertex_70_xcoordinate.setter
    def vertex_70_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 70 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 70 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_70_xcoordinate`'.format(value))
        self._data["Vertex 70 X-coordinate"] = value

    @property
    def vertex_70_ycoordinate(self):
        """Get vertex_70_ycoordinate

        Returns:
            float: the value of `vertex_70_ycoordinate` or None if not set
        """
        return self._data["Vertex 70 Y-coordinate"]

    @vertex_70_ycoordinate.setter
    def vertex_70_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 70 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 70 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_70_ycoordinate`'.format(value))
        self._data["Vertex 70 Y-coordinate"] = value

    @property
    def vertex_70_zcoordinate(self):
        """Get vertex_70_zcoordinate

        Returns:
            float: the value of `vertex_70_zcoordinate` or None if not set
        """
        return self._data["Vertex 70 Z-coordinate"]

    @vertex_70_zcoordinate.setter
    def vertex_70_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 70 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 70 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_70_zcoordinate`'.format(value))
        self._data["Vertex 70 Z-coordinate"] = value

    @property
    def vertex_71_xcoordinate(self):
        """Get vertex_71_xcoordinate

        Returns:
            float: the value of `vertex_71_xcoordinate` or None if not set
        """
        return self._data["Vertex 71 X-coordinate"]

    @vertex_71_xcoordinate.setter
    def vertex_71_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 71 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 71 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_71_xcoordinate`'.format(value))
        self._data["Vertex 71 X-coordinate"] = value

    @property
    def vertex_71_ycoordinate(self):
        """Get vertex_71_ycoordinate

        Returns:
            float: the value of `vertex_71_ycoordinate` or None if not set
        """
        return self._data["Vertex 71 Y-coordinate"]

    @vertex_71_ycoordinate.setter
    def vertex_71_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 71 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 71 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_71_ycoordinate`'.format(value))
        self._data["Vertex 71 Y-coordinate"] = value

    @property
    def vertex_71_zcoordinate(self):
        """Get vertex_71_zcoordinate

        Returns:
            float: the value of `vertex_71_zcoordinate` or None if not set
        """
        return self._data["Vertex 71 Z-coordinate"]

    @vertex_71_zcoordinate.setter
    def vertex_71_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 71 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 71 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_71_zcoordinate`'.format(value))
        self._data["Vertex 71 Z-coordinate"] = value

    @property
    def vertex_72_xcoordinate(self):
        """Get vertex_72_xcoordinate

        Returns:
            float: the value of `vertex_72_xcoordinate` or None if not set
        """
        return self._data["Vertex 72 X-coordinate"]

    @vertex_72_xcoordinate.setter
    def vertex_72_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 72 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 72 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_72_xcoordinate`'.format(value))
        self._data["Vertex 72 X-coordinate"] = value

    @property
    def vertex_72_ycoordinate(self):
        """Get vertex_72_ycoordinate

        Returns:
            float: the value of `vertex_72_ycoordinate` or None if not set
        """
        return self._data["Vertex 72 Y-coordinate"]

    @vertex_72_ycoordinate.setter
    def vertex_72_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 72 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 72 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_72_ycoordinate`'.format(value))
        self._data["Vertex 72 Y-coordinate"] = value

    @property
    def vertex_72_zcoordinate(self):
        """Get vertex_72_zcoordinate

        Returns:
            float: the value of `vertex_72_zcoordinate` or None if not set
        """
        return self._data["Vertex 72 Z-coordinate"]

    @vertex_72_zcoordinate.setter
    def vertex_72_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 72 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 72 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_72_zcoordinate`'.format(value))
        self._data["Vertex 72 Z-coordinate"] = value

    @property
    def vertex_73_xcoordinate(self):
        """Get vertex_73_xcoordinate

        Returns:
            float: the value of `vertex_73_xcoordinate` or None if not set
        """
        return self._data["Vertex 73 X-coordinate"]

    @vertex_73_xcoordinate.setter
    def vertex_73_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 73 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 73 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_73_xcoordinate`'.format(value))
        self._data["Vertex 73 X-coordinate"] = value

    @property
    def vertex_73_ycoordinate(self):
        """Get vertex_73_ycoordinate

        Returns:
            float: the value of `vertex_73_ycoordinate` or None if not set
        """
        return self._data["Vertex 73 Y-coordinate"]

    @vertex_73_ycoordinate.setter
    def vertex_73_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 73 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 73 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_73_ycoordinate`'.format(value))
        self._data["Vertex 73 Y-coordinate"] = value

    @property
    def vertex_73_zcoordinate(self):
        """Get vertex_73_zcoordinate

        Returns:
            float: the value of `vertex_73_zcoordinate` or None if not set
        """
        return self._data["Vertex 73 Z-coordinate"]

    @vertex_73_zcoordinate.setter
    def vertex_73_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 73 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 73 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_73_zcoordinate`'.format(value))
        self._data["Vertex 73 Z-coordinate"] = value

    @property
    def vertex_74_xcoordinate(self):
        """Get vertex_74_xcoordinate

        Returns:
            float: the value of `vertex_74_xcoordinate` or None if not set
        """
        return self._data["Vertex 74 X-coordinate"]

    @vertex_74_xcoordinate.setter
    def vertex_74_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 74 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 74 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_74_xcoordinate`'.format(value))
        self._data["Vertex 74 X-coordinate"] = value

    @property
    def vertex_74_ycoordinate(self):
        """Get vertex_74_ycoordinate

        Returns:
            float: the value of `vertex_74_ycoordinate` or None if not set
        """
        return self._data["Vertex 74 Y-coordinate"]

    @vertex_74_ycoordinate.setter
    def vertex_74_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 74 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 74 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_74_ycoordinate`'.format(value))
        self._data["Vertex 74 Y-coordinate"] = value

    @property
    def vertex_74_zcoordinate(self):
        """Get vertex_74_zcoordinate

        Returns:
            float: the value of `vertex_74_zcoordinate` or None if not set
        """
        return self._data["Vertex 74 Z-coordinate"]

    @vertex_74_zcoordinate.setter
    def vertex_74_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 74 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 74 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_74_zcoordinate`'.format(value))
        self._data["Vertex 74 Z-coordinate"] = value

    @property
    def vertex_75_xcoordinate(self):
        """Get vertex_75_xcoordinate

        Returns:
            float: the value of `vertex_75_xcoordinate` or None if not set
        """
        return self._data["Vertex 75 X-coordinate"]

    @vertex_75_xcoordinate.setter
    def vertex_75_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 75 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 75 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_75_xcoordinate`'.format(value))
        self._data["Vertex 75 X-coordinate"] = value

    @property
    def vertex_75_ycoordinate(self):
        """Get vertex_75_ycoordinate

        Returns:
            float: the value of `vertex_75_ycoordinate` or None if not set
        """
        return self._data["Vertex 75 Y-coordinate"]

    @vertex_75_ycoordinate.setter
    def vertex_75_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 75 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 75 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_75_ycoordinate`'.format(value))
        self._data["Vertex 75 Y-coordinate"] = value

    @property
    def vertex_75_zcoordinate(self):
        """Get vertex_75_zcoordinate

        Returns:
            float: the value of `vertex_75_zcoordinate` or None if not set
        """
        return self._data["Vertex 75 Z-coordinate"]

    @vertex_75_zcoordinate.setter
    def vertex_75_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 75 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 75 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_75_zcoordinate`'.format(value))
        self._data["Vertex 75 Z-coordinate"] = value

    @property
    def vertex_76_xcoordinate(self):
        """Get vertex_76_xcoordinate

        Returns:
            float: the value of `vertex_76_xcoordinate` or None if not set
        """
        return self._data["Vertex 76 X-coordinate"]

    @vertex_76_xcoordinate.setter
    def vertex_76_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 76 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 76 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_76_xcoordinate`'.format(value))
        self._data["Vertex 76 X-coordinate"] = value

    @property
    def vertex_76_ycoordinate(self):
        """Get vertex_76_ycoordinate

        Returns:
            float: the value of `vertex_76_ycoordinate` or None if not set
        """
        return self._data["Vertex 76 Y-coordinate"]

    @vertex_76_ycoordinate.setter
    def vertex_76_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 76 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 76 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_76_ycoordinate`'.format(value))
        self._data["Vertex 76 Y-coordinate"] = value

    @property
    def vertex_76_zcoordinate(self):
        """Get vertex_76_zcoordinate

        Returns:
            float: the value of `vertex_76_zcoordinate` or None if not set
        """
        return self._data["Vertex 76 Z-coordinate"]

    @vertex_76_zcoordinate.setter
    def vertex_76_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 76 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 76 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_76_zcoordinate`'.format(value))
        self._data["Vertex 76 Z-coordinate"] = value

    @property
    def vertex_77_xcoordinate(self):
        """Get vertex_77_xcoordinate

        Returns:
            float: the value of `vertex_77_xcoordinate` or None if not set
        """
        return self._data["Vertex 77 X-coordinate"]

    @vertex_77_xcoordinate.setter
    def vertex_77_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 77 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 77 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_77_xcoordinate`'.format(value))
        self._data["Vertex 77 X-coordinate"] = value

    @property
    def vertex_77_ycoordinate(self):
        """Get vertex_77_ycoordinate

        Returns:
            float: the value of `vertex_77_ycoordinate` or None if not set
        """
        return self._data["Vertex 77 Y-coordinate"]

    @vertex_77_ycoordinate.setter
    def vertex_77_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 77 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 77 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_77_ycoordinate`'.format(value))
        self._data["Vertex 77 Y-coordinate"] = value

    @property
    def vertex_77_zcoordinate(self):
        """Get vertex_77_zcoordinate

        Returns:
            float: the value of `vertex_77_zcoordinate` or None if not set
        """
        return self._data["Vertex 77 Z-coordinate"]

    @vertex_77_zcoordinate.setter
    def vertex_77_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 77 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 77 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_77_zcoordinate`'.format(value))
        self._data["Vertex 77 Z-coordinate"] = value

    @property
    def vertex_78_xcoordinate(self):
        """Get vertex_78_xcoordinate

        Returns:
            float: the value of `vertex_78_xcoordinate` or None if not set
        """
        return self._data["Vertex 78 X-coordinate"]

    @vertex_78_xcoordinate.setter
    def vertex_78_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 78 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 78 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_78_xcoordinate`'.format(value))
        self._data["Vertex 78 X-coordinate"] = value

    @property
    def vertex_78_ycoordinate(self):
        """Get vertex_78_ycoordinate

        Returns:
            float: the value of `vertex_78_ycoordinate` or None if not set
        """
        return self._data["Vertex 78 Y-coordinate"]

    @vertex_78_ycoordinate.setter
    def vertex_78_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 78 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 78 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_78_ycoordinate`'.format(value))
        self._data["Vertex 78 Y-coordinate"] = value

    @property
    def vertex_78_zcoordinate(self):
        """Get vertex_78_zcoordinate

        Returns:
            float: the value of `vertex_78_zcoordinate` or None if not set
        """
        return self._data["Vertex 78 Z-coordinate"]

    @vertex_78_zcoordinate.setter
    def vertex_78_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 78 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 78 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_78_zcoordinate`'.format(value))
        self._data["Vertex 78 Z-coordinate"] = value

    @property
    def vertex_79_xcoordinate(self):
        """Get vertex_79_xcoordinate

        Returns:
            float: the value of `vertex_79_xcoordinate` or None if not set
        """
        return self._data["Vertex 79 X-coordinate"]

    @vertex_79_xcoordinate.setter
    def vertex_79_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 79 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 79 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_79_xcoordinate`'.format(value))
        self._data["Vertex 79 X-coordinate"] = value

    @property
    def vertex_79_ycoordinate(self):
        """Get vertex_79_ycoordinate

        Returns:
            float: the value of `vertex_79_ycoordinate` or None if not set
        """
        return self._data["Vertex 79 Y-coordinate"]

    @vertex_79_ycoordinate.setter
    def vertex_79_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 79 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 79 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_79_ycoordinate`'.format(value))
        self._data["Vertex 79 Y-coordinate"] = value

    @property
    def vertex_79_zcoordinate(self):
        """Get vertex_79_zcoordinate

        Returns:
            float: the value of `vertex_79_zcoordinate` or None if not set
        """
        return self._data["Vertex 79 Z-coordinate"]

    @vertex_79_zcoordinate.setter
    def vertex_79_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 79 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 79 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_79_zcoordinate`'.format(value))
        self._data["Vertex 79 Z-coordinate"] = value

    @property
    def vertex_80_xcoordinate(self):
        """Get vertex_80_xcoordinate

        Returns:
            float: the value of `vertex_80_xcoordinate` or None if not set
        """
        return self._data["Vertex 80 X-coordinate"]

    @vertex_80_xcoordinate.setter
    def vertex_80_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 80 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 80 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_80_xcoordinate`'.format(value))
        self._data["Vertex 80 X-coordinate"] = value

    @property
    def vertex_80_ycoordinate(self):
        """Get vertex_80_ycoordinate

        Returns:
            float: the value of `vertex_80_ycoordinate` or None if not set
        """
        return self._data["Vertex 80 Y-coordinate"]

    @vertex_80_ycoordinate.setter
    def vertex_80_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 80 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 80 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_80_ycoordinate`'.format(value))
        self._data["Vertex 80 Y-coordinate"] = value

    @property
    def vertex_80_zcoordinate(self):
        """Get vertex_80_zcoordinate

        Returns:
            float: the value of `vertex_80_zcoordinate` or None if not set
        """
        return self._data["Vertex 80 Z-coordinate"]

    @vertex_80_zcoordinate.setter
    def vertex_80_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 80 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 80 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_80_zcoordinate`'.format(value))
        self._data["Vertex 80 Z-coordinate"] = value

    @property
    def vertex_81_xcoordinate(self):
        """Get vertex_81_xcoordinate

        Returns:
            float: the value of `vertex_81_xcoordinate` or None if not set
        """
        return self._data["Vertex 81 X-coordinate"]

    @vertex_81_xcoordinate.setter
    def vertex_81_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 81 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 81 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_81_xcoordinate`'.format(value))
        self._data["Vertex 81 X-coordinate"] = value

    @property
    def vertex_81_ycoordinate(self):
        """Get vertex_81_ycoordinate

        Returns:
            float: the value of `vertex_81_ycoordinate` or None if not set
        """
        return self._data["Vertex 81 Y-coordinate"]

    @vertex_81_ycoordinate.setter
    def vertex_81_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 81 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 81 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_81_ycoordinate`'.format(value))
        self._data["Vertex 81 Y-coordinate"] = value

    @property
    def vertex_81_zcoordinate(self):
        """Get vertex_81_zcoordinate

        Returns:
            float: the value of `vertex_81_zcoordinate` or None if not set
        """
        return self._data["Vertex 81 Z-coordinate"]

    @vertex_81_zcoordinate.setter
    def vertex_81_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 81 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 81 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_81_zcoordinate`'.format(value))
        self._data["Vertex 81 Z-coordinate"] = value

    @property
    def vertex_82_xcoordinate(self):
        """Get vertex_82_xcoordinate

        Returns:
            float: the value of `vertex_82_xcoordinate` or None if not set
        """
        return self._data["Vertex 82 X-coordinate"]

    @vertex_82_xcoordinate.setter
    def vertex_82_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 82 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 82 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_82_xcoordinate`'.format(value))
        self._data["Vertex 82 X-coordinate"] = value

    @property
    def vertex_82_ycoordinate(self):
        """Get vertex_82_ycoordinate

        Returns:
            float: the value of `vertex_82_ycoordinate` or None if not set
        """
        return self._data["Vertex 82 Y-coordinate"]

    @vertex_82_ycoordinate.setter
    def vertex_82_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 82 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 82 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_82_ycoordinate`'.format(value))
        self._data["Vertex 82 Y-coordinate"] = value

    @property
    def vertex_82_zcoordinate(self):
        """Get vertex_82_zcoordinate

        Returns:
            float: the value of `vertex_82_zcoordinate` or None if not set
        """
        return self._data["Vertex 82 Z-coordinate"]

    @vertex_82_zcoordinate.setter
    def vertex_82_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 82 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 82 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_82_zcoordinate`'.format(value))
        self._data["Vertex 82 Z-coordinate"] = value

    @property
    def vertex_83_xcoordinate(self):
        """Get vertex_83_xcoordinate

        Returns:
            float: the value of `vertex_83_xcoordinate` or None if not set
        """
        return self._data["Vertex 83 X-coordinate"]

    @vertex_83_xcoordinate.setter
    def vertex_83_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 83 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 83 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_83_xcoordinate`'.format(value))
        self._data["Vertex 83 X-coordinate"] = value

    @property
    def vertex_83_ycoordinate(self):
        """Get vertex_83_ycoordinate

        Returns:
            float: the value of `vertex_83_ycoordinate` or None if not set
        """
        return self._data["Vertex 83 Y-coordinate"]

    @vertex_83_ycoordinate.setter
    def vertex_83_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 83 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 83 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_83_ycoordinate`'.format(value))
        self._data["Vertex 83 Y-coordinate"] = value

    @property
    def vertex_83_zcoordinate(self):
        """Get vertex_83_zcoordinate

        Returns:
            float: the value of `vertex_83_zcoordinate` or None if not set
        """
        return self._data["Vertex 83 Z-coordinate"]

    @vertex_83_zcoordinate.setter
    def vertex_83_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 83 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 83 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_83_zcoordinate`'.format(value))
        self._data["Vertex 83 Z-coordinate"] = value

    @property
    def vertex_84_xcoordinate(self):
        """Get vertex_84_xcoordinate

        Returns:
            float: the value of `vertex_84_xcoordinate` or None if not set
        """
        return self._data["Vertex 84 X-coordinate"]

    @vertex_84_xcoordinate.setter
    def vertex_84_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 84 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 84 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_84_xcoordinate`'.format(value))
        self._data["Vertex 84 X-coordinate"] = value

    @property
    def vertex_84_ycoordinate(self):
        """Get vertex_84_ycoordinate

        Returns:
            float: the value of `vertex_84_ycoordinate` or None if not set
        """
        return self._data["Vertex 84 Y-coordinate"]

    @vertex_84_ycoordinate.setter
    def vertex_84_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 84 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 84 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_84_ycoordinate`'.format(value))
        self._data["Vertex 84 Y-coordinate"] = value

    @property
    def vertex_84_zcoordinate(self):
        """Get vertex_84_zcoordinate

        Returns:
            float: the value of `vertex_84_zcoordinate` or None if not set
        """
        return self._data["Vertex 84 Z-coordinate"]

    @vertex_84_zcoordinate.setter
    def vertex_84_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 84 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 84 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_84_zcoordinate`'.format(value))
        self._data["Vertex 84 Z-coordinate"] = value

    @property
    def vertex_85_xcoordinate(self):
        """Get vertex_85_xcoordinate

        Returns:
            float: the value of `vertex_85_xcoordinate` or None if not set
        """
        return self._data["Vertex 85 X-coordinate"]

    @vertex_85_xcoordinate.setter
    def vertex_85_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 85 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 85 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_85_xcoordinate`'.format(value))
        self._data["Vertex 85 X-coordinate"] = value

    @property
    def vertex_85_ycoordinate(self):
        """Get vertex_85_ycoordinate

        Returns:
            float: the value of `vertex_85_ycoordinate` or None if not set
        """
        return self._data["Vertex 85 Y-coordinate"]

    @vertex_85_ycoordinate.setter
    def vertex_85_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 85 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 85 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_85_ycoordinate`'.format(value))
        self._data["Vertex 85 Y-coordinate"] = value

    @property
    def vertex_85_zcoordinate(self):
        """Get vertex_85_zcoordinate

        Returns:
            float: the value of `vertex_85_zcoordinate` or None if not set
        """
        return self._data["Vertex 85 Z-coordinate"]

    @vertex_85_zcoordinate.setter
    def vertex_85_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 85 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 85 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_85_zcoordinate`'.format(value))
        self._data["Vertex 85 Z-coordinate"] = value

    @property
    def vertex_86_xcoordinate(self):
        """Get vertex_86_xcoordinate

        Returns:
            float: the value of `vertex_86_xcoordinate` or None if not set
        """
        return self._data["Vertex 86 X-coordinate"]

    @vertex_86_xcoordinate.setter
    def vertex_86_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 86 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 86 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_86_xcoordinate`'.format(value))
        self._data["Vertex 86 X-coordinate"] = value

    @property
    def vertex_86_ycoordinate(self):
        """Get vertex_86_ycoordinate

        Returns:
            float: the value of `vertex_86_ycoordinate` or None if not set
        """
        return self._data["Vertex 86 Y-coordinate"]

    @vertex_86_ycoordinate.setter
    def vertex_86_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 86 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 86 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_86_ycoordinate`'.format(value))
        self._data["Vertex 86 Y-coordinate"] = value

    @property
    def vertex_86_zcoordinate(self):
        """Get vertex_86_zcoordinate

        Returns:
            float: the value of `vertex_86_zcoordinate` or None if not set
        """
        return self._data["Vertex 86 Z-coordinate"]

    @vertex_86_zcoordinate.setter
    def vertex_86_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 86 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 86 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_86_zcoordinate`'.format(value))
        self._data["Vertex 86 Z-coordinate"] = value

    @property
    def vertex_87_xcoordinate(self):
        """Get vertex_87_xcoordinate

        Returns:
            float: the value of `vertex_87_xcoordinate` or None if not set
        """
        return self._data["Vertex 87 X-coordinate"]

    @vertex_87_xcoordinate.setter
    def vertex_87_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 87 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 87 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_87_xcoordinate`'.format(value))
        self._data["Vertex 87 X-coordinate"] = value

    @property
    def vertex_87_ycoordinate(self):
        """Get vertex_87_ycoordinate

        Returns:
            float: the value of `vertex_87_ycoordinate` or None if not set
        """
        return self._data["Vertex 87 Y-coordinate"]

    @vertex_87_ycoordinate.setter
    def vertex_87_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 87 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 87 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_87_ycoordinate`'.format(value))
        self._data["Vertex 87 Y-coordinate"] = value

    @property
    def vertex_87_zcoordinate(self):
        """Get vertex_87_zcoordinate

        Returns:
            float: the value of `vertex_87_zcoordinate` or None if not set
        """
        return self._data["Vertex 87 Z-coordinate"]

    @vertex_87_zcoordinate.setter
    def vertex_87_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 87 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 87 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_87_zcoordinate`'.format(value))
        self._data["Vertex 87 Z-coordinate"] = value

    @property
    def vertex_88_xcoordinate(self):
        """Get vertex_88_xcoordinate

        Returns:
            float: the value of `vertex_88_xcoordinate` or None if not set
        """
        return self._data["Vertex 88 X-coordinate"]

    @vertex_88_xcoordinate.setter
    def vertex_88_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 88 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 88 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_88_xcoordinate`'.format(value))
        self._data["Vertex 88 X-coordinate"] = value

    @property
    def vertex_88_ycoordinate(self):
        """Get vertex_88_ycoordinate

        Returns:
            float: the value of `vertex_88_ycoordinate` or None if not set
        """
        return self._data["Vertex 88 Y-coordinate"]

    @vertex_88_ycoordinate.setter
    def vertex_88_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 88 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 88 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_88_ycoordinate`'.format(value))
        self._data["Vertex 88 Y-coordinate"] = value

    @property
    def vertex_88_zcoordinate(self):
        """Get vertex_88_zcoordinate

        Returns:
            float: the value of `vertex_88_zcoordinate` or None if not set
        """
        return self._data["Vertex 88 Z-coordinate"]

    @vertex_88_zcoordinate.setter
    def vertex_88_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 88 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 88 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_88_zcoordinate`'.format(value))
        self._data["Vertex 88 Z-coordinate"] = value

    @property
    def vertex_89_xcoordinate(self):
        """Get vertex_89_xcoordinate

        Returns:
            float: the value of `vertex_89_xcoordinate` or None if not set
        """
        return self._data["Vertex 89 X-coordinate"]

    @vertex_89_xcoordinate.setter
    def vertex_89_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 89 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 89 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_89_xcoordinate`'.format(value))
        self._data["Vertex 89 X-coordinate"] = value

    @property
    def vertex_89_ycoordinate(self):
        """Get vertex_89_ycoordinate

        Returns:
            float: the value of `vertex_89_ycoordinate` or None if not set
        """
        return self._data["Vertex 89 Y-coordinate"]

    @vertex_89_ycoordinate.setter
    def vertex_89_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 89 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 89 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_89_ycoordinate`'.format(value))
        self._data["Vertex 89 Y-coordinate"] = value

    @property
    def vertex_89_zcoordinate(self):
        """Get vertex_89_zcoordinate

        Returns:
            float: the value of `vertex_89_zcoordinate` or None if not set
        """
        return self._data["Vertex 89 Z-coordinate"]

    @vertex_89_zcoordinate.setter
    def vertex_89_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 89 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 89 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_89_zcoordinate`'.format(value))
        self._data["Vertex 89 Z-coordinate"] = value

    @property
    def vertex_90_xcoordinate(self):
        """Get vertex_90_xcoordinate

        Returns:
            float: the value of `vertex_90_xcoordinate` or None if not set
        """
        return self._data["Vertex 90 X-coordinate"]

    @vertex_90_xcoordinate.setter
    def vertex_90_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 90 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 90 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_90_xcoordinate`'.format(value))
        self._data["Vertex 90 X-coordinate"] = value

    @property
    def vertex_90_ycoordinate(self):
        """Get vertex_90_ycoordinate

        Returns:
            float: the value of `vertex_90_ycoordinate` or None if not set
        """
        return self._data["Vertex 90 Y-coordinate"]

    @vertex_90_ycoordinate.setter
    def vertex_90_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 90 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 90 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_90_ycoordinate`'.format(value))
        self._data["Vertex 90 Y-coordinate"] = value

    @property
    def vertex_90_zcoordinate(self):
        """Get vertex_90_zcoordinate

        Returns:
            float: the value of `vertex_90_zcoordinate` or None if not set
        """
        return self._data["Vertex 90 Z-coordinate"]

    @vertex_90_zcoordinate.setter
    def vertex_90_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 90 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 90 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_90_zcoordinate`'.format(value))
        self._data["Vertex 90 Z-coordinate"] = value

    @property
    def vertex_91_xcoordinate(self):
        """Get vertex_91_xcoordinate

        Returns:
            float: the value of `vertex_91_xcoordinate` or None if not set
        """
        return self._data["Vertex 91 X-coordinate"]

    @vertex_91_xcoordinate.setter
    def vertex_91_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 91 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 91 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_91_xcoordinate`'.format(value))
        self._data["Vertex 91 X-coordinate"] = value

    @property
    def vertex_91_ycoordinate(self):
        """Get vertex_91_ycoordinate

        Returns:
            float: the value of `vertex_91_ycoordinate` or None if not set
        """
        return self._data["Vertex 91 Y-coordinate"]

    @vertex_91_ycoordinate.setter
    def vertex_91_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 91 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 91 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_91_ycoordinate`'.format(value))
        self._data["Vertex 91 Y-coordinate"] = value

    @property
    def vertex_91_zcoordinate(self):
        """Get vertex_91_zcoordinate

        Returns:
            float: the value of `vertex_91_zcoordinate` or None if not set
        """
        return self._data["Vertex 91 Z-coordinate"]

    @vertex_91_zcoordinate.setter
    def vertex_91_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 91 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 91 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_91_zcoordinate`'.format(value))
        self._data["Vertex 91 Z-coordinate"] = value

    @property
    def vertex_92_xcoordinate(self):
        """Get vertex_92_xcoordinate

        Returns:
            float: the value of `vertex_92_xcoordinate` or None if not set
        """
        return self._data["Vertex 92 X-coordinate"]

    @vertex_92_xcoordinate.setter
    def vertex_92_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 92 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 92 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_92_xcoordinate`'.format(value))
        self._data["Vertex 92 X-coordinate"] = value

    @property
    def vertex_92_ycoordinate(self):
        """Get vertex_92_ycoordinate

        Returns:
            float: the value of `vertex_92_ycoordinate` or None if not set
        """
        return self._data["Vertex 92 Y-coordinate"]

    @vertex_92_ycoordinate.setter
    def vertex_92_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 92 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 92 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_92_ycoordinate`'.format(value))
        self._data["Vertex 92 Y-coordinate"] = value

    @property
    def vertex_92_zcoordinate(self):
        """Get vertex_92_zcoordinate

        Returns:
            float: the value of `vertex_92_zcoordinate` or None if not set
        """
        return self._data["Vertex 92 Z-coordinate"]

    @vertex_92_zcoordinate.setter
    def vertex_92_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 92 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 92 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_92_zcoordinate`'.format(value))
        self._data["Vertex 92 Z-coordinate"] = value

    @property
    def vertex_93_xcoordinate(self):
        """Get vertex_93_xcoordinate

        Returns:
            float: the value of `vertex_93_xcoordinate` or None if not set
        """
        return self._data["Vertex 93 X-coordinate"]

    @vertex_93_xcoordinate.setter
    def vertex_93_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 93 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 93 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_93_xcoordinate`'.format(value))
        self._data["Vertex 93 X-coordinate"] = value

    @property
    def vertex_93_ycoordinate(self):
        """Get vertex_93_ycoordinate

        Returns:
            float: the value of `vertex_93_ycoordinate` or None if not set
        """
        return self._data["Vertex 93 Y-coordinate"]

    @vertex_93_ycoordinate.setter
    def vertex_93_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 93 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 93 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_93_ycoordinate`'.format(value))
        self._data["Vertex 93 Y-coordinate"] = value

    @property
    def vertex_93_zcoordinate(self):
        """Get vertex_93_zcoordinate

        Returns:
            float: the value of `vertex_93_zcoordinate` or None if not set
        """
        return self._data["Vertex 93 Z-coordinate"]

    @vertex_93_zcoordinate.setter
    def vertex_93_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 93 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 93 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_93_zcoordinate`'.format(value))
        self._data["Vertex 93 Z-coordinate"] = value

    @property
    def vertex_94_xcoordinate(self):
        """Get vertex_94_xcoordinate

        Returns:
            float: the value of `vertex_94_xcoordinate` or None if not set
        """
        return self._data["Vertex 94 X-coordinate"]

    @vertex_94_xcoordinate.setter
    def vertex_94_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 94 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 94 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_94_xcoordinate`'.format(value))
        self._data["Vertex 94 X-coordinate"] = value

    @property
    def vertex_94_ycoordinate(self):
        """Get vertex_94_ycoordinate

        Returns:
            float: the value of `vertex_94_ycoordinate` or None if not set
        """
        return self._data["Vertex 94 Y-coordinate"]

    @vertex_94_ycoordinate.setter
    def vertex_94_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 94 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 94 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_94_ycoordinate`'.format(value))
        self._data["Vertex 94 Y-coordinate"] = value

    @property
    def vertex_94_zcoordinate(self):
        """Get vertex_94_zcoordinate

        Returns:
            float: the value of `vertex_94_zcoordinate` or None if not set
        """
        return self._data["Vertex 94 Z-coordinate"]

    @vertex_94_zcoordinate.setter
    def vertex_94_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 94 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 94 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_94_zcoordinate`'.format(value))
        self._data["Vertex 94 Z-coordinate"] = value

    @property
    def vertex_95_xcoordinate(self):
        """Get vertex_95_xcoordinate

        Returns:
            float: the value of `vertex_95_xcoordinate` or None if not set
        """
        return self._data["Vertex 95 X-coordinate"]

    @vertex_95_xcoordinate.setter
    def vertex_95_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 95 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 95 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_95_xcoordinate`'.format(value))
        self._data["Vertex 95 X-coordinate"] = value

    @property
    def vertex_95_ycoordinate(self):
        """Get vertex_95_ycoordinate

        Returns:
            float: the value of `vertex_95_ycoordinate` or None if not set
        """
        return self._data["Vertex 95 Y-coordinate"]

    @vertex_95_ycoordinate.setter
    def vertex_95_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 95 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 95 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_95_ycoordinate`'.format(value))
        self._data["Vertex 95 Y-coordinate"] = value

    @property
    def vertex_95_zcoordinate(self):
        """Get vertex_95_zcoordinate

        Returns:
            float: the value of `vertex_95_zcoordinate` or None if not set
        """
        return self._data["Vertex 95 Z-coordinate"]

    @vertex_95_zcoordinate.setter
    def vertex_95_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 95 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 95 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_95_zcoordinate`'.format(value))
        self._data["Vertex 95 Z-coordinate"] = value

    @property
    def vertex_96_xcoordinate(self):
        """Get vertex_96_xcoordinate

        Returns:
            float: the value of `vertex_96_xcoordinate` or None if not set
        """
        return self._data["Vertex 96 X-coordinate"]

    @vertex_96_xcoordinate.setter
    def vertex_96_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 96 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 96 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_96_xcoordinate`'.format(value))
        self._data["Vertex 96 X-coordinate"] = value

    @property
    def vertex_96_ycoordinate(self):
        """Get vertex_96_ycoordinate

        Returns:
            float: the value of `vertex_96_ycoordinate` or None if not set
        """
        return self._data["Vertex 96 Y-coordinate"]

    @vertex_96_ycoordinate.setter
    def vertex_96_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 96 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 96 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_96_ycoordinate`'.format(value))
        self._data["Vertex 96 Y-coordinate"] = value

    @property
    def vertex_96_zcoordinate(self):
        """Get vertex_96_zcoordinate

        Returns:
            float: the value of `vertex_96_zcoordinate` or None if not set
        """
        return self._data["Vertex 96 Z-coordinate"]

    @vertex_96_zcoordinate.setter
    def vertex_96_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 96 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 96 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_96_zcoordinate`'.format(value))
        self._data["Vertex 96 Z-coordinate"] = value

    @property
    def vertex_97_xcoordinate(self):
        """Get vertex_97_xcoordinate

        Returns:
            float: the value of `vertex_97_xcoordinate` or None if not set
        """
        return self._data["Vertex 97 X-coordinate"]

    @vertex_97_xcoordinate.setter
    def vertex_97_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 97 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 97 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_97_xcoordinate`'.format(value))
        self._data["Vertex 97 X-coordinate"] = value

    @property
    def vertex_97_ycoordinate(self):
        """Get vertex_97_ycoordinate

        Returns:
            float: the value of `vertex_97_ycoordinate` or None if not set
        """
        return self._data["Vertex 97 Y-coordinate"]

    @vertex_97_ycoordinate.setter
    def vertex_97_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 97 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 97 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_97_ycoordinate`'.format(value))
        self._data["Vertex 97 Y-coordinate"] = value

    @property
    def vertex_97_zcoordinate(self):
        """Get vertex_97_zcoordinate

        Returns:
            float: the value of `vertex_97_zcoordinate` or None if not set
        """
        return self._data["Vertex 97 Z-coordinate"]

    @vertex_97_zcoordinate.setter
    def vertex_97_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 97 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 97 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_97_zcoordinate`'.format(value))
        self._data["Vertex 97 Z-coordinate"] = value

    @property
    def vertex_98_xcoordinate(self):
        """Get vertex_98_xcoordinate

        Returns:
            float: the value of `vertex_98_xcoordinate` or None if not set
        """
        return self._data["Vertex 98 X-coordinate"]

    @vertex_98_xcoordinate.setter
    def vertex_98_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 98 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 98 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_98_xcoordinate`'.format(value))
        self._data["Vertex 98 X-coordinate"] = value

    @property
    def vertex_98_ycoordinate(self):
        """Get vertex_98_ycoordinate

        Returns:
            float: the value of `vertex_98_ycoordinate` or None if not set
        """
        return self._data["Vertex 98 Y-coordinate"]

    @vertex_98_ycoordinate.setter
    def vertex_98_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 98 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 98 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_98_ycoordinate`'.format(value))
        self._data["Vertex 98 Y-coordinate"] = value

    @property
    def vertex_98_zcoordinate(self):
        """Get vertex_98_zcoordinate

        Returns:
            float: the value of `vertex_98_zcoordinate` or None if not set
        """
        return self._data["Vertex 98 Z-coordinate"]

    @vertex_98_zcoordinate.setter
    def vertex_98_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 98 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 98 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_98_zcoordinate`'.format(value))
        self._data["Vertex 98 Z-coordinate"] = value

    @property
    def vertex_99_xcoordinate(self):
        """Get vertex_99_xcoordinate

        Returns:
            float: the value of `vertex_99_xcoordinate` or None if not set
        """
        return self._data["Vertex 99 X-coordinate"]

    @vertex_99_xcoordinate.setter
    def vertex_99_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 99 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 99 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_99_xcoordinate`'.format(value))
        self._data["Vertex 99 X-coordinate"] = value

    @property
    def vertex_99_ycoordinate(self):
        """Get vertex_99_ycoordinate

        Returns:
            float: the value of `vertex_99_ycoordinate` or None if not set
        """
        return self._data["Vertex 99 Y-coordinate"]

    @vertex_99_ycoordinate.setter
    def vertex_99_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 99 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 99 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_99_ycoordinate`'.format(value))
        self._data["Vertex 99 Y-coordinate"] = value

    @property
    def vertex_99_zcoordinate(self):
        """Get vertex_99_zcoordinate

        Returns:
            float: the value of `vertex_99_zcoordinate` or None if not set
        """
        return self._data["Vertex 99 Z-coordinate"]

    @vertex_99_zcoordinate.setter
    def vertex_99_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 99 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 99 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_99_zcoordinate`'.format(value))
        self._data["Vertex 99 Z-coordinate"] = value

    @property
    def vertex_100_xcoordinate(self):
        """Get vertex_100_xcoordinate

        Returns:
            float: the value of `vertex_100_xcoordinate` or None if not set
        """
        return self._data["Vertex 100 X-coordinate"]

    @vertex_100_xcoordinate.setter
    def vertex_100_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 100 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 100 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_100_xcoordinate`'.format(value))
        self._data["Vertex 100 X-coordinate"] = value

    @property
    def vertex_100_ycoordinate(self):
        """Get vertex_100_ycoordinate

        Returns:
            float: the value of `vertex_100_ycoordinate` or None if not set
        """
        return self._data["Vertex 100 Y-coordinate"]

    @vertex_100_ycoordinate.setter
    def vertex_100_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 100 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 100 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_100_ycoordinate`'.format(value))
        self._data["Vertex 100 Y-coordinate"] = value

    @property
    def vertex_100_zcoordinate(self):
        """Get vertex_100_zcoordinate

        Returns:
            float: the value of `vertex_100_zcoordinate` or None if not set
        """
        return self._data["Vertex 100 Z-coordinate"]

    @vertex_100_zcoordinate.setter
    def vertex_100_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 100 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 100 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_100_zcoordinate`'.format(value))
        self._data["Vertex 100 Z-coordinate"] = value

    @property
    def vertex_101_xcoordinate(self):
        """Get vertex_101_xcoordinate

        Returns:
            float: the value of `vertex_101_xcoordinate` or None if not set
        """
        return self._data["Vertex 101 X-coordinate"]

    @vertex_101_xcoordinate.setter
    def vertex_101_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 101 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 101 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_101_xcoordinate`'.format(value))
        self._data["Vertex 101 X-coordinate"] = value

    @property
    def vertex_101_ycoordinate(self):
        """Get vertex_101_ycoordinate

        Returns:
            float: the value of `vertex_101_ycoordinate` or None if not set
        """
        return self._data["Vertex 101 Y-coordinate"]

    @vertex_101_ycoordinate.setter
    def vertex_101_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 101 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 101 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_101_ycoordinate`'.format(value))
        self._data["Vertex 101 Y-coordinate"] = value

    @property
    def vertex_101_zcoordinate(self):
        """Get vertex_101_zcoordinate

        Returns:
            float: the value of `vertex_101_zcoordinate` or None if not set
        """
        return self._data["Vertex 101 Z-coordinate"]

    @vertex_101_zcoordinate.setter
    def vertex_101_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 101 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 101 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_101_zcoordinate`'.format(value))
        self._data["Vertex 101 Z-coordinate"] = value

    @property
    def vertex_102_xcoordinate(self):
        """Get vertex_102_xcoordinate

        Returns:
            float: the value of `vertex_102_xcoordinate` or None if not set
        """
        return self._data["Vertex 102 X-coordinate"]

    @vertex_102_xcoordinate.setter
    def vertex_102_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 102 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 102 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_102_xcoordinate`'.format(value))
        self._data["Vertex 102 X-coordinate"] = value

    @property
    def vertex_102_ycoordinate(self):
        """Get vertex_102_ycoordinate

        Returns:
            float: the value of `vertex_102_ycoordinate` or None if not set
        """
        return self._data["Vertex 102 Y-coordinate"]

    @vertex_102_ycoordinate.setter
    def vertex_102_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 102 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 102 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_102_ycoordinate`'.format(value))
        self._data["Vertex 102 Y-coordinate"] = value

    @property
    def vertex_102_zcoordinate(self):
        """Get vertex_102_zcoordinate

        Returns:
            float: the value of `vertex_102_zcoordinate` or None if not set
        """
        return self._data["Vertex 102 Z-coordinate"]

    @vertex_102_zcoordinate.setter
    def vertex_102_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 102 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 102 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_102_zcoordinate`'.format(value))
        self._data["Vertex 102 Z-coordinate"] = value

    @property
    def vertex_103_xcoordinate(self):
        """Get vertex_103_xcoordinate

        Returns:
            float: the value of `vertex_103_xcoordinate` or None if not set
        """
        return self._data["Vertex 103 X-coordinate"]

    @vertex_103_xcoordinate.setter
    def vertex_103_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 103 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 103 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_103_xcoordinate`'.format(value))
        self._data["Vertex 103 X-coordinate"] = value

    @property
    def vertex_103_ycoordinate(self):
        """Get vertex_103_ycoordinate

        Returns:
            float: the value of `vertex_103_ycoordinate` or None if not set
        """
        return self._data["Vertex 103 Y-coordinate"]

    @vertex_103_ycoordinate.setter
    def vertex_103_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 103 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 103 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_103_ycoordinate`'.format(value))
        self._data["Vertex 103 Y-coordinate"] = value

    @property
    def vertex_103_zcoordinate(self):
        """Get vertex_103_zcoordinate

        Returns:
            float: the value of `vertex_103_zcoordinate` or None if not set
        """
        return self._data["Vertex 103 Z-coordinate"]

    @vertex_103_zcoordinate.setter
    def vertex_103_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 103 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 103 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_103_zcoordinate`'.format(value))
        self._data["Vertex 103 Z-coordinate"] = value

    @property
    def vertex_104_xcoordinate(self):
        """Get vertex_104_xcoordinate

        Returns:
            float: the value of `vertex_104_xcoordinate` or None if not set
        """
        return self._data["Vertex 104 X-coordinate"]

    @vertex_104_xcoordinate.setter
    def vertex_104_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 104 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 104 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_104_xcoordinate`'.format(value))
        self._data["Vertex 104 X-coordinate"] = value

    @property
    def vertex_104_ycoordinate(self):
        """Get vertex_104_ycoordinate

        Returns:
            float: the value of `vertex_104_ycoordinate` or None if not set
        """
        return self._data["Vertex 104 Y-coordinate"]

    @vertex_104_ycoordinate.setter
    def vertex_104_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 104 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 104 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_104_ycoordinate`'.format(value))
        self._data["Vertex 104 Y-coordinate"] = value

    @property
    def vertex_104_zcoordinate(self):
        """Get vertex_104_zcoordinate

        Returns:
            float: the value of `vertex_104_zcoordinate` or None if not set
        """
        return self._data["Vertex 104 Z-coordinate"]

    @vertex_104_zcoordinate.setter
    def vertex_104_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 104 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 104 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_104_zcoordinate`'.format(value))
        self._data["Vertex 104 Z-coordinate"] = value

    @property
    def vertex_105_xcoordinate(self):
        """Get vertex_105_xcoordinate

        Returns:
            float: the value of `vertex_105_xcoordinate` or None if not set
        """
        return self._data["Vertex 105 X-coordinate"]

    @vertex_105_xcoordinate.setter
    def vertex_105_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 105 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 105 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_105_xcoordinate`'.format(value))
        self._data["Vertex 105 X-coordinate"] = value

    @property
    def vertex_105_ycoordinate(self):
        """Get vertex_105_ycoordinate

        Returns:
            float: the value of `vertex_105_ycoordinate` or None if not set
        """
        return self._data["Vertex 105 Y-coordinate"]

    @vertex_105_ycoordinate.setter
    def vertex_105_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 105 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 105 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_105_ycoordinate`'.format(value))
        self._data["Vertex 105 Y-coordinate"] = value

    @property
    def vertex_105_zcoordinate(self):
        """Get vertex_105_zcoordinate

        Returns:
            float: the value of `vertex_105_zcoordinate` or None if not set
        """
        return self._data["Vertex 105 Z-coordinate"]

    @vertex_105_zcoordinate.setter
    def vertex_105_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 105 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 105 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_105_zcoordinate`'.format(value))
        self._data["Vertex 105 Z-coordinate"] = value

    @property
    def vertex_106_xcoordinate(self):
        """Get vertex_106_xcoordinate

        Returns:
            float: the value of `vertex_106_xcoordinate` or None if not set
        """
        return self._data["Vertex 106 X-coordinate"]

    @vertex_106_xcoordinate.setter
    def vertex_106_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 106 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 106 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_106_xcoordinate`'.format(value))
        self._data["Vertex 106 X-coordinate"] = value

    @property
    def vertex_106_ycoordinate(self):
        """Get vertex_106_ycoordinate

        Returns:
            float: the value of `vertex_106_ycoordinate` or None if not set
        """
        return self._data["Vertex 106 Y-coordinate"]

    @vertex_106_ycoordinate.setter
    def vertex_106_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 106 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 106 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_106_ycoordinate`'.format(value))
        self._data["Vertex 106 Y-coordinate"] = value

    @property
    def vertex_106_zcoordinate(self):
        """Get vertex_106_zcoordinate

        Returns:
            float: the value of `vertex_106_zcoordinate` or None if not set
        """
        return self._data["Vertex 106 Z-coordinate"]

    @vertex_106_zcoordinate.setter
    def vertex_106_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 106 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 106 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_106_zcoordinate`'.format(value))
        self._data["Vertex 106 Z-coordinate"] = value

    @property
    def vertex_107_xcoordinate(self):
        """Get vertex_107_xcoordinate

        Returns:
            float: the value of `vertex_107_xcoordinate` or None if not set
        """
        return self._data["Vertex 107 X-coordinate"]

    @vertex_107_xcoordinate.setter
    def vertex_107_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 107 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 107 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_107_xcoordinate`'.format(value))
        self._data["Vertex 107 X-coordinate"] = value

    @property
    def vertex_107_ycoordinate(self):
        """Get vertex_107_ycoordinate

        Returns:
            float: the value of `vertex_107_ycoordinate` or None if not set
        """
        return self._data["Vertex 107 Y-coordinate"]

    @vertex_107_ycoordinate.setter
    def vertex_107_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 107 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 107 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_107_ycoordinate`'.format(value))
        self._data["Vertex 107 Y-coordinate"] = value

    @property
    def vertex_107_zcoordinate(self):
        """Get vertex_107_zcoordinate

        Returns:
            float: the value of `vertex_107_zcoordinate` or None if not set
        """
        return self._data["Vertex 107 Z-coordinate"]

    @vertex_107_zcoordinate.setter
    def vertex_107_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 107 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 107 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_107_zcoordinate`'.format(value))
        self._data["Vertex 107 Z-coordinate"] = value

    @property
    def vertex_108_xcoordinate(self):
        """Get vertex_108_xcoordinate

        Returns:
            float: the value of `vertex_108_xcoordinate` or None if not set
        """
        return self._data["Vertex 108 X-coordinate"]

    @vertex_108_xcoordinate.setter
    def vertex_108_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 108 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 108 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_108_xcoordinate`'.format(value))
        self._data["Vertex 108 X-coordinate"] = value

    @property
    def vertex_108_ycoordinate(self):
        """Get vertex_108_ycoordinate

        Returns:
            float: the value of `vertex_108_ycoordinate` or None if not set
        """
        return self._data["Vertex 108 Y-coordinate"]

    @vertex_108_ycoordinate.setter
    def vertex_108_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 108 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 108 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_108_ycoordinate`'.format(value))
        self._data["Vertex 108 Y-coordinate"] = value

    @property
    def vertex_108_zcoordinate(self):
        """Get vertex_108_zcoordinate

        Returns:
            float: the value of `vertex_108_zcoordinate` or None if not set
        """
        return self._data["Vertex 108 Z-coordinate"]

    @vertex_108_zcoordinate.setter
    def vertex_108_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 108 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 108 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_108_zcoordinate`'.format(value))
        self._data["Vertex 108 Z-coordinate"] = value

    @property
    def vertex_109_xcoordinate(self):
        """Get vertex_109_xcoordinate

        Returns:
            float: the value of `vertex_109_xcoordinate` or None if not set
        """
        return self._data["Vertex 109 X-coordinate"]

    @vertex_109_xcoordinate.setter
    def vertex_109_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 109 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 109 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_109_xcoordinate`'.format(value))
        self._data["Vertex 109 X-coordinate"] = value

    @property
    def vertex_109_ycoordinate(self):
        """Get vertex_109_ycoordinate

        Returns:
            float: the value of `vertex_109_ycoordinate` or None if not set
        """
        return self._data["Vertex 109 Y-coordinate"]

    @vertex_109_ycoordinate.setter
    def vertex_109_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 109 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 109 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_109_ycoordinate`'.format(value))
        self._data["Vertex 109 Y-coordinate"] = value

    @property
    def vertex_109_zcoordinate(self):
        """Get vertex_109_zcoordinate

        Returns:
            float: the value of `vertex_109_zcoordinate` or None if not set
        """
        return self._data["Vertex 109 Z-coordinate"]

    @vertex_109_zcoordinate.setter
    def vertex_109_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 109 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 109 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_109_zcoordinate`'.format(value))
        self._data["Vertex 109 Z-coordinate"] = value

    @property
    def vertex_110_xcoordinate(self):
        """Get vertex_110_xcoordinate

        Returns:
            float: the value of `vertex_110_xcoordinate` or None if not set
        """
        return self._data["Vertex 110 X-coordinate"]

    @vertex_110_xcoordinate.setter
    def vertex_110_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 110 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 110 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_110_xcoordinate`'.format(value))
        self._data["Vertex 110 X-coordinate"] = value

    @property
    def vertex_110_ycoordinate(self):
        """Get vertex_110_ycoordinate

        Returns:
            float: the value of `vertex_110_ycoordinate` or None if not set
        """
        return self._data["Vertex 110 Y-coordinate"]

    @vertex_110_ycoordinate.setter
    def vertex_110_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 110 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 110 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_110_ycoordinate`'.format(value))
        self._data["Vertex 110 Y-coordinate"] = value

    @property
    def vertex_110_zcoordinate(self):
        """Get vertex_110_zcoordinate

        Returns:
            float: the value of `vertex_110_zcoordinate` or None if not set
        """
        return self._data["Vertex 110 Z-coordinate"]

    @vertex_110_zcoordinate.setter
    def vertex_110_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 110 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 110 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_110_zcoordinate`'.format(value))
        self._data["Vertex 110 Z-coordinate"] = value

    @property
    def vertex_111_xcoordinate(self):
        """Get vertex_111_xcoordinate

        Returns:
            float: the value of `vertex_111_xcoordinate` or None if not set
        """
        return self._data["Vertex 111 X-coordinate"]

    @vertex_111_xcoordinate.setter
    def vertex_111_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 111 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 111 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_111_xcoordinate`'.format(value))
        self._data["Vertex 111 X-coordinate"] = value

    @property
    def vertex_111_ycoordinate(self):
        """Get vertex_111_ycoordinate

        Returns:
            float: the value of `vertex_111_ycoordinate` or None if not set
        """
        return self._data["Vertex 111 Y-coordinate"]

    @vertex_111_ycoordinate.setter
    def vertex_111_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 111 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 111 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_111_ycoordinate`'.format(value))
        self._data["Vertex 111 Y-coordinate"] = value

    @property
    def vertex_111_zcoordinate(self):
        """Get vertex_111_zcoordinate

        Returns:
            float: the value of `vertex_111_zcoordinate` or None if not set
        """
        return self._data["Vertex 111 Z-coordinate"]

    @vertex_111_zcoordinate.setter
    def vertex_111_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 111 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 111 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_111_zcoordinate`'.format(value))
        self._data["Vertex 111 Z-coordinate"] = value

    @property
    def vertex_112_xcoordinate(self):
        """Get vertex_112_xcoordinate

        Returns:
            float: the value of `vertex_112_xcoordinate` or None if not set
        """
        return self._data["Vertex 112 X-coordinate"]

    @vertex_112_xcoordinate.setter
    def vertex_112_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 112 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 112 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_112_xcoordinate`'.format(value))
        self._data["Vertex 112 X-coordinate"] = value

    @property
    def vertex_112_ycoordinate(self):
        """Get vertex_112_ycoordinate

        Returns:
            float: the value of `vertex_112_ycoordinate` or None if not set
        """
        return self._data["Vertex 112 Y-coordinate"]

    @vertex_112_ycoordinate.setter
    def vertex_112_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 112 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 112 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_112_ycoordinate`'.format(value))
        self._data["Vertex 112 Y-coordinate"] = value

    @property
    def vertex_112_zcoordinate(self):
        """Get vertex_112_zcoordinate

        Returns:
            float: the value of `vertex_112_zcoordinate` or None if not set
        """
        return self._data["Vertex 112 Z-coordinate"]

    @vertex_112_zcoordinate.setter
    def vertex_112_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 112 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 112 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_112_zcoordinate`'.format(value))
        self._data["Vertex 112 Z-coordinate"] = value

    @property
    def vertex_113_xcoordinate(self):
        """Get vertex_113_xcoordinate

        Returns:
            float: the value of `vertex_113_xcoordinate` or None if not set
        """
        return self._data["Vertex 113 X-coordinate"]

    @vertex_113_xcoordinate.setter
    def vertex_113_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 113 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 113 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_113_xcoordinate`'.format(value))
        self._data["Vertex 113 X-coordinate"] = value

    @property
    def vertex_113_ycoordinate(self):
        """Get vertex_113_ycoordinate

        Returns:
            float: the value of `vertex_113_ycoordinate` or None if not set
        """
        return self._data["Vertex 113 Y-coordinate"]

    @vertex_113_ycoordinate.setter
    def vertex_113_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 113 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 113 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_113_ycoordinate`'.format(value))
        self._data["Vertex 113 Y-coordinate"] = value

    @property
    def vertex_113_zcoordinate(self):
        """Get vertex_113_zcoordinate

        Returns:
            float: the value of `vertex_113_zcoordinate` or None if not set
        """
        return self._data["Vertex 113 Z-coordinate"]

    @vertex_113_zcoordinate.setter
    def vertex_113_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 113 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 113 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_113_zcoordinate`'.format(value))
        self._data["Vertex 113 Z-coordinate"] = value

    @property
    def vertex_114_xcoordinate(self):
        """Get vertex_114_xcoordinate

        Returns:
            float: the value of `vertex_114_xcoordinate` or None if not set
        """
        return self._data["Vertex 114 X-coordinate"]

    @vertex_114_xcoordinate.setter
    def vertex_114_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 114 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 114 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_114_xcoordinate`'.format(value))
        self._data["Vertex 114 X-coordinate"] = value

    @property
    def vertex_114_ycoordinate(self):
        """Get vertex_114_ycoordinate

        Returns:
            float: the value of `vertex_114_ycoordinate` or None if not set
        """
        return self._data["Vertex 114 Y-coordinate"]

    @vertex_114_ycoordinate.setter
    def vertex_114_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 114 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 114 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_114_ycoordinate`'.format(value))
        self._data["Vertex 114 Y-coordinate"] = value

    @property
    def vertex_114_zcoordinate(self):
        """Get vertex_114_zcoordinate

        Returns:
            float: the value of `vertex_114_zcoordinate` or None if not set
        """
        return self._data["Vertex 114 Z-coordinate"]

    @vertex_114_zcoordinate.setter
    def vertex_114_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 114 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 114 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_114_zcoordinate`'.format(value))
        self._data["Vertex 114 Z-coordinate"] = value

    @property
    def vertex_115_xcoordinate(self):
        """Get vertex_115_xcoordinate

        Returns:
            float: the value of `vertex_115_xcoordinate` or None if not set
        """
        return self._data["Vertex 115 X-coordinate"]

    @vertex_115_xcoordinate.setter
    def vertex_115_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 115 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 115 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_115_xcoordinate`'.format(value))
        self._data["Vertex 115 X-coordinate"] = value

    @property
    def vertex_115_ycoordinate(self):
        """Get vertex_115_ycoordinate

        Returns:
            float: the value of `vertex_115_ycoordinate` or None if not set
        """
        return self._data["Vertex 115 Y-coordinate"]

    @vertex_115_ycoordinate.setter
    def vertex_115_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 115 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 115 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_115_ycoordinate`'.format(value))
        self._data["Vertex 115 Y-coordinate"] = value

    @property
    def vertex_115_zcoordinate(self):
        """Get vertex_115_zcoordinate

        Returns:
            float: the value of `vertex_115_zcoordinate` or None if not set
        """
        return self._data["Vertex 115 Z-coordinate"]

    @vertex_115_zcoordinate.setter
    def vertex_115_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 115 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 115 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_115_zcoordinate`'.format(value))
        self._data["Vertex 115 Z-coordinate"] = value

    @property
    def vertex_116_xcoordinate(self):
        """Get vertex_116_xcoordinate

        Returns:
            float: the value of `vertex_116_xcoordinate` or None if not set
        """
        return self._data["Vertex 116 X-coordinate"]

    @vertex_116_xcoordinate.setter
    def vertex_116_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 116 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 116 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_116_xcoordinate`'.format(value))
        self._data["Vertex 116 X-coordinate"] = value

    @property
    def vertex_116_ycoordinate(self):
        """Get vertex_116_ycoordinate

        Returns:
            float: the value of `vertex_116_ycoordinate` or None if not set
        """
        return self._data["Vertex 116 Y-coordinate"]

    @vertex_116_ycoordinate.setter
    def vertex_116_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 116 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 116 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_116_ycoordinate`'.format(value))
        self._data["Vertex 116 Y-coordinate"] = value

    @property
    def vertex_116_zcoordinate(self):
        """Get vertex_116_zcoordinate

        Returns:
            float: the value of `vertex_116_zcoordinate` or None if not set
        """
        return self._data["Vertex 116 Z-coordinate"]

    @vertex_116_zcoordinate.setter
    def vertex_116_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 116 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 116 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_116_zcoordinate`'.format(value))
        self._data["Vertex 116 Z-coordinate"] = value

    @property
    def vertex_117_xcoordinate(self):
        """Get vertex_117_xcoordinate

        Returns:
            float: the value of `vertex_117_xcoordinate` or None if not set
        """
        return self._data["Vertex 117 X-coordinate"]

    @vertex_117_xcoordinate.setter
    def vertex_117_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 117 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 117 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_117_xcoordinate`'.format(value))
        self._data["Vertex 117 X-coordinate"] = value

    @property
    def vertex_117_ycoordinate(self):
        """Get vertex_117_ycoordinate

        Returns:
            float: the value of `vertex_117_ycoordinate` or None if not set
        """
        return self._data["Vertex 117 Y-coordinate"]

    @vertex_117_ycoordinate.setter
    def vertex_117_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 117 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 117 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_117_ycoordinate`'.format(value))
        self._data["Vertex 117 Y-coordinate"] = value

    @property
    def vertex_117_zcoordinate(self):
        """Get vertex_117_zcoordinate

        Returns:
            float: the value of `vertex_117_zcoordinate` or None if not set
        """
        return self._data["Vertex 117 Z-coordinate"]

    @vertex_117_zcoordinate.setter
    def vertex_117_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 117 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 117 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_117_zcoordinate`'.format(value))
        self._data["Vertex 117 Z-coordinate"] = value

    @property
    def vertex_118_xcoordinate(self):
        """Get vertex_118_xcoordinate

        Returns:
            float: the value of `vertex_118_xcoordinate` or None if not set
        """
        return self._data["Vertex 118 X-coordinate"]

    @vertex_118_xcoordinate.setter
    def vertex_118_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 118 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 118 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_118_xcoordinate`'.format(value))
        self._data["Vertex 118 X-coordinate"] = value

    @property
    def vertex_118_ycoordinate(self):
        """Get vertex_118_ycoordinate

        Returns:
            float: the value of `vertex_118_ycoordinate` or None if not set
        """
        return self._data["Vertex 118 Y-coordinate"]

    @vertex_118_ycoordinate.setter
    def vertex_118_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 118 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 118 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_118_ycoordinate`'.format(value))
        self._data["Vertex 118 Y-coordinate"] = value

    @property
    def vertex_118_zcoordinate(self):
        """Get vertex_118_zcoordinate

        Returns:
            float: the value of `vertex_118_zcoordinate` or None if not set
        """
        return self._data["Vertex 118 Z-coordinate"]

    @vertex_118_zcoordinate.setter
    def vertex_118_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 118 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 118 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_118_zcoordinate`'.format(value))
        self._data["Vertex 118 Z-coordinate"] = value

    @property
    def vertex_119_xcoordinate(self):
        """Get vertex_119_xcoordinate

        Returns:
            float: the value of `vertex_119_xcoordinate` or None if not set
        """
        return self._data["Vertex 119 X-coordinate"]

    @vertex_119_xcoordinate.setter
    def vertex_119_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 119 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 119 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_119_xcoordinate`'.format(value))
        self._data["Vertex 119 X-coordinate"] = value

    @property
    def vertex_119_ycoordinate(self):
        """Get vertex_119_ycoordinate

        Returns:
            float: the value of `vertex_119_ycoordinate` or None if not set
        """
        return self._data["Vertex 119 Y-coordinate"]

    @vertex_119_ycoordinate.setter
    def vertex_119_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 119 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 119 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_119_ycoordinate`'.format(value))
        self._data["Vertex 119 Y-coordinate"] = value

    @property
    def vertex_119_zcoordinate(self):
        """Get vertex_119_zcoordinate

        Returns:
            float: the value of `vertex_119_zcoordinate` or None if not set
        """
        return self._data["Vertex 119 Z-coordinate"]

    @vertex_119_zcoordinate.setter
    def vertex_119_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 119 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 119 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_119_zcoordinate`'.format(value))
        self._data["Vertex 119 Z-coordinate"] = value

    @property
    def vertex_120_xcoordinate(self):
        """Get vertex_120_xcoordinate

        Returns:
            float: the value of `vertex_120_xcoordinate` or None if not set
        """
        return self._data["Vertex 120 X-coordinate"]

    @vertex_120_xcoordinate.setter
    def vertex_120_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 120 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 120 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_120_xcoordinate`'.format(value))
        self._data["Vertex 120 X-coordinate"] = value

    @property
    def vertex_120_ycoordinate(self):
        """Get vertex_120_ycoordinate

        Returns:
            float: the value of `vertex_120_ycoordinate` or None if not set
        """
        return self._data["Vertex 120 Y-coordinate"]

    @vertex_120_ycoordinate.setter
    def vertex_120_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 120 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 120 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_120_ycoordinate`'.format(value))
        self._data["Vertex 120 Y-coordinate"] = value

    @property
    def vertex_120_zcoordinate(self):
        """Get vertex_120_zcoordinate

        Returns:
            float: the value of `vertex_120_zcoordinate` or None if not set
        """
        return self._data["Vertex 120 Z-coordinate"]

    @vertex_120_zcoordinate.setter
    def vertex_120_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 120 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 120 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_120_zcoordinate`'.format(value))
        self._data["Vertex 120 Z-coordinate"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ShadingOverhang(object):
    """ Corresponds to IDD object `Shading:Overhang`
        Overhangs are usually flat shading surfaces that reference a window or door.
    
    """
    internal_name = "Shading:Overhang"
    field_count = 7
    required_fields = ["Name", "Window or Door Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Shading:Overhang`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Window or Door Name"] = None
        self._data["Height above Window or Door"] = None
        self._data["Tilt Angle from Window/Door"] = None
        self._data["Left extension from Window/Door Width"] = None
        self._data["Right extension from Window/Door Width"] = None
        self._data["Depth"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.window_or_door_name = None
        else:
            self.window_or_door_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.height_above_window_or_door = None
        else:
            self.height_above_window_or_door = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tilt_angle_from_window_or_door = None
        else:
            self.tilt_angle_from_window_or_door = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.left_extension_from_window_or_door_width = None
        else:
            self.left_extension_from_window_or_door_width = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.right_extension_from_window_or_door_width = None
        else:
            self.right_extension_from_window_or_door_width = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.depth = None
        else:
            self.depth = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def window_or_door_name(self):
        """Get window_or_door_name

        Returns:
            str: the value of `window_or_door_name` or None if not set
        """
        return self._data["Window or Door Name"]

    @window_or_door_name.setter
    def window_or_door_name(self, value=None):
        """  Corresponds to IDD Field `Window or Door Name`

        Args:
            value (str): value for IDD Field `Window or Door Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `window_or_door_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `window_or_door_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `window_or_door_name`')
        self._data["Window or Door Name"] = value

    @property
    def height_above_window_or_door(self):
        """Get height_above_window_or_door

        Returns:
            float: the value of `height_above_window_or_door` or None if not set
        """
        return self._data["Height above Window or Door"]

    @height_above_window_or_door.setter
    def height_above_window_or_door(self, value=None):
        """  Corresponds to IDD Field `Height above Window or Door`

        Args:
            value (float): value for IDD Field `Height above Window or Door`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `height_above_window_or_door`'.format(value))
        self._data["Height above Window or Door"] = value

    @property
    def tilt_angle_from_window_or_door(self):
        """Get tilt_angle_from_window_or_door

        Returns:
            float: the value of `tilt_angle_from_window_or_door` or None if not set
        """
        return self._data["Tilt Angle from Window/Door"]

    @tilt_angle_from_window_or_door.setter
    def tilt_angle_from_window_or_door(self, value=90.0):
        """  Corresponds to IDD Field `Tilt Angle from Window/Door`

        Args:
            value (float): value for IDD Field `Tilt Angle from Window/Door`
                Units: deg
                Default value: 90.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tilt_angle_from_window_or_door`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tilt_angle_from_window_or_door`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `tilt_angle_from_window_or_door`')
        self._data["Tilt Angle from Window/Door"] = value

    @property
    def left_extension_from_window_or_door_width(self):
        """Get left_extension_from_window_or_door_width

        Returns:
            float: the value of `left_extension_from_window_or_door_width` or None if not set
        """
        return self._data["Left extension from Window/Door Width"]

    @left_extension_from_window_or_door_width.setter
    def left_extension_from_window_or_door_width(self, value=None):
        """  Corresponds to IDD Field `Left extension from Window/Door Width`

        Args:
            value (float): value for IDD Field `Left extension from Window/Door Width`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `left_extension_from_window_or_door_width`'.format(value))
        self._data["Left extension from Window/Door Width"] = value

    @property
    def right_extension_from_window_or_door_width(self):
        """Get right_extension_from_window_or_door_width

        Returns:
            float: the value of `right_extension_from_window_or_door_width` or None if not set
        """
        return self._data["Right extension from Window/Door Width"]

    @right_extension_from_window_or_door_width.setter
    def right_extension_from_window_or_door_width(self, value=None):
        """  Corresponds to IDD Field `Right extension from Window/Door Width`
        N3 + N4 + Window/Door Width is Overhang Length

        Args:
            value (float): value for IDD Field `Right extension from Window/Door Width`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `right_extension_from_window_or_door_width`'.format(value))
        self._data["Right extension from Window/Door Width"] = value

    @property
    def depth(self):
        """Get depth

        Returns:
            float: the value of `depth` or None if not set
        """
        return self._data["Depth"]

    @depth.setter
    def depth(self, value=None):
        """  Corresponds to IDD Field `Depth`

        Args:
            value (float): value for IDD Field `Depth`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `depth`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `depth`')
        self._data["Depth"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ShadingOverhangProjection(object):
    """ Corresponds to IDD object `Shading:Overhang:Projection`
        Overhangs are typically flat shading surfaces that reference a window or door.
    
    """
    internal_name = "Shading:Overhang:Projection"
    field_count = 7
    required_fields = ["Name", "Window or Door Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Shading:Overhang:Projection`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Window or Door Name"] = None
        self._data["Height above Window or Door"] = None
        self._data["Tilt Angle from Window/Door"] = None
        self._data["Left extension from Window/Door Width"] = None
        self._data["Right extension from Window/Door Width"] = None
        self._data["Depth as Fraction of Window/Door Height"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.window_or_door_name = None
        else:
            self.window_or_door_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.height_above_window_or_door = None
        else:
            self.height_above_window_or_door = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tilt_angle_from_window_or_door = None
        else:
            self.tilt_angle_from_window_or_door = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.left_extension_from_window_or_door_width = None
        else:
            self.left_extension_from_window_or_door_width = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.right_extension_from_window_or_door_width = None
        else:
            self.right_extension_from_window_or_door_width = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.depth_as_fraction_of_window_or_door_height = None
        else:
            self.depth_as_fraction_of_window_or_door_height = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def window_or_door_name(self):
        """Get window_or_door_name

        Returns:
            str: the value of `window_or_door_name` or None if not set
        """
        return self._data["Window or Door Name"]

    @window_or_door_name.setter
    def window_or_door_name(self, value=None):
        """  Corresponds to IDD Field `Window or Door Name`

        Args:
            value (str): value for IDD Field `Window or Door Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `window_or_door_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `window_or_door_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `window_or_door_name`')
        self._data["Window or Door Name"] = value

    @property
    def height_above_window_or_door(self):
        """Get height_above_window_or_door

        Returns:
            float: the value of `height_above_window_or_door` or None if not set
        """
        return self._data["Height above Window or Door"]

    @height_above_window_or_door.setter
    def height_above_window_or_door(self, value=None):
        """  Corresponds to IDD Field `Height above Window or Door`

        Args:
            value (float): value for IDD Field `Height above Window or Door`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `height_above_window_or_door`'.format(value))
        self._data["Height above Window or Door"] = value

    @property
    def tilt_angle_from_window_or_door(self):
        """Get tilt_angle_from_window_or_door

        Returns:
            float: the value of `tilt_angle_from_window_or_door` or None if not set
        """
        return self._data["Tilt Angle from Window/Door"]

    @tilt_angle_from_window_or_door.setter
    def tilt_angle_from_window_or_door(self, value=90.0):
        """  Corresponds to IDD Field `Tilt Angle from Window/Door`

        Args:
            value (float): value for IDD Field `Tilt Angle from Window/Door`
                Units: deg
                Default value: 90.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tilt_angle_from_window_or_door`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `tilt_angle_from_window_or_door`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `tilt_angle_from_window_or_door`')
        self._data["Tilt Angle from Window/Door"] = value

    @property
    def left_extension_from_window_or_door_width(self):
        """Get left_extension_from_window_or_door_width

        Returns:
            float: the value of `left_extension_from_window_or_door_width` or None if not set
        """
        return self._data["Left extension from Window/Door Width"]

    @left_extension_from_window_or_door_width.setter
    def left_extension_from_window_or_door_width(self, value=None):
        """  Corresponds to IDD Field `Left extension from Window/Door Width`

        Args:
            value (float): value for IDD Field `Left extension from Window/Door Width`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `left_extension_from_window_or_door_width`'.format(value))
        self._data["Left extension from Window/Door Width"] = value

    @property
    def right_extension_from_window_or_door_width(self):
        """Get right_extension_from_window_or_door_width

        Returns:
            float: the value of `right_extension_from_window_or_door_width` or None if not set
        """
        return self._data["Right extension from Window/Door Width"]

    @right_extension_from_window_or_door_width.setter
    def right_extension_from_window_or_door_width(self, value=None):
        """  Corresponds to IDD Field `Right extension from Window/Door Width`
        N3 + N4 + Window/Door Width is Overhang Length

        Args:
            value (float): value for IDD Field `Right extension from Window/Door Width`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `right_extension_from_window_or_door_width`'.format(value))
        self._data["Right extension from Window/Door Width"] = value

    @property
    def depth_as_fraction_of_window_or_door_height(self):
        """Get depth_as_fraction_of_window_or_door_height

        Returns:
            float: the value of `depth_as_fraction_of_window_or_door_height` or None if not set
        """
        return self._data["Depth as Fraction of Window/Door Height"]

    @depth_as_fraction_of_window_or_door_height.setter
    def depth_as_fraction_of_window_or_door_height(self, value=None):
        """  Corresponds to IDD Field `Depth as Fraction of Window/Door Height`

        Args:
            value (float): value for IDD Field `Depth as Fraction of Window/Door Height`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `depth_as_fraction_of_window_or_door_height`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `depth_as_fraction_of_window_or_door_height`')
        self._data["Depth as Fraction of Window/Door Height"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ShadingFin(object):
    """ Corresponds to IDD object `Shading:Fin`
        Fins are usually shading surfaces that are perpendicular to a window or door.
    
    """
    internal_name = "Shading:Fin"
    field_count = 12
    required_fields = ["Name", "Window or Door Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Shading:Fin`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Window or Door Name"] = None
        self._data["Left Extension from Window/Door"] = None
        self._data["Left Distance Above Top of Window"] = None
        self._data["Left Distance Below Bottom of Window"] = None
        self._data["Left Tilt Angle from Window/Door"] = None
        self._data["Left Depth"] = None
        self._data["Right Extension from Window/Door"] = None
        self._data["Right Distance Above Top of Window"] = None
        self._data["Right Distance Below Bottom of Window"] = None
        self._data["Right Tilt Angle from Window/Door"] = None
        self._data["Right Depth"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.window_or_door_name = None
        else:
            self.window_or_door_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.left_extension_from_window_or_door = None
        else:
            self.left_extension_from_window_or_door = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.left_distance_above_top_of_window = None
        else:
            self.left_distance_above_top_of_window = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.left_distance_below_bottom_of_window = None
        else:
            self.left_distance_below_bottom_of_window = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.left_tilt_angle_from_window_or_door = None
        else:
            self.left_tilt_angle_from_window_or_door = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.left_depth = None
        else:
            self.left_depth = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.right_extension_from_window_or_door = None
        else:
            self.right_extension_from_window_or_door = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.right_distance_above_top_of_window = None
        else:
            self.right_distance_above_top_of_window = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.right_distance_below_bottom_of_window = None
        else:
            self.right_distance_below_bottom_of_window = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.right_tilt_angle_from_window_or_door = None
        else:
            self.right_tilt_angle_from_window_or_door = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.right_depth = None
        else:
            self.right_depth = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def window_or_door_name(self):
        """Get window_or_door_name

        Returns:
            str: the value of `window_or_door_name` or None if not set
        """
        return self._data["Window or Door Name"]

    @window_or_door_name.setter
    def window_or_door_name(self, value=None):
        """  Corresponds to IDD Field `Window or Door Name`

        Args:
            value (str): value for IDD Field `Window or Door Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `window_or_door_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `window_or_door_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `window_or_door_name`')
        self._data["Window or Door Name"] = value

    @property
    def left_extension_from_window_or_door(self):
        """Get left_extension_from_window_or_door

        Returns:
            float: the value of `left_extension_from_window_or_door` or None if not set
        """
        return self._data["Left Extension from Window/Door"]

    @left_extension_from_window_or_door.setter
    def left_extension_from_window_or_door(self, value=None):
        """  Corresponds to IDD Field `Left Extension from Window/Door`

        Args:
            value (float): value for IDD Field `Left Extension from Window/Door`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `left_extension_from_window_or_door`'.format(value))
        self._data["Left Extension from Window/Door"] = value

    @property
    def left_distance_above_top_of_window(self):
        """Get left_distance_above_top_of_window

        Returns:
            float: the value of `left_distance_above_top_of_window` or None if not set
        """
        return self._data["Left Distance Above Top of Window"]

    @left_distance_above_top_of_window.setter
    def left_distance_above_top_of_window(self, value=None):
        """  Corresponds to IDD Field `Left Distance Above Top of Window`

        Args:
            value (float): value for IDD Field `Left Distance Above Top of Window`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `left_distance_above_top_of_window`'.format(value))
        self._data["Left Distance Above Top of Window"] = value

    @property
    def left_distance_below_bottom_of_window(self):
        """Get left_distance_below_bottom_of_window

        Returns:
            float: the value of `left_distance_below_bottom_of_window` or None if not set
        """
        return self._data["Left Distance Below Bottom of Window"]

    @left_distance_below_bottom_of_window.setter
    def left_distance_below_bottom_of_window(self, value=None):
        """  Corresponds to IDD Field `Left Distance Below Bottom of Window`
        N2 + N3 + height of Window/Door is height of Fin

        Args:
            value (float): value for IDD Field `Left Distance Below Bottom of Window`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `left_distance_below_bottom_of_window`'.format(value))
        self._data["Left Distance Below Bottom of Window"] = value

    @property
    def left_tilt_angle_from_window_or_door(self):
        """Get left_tilt_angle_from_window_or_door

        Returns:
            float: the value of `left_tilt_angle_from_window_or_door` or None if not set
        """
        return self._data["Left Tilt Angle from Window/Door"]

    @left_tilt_angle_from_window_or_door.setter
    def left_tilt_angle_from_window_or_door(self, value=90.0):
        """  Corresponds to IDD Field `Left Tilt Angle from Window/Door`

        Args:
            value (float): value for IDD Field `Left Tilt Angle from Window/Door`
                Units: deg
                Default value: 90.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `left_tilt_angle_from_window_or_door`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `left_tilt_angle_from_window_or_door`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `left_tilt_angle_from_window_or_door`')
        self._data["Left Tilt Angle from Window/Door"] = value

    @property
    def left_depth(self):
        """Get left_depth

        Returns:
            float: the value of `left_depth` or None if not set
        """
        return self._data["Left Depth"]

    @left_depth.setter
    def left_depth(self, value=None):
        """  Corresponds to IDD Field `Left Depth`

        Args:
            value (float): value for IDD Field `Left Depth`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `left_depth`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `left_depth`')
        self._data["Left Depth"] = value

    @property
    def right_extension_from_window_or_door(self):
        """Get right_extension_from_window_or_door

        Returns:
            float: the value of `right_extension_from_window_or_door` or None if not set
        """
        return self._data["Right Extension from Window/Door"]

    @right_extension_from_window_or_door.setter
    def right_extension_from_window_or_door(self, value=None):
        """  Corresponds to IDD Field `Right Extension from Window/Door`

        Args:
            value (float): value for IDD Field `Right Extension from Window/Door`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `right_extension_from_window_or_door`'.format(value))
        self._data["Right Extension from Window/Door"] = value

    @property
    def right_distance_above_top_of_window(self):
        """Get right_distance_above_top_of_window

        Returns:
            float: the value of `right_distance_above_top_of_window` or None if not set
        """
        return self._data["Right Distance Above Top of Window"]

    @right_distance_above_top_of_window.setter
    def right_distance_above_top_of_window(self, value=None):
        """  Corresponds to IDD Field `Right Distance Above Top of Window`

        Args:
            value (float): value for IDD Field `Right Distance Above Top of Window`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `right_distance_above_top_of_window`'.format(value))
        self._data["Right Distance Above Top of Window"] = value

    @property
    def right_distance_below_bottom_of_window(self):
        """Get right_distance_below_bottom_of_window

        Returns:
            float: the value of `right_distance_below_bottom_of_window` or None if not set
        """
        return self._data["Right Distance Below Bottom of Window"]

    @right_distance_below_bottom_of_window.setter
    def right_distance_below_bottom_of_window(self, value=None):
        """  Corresponds to IDD Field `Right Distance Below Bottom of Window`
        N7 + N8 + height of Window/Door is height of Fin

        Args:
            value (float): value for IDD Field `Right Distance Below Bottom of Window`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `right_distance_below_bottom_of_window`'.format(value))
        self._data["Right Distance Below Bottom of Window"] = value

    @property
    def right_tilt_angle_from_window_or_door(self):
        """Get right_tilt_angle_from_window_or_door

        Returns:
            float: the value of `right_tilt_angle_from_window_or_door` or None if not set
        """
        return self._data["Right Tilt Angle from Window/Door"]

    @right_tilt_angle_from_window_or_door.setter
    def right_tilt_angle_from_window_or_door(self, value=90.0):
        """  Corresponds to IDD Field `Right Tilt Angle from Window/Door`

        Args:
            value (float): value for IDD Field `Right Tilt Angle from Window/Door`
                Units: deg
                Default value: 90.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `right_tilt_angle_from_window_or_door`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `right_tilt_angle_from_window_or_door`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `right_tilt_angle_from_window_or_door`')
        self._data["Right Tilt Angle from Window/Door"] = value

    @property
    def right_depth(self):
        """Get right_depth

        Returns:
            float: the value of `right_depth` or None if not set
        """
        return self._data["Right Depth"]

    @right_depth.setter
    def right_depth(self, value=None):
        """  Corresponds to IDD Field `Right Depth`

        Args:
            value (float): value for IDD Field `Right Depth`
                Units: m
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `right_depth`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `right_depth`')
        self._data["Right Depth"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ShadingFinProjection(object):
    """ Corresponds to IDD object `Shading:Fin:Projection`
        Fins are usually shading surfaces that are perpendicular to a window or door.
    
    """
    internal_name = "Shading:Fin:Projection"
    field_count = 12
    required_fields = ["Name", "Window or Door Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Shading:Fin:Projection`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Window or Door Name"] = None
        self._data["Left Extension from Window/Door"] = None
        self._data["Left Distance Above Top of Window"] = None
        self._data["Left Distance Below Bottom of Window"] = None
        self._data["Left Tilt Angle from Window/Door"] = None
        self._data["Left Depth as Fraction of Window/Door Width"] = None
        self._data["Right Extension from Window/Door"] = None
        self._data["Right Distance Above Top of Window"] = None
        self._data["Right Distance Below Bottom of Window"] = None
        self._data["Right Tilt Angle from Window/Door"] = None
        self._data["Right Depth as Fraction of Window/Door Width"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.window_or_door_name = None
        else:
            self.window_or_door_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.left_extension_from_window_or_door = None
        else:
            self.left_extension_from_window_or_door = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.left_distance_above_top_of_window = None
        else:
            self.left_distance_above_top_of_window = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.left_distance_below_bottom_of_window = None
        else:
            self.left_distance_below_bottom_of_window = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.left_tilt_angle_from_window_or_door = None
        else:
            self.left_tilt_angle_from_window_or_door = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.left_depth_as_fraction_of_window_or_door_width = None
        else:
            self.left_depth_as_fraction_of_window_or_door_width = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.right_extension_from_window_or_door = None
        else:
            self.right_extension_from_window_or_door = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.right_distance_above_top_of_window = None
        else:
            self.right_distance_above_top_of_window = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.right_distance_below_bottom_of_window = None
        else:
            self.right_distance_below_bottom_of_window = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.right_tilt_angle_from_window_or_door = None
        else:
            self.right_tilt_angle_from_window_or_door = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.right_depth_as_fraction_of_window_or_door_width = None
        else:
            self.right_depth_as_fraction_of_window_or_door_width = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def window_or_door_name(self):
        """Get window_or_door_name

        Returns:
            str: the value of `window_or_door_name` or None if not set
        """
        return self._data["Window or Door Name"]

    @window_or_door_name.setter
    def window_or_door_name(self, value=None):
        """  Corresponds to IDD Field `Window or Door Name`

        Args:
            value (str): value for IDD Field `Window or Door Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `window_or_door_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `window_or_door_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `window_or_door_name`')
        self._data["Window or Door Name"] = value

    @property
    def left_extension_from_window_or_door(self):
        """Get left_extension_from_window_or_door

        Returns:
            float: the value of `left_extension_from_window_or_door` or None if not set
        """
        return self._data["Left Extension from Window/Door"]

    @left_extension_from_window_or_door.setter
    def left_extension_from_window_or_door(self, value=None):
        """  Corresponds to IDD Field `Left Extension from Window/Door`

        Args:
            value (float): value for IDD Field `Left Extension from Window/Door`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `left_extension_from_window_or_door`'.format(value))
        self._data["Left Extension from Window/Door"] = value

    @property
    def left_distance_above_top_of_window(self):
        """Get left_distance_above_top_of_window

        Returns:
            float: the value of `left_distance_above_top_of_window` or None if not set
        """
        return self._data["Left Distance Above Top of Window"]

    @left_distance_above_top_of_window.setter
    def left_distance_above_top_of_window(self, value=None):
        """  Corresponds to IDD Field `Left Distance Above Top of Window`

        Args:
            value (float): value for IDD Field `Left Distance Above Top of Window`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `left_distance_above_top_of_window`'.format(value))
        self._data["Left Distance Above Top of Window"] = value

    @property
    def left_distance_below_bottom_of_window(self):
        """Get left_distance_below_bottom_of_window

        Returns:
            float: the value of `left_distance_below_bottom_of_window` or None if not set
        """
        return self._data["Left Distance Below Bottom of Window"]

    @left_distance_below_bottom_of_window.setter
    def left_distance_below_bottom_of_window(self, value=None):
        """  Corresponds to IDD Field `Left Distance Below Bottom of Window`
        N2 + N3 + height of Window/Door is height of Fin

        Args:
            value (float): value for IDD Field `Left Distance Below Bottom of Window`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `left_distance_below_bottom_of_window`'.format(value))
        self._data["Left Distance Below Bottom of Window"] = value

    @property
    def left_tilt_angle_from_window_or_door(self):
        """Get left_tilt_angle_from_window_or_door

        Returns:
            float: the value of `left_tilt_angle_from_window_or_door` or None if not set
        """
        return self._data["Left Tilt Angle from Window/Door"]

    @left_tilt_angle_from_window_or_door.setter
    def left_tilt_angle_from_window_or_door(self, value=90.0):
        """  Corresponds to IDD Field `Left Tilt Angle from Window/Door`

        Args:
            value (float): value for IDD Field `Left Tilt Angle from Window/Door`
                Units: deg
                Default value: 90.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `left_tilt_angle_from_window_or_door`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `left_tilt_angle_from_window_or_door`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `left_tilt_angle_from_window_or_door`')
        self._data["Left Tilt Angle from Window/Door"] = value

    @property
    def left_depth_as_fraction_of_window_or_door_width(self):
        """Get left_depth_as_fraction_of_window_or_door_width

        Returns:
            float: the value of `left_depth_as_fraction_of_window_or_door_width` or None if not set
        """
        return self._data["Left Depth as Fraction of Window/Door Width"]

    @left_depth_as_fraction_of_window_or_door_width.setter
    def left_depth_as_fraction_of_window_or_door_width(self, value=None):
        """  Corresponds to IDD Field `Left Depth as Fraction of Window/Door Width`

        Args:
            value (float): value for IDD Field `Left Depth as Fraction of Window/Door Width`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `left_depth_as_fraction_of_window_or_door_width`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `left_depth_as_fraction_of_window_or_door_width`')
        self._data["Left Depth as Fraction of Window/Door Width"] = value

    @property
    def right_extension_from_window_or_door(self):
        """Get right_extension_from_window_or_door

        Returns:
            float: the value of `right_extension_from_window_or_door` or None if not set
        """
        return self._data["Right Extension from Window/Door"]

    @right_extension_from_window_or_door.setter
    def right_extension_from_window_or_door(self, value=None):
        """  Corresponds to IDD Field `Right Extension from Window/Door`

        Args:
            value (float): value for IDD Field `Right Extension from Window/Door`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `right_extension_from_window_or_door`'.format(value))
        self._data["Right Extension from Window/Door"] = value

    @property
    def right_distance_above_top_of_window(self):
        """Get right_distance_above_top_of_window

        Returns:
            float: the value of `right_distance_above_top_of_window` or None if not set
        """
        return self._data["Right Distance Above Top of Window"]

    @right_distance_above_top_of_window.setter
    def right_distance_above_top_of_window(self, value=None):
        """  Corresponds to IDD Field `Right Distance Above Top of Window`

        Args:
            value (float): value for IDD Field `Right Distance Above Top of Window`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `right_distance_above_top_of_window`'.format(value))
        self._data["Right Distance Above Top of Window"] = value

    @property
    def right_distance_below_bottom_of_window(self):
        """Get right_distance_below_bottom_of_window

        Returns:
            float: the value of `right_distance_below_bottom_of_window` or None if not set
        """
        return self._data["Right Distance Below Bottom of Window"]

    @right_distance_below_bottom_of_window.setter
    def right_distance_below_bottom_of_window(self, value=None):
        """  Corresponds to IDD Field `Right Distance Below Bottom of Window`
        N7 + N8 + height of Window/Door is height of Fin

        Args:
            value (float): value for IDD Field `Right Distance Below Bottom of Window`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `right_distance_below_bottom_of_window`'.format(value))
        self._data["Right Distance Below Bottom of Window"] = value

    @property
    def right_tilt_angle_from_window_or_door(self):
        """Get right_tilt_angle_from_window_or_door

        Returns:
            float: the value of `right_tilt_angle_from_window_or_door` or None if not set
        """
        return self._data["Right Tilt Angle from Window/Door"]

    @right_tilt_angle_from_window_or_door.setter
    def right_tilt_angle_from_window_or_door(self, value=90.0):
        """  Corresponds to IDD Field `Right Tilt Angle from Window/Door`

        Args:
            value (float): value for IDD Field `Right Tilt Angle from Window/Door`
                Units: deg
                Default value: 90.0
                value >= 0.0
                value <= 180.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `right_tilt_angle_from_window_or_door`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `right_tilt_angle_from_window_or_door`')
            if value > 180.0:
                raise ValueError('value need to be smaller 180.0 '
                                 'for field `right_tilt_angle_from_window_or_door`')
        self._data["Right Tilt Angle from Window/Door"] = value

    @property
    def right_depth_as_fraction_of_window_or_door_width(self):
        """Get right_depth_as_fraction_of_window_or_door_width

        Returns:
            float: the value of `right_depth_as_fraction_of_window_or_door_width` or None if not set
        """
        return self._data["Right Depth as Fraction of Window/Door Width"]

    @right_depth_as_fraction_of_window_or_door_width.setter
    def right_depth_as_fraction_of_window_or_door_width(self, value=None):
        """  Corresponds to IDD Field `Right Depth as Fraction of Window/Door Width`

        Args:
            value (float): value for IDD Field `Right Depth as Fraction of Window/Door Width`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `right_depth_as_fraction_of_window_or_door_width`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `right_depth_as_fraction_of_window_or_door_width`')
        self._data["Right Depth as Fraction of Window/Door Width"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ShadingZoneDetailed(object):
    """ Corresponds to IDD object `Shading:Zone:Detailed`
        used For fins, overhangs, elements that shade the building, are attached to the building
        but are not part of the heat transfer calculations
    
    """
    internal_name = "Shading:Zone:Detailed"
    field_count = 364
    required_fields = ["Name", "Base Surface Name", "Number of Vertices", "Vertex 1 X-coordinate", "Vertex 1 Y-coordinate", "Vertex 1 Z-coordinate", "Vertex 2 X-coordinate", "Vertex 2 Y-coordinate", "Vertex 2 Z-coordinate", "Vertex 3 X-coordinate", "Vertex 3 Y-coordinate", "Vertex 3 Z-coordinate"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Shading:Zone:Detailed`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Base Surface Name"] = None
        self._data["Transmittance Schedule Name"] = None
        self._data["Number of Vertices"] = None
        self._data["Vertex 1 X-coordinate"] = None
        self._data["Vertex 1 Y-coordinate"] = None
        self._data["Vertex 1 Z-coordinate"] = None
        self._data["Vertex 2 X-coordinate"] = None
        self._data["Vertex 2 Y-coordinate"] = None
        self._data["Vertex 2 Z-coordinate"] = None
        self._data["Vertex 3 X-coordinate"] = None
        self._data["Vertex 3 Y-coordinate"] = None
        self._data["Vertex 3 Z-coordinate"] = None
        self._data["Vertex 4 X-coordinate"] = None
        self._data["Vertex 4 Y-coordinate"] = None
        self._data["Vertex 4 Z-coordinate"] = None
        self._data["Vertex 5 X-coordinate"] = None
        self._data["Vertex 5 Y-coordinate"] = None
        self._data["Vertex 5 Z-coordinate"] = None
        self._data["Vertex 6 X-coordinate"] = None
        self._data["Vertex 6 Y-coordinate"] = None
        self._data["Vertex 6 Z-coordinate"] = None
        self._data["Vertex 7 X-coordinate"] = None
        self._data["Vertex 7 Y-coordinate"] = None
        self._data["Vertex 7 Z-coordinate"] = None
        self._data["Vertex 8 X-coordinate"] = None
        self._data["Vertex 8 Y-coordinate"] = None
        self._data["Vertex 8 Z-coordinate"] = None
        self._data["Vertex 9 X-coordinate"] = None
        self._data["Vertex 9 Y-coordinate"] = None
        self._data["Vertex 9 Z-coordinate"] = None
        self._data["Vertex 10 X-coordinate"] = None
        self._data["Vertex 10 Y-coordinate"] = None
        self._data["Vertex 10 Z-coordinate"] = None
        self._data["Vertex 11 X-coordinate"] = None
        self._data["Vertex 11 Y-coordinate"] = None
        self._data["Vertex 11 Z-coordinate"] = None
        self._data["Vertex 12 X-coordinate"] = None
        self._data["Vertex 12 Y-coordinate"] = None
        self._data["Vertex 12 Z-coordinate"] = None
        self._data["Vertex 13 X-coordinate"] = None
        self._data["Vertex 13 Y-coordinate"] = None
        self._data["Vertex 13 Z-coordinate"] = None
        self._data["Vertex 14 X-coordinate"] = None
        self._data["Vertex 14 Y-coordinate"] = None
        self._data["Vertex 14 Z-coordinate"] = None
        self._data["Vertex 15 X-coordinate"] = None
        self._data["Vertex 15 Y-coordinate"] = None
        self._data["Vertex 15 Z-coordinate"] = None
        self._data["Vertex 16 X-coordinate"] = None
        self._data["Vertex 16 Y-coordinate"] = None
        self._data["Vertex 16 Z-coordinate"] = None
        self._data["Vertex 17 X-coordinate"] = None
        self._data["Vertex 17 Y-coordinate"] = None
        self._data["Vertex 17 Z-coordinate"] = None
        self._data["Vertex 18 X-coordinate"] = None
        self._data["Vertex 18 Y-coordinate"] = None
        self._data["Vertex 18 Z-coordinate"] = None
        self._data["Vertex 19 X-coordinate"] = None
        self._data["Vertex 19 Y-coordinate"] = None
        self._data["Vertex 19 Z-coordinate"] = None
        self._data["Vertex 20 X-coordinate"] = None
        self._data["Vertex 20 Y-coordinate"] = None
        self._data["Vertex 20 Z-coordinate"] = None
        self._data["Vertex 21 X-coordinate"] = None
        self._data["Vertex 21 Y-coordinate"] = None
        self._data["Vertex 21 Z-coordinate"] = None
        self._data["Vertex 22 X-coordinate"] = None
        self._data["Vertex 22 Y-coordinate"] = None
        self._data["Vertex 22 Z-coordinate"] = None
        self._data["Vertex 23 X-coordinate"] = None
        self._data["Vertex 23 Y-coordinate"] = None
        self._data["Vertex 23 Z-coordinate"] = None
        self._data["Vertex 24 X-coordinate"] = None
        self._data["Vertex 24 Y-coordinate"] = None
        self._data["Vertex 24 Z-coordinate"] = None
        self._data["Vertex 25 X-coordinate"] = None
        self._data["Vertex 25 Y-coordinate"] = None
        self._data["Vertex 25 Z-coordinate"] = None
        self._data["Vertex 26 X-coordinate"] = None
        self._data["Vertex 26 Y-coordinate"] = None
        self._data["Vertex 26 Z-coordinate"] = None
        self._data["Vertex 27 X-coordinate"] = None
        self._data["Vertex 27 Y-coordinate"] = None
        self._data["Vertex 27 Z-coordinate"] = None
        self._data["Vertex 28 X-coordinate"] = None
        self._data["Vertex 28 Y-coordinate"] = None
        self._data["Vertex 28 Z-coordinate"] = None
        self._data["Vertex 29 X-coordinate"] = None
        self._data["Vertex 29 Y-coordinate"] = None
        self._data["Vertex 29 Z-coordinate"] = None
        self._data["Vertex 30 X-coordinate"] = None
        self._data["Vertex 30 Y-coordinate"] = None
        self._data["Vertex 30 Z-coordinate"] = None
        self._data["Vertex 31 X-coordinate"] = None
        self._data["Vertex 31 Y-coordinate"] = None
        self._data["Vertex 31 Z-coordinate"] = None
        self._data["Vertex 32 X-coordinate"] = None
        self._data["Vertex 32 Y-coordinate"] = None
        self._data["Vertex 32 Z-coordinate"] = None
        self._data["Vertex 33 X-coordinate"] = None
        self._data["Vertex 33 Y-coordinate"] = None
        self._data["Vertex 33 Z-coordinate"] = None
        self._data["Vertex 34 X-coordinate"] = None
        self._data["Vertex 34 Y-coordinate"] = None
        self._data["Vertex 34 Z-coordinate"] = None
        self._data["Vertex 35 X-coordinate"] = None
        self._data["Vertex 35 Y-coordinate"] = None
        self._data["Vertex 35 Z-coordinate"] = None
        self._data["Vertex 36 X-coordinate"] = None
        self._data["Vertex 36 Y-coordinate"] = None
        self._data["Vertex 36 Z-coordinate"] = None
        self._data["Vertex 37 X-coordinate"] = None
        self._data["Vertex 37 Y-coordinate"] = None
        self._data["Vertex 37 Z-coordinate"] = None
        self._data["Vertex 38 X-coordinate"] = None
        self._data["Vertex 38 Y-coordinate"] = None
        self._data["Vertex 38 Z-coordinate"] = None
        self._data["Vertex 39 X-coordinate"] = None
        self._data["Vertex 39 Y-coordinate"] = None
        self._data["Vertex 39 Z-coordinate"] = None
        self._data["Vertex 40 X-coordinate"] = None
        self._data["Vertex 40 Y-coordinate"] = None
        self._data["Vertex 40 Z-coordinate"] = None
        self._data["Vertex 41 X-coordinate"] = None
        self._data["Vertex 41 Y-coordinate"] = None
        self._data["Vertex 41 Z-coordinate"] = None
        self._data["Vertex 42 X-coordinate"] = None
        self._data["Vertex 42 Y-coordinate"] = None
        self._data["Vertex 42 Z-coordinate"] = None
        self._data["Vertex 43 X-coordinate"] = None
        self._data["Vertex 43 Y-coordinate"] = None
        self._data["Vertex 43 Z-coordinate"] = None
        self._data["Vertex 44 X-coordinate"] = None
        self._data["Vertex 44 Y-coordinate"] = None
        self._data["Vertex 44 Z-coordinate"] = None
        self._data["Vertex 45 X-coordinate"] = None
        self._data["Vertex 45 Y-coordinate"] = None
        self._data["Vertex 45 Z-coordinate"] = None
        self._data["Vertex 46 X-coordinate"] = None
        self._data["Vertex 46 Y-coordinate"] = None
        self._data["Vertex 46 Z-coordinate"] = None
        self._data["Vertex 47 X-coordinate"] = None
        self._data["Vertex 47 Y-coordinate"] = None
        self._data["Vertex 47 Z-coordinate"] = None
        self._data["Vertex 48 X-coordinate"] = None
        self._data["Vertex 48 Y-coordinate"] = None
        self._data["Vertex 48 Z-coordinate"] = None
        self._data["Vertex 49 X-coordinate"] = None
        self._data["Vertex 49 Y-coordinate"] = None
        self._data["Vertex 49 Z-coordinate"] = None
        self._data["Vertex 50 X-coordinate"] = None
        self._data["Vertex 50 Y-coordinate"] = None
        self._data["Vertex 50 Z-coordinate"] = None
        self._data["Vertex 51 X-coordinate"] = None
        self._data["Vertex 51 Y-coordinate"] = None
        self._data["Vertex 51 Z-coordinate"] = None
        self._data["Vertex 52 X-coordinate"] = None
        self._data["Vertex 52 Y-coordinate"] = None
        self._data["Vertex 52 Z-coordinate"] = None
        self._data["Vertex 53 X-coordinate"] = None
        self._data["Vertex 53 Y-coordinate"] = None
        self._data["Vertex 53 Z-coordinate"] = None
        self._data["Vertex 54 X-coordinate"] = None
        self._data["Vertex 54 Y-coordinate"] = None
        self._data["Vertex 54 Z-coordinate"] = None
        self._data["Vertex 55 X-coordinate"] = None
        self._data["Vertex 55 Y-coordinate"] = None
        self._data["Vertex 55 Z-coordinate"] = None
        self._data["Vertex 56 X-coordinate"] = None
        self._data["Vertex 56 Y-coordinate"] = None
        self._data["Vertex 56 Z-coordinate"] = None
        self._data["Vertex 57 X-coordinate"] = None
        self._data["Vertex 57 Y-coordinate"] = None
        self._data["Vertex 57 Z-coordinate"] = None
        self._data["Vertex 58 X-coordinate"] = None
        self._data["Vertex 58 Y-coordinate"] = None
        self._data["Vertex 58 Z-coordinate"] = None
        self._data["Vertex 59 X-coordinate"] = None
        self._data["Vertex 59 Y-coordinate"] = None
        self._data["Vertex 59 Z-coordinate"] = None
        self._data["Vertex 60 X-coordinate"] = None
        self._data["Vertex 60 Y-coordinate"] = None
        self._data["Vertex 60 Z-coordinate"] = None
        self._data["Vertex 61 X-coordinate"] = None
        self._data["Vertex 61 Y-coordinate"] = None
        self._data["Vertex 61 Z-coordinate"] = None
        self._data["Vertex 62 X-coordinate"] = None
        self._data["Vertex 62 Y-coordinate"] = None
        self._data["Vertex 62 Z-coordinate"] = None
        self._data["Vertex 63 X-coordinate"] = None
        self._data["Vertex 63 Y-coordinate"] = None
        self._data["Vertex 63 Z-coordinate"] = None
        self._data["Vertex 64 X-coordinate"] = None
        self._data["Vertex 64 Y-coordinate"] = None
        self._data["Vertex 64 Z-coordinate"] = None
        self._data["Vertex 65 X-coordinate"] = None
        self._data["Vertex 65 Y-coordinate"] = None
        self._data["Vertex 65 Z-coordinate"] = None
        self._data["Vertex 66 X-coordinate"] = None
        self._data["Vertex 66 Y-coordinate"] = None
        self._data["Vertex 66 Z-coordinate"] = None
        self._data["Vertex 67 X-coordinate"] = None
        self._data["Vertex 67 Y-coordinate"] = None
        self._data["Vertex 67 Z-coordinate"] = None
        self._data["Vertex 68 X-coordinate"] = None
        self._data["Vertex 68 Y-coordinate"] = None
        self._data["Vertex 68 Z-coordinate"] = None
        self._data["Vertex 69 X-coordinate"] = None
        self._data["Vertex 69 Y-coordinate"] = None
        self._data["Vertex 69 Z-coordinate"] = None
        self._data["Vertex 70 X-coordinate"] = None
        self._data["Vertex 70 Y-coordinate"] = None
        self._data["Vertex 70 Z-coordinate"] = None
        self._data["Vertex 71 X-coordinate"] = None
        self._data["Vertex 71 Y-coordinate"] = None
        self._data["Vertex 71 Z-coordinate"] = None
        self._data["Vertex 72 X-coordinate"] = None
        self._data["Vertex 72 Y-coordinate"] = None
        self._data["Vertex 72 Z-coordinate"] = None
        self._data["Vertex 73 X-coordinate"] = None
        self._data["Vertex 73 Y-coordinate"] = None
        self._data["Vertex 73 Z-coordinate"] = None
        self._data["Vertex 74 X-coordinate"] = None
        self._data["Vertex 74 Y-coordinate"] = None
        self._data["Vertex 74 Z-coordinate"] = None
        self._data["Vertex 75 X-coordinate"] = None
        self._data["Vertex 75 Y-coordinate"] = None
        self._data["Vertex 75 Z-coordinate"] = None
        self._data["Vertex 76 X-coordinate"] = None
        self._data["Vertex 76 Y-coordinate"] = None
        self._data["Vertex 76 Z-coordinate"] = None
        self._data["Vertex 77 X-coordinate"] = None
        self._data["Vertex 77 Y-coordinate"] = None
        self._data["Vertex 77 Z-coordinate"] = None
        self._data["Vertex 78 X-coordinate"] = None
        self._data["Vertex 78 Y-coordinate"] = None
        self._data["Vertex 78 Z-coordinate"] = None
        self._data["Vertex 79 X-coordinate"] = None
        self._data["Vertex 79 Y-coordinate"] = None
        self._data["Vertex 79 Z-coordinate"] = None
        self._data["Vertex 80 X-coordinate"] = None
        self._data["Vertex 80 Y-coordinate"] = None
        self._data["Vertex 80 Z-coordinate"] = None
        self._data["Vertex 81 X-coordinate"] = None
        self._data["Vertex 81 Y-coordinate"] = None
        self._data["Vertex 81 Z-coordinate"] = None
        self._data["Vertex 82 X-coordinate"] = None
        self._data["Vertex 82 Y-coordinate"] = None
        self._data["Vertex 82 Z-coordinate"] = None
        self._data["Vertex 83 X-coordinate"] = None
        self._data["Vertex 83 Y-coordinate"] = None
        self._data["Vertex 83 Z-coordinate"] = None
        self._data["Vertex 84 X-coordinate"] = None
        self._data["Vertex 84 Y-coordinate"] = None
        self._data["Vertex 84 Z-coordinate"] = None
        self._data["Vertex 85 X-coordinate"] = None
        self._data["Vertex 85 Y-coordinate"] = None
        self._data["Vertex 85 Z-coordinate"] = None
        self._data["Vertex 86 X-coordinate"] = None
        self._data["Vertex 86 Y-coordinate"] = None
        self._data["Vertex 86 Z-coordinate"] = None
        self._data["Vertex 87 X-coordinate"] = None
        self._data["Vertex 87 Y-coordinate"] = None
        self._data["Vertex 87 Z-coordinate"] = None
        self._data["Vertex 88 X-coordinate"] = None
        self._data["Vertex 88 Y-coordinate"] = None
        self._data["Vertex 88 Z-coordinate"] = None
        self._data["Vertex 89 X-coordinate"] = None
        self._data["Vertex 89 Y-coordinate"] = None
        self._data["Vertex 89 Z-coordinate"] = None
        self._data["Vertex 90 X-coordinate"] = None
        self._data["Vertex 90 Y-coordinate"] = None
        self._data["Vertex 90 Z-coordinate"] = None
        self._data["Vertex 91 X-coordinate"] = None
        self._data["Vertex 91 Y-coordinate"] = None
        self._data["Vertex 91 Z-coordinate"] = None
        self._data["Vertex 92 X-coordinate"] = None
        self._data["Vertex 92 Y-coordinate"] = None
        self._data["Vertex 92 Z-coordinate"] = None
        self._data["Vertex 93 X-coordinate"] = None
        self._data["Vertex 93 Y-coordinate"] = None
        self._data["Vertex 93 Z-coordinate"] = None
        self._data["Vertex 94 X-coordinate"] = None
        self._data["Vertex 94 Y-coordinate"] = None
        self._data["Vertex 94 Z-coordinate"] = None
        self._data["Vertex 95 X-coordinate"] = None
        self._data["Vertex 95 Y-coordinate"] = None
        self._data["Vertex 95 Z-coordinate"] = None
        self._data["Vertex 96 X-coordinate"] = None
        self._data["Vertex 96 Y-coordinate"] = None
        self._data["Vertex 96 Z-coordinate"] = None
        self._data["Vertex 97 X-coordinate"] = None
        self._data["Vertex 97 Y-coordinate"] = None
        self._data["Vertex 97 Z-coordinate"] = None
        self._data["Vertex 98 X-coordinate"] = None
        self._data["Vertex 98 Y-coordinate"] = None
        self._data["Vertex 98 Z-coordinate"] = None
        self._data["Vertex 99 X-coordinate"] = None
        self._data["Vertex 99 Y-coordinate"] = None
        self._data["Vertex 99 Z-coordinate"] = None
        self._data["Vertex 100 X-coordinate"] = None
        self._data["Vertex 100 Y-coordinate"] = None
        self._data["Vertex 100 Z-coordinate"] = None
        self._data["Vertex 101 X-coordinate"] = None
        self._data["Vertex 101 Y-coordinate"] = None
        self._data["Vertex 101 Z-coordinate"] = None
        self._data["Vertex 102 X-coordinate"] = None
        self._data["Vertex 102 Y-coordinate"] = None
        self._data["Vertex 102 Z-coordinate"] = None
        self._data["Vertex 103 X-coordinate"] = None
        self._data["Vertex 103 Y-coordinate"] = None
        self._data["Vertex 103 Z-coordinate"] = None
        self._data["Vertex 104 X-coordinate"] = None
        self._data["Vertex 104 Y-coordinate"] = None
        self._data["Vertex 104 Z-coordinate"] = None
        self._data["Vertex 105 X-coordinate"] = None
        self._data["Vertex 105 Y-coordinate"] = None
        self._data["Vertex 105 Z-coordinate"] = None
        self._data["Vertex 106 X-coordinate"] = None
        self._data["Vertex 106 Y-coordinate"] = None
        self._data["Vertex 106 Z-coordinate"] = None
        self._data["Vertex 107 X-coordinate"] = None
        self._data["Vertex 107 Y-coordinate"] = None
        self._data["Vertex 107 Z-coordinate"] = None
        self._data["Vertex 108 X-coordinate"] = None
        self._data["Vertex 108 Y-coordinate"] = None
        self._data["Vertex 108 Z-coordinate"] = None
        self._data["Vertex 109 X-coordinate"] = None
        self._data["Vertex 109 Y-coordinate"] = None
        self._data["Vertex 109 Z-coordinate"] = None
        self._data["Vertex 110 X-coordinate"] = None
        self._data["Vertex 110 Y-coordinate"] = None
        self._data["Vertex 110 Z-coordinate"] = None
        self._data["Vertex 111 X-coordinate"] = None
        self._data["Vertex 111 Y-coordinate"] = None
        self._data["Vertex 111 Z-coordinate"] = None
        self._data["Vertex 112 X-coordinate"] = None
        self._data["Vertex 112 Y-coordinate"] = None
        self._data["Vertex 112 Z-coordinate"] = None
        self._data["Vertex 113 X-coordinate"] = None
        self._data["Vertex 113 Y-coordinate"] = None
        self._data["Vertex 113 Z-coordinate"] = None
        self._data["Vertex 114 X-coordinate"] = None
        self._data["Vertex 114 Y-coordinate"] = None
        self._data["Vertex 114 Z-coordinate"] = None
        self._data["Vertex 115 X-coordinate"] = None
        self._data["Vertex 115 Y-coordinate"] = None
        self._data["Vertex 115 Z-coordinate"] = None
        self._data["Vertex 116 X-coordinate"] = None
        self._data["Vertex 116 Y-coordinate"] = None
        self._data["Vertex 116 Z-coordinate"] = None
        self._data["Vertex 117 X-coordinate"] = None
        self._data["Vertex 117 Y-coordinate"] = None
        self._data["Vertex 117 Z-coordinate"] = None
        self._data["Vertex 118 X-coordinate"] = None
        self._data["Vertex 118 Y-coordinate"] = None
        self._data["Vertex 118 Z-coordinate"] = None
        self._data["Vertex 119 X-coordinate"] = None
        self._data["Vertex 119 Y-coordinate"] = None
        self._data["Vertex 119 Z-coordinate"] = None
        self._data["Vertex 120 X-coordinate"] = None
        self._data["Vertex 120 Y-coordinate"] = None
        self._data["Vertex 120 Z-coordinate"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.base_surface_name = None
        else:
            self.base_surface_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.transmittance_schedule_name = None
        else:
            self.transmittance_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_vertices = None
        else:
            self.number_of_vertices = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_xcoordinate = None
        else:
            self.vertex_1_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_ycoordinate = None
        else:
            self.vertex_1_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_1_zcoordinate = None
        else:
            self.vertex_1_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_xcoordinate = None
        else:
            self.vertex_2_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_ycoordinate = None
        else:
            self.vertex_2_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_2_zcoordinate = None
        else:
            self.vertex_2_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_xcoordinate = None
        else:
            self.vertex_3_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_ycoordinate = None
        else:
            self.vertex_3_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_3_zcoordinate = None
        else:
            self.vertex_3_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_xcoordinate = None
        else:
            self.vertex_4_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_ycoordinate = None
        else:
            self.vertex_4_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_4_zcoordinate = None
        else:
            self.vertex_4_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_xcoordinate = None
        else:
            self.vertex_5_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_ycoordinate = None
        else:
            self.vertex_5_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_5_zcoordinate = None
        else:
            self.vertex_5_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_xcoordinate = None
        else:
            self.vertex_6_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_ycoordinate = None
        else:
            self.vertex_6_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_6_zcoordinate = None
        else:
            self.vertex_6_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_xcoordinate = None
        else:
            self.vertex_7_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_ycoordinate = None
        else:
            self.vertex_7_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_7_zcoordinate = None
        else:
            self.vertex_7_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_xcoordinate = None
        else:
            self.vertex_8_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_ycoordinate = None
        else:
            self.vertex_8_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_8_zcoordinate = None
        else:
            self.vertex_8_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_xcoordinate = None
        else:
            self.vertex_9_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_ycoordinate = None
        else:
            self.vertex_9_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_9_zcoordinate = None
        else:
            self.vertex_9_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_xcoordinate = None
        else:
            self.vertex_10_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_ycoordinate = None
        else:
            self.vertex_10_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_10_zcoordinate = None
        else:
            self.vertex_10_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_11_xcoordinate = None
        else:
            self.vertex_11_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_11_ycoordinate = None
        else:
            self.vertex_11_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_11_zcoordinate = None
        else:
            self.vertex_11_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_12_xcoordinate = None
        else:
            self.vertex_12_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_12_ycoordinate = None
        else:
            self.vertex_12_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_12_zcoordinate = None
        else:
            self.vertex_12_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_13_xcoordinate = None
        else:
            self.vertex_13_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_13_ycoordinate = None
        else:
            self.vertex_13_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_13_zcoordinate = None
        else:
            self.vertex_13_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_14_xcoordinate = None
        else:
            self.vertex_14_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_14_ycoordinate = None
        else:
            self.vertex_14_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_14_zcoordinate = None
        else:
            self.vertex_14_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_15_xcoordinate = None
        else:
            self.vertex_15_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_15_ycoordinate = None
        else:
            self.vertex_15_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_15_zcoordinate = None
        else:
            self.vertex_15_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_16_xcoordinate = None
        else:
            self.vertex_16_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_16_ycoordinate = None
        else:
            self.vertex_16_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_16_zcoordinate = None
        else:
            self.vertex_16_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_17_xcoordinate = None
        else:
            self.vertex_17_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_17_ycoordinate = None
        else:
            self.vertex_17_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_17_zcoordinate = None
        else:
            self.vertex_17_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_18_xcoordinate = None
        else:
            self.vertex_18_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_18_ycoordinate = None
        else:
            self.vertex_18_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_18_zcoordinate = None
        else:
            self.vertex_18_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_19_xcoordinate = None
        else:
            self.vertex_19_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_19_ycoordinate = None
        else:
            self.vertex_19_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_19_zcoordinate = None
        else:
            self.vertex_19_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_20_xcoordinate = None
        else:
            self.vertex_20_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_20_ycoordinate = None
        else:
            self.vertex_20_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_20_zcoordinate = None
        else:
            self.vertex_20_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_21_xcoordinate = None
        else:
            self.vertex_21_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_21_ycoordinate = None
        else:
            self.vertex_21_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_21_zcoordinate = None
        else:
            self.vertex_21_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_22_xcoordinate = None
        else:
            self.vertex_22_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_22_ycoordinate = None
        else:
            self.vertex_22_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_22_zcoordinate = None
        else:
            self.vertex_22_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_23_xcoordinate = None
        else:
            self.vertex_23_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_23_ycoordinate = None
        else:
            self.vertex_23_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_23_zcoordinate = None
        else:
            self.vertex_23_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_24_xcoordinate = None
        else:
            self.vertex_24_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_24_ycoordinate = None
        else:
            self.vertex_24_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_24_zcoordinate = None
        else:
            self.vertex_24_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_25_xcoordinate = None
        else:
            self.vertex_25_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_25_ycoordinate = None
        else:
            self.vertex_25_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_25_zcoordinate = None
        else:
            self.vertex_25_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_26_xcoordinate = None
        else:
            self.vertex_26_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_26_ycoordinate = None
        else:
            self.vertex_26_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_26_zcoordinate = None
        else:
            self.vertex_26_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_27_xcoordinate = None
        else:
            self.vertex_27_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_27_ycoordinate = None
        else:
            self.vertex_27_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_27_zcoordinate = None
        else:
            self.vertex_27_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_28_xcoordinate = None
        else:
            self.vertex_28_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_28_ycoordinate = None
        else:
            self.vertex_28_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_28_zcoordinate = None
        else:
            self.vertex_28_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_29_xcoordinate = None
        else:
            self.vertex_29_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_29_ycoordinate = None
        else:
            self.vertex_29_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_29_zcoordinate = None
        else:
            self.vertex_29_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_30_xcoordinate = None
        else:
            self.vertex_30_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_30_ycoordinate = None
        else:
            self.vertex_30_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_30_zcoordinate = None
        else:
            self.vertex_30_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_31_xcoordinate = None
        else:
            self.vertex_31_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_31_ycoordinate = None
        else:
            self.vertex_31_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_31_zcoordinate = None
        else:
            self.vertex_31_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_32_xcoordinate = None
        else:
            self.vertex_32_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_32_ycoordinate = None
        else:
            self.vertex_32_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_32_zcoordinate = None
        else:
            self.vertex_32_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_33_xcoordinate = None
        else:
            self.vertex_33_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_33_ycoordinate = None
        else:
            self.vertex_33_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_33_zcoordinate = None
        else:
            self.vertex_33_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_34_xcoordinate = None
        else:
            self.vertex_34_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_34_ycoordinate = None
        else:
            self.vertex_34_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_34_zcoordinate = None
        else:
            self.vertex_34_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_35_xcoordinate = None
        else:
            self.vertex_35_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_35_ycoordinate = None
        else:
            self.vertex_35_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_35_zcoordinate = None
        else:
            self.vertex_35_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_36_xcoordinate = None
        else:
            self.vertex_36_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_36_ycoordinate = None
        else:
            self.vertex_36_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_36_zcoordinate = None
        else:
            self.vertex_36_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_37_xcoordinate = None
        else:
            self.vertex_37_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_37_ycoordinate = None
        else:
            self.vertex_37_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_37_zcoordinate = None
        else:
            self.vertex_37_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_38_xcoordinate = None
        else:
            self.vertex_38_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_38_ycoordinate = None
        else:
            self.vertex_38_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_38_zcoordinate = None
        else:
            self.vertex_38_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_39_xcoordinate = None
        else:
            self.vertex_39_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_39_ycoordinate = None
        else:
            self.vertex_39_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_39_zcoordinate = None
        else:
            self.vertex_39_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_40_xcoordinate = None
        else:
            self.vertex_40_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_40_ycoordinate = None
        else:
            self.vertex_40_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_40_zcoordinate = None
        else:
            self.vertex_40_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_41_xcoordinate = None
        else:
            self.vertex_41_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_41_ycoordinate = None
        else:
            self.vertex_41_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_41_zcoordinate = None
        else:
            self.vertex_41_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_42_xcoordinate = None
        else:
            self.vertex_42_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_42_ycoordinate = None
        else:
            self.vertex_42_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_42_zcoordinate = None
        else:
            self.vertex_42_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_43_xcoordinate = None
        else:
            self.vertex_43_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_43_ycoordinate = None
        else:
            self.vertex_43_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_43_zcoordinate = None
        else:
            self.vertex_43_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_44_xcoordinate = None
        else:
            self.vertex_44_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_44_ycoordinate = None
        else:
            self.vertex_44_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_44_zcoordinate = None
        else:
            self.vertex_44_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_45_xcoordinate = None
        else:
            self.vertex_45_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_45_ycoordinate = None
        else:
            self.vertex_45_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_45_zcoordinate = None
        else:
            self.vertex_45_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_46_xcoordinate = None
        else:
            self.vertex_46_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_46_ycoordinate = None
        else:
            self.vertex_46_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_46_zcoordinate = None
        else:
            self.vertex_46_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_47_xcoordinate = None
        else:
            self.vertex_47_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_47_ycoordinate = None
        else:
            self.vertex_47_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_47_zcoordinate = None
        else:
            self.vertex_47_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_48_xcoordinate = None
        else:
            self.vertex_48_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_48_ycoordinate = None
        else:
            self.vertex_48_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_48_zcoordinate = None
        else:
            self.vertex_48_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_49_xcoordinate = None
        else:
            self.vertex_49_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_49_ycoordinate = None
        else:
            self.vertex_49_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_49_zcoordinate = None
        else:
            self.vertex_49_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_50_xcoordinate = None
        else:
            self.vertex_50_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_50_ycoordinate = None
        else:
            self.vertex_50_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_50_zcoordinate = None
        else:
            self.vertex_50_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_51_xcoordinate = None
        else:
            self.vertex_51_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_51_ycoordinate = None
        else:
            self.vertex_51_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_51_zcoordinate = None
        else:
            self.vertex_51_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_52_xcoordinate = None
        else:
            self.vertex_52_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_52_ycoordinate = None
        else:
            self.vertex_52_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_52_zcoordinate = None
        else:
            self.vertex_52_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_53_xcoordinate = None
        else:
            self.vertex_53_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_53_ycoordinate = None
        else:
            self.vertex_53_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_53_zcoordinate = None
        else:
            self.vertex_53_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_54_xcoordinate = None
        else:
            self.vertex_54_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_54_ycoordinate = None
        else:
            self.vertex_54_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_54_zcoordinate = None
        else:
            self.vertex_54_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_55_xcoordinate = None
        else:
            self.vertex_55_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_55_ycoordinate = None
        else:
            self.vertex_55_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_55_zcoordinate = None
        else:
            self.vertex_55_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_56_xcoordinate = None
        else:
            self.vertex_56_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_56_ycoordinate = None
        else:
            self.vertex_56_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_56_zcoordinate = None
        else:
            self.vertex_56_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_57_xcoordinate = None
        else:
            self.vertex_57_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_57_ycoordinate = None
        else:
            self.vertex_57_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_57_zcoordinate = None
        else:
            self.vertex_57_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_58_xcoordinate = None
        else:
            self.vertex_58_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_58_ycoordinate = None
        else:
            self.vertex_58_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_58_zcoordinate = None
        else:
            self.vertex_58_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_59_xcoordinate = None
        else:
            self.vertex_59_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_59_ycoordinate = None
        else:
            self.vertex_59_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_59_zcoordinate = None
        else:
            self.vertex_59_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_60_xcoordinate = None
        else:
            self.vertex_60_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_60_ycoordinate = None
        else:
            self.vertex_60_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_60_zcoordinate = None
        else:
            self.vertex_60_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_61_xcoordinate = None
        else:
            self.vertex_61_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_61_ycoordinate = None
        else:
            self.vertex_61_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_61_zcoordinate = None
        else:
            self.vertex_61_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_62_xcoordinate = None
        else:
            self.vertex_62_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_62_ycoordinate = None
        else:
            self.vertex_62_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_62_zcoordinate = None
        else:
            self.vertex_62_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_63_xcoordinate = None
        else:
            self.vertex_63_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_63_ycoordinate = None
        else:
            self.vertex_63_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_63_zcoordinate = None
        else:
            self.vertex_63_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_64_xcoordinate = None
        else:
            self.vertex_64_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_64_ycoordinate = None
        else:
            self.vertex_64_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_64_zcoordinate = None
        else:
            self.vertex_64_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_65_xcoordinate = None
        else:
            self.vertex_65_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_65_ycoordinate = None
        else:
            self.vertex_65_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_65_zcoordinate = None
        else:
            self.vertex_65_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_66_xcoordinate = None
        else:
            self.vertex_66_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_66_ycoordinate = None
        else:
            self.vertex_66_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_66_zcoordinate = None
        else:
            self.vertex_66_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_67_xcoordinate = None
        else:
            self.vertex_67_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_67_ycoordinate = None
        else:
            self.vertex_67_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_67_zcoordinate = None
        else:
            self.vertex_67_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_68_xcoordinate = None
        else:
            self.vertex_68_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_68_ycoordinate = None
        else:
            self.vertex_68_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_68_zcoordinate = None
        else:
            self.vertex_68_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_69_xcoordinate = None
        else:
            self.vertex_69_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_69_ycoordinate = None
        else:
            self.vertex_69_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_69_zcoordinate = None
        else:
            self.vertex_69_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_70_xcoordinate = None
        else:
            self.vertex_70_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_70_ycoordinate = None
        else:
            self.vertex_70_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_70_zcoordinate = None
        else:
            self.vertex_70_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_71_xcoordinate = None
        else:
            self.vertex_71_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_71_ycoordinate = None
        else:
            self.vertex_71_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_71_zcoordinate = None
        else:
            self.vertex_71_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_72_xcoordinate = None
        else:
            self.vertex_72_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_72_ycoordinate = None
        else:
            self.vertex_72_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_72_zcoordinate = None
        else:
            self.vertex_72_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_73_xcoordinate = None
        else:
            self.vertex_73_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_73_ycoordinate = None
        else:
            self.vertex_73_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_73_zcoordinate = None
        else:
            self.vertex_73_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_74_xcoordinate = None
        else:
            self.vertex_74_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_74_ycoordinate = None
        else:
            self.vertex_74_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_74_zcoordinate = None
        else:
            self.vertex_74_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_75_xcoordinate = None
        else:
            self.vertex_75_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_75_ycoordinate = None
        else:
            self.vertex_75_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_75_zcoordinate = None
        else:
            self.vertex_75_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_76_xcoordinate = None
        else:
            self.vertex_76_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_76_ycoordinate = None
        else:
            self.vertex_76_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_76_zcoordinate = None
        else:
            self.vertex_76_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_77_xcoordinate = None
        else:
            self.vertex_77_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_77_ycoordinate = None
        else:
            self.vertex_77_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_77_zcoordinate = None
        else:
            self.vertex_77_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_78_xcoordinate = None
        else:
            self.vertex_78_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_78_ycoordinate = None
        else:
            self.vertex_78_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_78_zcoordinate = None
        else:
            self.vertex_78_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_79_xcoordinate = None
        else:
            self.vertex_79_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_79_ycoordinate = None
        else:
            self.vertex_79_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_79_zcoordinate = None
        else:
            self.vertex_79_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_80_xcoordinate = None
        else:
            self.vertex_80_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_80_ycoordinate = None
        else:
            self.vertex_80_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_80_zcoordinate = None
        else:
            self.vertex_80_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_81_xcoordinate = None
        else:
            self.vertex_81_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_81_ycoordinate = None
        else:
            self.vertex_81_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_81_zcoordinate = None
        else:
            self.vertex_81_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_82_xcoordinate = None
        else:
            self.vertex_82_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_82_ycoordinate = None
        else:
            self.vertex_82_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_82_zcoordinate = None
        else:
            self.vertex_82_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_83_xcoordinate = None
        else:
            self.vertex_83_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_83_ycoordinate = None
        else:
            self.vertex_83_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_83_zcoordinate = None
        else:
            self.vertex_83_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_84_xcoordinate = None
        else:
            self.vertex_84_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_84_ycoordinate = None
        else:
            self.vertex_84_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_84_zcoordinate = None
        else:
            self.vertex_84_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_85_xcoordinate = None
        else:
            self.vertex_85_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_85_ycoordinate = None
        else:
            self.vertex_85_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_85_zcoordinate = None
        else:
            self.vertex_85_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_86_xcoordinate = None
        else:
            self.vertex_86_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_86_ycoordinate = None
        else:
            self.vertex_86_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_86_zcoordinate = None
        else:
            self.vertex_86_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_87_xcoordinate = None
        else:
            self.vertex_87_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_87_ycoordinate = None
        else:
            self.vertex_87_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_87_zcoordinate = None
        else:
            self.vertex_87_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_88_xcoordinate = None
        else:
            self.vertex_88_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_88_ycoordinate = None
        else:
            self.vertex_88_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_88_zcoordinate = None
        else:
            self.vertex_88_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_89_xcoordinate = None
        else:
            self.vertex_89_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_89_ycoordinate = None
        else:
            self.vertex_89_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_89_zcoordinate = None
        else:
            self.vertex_89_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_90_xcoordinate = None
        else:
            self.vertex_90_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_90_ycoordinate = None
        else:
            self.vertex_90_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_90_zcoordinate = None
        else:
            self.vertex_90_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_91_xcoordinate = None
        else:
            self.vertex_91_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_91_ycoordinate = None
        else:
            self.vertex_91_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_91_zcoordinate = None
        else:
            self.vertex_91_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_92_xcoordinate = None
        else:
            self.vertex_92_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_92_ycoordinate = None
        else:
            self.vertex_92_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_92_zcoordinate = None
        else:
            self.vertex_92_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_93_xcoordinate = None
        else:
            self.vertex_93_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_93_ycoordinate = None
        else:
            self.vertex_93_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_93_zcoordinate = None
        else:
            self.vertex_93_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_94_xcoordinate = None
        else:
            self.vertex_94_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_94_ycoordinate = None
        else:
            self.vertex_94_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_94_zcoordinate = None
        else:
            self.vertex_94_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_95_xcoordinate = None
        else:
            self.vertex_95_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_95_ycoordinate = None
        else:
            self.vertex_95_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_95_zcoordinate = None
        else:
            self.vertex_95_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_96_xcoordinate = None
        else:
            self.vertex_96_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_96_ycoordinate = None
        else:
            self.vertex_96_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_96_zcoordinate = None
        else:
            self.vertex_96_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_97_xcoordinate = None
        else:
            self.vertex_97_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_97_ycoordinate = None
        else:
            self.vertex_97_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_97_zcoordinate = None
        else:
            self.vertex_97_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_98_xcoordinate = None
        else:
            self.vertex_98_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_98_ycoordinate = None
        else:
            self.vertex_98_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_98_zcoordinate = None
        else:
            self.vertex_98_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_99_xcoordinate = None
        else:
            self.vertex_99_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_99_ycoordinate = None
        else:
            self.vertex_99_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_99_zcoordinate = None
        else:
            self.vertex_99_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_100_xcoordinate = None
        else:
            self.vertex_100_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_100_ycoordinate = None
        else:
            self.vertex_100_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_100_zcoordinate = None
        else:
            self.vertex_100_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_101_xcoordinate = None
        else:
            self.vertex_101_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_101_ycoordinate = None
        else:
            self.vertex_101_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_101_zcoordinate = None
        else:
            self.vertex_101_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_102_xcoordinate = None
        else:
            self.vertex_102_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_102_ycoordinate = None
        else:
            self.vertex_102_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_102_zcoordinate = None
        else:
            self.vertex_102_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_103_xcoordinate = None
        else:
            self.vertex_103_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_103_ycoordinate = None
        else:
            self.vertex_103_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_103_zcoordinate = None
        else:
            self.vertex_103_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_104_xcoordinate = None
        else:
            self.vertex_104_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_104_ycoordinate = None
        else:
            self.vertex_104_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_104_zcoordinate = None
        else:
            self.vertex_104_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_105_xcoordinate = None
        else:
            self.vertex_105_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_105_ycoordinate = None
        else:
            self.vertex_105_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_105_zcoordinate = None
        else:
            self.vertex_105_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_106_xcoordinate = None
        else:
            self.vertex_106_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_106_ycoordinate = None
        else:
            self.vertex_106_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_106_zcoordinate = None
        else:
            self.vertex_106_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_107_xcoordinate = None
        else:
            self.vertex_107_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_107_ycoordinate = None
        else:
            self.vertex_107_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_107_zcoordinate = None
        else:
            self.vertex_107_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_108_xcoordinate = None
        else:
            self.vertex_108_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_108_ycoordinate = None
        else:
            self.vertex_108_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_108_zcoordinate = None
        else:
            self.vertex_108_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_109_xcoordinate = None
        else:
            self.vertex_109_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_109_ycoordinate = None
        else:
            self.vertex_109_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_109_zcoordinate = None
        else:
            self.vertex_109_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_110_xcoordinate = None
        else:
            self.vertex_110_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_110_ycoordinate = None
        else:
            self.vertex_110_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_110_zcoordinate = None
        else:
            self.vertex_110_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_111_xcoordinate = None
        else:
            self.vertex_111_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_111_ycoordinate = None
        else:
            self.vertex_111_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_111_zcoordinate = None
        else:
            self.vertex_111_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_112_xcoordinate = None
        else:
            self.vertex_112_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_112_ycoordinate = None
        else:
            self.vertex_112_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_112_zcoordinate = None
        else:
            self.vertex_112_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_113_xcoordinate = None
        else:
            self.vertex_113_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_113_ycoordinate = None
        else:
            self.vertex_113_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_113_zcoordinate = None
        else:
            self.vertex_113_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_114_xcoordinate = None
        else:
            self.vertex_114_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_114_ycoordinate = None
        else:
            self.vertex_114_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_114_zcoordinate = None
        else:
            self.vertex_114_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_115_xcoordinate = None
        else:
            self.vertex_115_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_115_ycoordinate = None
        else:
            self.vertex_115_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_115_zcoordinate = None
        else:
            self.vertex_115_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_116_xcoordinate = None
        else:
            self.vertex_116_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_116_ycoordinate = None
        else:
            self.vertex_116_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_116_zcoordinate = None
        else:
            self.vertex_116_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_117_xcoordinate = None
        else:
            self.vertex_117_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_117_ycoordinate = None
        else:
            self.vertex_117_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_117_zcoordinate = None
        else:
            self.vertex_117_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_118_xcoordinate = None
        else:
            self.vertex_118_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_118_ycoordinate = None
        else:
            self.vertex_118_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_118_zcoordinate = None
        else:
            self.vertex_118_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_119_xcoordinate = None
        else:
            self.vertex_119_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_119_ycoordinate = None
        else:
            self.vertex_119_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_119_zcoordinate = None
        else:
            self.vertex_119_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_120_xcoordinate = None
        else:
            self.vertex_120_xcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_120_ycoordinate = None
        else:
            self.vertex_120_ycoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vertex_120_zcoordinate = None
        else:
            self.vertex_120_zcoordinate = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def base_surface_name(self):
        """Get base_surface_name

        Returns:
            str: the value of `base_surface_name` or None if not set
        """
        return self._data["Base Surface Name"]

    @base_surface_name.setter
    def base_surface_name(self, value=None):
        """  Corresponds to IDD Field `Base Surface Name`

        Args:
            value (str): value for IDD Field `Base Surface Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `base_surface_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `base_surface_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `base_surface_name`')
        self._data["Base Surface Name"] = value

    @property
    def transmittance_schedule_name(self):
        """Get transmittance_schedule_name

        Returns:
            str: the value of `transmittance_schedule_name` or None if not set
        """
        return self._data["Transmittance Schedule Name"]

    @transmittance_schedule_name.setter
    def transmittance_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Transmittance Schedule Name`
        Transmittance schedule for the shading device, defaults to zero (always opaque)

        Args:
            value (str): value for IDD Field `Transmittance Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `transmittance_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `transmittance_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `transmittance_schedule_name`')
        self._data["Transmittance Schedule Name"] = value

    @property
    def number_of_vertices(self):
        """Get number_of_vertices

        Returns:
            float: the value of `number_of_vertices` or None if not set
        """
        return self._data["Number of Vertices"]

    @number_of_vertices.setter
    def number_of_vertices(self, value="autocalculate"):
        """  Corresponds to IDD Field `Number of Vertices`
        shown with 6 vertex coordinates -- extensible object
        vertices are given in GlobalGeometryRules coordinates -- if relative, all surface coordinates
        are "relative" to the Zone Origin.  if world, then building and zone origins are used
        for some internal calculations, but all coordinates are given in an "absolute" system.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Number of Vertices`
                Default value: "autocalculate"
                value >= 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Number of Vertices"] = "Autocalculate"
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_vertices`'.format(value))
            if value < 3.0:
                raise ValueError('value need to be greater or equal 3.0 '
                                 'for field `number_of_vertices`')
        self._data["Number of Vertices"] = value

    @property
    def vertex_1_xcoordinate(self):
        """Get vertex_1_xcoordinate

        Returns:
            float: the value of `vertex_1_xcoordinate` or None if not set
        """
        return self._data["Vertex 1 X-coordinate"]

    @vertex_1_xcoordinate.setter
    def vertex_1_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_xcoordinate`'.format(value))
        self._data["Vertex 1 X-coordinate"] = value

    @property
    def vertex_1_ycoordinate(self):
        """Get vertex_1_ycoordinate

        Returns:
            float: the value of `vertex_1_ycoordinate` or None if not set
        """
        return self._data["Vertex 1 Y-coordinate"]

    @vertex_1_ycoordinate.setter
    def vertex_1_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_ycoordinate`'.format(value))
        self._data["Vertex 1 Y-coordinate"] = value

    @property
    def vertex_1_zcoordinate(self):
        """Get vertex_1_zcoordinate

        Returns:
            float: the value of `vertex_1_zcoordinate` or None if not set
        """
        return self._data["Vertex 1 Z-coordinate"]

    @vertex_1_zcoordinate.setter
    def vertex_1_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 1 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 1 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_1_zcoordinate`'.format(value))
        self._data["Vertex 1 Z-coordinate"] = value

    @property
    def vertex_2_xcoordinate(self):
        """Get vertex_2_xcoordinate

        Returns:
            float: the value of `vertex_2_xcoordinate` or None if not set
        """
        return self._data["Vertex 2 X-coordinate"]

    @vertex_2_xcoordinate.setter
    def vertex_2_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_xcoordinate`'.format(value))
        self._data["Vertex 2 X-coordinate"] = value

    @property
    def vertex_2_ycoordinate(self):
        """Get vertex_2_ycoordinate

        Returns:
            float: the value of `vertex_2_ycoordinate` or None if not set
        """
        return self._data["Vertex 2 Y-coordinate"]

    @vertex_2_ycoordinate.setter
    def vertex_2_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_ycoordinate`'.format(value))
        self._data["Vertex 2 Y-coordinate"] = value

    @property
    def vertex_2_zcoordinate(self):
        """Get vertex_2_zcoordinate

        Returns:
            float: the value of `vertex_2_zcoordinate` or None if not set
        """
        return self._data["Vertex 2 Z-coordinate"]

    @vertex_2_zcoordinate.setter
    def vertex_2_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 2 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 2 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_2_zcoordinate`'.format(value))
        self._data["Vertex 2 Z-coordinate"] = value

    @property
    def vertex_3_xcoordinate(self):
        """Get vertex_3_xcoordinate

        Returns:
            float: the value of `vertex_3_xcoordinate` or None if not set
        """
        return self._data["Vertex 3 X-coordinate"]

    @vertex_3_xcoordinate.setter
    def vertex_3_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_xcoordinate`'.format(value))
        self._data["Vertex 3 X-coordinate"] = value

    @property
    def vertex_3_ycoordinate(self):
        """Get vertex_3_ycoordinate

        Returns:
            float: the value of `vertex_3_ycoordinate` or None if not set
        """
        return self._data["Vertex 3 Y-coordinate"]

    @vertex_3_ycoordinate.setter
    def vertex_3_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_ycoordinate`'.format(value))
        self._data["Vertex 3 Y-coordinate"] = value

    @property
    def vertex_3_zcoordinate(self):
        """Get vertex_3_zcoordinate

        Returns:
            float: the value of `vertex_3_zcoordinate` or None if not set
        """
        return self._data["Vertex 3 Z-coordinate"]

    @vertex_3_zcoordinate.setter
    def vertex_3_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 3 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 3 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_3_zcoordinate`'.format(value))
        self._data["Vertex 3 Z-coordinate"] = value

    @property
    def vertex_4_xcoordinate(self):
        """Get vertex_4_xcoordinate

        Returns:
            float: the value of `vertex_4_xcoordinate` or None if not set
        """
        return self._data["Vertex 4 X-coordinate"]

    @vertex_4_xcoordinate.setter
    def vertex_4_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_xcoordinate`'.format(value))
        self._data["Vertex 4 X-coordinate"] = value

    @property
    def vertex_4_ycoordinate(self):
        """Get vertex_4_ycoordinate

        Returns:
            float: the value of `vertex_4_ycoordinate` or None if not set
        """
        return self._data["Vertex 4 Y-coordinate"]

    @vertex_4_ycoordinate.setter
    def vertex_4_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_ycoordinate`'.format(value))
        self._data["Vertex 4 Y-coordinate"] = value

    @property
    def vertex_4_zcoordinate(self):
        """Get vertex_4_zcoordinate

        Returns:
            float: the value of `vertex_4_zcoordinate` or None if not set
        """
        return self._data["Vertex 4 Z-coordinate"]

    @vertex_4_zcoordinate.setter
    def vertex_4_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 4 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 4 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_4_zcoordinate`'.format(value))
        self._data["Vertex 4 Z-coordinate"] = value

    @property
    def vertex_5_xcoordinate(self):
        """Get vertex_5_xcoordinate

        Returns:
            float: the value of `vertex_5_xcoordinate` or None if not set
        """
        return self._data["Vertex 5 X-coordinate"]

    @vertex_5_xcoordinate.setter
    def vertex_5_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_xcoordinate`'.format(value))
        self._data["Vertex 5 X-coordinate"] = value

    @property
    def vertex_5_ycoordinate(self):
        """Get vertex_5_ycoordinate

        Returns:
            float: the value of `vertex_5_ycoordinate` or None if not set
        """
        return self._data["Vertex 5 Y-coordinate"]

    @vertex_5_ycoordinate.setter
    def vertex_5_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_ycoordinate`'.format(value))
        self._data["Vertex 5 Y-coordinate"] = value

    @property
    def vertex_5_zcoordinate(self):
        """Get vertex_5_zcoordinate

        Returns:
            float: the value of `vertex_5_zcoordinate` or None if not set
        """
        return self._data["Vertex 5 Z-coordinate"]

    @vertex_5_zcoordinate.setter
    def vertex_5_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 5 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 5 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_5_zcoordinate`'.format(value))
        self._data["Vertex 5 Z-coordinate"] = value

    @property
    def vertex_6_xcoordinate(self):
        """Get vertex_6_xcoordinate

        Returns:
            float: the value of `vertex_6_xcoordinate` or None if not set
        """
        return self._data["Vertex 6 X-coordinate"]

    @vertex_6_xcoordinate.setter
    def vertex_6_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_xcoordinate`'.format(value))
        self._data["Vertex 6 X-coordinate"] = value

    @property
    def vertex_6_ycoordinate(self):
        """Get vertex_6_ycoordinate

        Returns:
            float: the value of `vertex_6_ycoordinate` or None if not set
        """
        return self._data["Vertex 6 Y-coordinate"]

    @vertex_6_ycoordinate.setter
    def vertex_6_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_ycoordinate`'.format(value))
        self._data["Vertex 6 Y-coordinate"] = value

    @property
    def vertex_6_zcoordinate(self):
        """Get vertex_6_zcoordinate

        Returns:
            float: the value of `vertex_6_zcoordinate` or None if not set
        """
        return self._data["Vertex 6 Z-coordinate"]

    @vertex_6_zcoordinate.setter
    def vertex_6_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 6 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 6 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_6_zcoordinate`'.format(value))
        self._data["Vertex 6 Z-coordinate"] = value

    @property
    def vertex_7_xcoordinate(self):
        """Get vertex_7_xcoordinate

        Returns:
            float: the value of `vertex_7_xcoordinate` or None if not set
        """
        return self._data["Vertex 7 X-coordinate"]

    @vertex_7_xcoordinate.setter
    def vertex_7_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_xcoordinate`'.format(value))
        self._data["Vertex 7 X-coordinate"] = value

    @property
    def vertex_7_ycoordinate(self):
        """Get vertex_7_ycoordinate

        Returns:
            float: the value of `vertex_7_ycoordinate` or None if not set
        """
        return self._data["Vertex 7 Y-coordinate"]

    @vertex_7_ycoordinate.setter
    def vertex_7_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_ycoordinate`'.format(value))
        self._data["Vertex 7 Y-coordinate"] = value

    @property
    def vertex_7_zcoordinate(self):
        """Get vertex_7_zcoordinate

        Returns:
            float: the value of `vertex_7_zcoordinate` or None if not set
        """
        return self._data["Vertex 7 Z-coordinate"]

    @vertex_7_zcoordinate.setter
    def vertex_7_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 7 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 7 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_7_zcoordinate`'.format(value))
        self._data["Vertex 7 Z-coordinate"] = value

    @property
    def vertex_8_xcoordinate(self):
        """Get vertex_8_xcoordinate

        Returns:
            float: the value of `vertex_8_xcoordinate` or None if not set
        """
        return self._data["Vertex 8 X-coordinate"]

    @vertex_8_xcoordinate.setter
    def vertex_8_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_xcoordinate`'.format(value))
        self._data["Vertex 8 X-coordinate"] = value

    @property
    def vertex_8_ycoordinate(self):
        """Get vertex_8_ycoordinate

        Returns:
            float: the value of `vertex_8_ycoordinate` or None if not set
        """
        return self._data["Vertex 8 Y-coordinate"]

    @vertex_8_ycoordinate.setter
    def vertex_8_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_ycoordinate`'.format(value))
        self._data["Vertex 8 Y-coordinate"] = value

    @property
    def vertex_8_zcoordinate(self):
        """Get vertex_8_zcoordinate

        Returns:
            float: the value of `vertex_8_zcoordinate` or None if not set
        """
        return self._data["Vertex 8 Z-coordinate"]

    @vertex_8_zcoordinate.setter
    def vertex_8_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 8 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 8 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_8_zcoordinate`'.format(value))
        self._data["Vertex 8 Z-coordinate"] = value

    @property
    def vertex_9_xcoordinate(self):
        """Get vertex_9_xcoordinate

        Returns:
            float: the value of `vertex_9_xcoordinate` or None if not set
        """
        return self._data["Vertex 9 X-coordinate"]

    @vertex_9_xcoordinate.setter
    def vertex_9_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_xcoordinate`'.format(value))
        self._data["Vertex 9 X-coordinate"] = value

    @property
    def vertex_9_ycoordinate(self):
        """Get vertex_9_ycoordinate

        Returns:
            float: the value of `vertex_9_ycoordinate` or None if not set
        """
        return self._data["Vertex 9 Y-coordinate"]

    @vertex_9_ycoordinate.setter
    def vertex_9_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_ycoordinate`'.format(value))
        self._data["Vertex 9 Y-coordinate"] = value

    @property
    def vertex_9_zcoordinate(self):
        """Get vertex_9_zcoordinate

        Returns:
            float: the value of `vertex_9_zcoordinate` or None if not set
        """
        return self._data["Vertex 9 Z-coordinate"]

    @vertex_9_zcoordinate.setter
    def vertex_9_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 9 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 9 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_9_zcoordinate`'.format(value))
        self._data["Vertex 9 Z-coordinate"] = value

    @property
    def vertex_10_xcoordinate(self):
        """Get vertex_10_xcoordinate

        Returns:
            float: the value of `vertex_10_xcoordinate` or None if not set
        """
        return self._data["Vertex 10 X-coordinate"]

    @vertex_10_xcoordinate.setter
    def vertex_10_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_xcoordinate`'.format(value))
        self._data["Vertex 10 X-coordinate"] = value

    @property
    def vertex_10_ycoordinate(self):
        """Get vertex_10_ycoordinate

        Returns:
            float: the value of `vertex_10_ycoordinate` or None if not set
        """
        return self._data["Vertex 10 Y-coordinate"]

    @vertex_10_ycoordinate.setter
    def vertex_10_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_ycoordinate`'.format(value))
        self._data["Vertex 10 Y-coordinate"] = value

    @property
    def vertex_10_zcoordinate(self):
        """Get vertex_10_zcoordinate

        Returns:
            float: the value of `vertex_10_zcoordinate` or None if not set
        """
        return self._data["Vertex 10 Z-coordinate"]

    @vertex_10_zcoordinate.setter
    def vertex_10_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 10 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 10 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_10_zcoordinate`'.format(value))
        self._data["Vertex 10 Z-coordinate"] = value

    @property
    def vertex_11_xcoordinate(self):
        """Get vertex_11_xcoordinate

        Returns:
            float: the value of `vertex_11_xcoordinate` or None if not set
        """
        return self._data["Vertex 11 X-coordinate"]

    @vertex_11_xcoordinate.setter
    def vertex_11_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 11 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 11 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_11_xcoordinate`'.format(value))
        self._data["Vertex 11 X-coordinate"] = value

    @property
    def vertex_11_ycoordinate(self):
        """Get vertex_11_ycoordinate

        Returns:
            float: the value of `vertex_11_ycoordinate` or None if not set
        """
        return self._data["Vertex 11 Y-coordinate"]

    @vertex_11_ycoordinate.setter
    def vertex_11_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 11 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 11 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_11_ycoordinate`'.format(value))
        self._data["Vertex 11 Y-coordinate"] = value

    @property
    def vertex_11_zcoordinate(self):
        """Get vertex_11_zcoordinate

        Returns:
            float: the value of `vertex_11_zcoordinate` or None if not set
        """
        return self._data["Vertex 11 Z-coordinate"]

    @vertex_11_zcoordinate.setter
    def vertex_11_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 11 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 11 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_11_zcoordinate`'.format(value))
        self._data["Vertex 11 Z-coordinate"] = value

    @property
    def vertex_12_xcoordinate(self):
        """Get vertex_12_xcoordinate

        Returns:
            float: the value of `vertex_12_xcoordinate` or None if not set
        """
        return self._data["Vertex 12 X-coordinate"]

    @vertex_12_xcoordinate.setter
    def vertex_12_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 12 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 12 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_12_xcoordinate`'.format(value))
        self._data["Vertex 12 X-coordinate"] = value

    @property
    def vertex_12_ycoordinate(self):
        """Get vertex_12_ycoordinate

        Returns:
            float: the value of `vertex_12_ycoordinate` or None if not set
        """
        return self._data["Vertex 12 Y-coordinate"]

    @vertex_12_ycoordinate.setter
    def vertex_12_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 12 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 12 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_12_ycoordinate`'.format(value))
        self._data["Vertex 12 Y-coordinate"] = value

    @property
    def vertex_12_zcoordinate(self):
        """Get vertex_12_zcoordinate

        Returns:
            float: the value of `vertex_12_zcoordinate` or None if not set
        """
        return self._data["Vertex 12 Z-coordinate"]

    @vertex_12_zcoordinate.setter
    def vertex_12_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 12 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 12 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_12_zcoordinate`'.format(value))
        self._data["Vertex 12 Z-coordinate"] = value

    @property
    def vertex_13_xcoordinate(self):
        """Get vertex_13_xcoordinate

        Returns:
            float: the value of `vertex_13_xcoordinate` or None if not set
        """
        return self._data["Vertex 13 X-coordinate"]

    @vertex_13_xcoordinate.setter
    def vertex_13_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 13 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 13 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_13_xcoordinate`'.format(value))
        self._data["Vertex 13 X-coordinate"] = value

    @property
    def vertex_13_ycoordinate(self):
        """Get vertex_13_ycoordinate

        Returns:
            float: the value of `vertex_13_ycoordinate` or None if not set
        """
        return self._data["Vertex 13 Y-coordinate"]

    @vertex_13_ycoordinate.setter
    def vertex_13_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 13 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 13 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_13_ycoordinate`'.format(value))
        self._data["Vertex 13 Y-coordinate"] = value

    @property
    def vertex_13_zcoordinate(self):
        """Get vertex_13_zcoordinate

        Returns:
            float: the value of `vertex_13_zcoordinate` or None if not set
        """
        return self._data["Vertex 13 Z-coordinate"]

    @vertex_13_zcoordinate.setter
    def vertex_13_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 13 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 13 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_13_zcoordinate`'.format(value))
        self._data["Vertex 13 Z-coordinate"] = value

    @property
    def vertex_14_xcoordinate(self):
        """Get vertex_14_xcoordinate

        Returns:
            float: the value of `vertex_14_xcoordinate` or None if not set
        """
        return self._data["Vertex 14 X-coordinate"]

    @vertex_14_xcoordinate.setter
    def vertex_14_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 14 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 14 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_14_xcoordinate`'.format(value))
        self._data["Vertex 14 X-coordinate"] = value

    @property
    def vertex_14_ycoordinate(self):
        """Get vertex_14_ycoordinate

        Returns:
            float: the value of `vertex_14_ycoordinate` or None if not set
        """
        return self._data["Vertex 14 Y-coordinate"]

    @vertex_14_ycoordinate.setter
    def vertex_14_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 14 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 14 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_14_ycoordinate`'.format(value))
        self._data["Vertex 14 Y-coordinate"] = value

    @property
    def vertex_14_zcoordinate(self):
        """Get vertex_14_zcoordinate

        Returns:
            float: the value of `vertex_14_zcoordinate` or None if not set
        """
        return self._data["Vertex 14 Z-coordinate"]

    @vertex_14_zcoordinate.setter
    def vertex_14_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 14 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 14 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_14_zcoordinate`'.format(value))
        self._data["Vertex 14 Z-coordinate"] = value

    @property
    def vertex_15_xcoordinate(self):
        """Get vertex_15_xcoordinate

        Returns:
            float: the value of `vertex_15_xcoordinate` or None if not set
        """
        return self._data["Vertex 15 X-coordinate"]

    @vertex_15_xcoordinate.setter
    def vertex_15_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 15 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 15 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_15_xcoordinate`'.format(value))
        self._data["Vertex 15 X-coordinate"] = value

    @property
    def vertex_15_ycoordinate(self):
        """Get vertex_15_ycoordinate

        Returns:
            float: the value of `vertex_15_ycoordinate` or None if not set
        """
        return self._data["Vertex 15 Y-coordinate"]

    @vertex_15_ycoordinate.setter
    def vertex_15_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 15 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 15 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_15_ycoordinate`'.format(value))
        self._data["Vertex 15 Y-coordinate"] = value

    @property
    def vertex_15_zcoordinate(self):
        """Get vertex_15_zcoordinate

        Returns:
            float: the value of `vertex_15_zcoordinate` or None if not set
        """
        return self._data["Vertex 15 Z-coordinate"]

    @vertex_15_zcoordinate.setter
    def vertex_15_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 15 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 15 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_15_zcoordinate`'.format(value))
        self._data["Vertex 15 Z-coordinate"] = value

    @property
    def vertex_16_xcoordinate(self):
        """Get vertex_16_xcoordinate

        Returns:
            float: the value of `vertex_16_xcoordinate` or None if not set
        """
        return self._data["Vertex 16 X-coordinate"]

    @vertex_16_xcoordinate.setter
    def vertex_16_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 16 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 16 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_16_xcoordinate`'.format(value))
        self._data["Vertex 16 X-coordinate"] = value

    @property
    def vertex_16_ycoordinate(self):
        """Get vertex_16_ycoordinate

        Returns:
            float: the value of `vertex_16_ycoordinate` or None if not set
        """
        return self._data["Vertex 16 Y-coordinate"]

    @vertex_16_ycoordinate.setter
    def vertex_16_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 16 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 16 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_16_ycoordinate`'.format(value))
        self._data["Vertex 16 Y-coordinate"] = value

    @property
    def vertex_16_zcoordinate(self):
        """Get vertex_16_zcoordinate

        Returns:
            float: the value of `vertex_16_zcoordinate` or None if not set
        """
        return self._data["Vertex 16 Z-coordinate"]

    @vertex_16_zcoordinate.setter
    def vertex_16_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 16 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 16 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_16_zcoordinate`'.format(value))
        self._data["Vertex 16 Z-coordinate"] = value

    @property
    def vertex_17_xcoordinate(self):
        """Get vertex_17_xcoordinate

        Returns:
            float: the value of `vertex_17_xcoordinate` or None if not set
        """
        return self._data["Vertex 17 X-coordinate"]

    @vertex_17_xcoordinate.setter
    def vertex_17_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 17 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 17 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_17_xcoordinate`'.format(value))
        self._data["Vertex 17 X-coordinate"] = value

    @property
    def vertex_17_ycoordinate(self):
        """Get vertex_17_ycoordinate

        Returns:
            float: the value of `vertex_17_ycoordinate` or None if not set
        """
        return self._data["Vertex 17 Y-coordinate"]

    @vertex_17_ycoordinate.setter
    def vertex_17_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 17 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 17 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_17_ycoordinate`'.format(value))
        self._data["Vertex 17 Y-coordinate"] = value

    @property
    def vertex_17_zcoordinate(self):
        """Get vertex_17_zcoordinate

        Returns:
            float: the value of `vertex_17_zcoordinate` or None if not set
        """
        return self._data["Vertex 17 Z-coordinate"]

    @vertex_17_zcoordinate.setter
    def vertex_17_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 17 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 17 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_17_zcoordinate`'.format(value))
        self._data["Vertex 17 Z-coordinate"] = value

    @property
    def vertex_18_xcoordinate(self):
        """Get vertex_18_xcoordinate

        Returns:
            float: the value of `vertex_18_xcoordinate` or None if not set
        """
        return self._data["Vertex 18 X-coordinate"]

    @vertex_18_xcoordinate.setter
    def vertex_18_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 18 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 18 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_18_xcoordinate`'.format(value))
        self._data["Vertex 18 X-coordinate"] = value

    @property
    def vertex_18_ycoordinate(self):
        """Get vertex_18_ycoordinate

        Returns:
            float: the value of `vertex_18_ycoordinate` or None if not set
        """
        return self._data["Vertex 18 Y-coordinate"]

    @vertex_18_ycoordinate.setter
    def vertex_18_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 18 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 18 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_18_ycoordinate`'.format(value))
        self._data["Vertex 18 Y-coordinate"] = value

    @property
    def vertex_18_zcoordinate(self):
        """Get vertex_18_zcoordinate

        Returns:
            float: the value of `vertex_18_zcoordinate` or None if not set
        """
        return self._data["Vertex 18 Z-coordinate"]

    @vertex_18_zcoordinate.setter
    def vertex_18_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 18 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 18 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_18_zcoordinate`'.format(value))
        self._data["Vertex 18 Z-coordinate"] = value

    @property
    def vertex_19_xcoordinate(self):
        """Get vertex_19_xcoordinate

        Returns:
            float: the value of `vertex_19_xcoordinate` or None if not set
        """
        return self._data["Vertex 19 X-coordinate"]

    @vertex_19_xcoordinate.setter
    def vertex_19_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 19 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 19 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_19_xcoordinate`'.format(value))
        self._data["Vertex 19 X-coordinate"] = value

    @property
    def vertex_19_ycoordinate(self):
        """Get vertex_19_ycoordinate

        Returns:
            float: the value of `vertex_19_ycoordinate` or None if not set
        """
        return self._data["Vertex 19 Y-coordinate"]

    @vertex_19_ycoordinate.setter
    def vertex_19_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 19 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 19 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_19_ycoordinate`'.format(value))
        self._data["Vertex 19 Y-coordinate"] = value

    @property
    def vertex_19_zcoordinate(self):
        """Get vertex_19_zcoordinate

        Returns:
            float: the value of `vertex_19_zcoordinate` or None if not set
        """
        return self._data["Vertex 19 Z-coordinate"]

    @vertex_19_zcoordinate.setter
    def vertex_19_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 19 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 19 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_19_zcoordinate`'.format(value))
        self._data["Vertex 19 Z-coordinate"] = value

    @property
    def vertex_20_xcoordinate(self):
        """Get vertex_20_xcoordinate

        Returns:
            float: the value of `vertex_20_xcoordinate` or None if not set
        """
        return self._data["Vertex 20 X-coordinate"]

    @vertex_20_xcoordinate.setter
    def vertex_20_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 20 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 20 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_20_xcoordinate`'.format(value))
        self._data["Vertex 20 X-coordinate"] = value

    @property
    def vertex_20_ycoordinate(self):
        """Get vertex_20_ycoordinate

        Returns:
            float: the value of `vertex_20_ycoordinate` or None if not set
        """
        return self._data["Vertex 20 Y-coordinate"]

    @vertex_20_ycoordinate.setter
    def vertex_20_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 20 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 20 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_20_ycoordinate`'.format(value))
        self._data["Vertex 20 Y-coordinate"] = value

    @property
    def vertex_20_zcoordinate(self):
        """Get vertex_20_zcoordinate

        Returns:
            float: the value of `vertex_20_zcoordinate` or None if not set
        """
        return self._data["Vertex 20 Z-coordinate"]

    @vertex_20_zcoordinate.setter
    def vertex_20_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 20 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 20 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_20_zcoordinate`'.format(value))
        self._data["Vertex 20 Z-coordinate"] = value

    @property
    def vertex_21_xcoordinate(self):
        """Get vertex_21_xcoordinate

        Returns:
            float: the value of `vertex_21_xcoordinate` or None if not set
        """
        return self._data["Vertex 21 X-coordinate"]

    @vertex_21_xcoordinate.setter
    def vertex_21_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 21 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 21 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_21_xcoordinate`'.format(value))
        self._data["Vertex 21 X-coordinate"] = value

    @property
    def vertex_21_ycoordinate(self):
        """Get vertex_21_ycoordinate

        Returns:
            float: the value of `vertex_21_ycoordinate` or None if not set
        """
        return self._data["Vertex 21 Y-coordinate"]

    @vertex_21_ycoordinate.setter
    def vertex_21_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 21 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 21 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_21_ycoordinate`'.format(value))
        self._data["Vertex 21 Y-coordinate"] = value

    @property
    def vertex_21_zcoordinate(self):
        """Get vertex_21_zcoordinate

        Returns:
            float: the value of `vertex_21_zcoordinate` or None if not set
        """
        return self._data["Vertex 21 Z-coordinate"]

    @vertex_21_zcoordinate.setter
    def vertex_21_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 21 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 21 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_21_zcoordinate`'.format(value))
        self._data["Vertex 21 Z-coordinate"] = value

    @property
    def vertex_22_xcoordinate(self):
        """Get vertex_22_xcoordinate

        Returns:
            float: the value of `vertex_22_xcoordinate` or None if not set
        """
        return self._data["Vertex 22 X-coordinate"]

    @vertex_22_xcoordinate.setter
    def vertex_22_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 22 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 22 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_22_xcoordinate`'.format(value))
        self._data["Vertex 22 X-coordinate"] = value

    @property
    def vertex_22_ycoordinate(self):
        """Get vertex_22_ycoordinate

        Returns:
            float: the value of `vertex_22_ycoordinate` or None if not set
        """
        return self._data["Vertex 22 Y-coordinate"]

    @vertex_22_ycoordinate.setter
    def vertex_22_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 22 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 22 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_22_ycoordinate`'.format(value))
        self._data["Vertex 22 Y-coordinate"] = value

    @property
    def vertex_22_zcoordinate(self):
        """Get vertex_22_zcoordinate

        Returns:
            float: the value of `vertex_22_zcoordinate` or None if not set
        """
        return self._data["Vertex 22 Z-coordinate"]

    @vertex_22_zcoordinate.setter
    def vertex_22_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 22 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 22 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_22_zcoordinate`'.format(value))
        self._data["Vertex 22 Z-coordinate"] = value

    @property
    def vertex_23_xcoordinate(self):
        """Get vertex_23_xcoordinate

        Returns:
            float: the value of `vertex_23_xcoordinate` or None if not set
        """
        return self._data["Vertex 23 X-coordinate"]

    @vertex_23_xcoordinate.setter
    def vertex_23_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 23 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 23 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_23_xcoordinate`'.format(value))
        self._data["Vertex 23 X-coordinate"] = value

    @property
    def vertex_23_ycoordinate(self):
        """Get vertex_23_ycoordinate

        Returns:
            float: the value of `vertex_23_ycoordinate` or None if not set
        """
        return self._data["Vertex 23 Y-coordinate"]

    @vertex_23_ycoordinate.setter
    def vertex_23_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 23 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 23 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_23_ycoordinate`'.format(value))
        self._data["Vertex 23 Y-coordinate"] = value

    @property
    def vertex_23_zcoordinate(self):
        """Get vertex_23_zcoordinate

        Returns:
            float: the value of `vertex_23_zcoordinate` or None if not set
        """
        return self._data["Vertex 23 Z-coordinate"]

    @vertex_23_zcoordinate.setter
    def vertex_23_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 23 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 23 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_23_zcoordinate`'.format(value))
        self._data["Vertex 23 Z-coordinate"] = value

    @property
    def vertex_24_xcoordinate(self):
        """Get vertex_24_xcoordinate

        Returns:
            float: the value of `vertex_24_xcoordinate` or None if not set
        """
        return self._data["Vertex 24 X-coordinate"]

    @vertex_24_xcoordinate.setter
    def vertex_24_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 24 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 24 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_24_xcoordinate`'.format(value))
        self._data["Vertex 24 X-coordinate"] = value

    @property
    def vertex_24_ycoordinate(self):
        """Get vertex_24_ycoordinate

        Returns:
            float: the value of `vertex_24_ycoordinate` or None if not set
        """
        return self._data["Vertex 24 Y-coordinate"]

    @vertex_24_ycoordinate.setter
    def vertex_24_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 24 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 24 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_24_ycoordinate`'.format(value))
        self._data["Vertex 24 Y-coordinate"] = value

    @property
    def vertex_24_zcoordinate(self):
        """Get vertex_24_zcoordinate

        Returns:
            float: the value of `vertex_24_zcoordinate` or None if not set
        """
        return self._data["Vertex 24 Z-coordinate"]

    @vertex_24_zcoordinate.setter
    def vertex_24_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 24 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 24 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_24_zcoordinate`'.format(value))
        self._data["Vertex 24 Z-coordinate"] = value

    @property
    def vertex_25_xcoordinate(self):
        """Get vertex_25_xcoordinate

        Returns:
            float: the value of `vertex_25_xcoordinate` or None if not set
        """
        return self._data["Vertex 25 X-coordinate"]

    @vertex_25_xcoordinate.setter
    def vertex_25_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 25 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 25 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_25_xcoordinate`'.format(value))
        self._data["Vertex 25 X-coordinate"] = value

    @property
    def vertex_25_ycoordinate(self):
        """Get vertex_25_ycoordinate

        Returns:
            float: the value of `vertex_25_ycoordinate` or None if not set
        """
        return self._data["Vertex 25 Y-coordinate"]

    @vertex_25_ycoordinate.setter
    def vertex_25_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 25 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 25 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_25_ycoordinate`'.format(value))
        self._data["Vertex 25 Y-coordinate"] = value

    @property
    def vertex_25_zcoordinate(self):
        """Get vertex_25_zcoordinate

        Returns:
            float: the value of `vertex_25_zcoordinate` or None if not set
        """
        return self._data["Vertex 25 Z-coordinate"]

    @vertex_25_zcoordinate.setter
    def vertex_25_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 25 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 25 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_25_zcoordinate`'.format(value))
        self._data["Vertex 25 Z-coordinate"] = value

    @property
    def vertex_26_xcoordinate(self):
        """Get vertex_26_xcoordinate

        Returns:
            float: the value of `vertex_26_xcoordinate` or None if not set
        """
        return self._data["Vertex 26 X-coordinate"]

    @vertex_26_xcoordinate.setter
    def vertex_26_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 26 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 26 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_26_xcoordinate`'.format(value))
        self._data["Vertex 26 X-coordinate"] = value

    @property
    def vertex_26_ycoordinate(self):
        """Get vertex_26_ycoordinate

        Returns:
            float: the value of `vertex_26_ycoordinate` or None if not set
        """
        return self._data["Vertex 26 Y-coordinate"]

    @vertex_26_ycoordinate.setter
    def vertex_26_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 26 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 26 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_26_ycoordinate`'.format(value))
        self._data["Vertex 26 Y-coordinate"] = value

    @property
    def vertex_26_zcoordinate(self):
        """Get vertex_26_zcoordinate

        Returns:
            float: the value of `vertex_26_zcoordinate` or None if not set
        """
        return self._data["Vertex 26 Z-coordinate"]

    @vertex_26_zcoordinate.setter
    def vertex_26_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 26 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 26 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_26_zcoordinate`'.format(value))
        self._data["Vertex 26 Z-coordinate"] = value

    @property
    def vertex_27_xcoordinate(self):
        """Get vertex_27_xcoordinate

        Returns:
            float: the value of `vertex_27_xcoordinate` or None if not set
        """
        return self._data["Vertex 27 X-coordinate"]

    @vertex_27_xcoordinate.setter
    def vertex_27_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 27 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 27 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_27_xcoordinate`'.format(value))
        self._data["Vertex 27 X-coordinate"] = value

    @property
    def vertex_27_ycoordinate(self):
        """Get vertex_27_ycoordinate

        Returns:
            float: the value of `vertex_27_ycoordinate` or None if not set
        """
        return self._data["Vertex 27 Y-coordinate"]

    @vertex_27_ycoordinate.setter
    def vertex_27_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 27 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 27 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_27_ycoordinate`'.format(value))
        self._data["Vertex 27 Y-coordinate"] = value

    @property
    def vertex_27_zcoordinate(self):
        """Get vertex_27_zcoordinate

        Returns:
            float: the value of `vertex_27_zcoordinate` or None if not set
        """
        return self._data["Vertex 27 Z-coordinate"]

    @vertex_27_zcoordinate.setter
    def vertex_27_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 27 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 27 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_27_zcoordinate`'.format(value))
        self._data["Vertex 27 Z-coordinate"] = value

    @property
    def vertex_28_xcoordinate(self):
        """Get vertex_28_xcoordinate

        Returns:
            float: the value of `vertex_28_xcoordinate` or None if not set
        """
        return self._data["Vertex 28 X-coordinate"]

    @vertex_28_xcoordinate.setter
    def vertex_28_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 28 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 28 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_28_xcoordinate`'.format(value))
        self._data["Vertex 28 X-coordinate"] = value

    @property
    def vertex_28_ycoordinate(self):
        """Get vertex_28_ycoordinate

        Returns:
            float: the value of `vertex_28_ycoordinate` or None if not set
        """
        return self._data["Vertex 28 Y-coordinate"]

    @vertex_28_ycoordinate.setter
    def vertex_28_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 28 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 28 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_28_ycoordinate`'.format(value))
        self._data["Vertex 28 Y-coordinate"] = value

    @property
    def vertex_28_zcoordinate(self):
        """Get vertex_28_zcoordinate

        Returns:
            float: the value of `vertex_28_zcoordinate` or None if not set
        """
        return self._data["Vertex 28 Z-coordinate"]

    @vertex_28_zcoordinate.setter
    def vertex_28_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 28 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 28 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_28_zcoordinate`'.format(value))
        self._data["Vertex 28 Z-coordinate"] = value

    @property
    def vertex_29_xcoordinate(self):
        """Get vertex_29_xcoordinate

        Returns:
            float: the value of `vertex_29_xcoordinate` or None if not set
        """
        return self._data["Vertex 29 X-coordinate"]

    @vertex_29_xcoordinate.setter
    def vertex_29_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 29 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 29 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_29_xcoordinate`'.format(value))
        self._data["Vertex 29 X-coordinate"] = value

    @property
    def vertex_29_ycoordinate(self):
        """Get vertex_29_ycoordinate

        Returns:
            float: the value of `vertex_29_ycoordinate` or None if not set
        """
        return self._data["Vertex 29 Y-coordinate"]

    @vertex_29_ycoordinate.setter
    def vertex_29_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 29 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 29 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_29_ycoordinate`'.format(value))
        self._data["Vertex 29 Y-coordinate"] = value

    @property
    def vertex_29_zcoordinate(self):
        """Get vertex_29_zcoordinate

        Returns:
            float: the value of `vertex_29_zcoordinate` or None if not set
        """
        return self._data["Vertex 29 Z-coordinate"]

    @vertex_29_zcoordinate.setter
    def vertex_29_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 29 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 29 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_29_zcoordinate`'.format(value))
        self._data["Vertex 29 Z-coordinate"] = value

    @property
    def vertex_30_xcoordinate(self):
        """Get vertex_30_xcoordinate

        Returns:
            float: the value of `vertex_30_xcoordinate` or None if not set
        """
        return self._data["Vertex 30 X-coordinate"]

    @vertex_30_xcoordinate.setter
    def vertex_30_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 30 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 30 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_30_xcoordinate`'.format(value))
        self._data["Vertex 30 X-coordinate"] = value

    @property
    def vertex_30_ycoordinate(self):
        """Get vertex_30_ycoordinate

        Returns:
            float: the value of `vertex_30_ycoordinate` or None if not set
        """
        return self._data["Vertex 30 Y-coordinate"]

    @vertex_30_ycoordinate.setter
    def vertex_30_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 30 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 30 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_30_ycoordinate`'.format(value))
        self._data["Vertex 30 Y-coordinate"] = value

    @property
    def vertex_30_zcoordinate(self):
        """Get vertex_30_zcoordinate

        Returns:
            float: the value of `vertex_30_zcoordinate` or None if not set
        """
        return self._data["Vertex 30 Z-coordinate"]

    @vertex_30_zcoordinate.setter
    def vertex_30_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 30 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 30 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_30_zcoordinate`'.format(value))
        self._data["Vertex 30 Z-coordinate"] = value

    @property
    def vertex_31_xcoordinate(self):
        """Get vertex_31_xcoordinate

        Returns:
            float: the value of `vertex_31_xcoordinate` or None if not set
        """
        return self._data["Vertex 31 X-coordinate"]

    @vertex_31_xcoordinate.setter
    def vertex_31_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 31 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 31 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_31_xcoordinate`'.format(value))
        self._data["Vertex 31 X-coordinate"] = value

    @property
    def vertex_31_ycoordinate(self):
        """Get vertex_31_ycoordinate

        Returns:
            float: the value of `vertex_31_ycoordinate` or None if not set
        """
        return self._data["Vertex 31 Y-coordinate"]

    @vertex_31_ycoordinate.setter
    def vertex_31_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 31 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 31 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_31_ycoordinate`'.format(value))
        self._data["Vertex 31 Y-coordinate"] = value

    @property
    def vertex_31_zcoordinate(self):
        """Get vertex_31_zcoordinate

        Returns:
            float: the value of `vertex_31_zcoordinate` or None if not set
        """
        return self._data["Vertex 31 Z-coordinate"]

    @vertex_31_zcoordinate.setter
    def vertex_31_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 31 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 31 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_31_zcoordinate`'.format(value))
        self._data["Vertex 31 Z-coordinate"] = value

    @property
    def vertex_32_xcoordinate(self):
        """Get vertex_32_xcoordinate

        Returns:
            float: the value of `vertex_32_xcoordinate` or None if not set
        """
        return self._data["Vertex 32 X-coordinate"]

    @vertex_32_xcoordinate.setter
    def vertex_32_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 32 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 32 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_32_xcoordinate`'.format(value))
        self._data["Vertex 32 X-coordinate"] = value

    @property
    def vertex_32_ycoordinate(self):
        """Get vertex_32_ycoordinate

        Returns:
            float: the value of `vertex_32_ycoordinate` or None if not set
        """
        return self._data["Vertex 32 Y-coordinate"]

    @vertex_32_ycoordinate.setter
    def vertex_32_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 32 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 32 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_32_ycoordinate`'.format(value))
        self._data["Vertex 32 Y-coordinate"] = value

    @property
    def vertex_32_zcoordinate(self):
        """Get vertex_32_zcoordinate

        Returns:
            float: the value of `vertex_32_zcoordinate` or None if not set
        """
        return self._data["Vertex 32 Z-coordinate"]

    @vertex_32_zcoordinate.setter
    def vertex_32_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 32 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 32 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_32_zcoordinate`'.format(value))
        self._data["Vertex 32 Z-coordinate"] = value

    @property
    def vertex_33_xcoordinate(self):
        """Get vertex_33_xcoordinate

        Returns:
            float: the value of `vertex_33_xcoordinate` or None if not set
        """
        return self._data["Vertex 33 X-coordinate"]

    @vertex_33_xcoordinate.setter
    def vertex_33_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 33 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 33 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_33_xcoordinate`'.format(value))
        self._data["Vertex 33 X-coordinate"] = value

    @property
    def vertex_33_ycoordinate(self):
        """Get vertex_33_ycoordinate

        Returns:
            float: the value of `vertex_33_ycoordinate` or None if not set
        """
        return self._data["Vertex 33 Y-coordinate"]

    @vertex_33_ycoordinate.setter
    def vertex_33_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 33 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 33 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_33_ycoordinate`'.format(value))
        self._data["Vertex 33 Y-coordinate"] = value

    @property
    def vertex_33_zcoordinate(self):
        """Get vertex_33_zcoordinate

        Returns:
            float: the value of `vertex_33_zcoordinate` or None if not set
        """
        return self._data["Vertex 33 Z-coordinate"]

    @vertex_33_zcoordinate.setter
    def vertex_33_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 33 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 33 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_33_zcoordinate`'.format(value))
        self._data["Vertex 33 Z-coordinate"] = value

    @property
    def vertex_34_xcoordinate(self):
        """Get vertex_34_xcoordinate

        Returns:
            float: the value of `vertex_34_xcoordinate` or None if not set
        """
        return self._data["Vertex 34 X-coordinate"]

    @vertex_34_xcoordinate.setter
    def vertex_34_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 34 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 34 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_34_xcoordinate`'.format(value))
        self._data["Vertex 34 X-coordinate"] = value

    @property
    def vertex_34_ycoordinate(self):
        """Get vertex_34_ycoordinate

        Returns:
            float: the value of `vertex_34_ycoordinate` or None if not set
        """
        return self._data["Vertex 34 Y-coordinate"]

    @vertex_34_ycoordinate.setter
    def vertex_34_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 34 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 34 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_34_ycoordinate`'.format(value))
        self._data["Vertex 34 Y-coordinate"] = value

    @property
    def vertex_34_zcoordinate(self):
        """Get vertex_34_zcoordinate

        Returns:
            float: the value of `vertex_34_zcoordinate` or None if not set
        """
        return self._data["Vertex 34 Z-coordinate"]

    @vertex_34_zcoordinate.setter
    def vertex_34_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 34 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 34 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_34_zcoordinate`'.format(value))
        self._data["Vertex 34 Z-coordinate"] = value

    @property
    def vertex_35_xcoordinate(self):
        """Get vertex_35_xcoordinate

        Returns:
            float: the value of `vertex_35_xcoordinate` or None if not set
        """
        return self._data["Vertex 35 X-coordinate"]

    @vertex_35_xcoordinate.setter
    def vertex_35_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 35 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 35 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_35_xcoordinate`'.format(value))
        self._data["Vertex 35 X-coordinate"] = value

    @property
    def vertex_35_ycoordinate(self):
        """Get vertex_35_ycoordinate

        Returns:
            float: the value of `vertex_35_ycoordinate` or None if not set
        """
        return self._data["Vertex 35 Y-coordinate"]

    @vertex_35_ycoordinate.setter
    def vertex_35_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 35 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 35 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_35_ycoordinate`'.format(value))
        self._data["Vertex 35 Y-coordinate"] = value

    @property
    def vertex_35_zcoordinate(self):
        """Get vertex_35_zcoordinate

        Returns:
            float: the value of `vertex_35_zcoordinate` or None if not set
        """
        return self._data["Vertex 35 Z-coordinate"]

    @vertex_35_zcoordinate.setter
    def vertex_35_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 35 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 35 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_35_zcoordinate`'.format(value))
        self._data["Vertex 35 Z-coordinate"] = value

    @property
    def vertex_36_xcoordinate(self):
        """Get vertex_36_xcoordinate

        Returns:
            float: the value of `vertex_36_xcoordinate` or None if not set
        """
        return self._data["Vertex 36 X-coordinate"]

    @vertex_36_xcoordinate.setter
    def vertex_36_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 36 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 36 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_36_xcoordinate`'.format(value))
        self._data["Vertex 36 X-coordinate"] = value

    @property
    def vertex_36_ycoordinate(self):
        """Get vertex_36_ycoordinate

        Returns:
            float: the value of `vertex_36_ycoordinate` or None if not set
        """
        return self._data["Vertex 36 Y-coordinate"]

    @vertex_36_ycoordinate.setter
    def vertex_36_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 36 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 36 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_36_ycoordinate`'.format(value))
        self._data["Vertex 36 Y-coordinate"] = value

    @property
    def vertex_36_zcoordinate(self):
        """Get vertex_36_zcoordinate

        Returns:
            float: the value of `vertex_36_zcoordinate` or None if not set
        """
        return self._data["Vertex 36 Z-coordinate"]

    @vertex_36_zcoordinate.setter
    def vertex_36_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 36 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 36 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_36_zcoordinate`'.format(value))
        self._data["Vertex 36 Z-coordinate"] = value

    @property
    def vertex_37_xcoordinate(self):
        """Get vertex_37_xcoordinate

        Returns:
            float: the value of `vertex_37_xcoordinate` or None if not set
        """
        return self._data["Vertex 37 X-coordinate"]

    @vertex_37_xcoordinate.setter
    def vertex_37_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 37 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 37 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_37_xcoordinate`'.format(value))
        self._data["Vertex 37 X-coordinate"] = value

    @property
    def vertex_37_ycoordinate(self):
        """Get vertex_37_ycoordinate

        Returns:
            float: the value of `vertex_37_ycoordinate` or None if not set
        """
        return self._data["Vertex 37 Y-coordinate"]

    @vertex_37_ycoordinate.setter
    def vertex_37_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 37 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 37 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_37_ycoordinate`'.format(value))
        self._data["Vertex 37 Y-coordinate"] = value

    @property
    def vertex_37_zcoordinate(self):
        """Get vertex_37_zcoordinate

        Returns:
            float: the value of `vertex_37_zcoordinate` or None if not set
        """
        return self._data["Vertex 37 Z-coordinate"]

    @vertex_37_zcoordinate.setter
    def vertex_37_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 37 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 37 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_37_zcoordinate`'.format(value))
        self._data["Vertex 37 Z-coordinate"] = value

    @property
    def vertex_38_xcoordinate(self):
        """Get vertex_38_xcoordinate

        Returns:
            float: the value of `vertex_38_xcoordinate` or None if not set
        """
        return self._data["Vertex 38 X-coordinate"]

    @vertex_38_xcoordinate.setter
    def vertex_38_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 38 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 38 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_38_xcoordinate`'.format(value))
        self._data["Vertex 38 X-coordinate"] = value

    @property
    def vertex_38_ycoordinate(self):
        """Get vertex_38_ycoordinate

        Returns:
            float: the value of `vertex_38_ycoordinate` or None if not set
        """
        return self._data["Vertex 38 Y-coordinate"]

    @vertex_38_ycoordinate.setter
    def vertex_38_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 38 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 38 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_38_ycoordinate`'.format(value))
        self._data["Vertex 38 Y-coordinate"] = value

    @property
    def vertex_38_zcoordinate(self):
        """Get vertex_38_zcoordinate

        Returns:
            float: the value of `vertex_38_zcoordinate` or None if not set
        """
        return self._data["Vertex 38 Z-coordinate"]

    @vertex_38_zcoordinate.setter
    def vertex_38_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 38 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 38 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_38_zcoordinate`'.format(value))
        self._data["Vertex 38 Z-coordinate"] = value

    @property
    def vertex_39_xcoordinate(self):
        """Get vertex_39_xcoordinate

        Returns:
            float: the value of `vertex_39_xcoordinate` or None if not set
        """
        return self._data["Vertex 39 X-coordinate"]

    @vertex_39_xcoordinate.setter
    def vertex_39_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 39 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 39 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_39_xcoordinate`'.format(value))
        self._data["Vertex 39 X-coordinate"] = value

    @property
    def vertex_39_ycoordinate(self):
        """Get vertex_39_ycoordinate

        Returns:
            float: the value of `vertex_39_ycoordinate` or None if not set
        """
        return self._data["Vertex 39 Y-coordinate"]

    @vertex_39_ycoordinate.setter
    def vertex_39_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 39 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 39 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_39_ycoordinate`'.format(value))
        self._data["Vertex 39 Y-coordinate"] = value

    @property
    def vertex_39_zcoordinate(self):
        """Get vertex_39_zcoordinate

        Returns:
            float: the value of `vertex_39_zcoordinate` or None if not set
        """
        return self._data["Vertex 39 Z-coordinate"]

    @vertex_39_zcoordinate.setter
    def vertex_39_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 39 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 39 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_39_zcoordinate`'.format(value))
        self._data["Vertex 39 Z-coordinate"] = value

    @property
    def vertex_40_xcoordinate(self):
        """Get vertex_40_xcoordinate

        Returns:
            float: the value of `vertex_40_xcoordinate` or None if not set
        """
        return self._data["Vertex 40 X-coordinate"]

    @vertex_40_xcoordinate.setter
    def vertex_40_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 40 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 40 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_40_xcoordinate`'.format(value))
        self._data["Vertex 40 X-coordinate"] = value

    @property
    def vertex_40_ycoordinate(self):
        """Get vertex_40_ycoordinate

        Returns:
            float: the value of `vertex_40_ycoordinate` or None if not set
        """
        return self._data["Vertex 40 Y-coordinate"]

    @vertex_40_ycoordinate.setter
    def vertex_40_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 40 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 40 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_40_ycoordinate`'.format(value))
        self._data["Vertex 40 Y-coordinate"] = value

    @property
    def vertex_40_zcoordinate(self):
        """Get vertex_40_zcoordinate

        Returns:
            float: the value of `vertex_40_zcoordinate` or None if not set
        """
        return self._data["Vertex 40 Z-coordinate"]

    @vertex_40_zcoordinate.setter
    def vertex_40_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 40 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 40 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_40_zcoordinate`'.format(value))
        self._data["Vertex 40 Z-coordinate"] = value

    @property
    def vertex_41_xcoordinate(self):
        """Get vertex_41_xcoordinate

        Returns:
            float: the value of `vertex_41_xcoordinate` or None if not set
        """
        return self._data["Vertex 41 X-coordinate"]

    @vertex_41_xcoordinate.setter
    def vertex_41_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 41 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 41 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_41_xcoordinate`'.format(value))
        self._data["Vertex 41 X-coordinate"] = value

    @property
    def vertex_41_ycoordinate(self):
        """Get vertex_41_ycoordinate

        Returns:
            float: the value of `vertex_41_ycoordinate` or None if not set
        """
        return self._data["Vertex 41 Y-coordinate"]

    @vertex_41_ycoordinate.setter
    def vertex_41_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 41 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 41 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_41_ycoordinate`'.format(value))
        self._data["Vertex 41 Y-coordinate"] = value

    @property
    def vertex_41_zcoordinate(self):
        """Get vertex_41_zcoordinate

        Returns:
            float: the value of `vertex_41_zcoordinate` or None if not set
        """
        return self._data["Vertex 41 Z-coordinate"]

    @vertex_41_zcoordinate.setter
    def vertex_41_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 41 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 41 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_41_zcoordinate`'.format(value))
        self._data["Vertex 41 Z-coordinate"] = value

    @property
    def vertex_42_xcoordinate(self):
        """Get vertex_42_xcoordinate

        Returns:
            float: the value of `vertex_42_xcoordinate` or None if not set
        """
        return self._data["Vertex 42 X-coordinate"]

    @vertex_42_xcoordinate.setter
    def vertex_42_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 42 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 42 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_42_xcoordinate`'.format(value))
        self._data["Vertex 42 X-coordinate"] = value

    @property
    def vertex_42_ycoordinate(self):
        """Get vertex_42_ycoordinate

        Returns:
            float: the value of `vertex_42_ycoordinate` or None if not set
        """
        return self._data["Vertex 42 Y-coordinate"]

    @vertex_42_ycoordinate.setter
    def vertex_42_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 42 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 42 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_42_ycoordinate`'.format(value))
        self._data["Vertex 42 Y-coordinate"] = value

    @property
    def vertex_42_zcoordinate(self):
        """Get vertex_42_zcoordinate

        Returns:
            float: the value of `vertex_42_zcoordinate` or None if not set
        """
        return self._data["Vertex 42 Z-coordinate"]

    @vertex_42_zcoordinate.setter
    def vertex_42_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 42 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 42 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_42_zcoordinate`'.format(value))
        self._data["Vertex 42 Z-coordinate"] = value

    @property
    def vertex_43_xcoordinate(self):
        """Get vertex_43_xcoordinate

        Returns:
            float: the value of `vertex_43_xcoordinate` or None if not set
        """
        return self._data["Vertex 43 X-coordinate"]

    @vertex_43_xcoordinate.setter
    def vertex_43_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 43 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 43 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_43_xcoordinate`'.format(value))
        self._data["Vertex 43 X-coordinate"] = value

    @property
    def vertex_43_ycoordinate(self):
        """Get vertex_43_ycoordinate

        Returns:
            float: the value of `vertex_43_ycoordinate` or None if not set
        """
        return self._data["Vertex 43 Y-coordinate"]

    @vertex_43_ycoordinate.setter
    def vertex_43_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 43 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 43 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_43_ycoordinate`'.format(value))
        self._data["Vertex 43 Y-coordinate"] = value

    @property
    def vertex_43_zcoordinate(self):
        """Get vertex_43_zcoordinate

        Returns:
            float: the value of `vertex_43_zcoordinate` or None if not set
        """
        return self._data["Vertex 43 Z-coordinate"]

    @vertex_43_zcoordinate.setter
    def vertex_43_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 43 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 43 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_43_zcoordinate`'.format(value))
        self._data["Vertex 43 Z-coordinate"] = value

    @property
    def vertex_44_xcoordinate(self):
        """Get vertex_44_xcoordinate

        Returns:
            float: the value of `vertex_44_xcoordinate` or None if not set
        """
        return self._data["Vertex 44 X-coordinate"]

    @vertex_44_xcoordinate.setter
    def vertex_44_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 44 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 44 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_44_xcoordinate`'.format(value))
        self._data["Vertex 44 X-coordinate"] = value

    @property
    def vertex_44_ycoordinate(self):
        """Get vertex_44_ycoordinate

        Returns:
            float: the value of `vertex_44_ycoordinate` or None if not set
        """
        return self._data["Vertex 44 Y-coordinate"]

    @vertex_44_ycoordinate.setter
    def vertex_44_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 44 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 44 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_44_ycoordinate`'.format(value))
        self._data["Vertex 44 Y-coordinate"] = value

    @property
    def vertex_44_zcoordinate(self):
        """Get vertex_44_zcoordinate

        Returns:
            float: the value of `vertex_44_zcoordinate` or None if not set
        """
        return self._data["Vertex 44 Z-coordinate"]

    @vertex_44_zcoordinate.setter
    def vertex_44_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 44 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 44 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_44_zcoordinate`'.format(value))
        self._data["Vertex 44 Z-coordinate"] = value

    @property
    def vertex_45_xcoordinate(self):
        """Get vertex_45_xcoordinate

        Returns:
            float: the value of `vertex_45_xcoordinate` or None if not set
        """
        return self._data["Vertex 45 X-coordinate"]

    @vertex_45_xcoordinate.setter
    def vertex_45_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 45 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 45 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_45_xcoordinate`'.format(value))
        self._data["Vertex 45 X-coordinate"] = value

    @property
    def vertex_45_ycoordinate(self):
        """Get vertex_45_ycoordinate

        Returns:
            float: the value of `vertex_45_ycoordinate` or None if not set
        """
        return self._data["Vertex 45 Y-coordinate"]

    @vertex_45_ycoordinate.setter
    def vertex_45_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 45 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 45 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_45_ycoordinate`'.format(value))
        self._data["Vertex 45 Y-coordinate"] = value

    @property
    def vertex_45_zcoordinate(self):
        """Get vertex_45_zcoordinate

        Returns:
            float: the value of `vertex_45_zcoordinate` or None if not set
        """
        return self._data["Vertex 45 Z-coordinate"]

    @vertex_45_zcoordinate.setter
    def vertex_45_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 45 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 45 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_45_zcoordinate`'.format(value))
        self._data["Vertex 45 Z-coordinate"] = value

    @property
    def vertex_46_xcoordinate(self):
        """Get vertex_46_xcoordinate

        Returns:
            float: the value of `vertex_46_xcoordinate` or None if not set
        """
        return self._data["Vertex 46 X-coordinate"]

    @vertex_46_xcoordinate.setter
    def vertex_46_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 46 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 46 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_46_xcoordinate`'.format(value))
        self._data["Vertex 46 X-coordinate"] = value

    @property
    def vertex_46_ycoordinate(self):
        """Get vertex_46_ycoordinate

        Returns:
            float: the value of `vertex_46_ycoordinate` or None if not set
        """
        return self._data["Vertex 46 Y-coordinate"]

    @vertex_46_ycoordinate.setter
    def vertex_46_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 46 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 46 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_46_ycoordinate`'.format(value))
        self._data["Vertex 46 Y-coordinate"] = value

    @property
    def vertex_46_zcoordinate(self):
        """Get vertex_46_zcoordinate

        Returns:
            float: the value of `vertex_46_zcoordinate` or None if not set
        """
        return self._data["Vertex 46 Z-coordinate"]

    @vertex_46_zcoordinate.setter
    def vertex_46_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 46 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 46 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_46_zcoordinate`'.format(value))
        self._data["Vertex 46 Z-coordinate"] = value

    @property
    def vertex_47_xcoordinate(self):
        """Get vertex_47_xcoordinate

        Returns:
            float: the value of `vertex_47_xcoordinate` or None if not set
        """
        return self._data["Vertex 47 X-coordinate"]

    @vertex_47_xcoordinate.setter
    def vertex_47_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 47 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 47 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_47_xcoordinate`'.format(value))
        self._data["Vertex 47 X-coordinate"] = value

    @property
    def vertex_47_ycoordinate(self):
        """Get vertex_47_ycoordinate

        Returns:
            float: the value of `vertex_47_ycoordinate` or None if not set
        """
        return self._data["Vertex 47 Y-coordinate"]

    @vertex_47_ycoordinate.setter
    def vertex_47_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 47 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 47 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_47_ycoordinate`'.format(value))
        self._data["Vertex 47 Y-coordinate"] = value

    @property
    def vertex_47_zcoordinate(self):
        """Get vertex_47_zcoordinate

        Returns:
            float: the value of `vertex_47_zcoordinate` or None if not set
        """
        return self._data["Vertex 47 Z-coordinate"]

    @vertex_47_zcoordinate.setter
    def vertex_47_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 47 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 47 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_47_zcoordinate`'.format(value))
        self._data["Vertex 47 Z-coordinate"] = value

    @property
    def vertex_48_xcoordinate(self):
        """Get vertex_48_xcoordinate

        Returns:
            float: the value of `vertex_48_xcoordinate` or None if not set
        """
        return self._data["Vertex 48 X-coordinate"]

    @vertex_48_xcoordinate.setter
    def vertex_48_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 48 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 48 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_48_xcoordinate`'.format(value))
        self._data["Vertex 48 X-coordinate"] = value

    @property
    def vertex_48_ycoordinate(self):
        """Get vertex_48_ycoordinate

        Returns:
            float: the value of `vertex_48_ycoordinate` or None if not set
        """
        return self._data["Vertex 48 Y-coordinate"]

    @vertex_48_ycoordinate.setter
    def vertex_48_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 48 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 48 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_48_ycoordinate`'.format(value))
        self._data["Vertex 48 Y-coordinate"] = value

    @property
    def vertex_48_zcoordinate(self):
        """Get vertex_48_zcoordinate

        Returns:
            float: the value of `vertex_48_zcoordinate` or None if not set
        """
        return self._data["Vertex 48 Z-coordinate"]

    @vertex_48_zcoordinate.setter
    def vertex_48_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 48 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 48 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_48_zcoordinate`'.format(value))
        self._data["Vertex 48 Z-coordinate"] = value

    @property
    def vertex_49_xcoordinate(self):
        """Get vertex_49_xcoordinate

        Returns:
            float: the value of `vertex_49_xcoordinate` or None if not set
        """
        return self._data["Vertex 49 X-coordinate"]

    @vertex_49_xcoordinate.setter
    def vertex_49_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 49 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 49 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_49_xcoordinate`'.format(value))
        self._data["Vertex 49 X-coordinate"] = value

    @property
    def vertex_49_ycoordinate(self):
        """Get vertex_49_ycoordinate

        Returns:
            float: the value of `vertex_49_ycoordinate` or None if not set
        """
        return self._data["Vertex 49 Y-coordinate"]

    @vertex_49_ycoordinate.setter
    def vertex_49_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 49 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 49 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_49_ycoordinate`'.format(value))
        self._data["Vertex 49 Y-coordinate"] = value

    @property
    def vertex_49_zcoordinate(self):
        """Get vertex_49_zcoordinate

        Returns:
            float: the value of `vertex_49_zcoordinate` or None if not set
        """
        return self._data["Vertex 49 Z-coordinate"]

    @vertex_49_zcoordinate.setter
    def vertex_49_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 49 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 49 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_49_zcoordinate`'.format(value))
        self._data["Vertex 49 Z-coordinate"] = value

    @property
    def vertex_50_xcoordinate(self):
        """Get vertex_50_xcoordinate

        Returns:
            float: the value of `vertex_50_xcoordinate` or None if not set
        """
        return self._data["Vertex 50 X-coordinate"]

    @vertex_50_xcoordinate.setter
    def vertex_50_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 50 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 50 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_50_xcoordinate`'.format(value))
        self._data["Vertex 50 X-coordinate"] = value

    @property
    def vertex_50_ycoordinate(self):
        """Get vertex_50_ycoordinate

        Returns:
            float: the value of `vertex_50_ycoordinate` or None if not set
        """
        return self._data["Vertex 50 Y-coordinate"]

    @vertex_50_ycoordinate.setter
    def vertex_50_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 50 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 50 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_50_ycoordinate`'.format(value))
        self._data["Vertex 50 Y-coordinate"] = value

    @property
    def vertex_50_zcoordinate(self):
        """Get vertex_50_zcoordinate

        Returns:
            float: the value of `vertex_50_zcoordinate` or None if not set
        """
        return self._data["Vertex 50 Z-coordinate"]

    @vertex_50_zcoordinate.setter
    def vertex_50_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 50 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 50 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_50_zcoordinate`'.format(value))
        self._data["Vertex 50 Z-coordinate"] = value

    @property
    def vertex_51_xcoordinate(self):
        """Get vertex_51_xcoordinate

        Returns:
            float: the value of `vertex_51_xcoordinate` or None if not set
        """
        return self._data["Vertex 51 X-coordinate"]

    @vertex_51_xcoordinate.setter
    def vertex_51_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 51 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 51 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_51_xcoordinate`'.format(value))
        self._data["Vertex 51 X-coordinate"] = value

    @property
    def vertex_51_ycoordinate(self):
        """Get vertex_51_ycoordinate

        Returns:
            float: the value of `vertex_51_ycoordinate` or None if not set
        """
        return self._data["Vertex 51 Y-coordinate"]

    @vertex_51_ycoordinate.setter
    def vertex_51_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 51 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 51 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_51_ycoordinate`'.format(value))
        self._data["Vertex 51 Y-coordinate"] = value

    @property
    def vertex_51_zcoordinate(self):
        """Get vertex_51_zcoordinate

        Returns:
            float: the value of `vertex_51_zcoordinate` or None if not set
        """
        return self._data["Vertex 51 Z-coordinate"]

    @vertex_51_zcoordinate.setter
    def vertex_51_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 51 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 51 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_51_zcoordinate`'.format(value))
        self._data["Vertex 51 Z-coordinate"] = value

    @property
    def vertex_52_xcoordinate(self):
        """Get vertex_52_xcoordinate

        Returns:
            float: the value of `vertex_52_xcoordinate` or None if not set
        """
        return self._data["Vertex 52 X-coordinate"]

    @vertex_52_xcoordinate.setter
    def vertex_52_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 52 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 52 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_52_xcoordinate`'.format(value))
        self._data["Vertex 52 X-coordinate"] = value

    @property
    def vertex_52_ycoordinate(self):
        """Get vertex_52_ycoordinate

        Returns:
            float: the value of `vertex_52_ycoordinate` or None if not set
        """
        return self._data["Vertex 52 Y-coordinate"]

    @vertex_52_ycoordinate.setter
    def vertex_52_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 52 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 52 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_52_ycoordinate`'.format(value))
        self._data["Vertex 52 Y-coordinate"] = value

    @property
    def vertex_52_zcoordinate(self):
        """Get vertex_52_zcoordinate

        Returns:
            float: the value of `vertex_52_zcoordinate` or None if not set
        """
        return self._data["Vertex 52 Z-coordinate"]

    @vertex_52_zcoordinate.setter
    def vertex_52_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 52 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 52 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_52_zcoordinate`'.format(value))
        self._data["Vertex 52 Z-coordinate"] = value

    @property
    def vertex_53_xcoordinate(self):
        """Get vertex_53_xcoordinate

        Returns:
            float: the value of `vertex_53_xcoordinate` or None if not set
        """
        return self._data["Vertex 53 X-coordinate"]

    @vertex_53_xcoordinate.setter
    def vertex_53_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 53 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 53 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_53_xcoordinate`'.format(value))
        self._data["Vertex 53 X-coordinate"] = value

    @property
    def vertex_53_ycoordinate(self):
        """Get vertex_53_ycoordinate

        Returns:
            float: the value of `vertex_53_ycoordinate` or None if not set
        """
        return self._data["Vertex 53 Y-coordinate"]

    @vertex_53_ycoordinate.setter
    def vertex_53_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 53 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 53 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_53_ycoordinate`'.format(value))
        self._data["Vertex 53 Y-coordinate"] = value

    @property
    def vertex_53_zcoordinate(self):
        """Get vertex_53_zcoordinate

        Returns:
            float: the value of `vertex_53_zcoordinate` or None if not set
        """
        return self._data["Vertex 53 Z-coordinate"]

    @vertex_53_zcoordinate.setter
    def vertex_53_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 53 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 53 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_53_zcoordinate`'.format(value))
        self._data["Vertex 53 Z-coordinate"] = value

    @property
    def vertex_54_xcoordinate(self):
        """Get vertex_54_xcoordinate

        Returns:
            float: the value of `vertex_54_xcoordinate` or None if not set
        """
        return self._data["Vertex 54 X-coordinate"]

    @vertex_54_xcoordinate.setter
    def vertex_54_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 54 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 54 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_54_xcoordinate`'.format(value))
        self._data["Vertex 54 X-coordinate"] = value

    @property
    def vertex_54_ycoordinate(self):
        """Get vertex_54_ycoordinate

        Returns:
            float: the value of `vertex_54_ycoordinate` or None if not set
        """
        return self._data["Vertex 54 Y-coordinate"]

    @vertex_54_ycoordinate.setter
    def vertex_54_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 54 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 54 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_54_ycoordinate`'.format(value))
        self._data["Vertex 54 Y-coordinate"] = value

    @property
    def vertex_54_zcoordinate(self):
        """Get vertex_54_zcoordinate

        Returns:
            float: the value of `vertex_54_zcoordinate` or None if not set
        """
        return self._data["Vertex 54 Z-coordinate"]

    @vertex_54_zcoordinate.setter
    def vertex_54_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 54 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 54 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_54_zcoordinate`'.format(value))
        self._data["Vertex 54 Z-coordinate"] = value

    @property
    def vertex_55_xcoordinate(self):
        """Get vertex_55_xcoordinate

        Returns:
            float: the value of `vertex_55_xcoordinate` or None if not set
        """
        return self._data["Vertex 55 X-coordinate"]

    @vertex_55_xcoordinate.setter
    def vertex_55_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 55 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 55 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_55_xcoordinate`'.format(value))
        self._data["Vertex 55 X-coordinate"] = value

    @property
    def vertex_55_ycoordinate(self):
        """Get vertex_55_ycoordinate

        Returns:
            float: the value of `vertex_55_ycoordinate` or None if not set
        """
        return self._data["Vertex 55 Y-coordinate"]

    @vertex_55_ycoordinate.setter
    def vertex_55_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 55 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 55 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_55_ycoordinate`'.format(value))
        self._data["Vertex 55 Y-coordinate"] = value

    @property
    def vertex_55_zcoordinate(self):
        """Get vertex_55_zcoordinate

        Returns:
            float: the value of `vertex_55_zcoordinate` or None if not set
        """
        return self._data["Vertex 55 Z-coordinate"]

    @vertex_55_zcoordinate.setter
    def vertex_55_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 55 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 55 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_55_zcoordinate`'.format(value))
        self._data["Vertex 55 Z-coordinate"] = value

    @property
    def vertex_56_xcoordinate(self):
        """Get vertex_56_xcoordinate

        Returns:
            float: the value of `vertex_56_xcoordinate` or None if not set
        """
        return self._data["Vertex 56 X-coordinate"]

    @vertex_56_xcoordinate.setter
    def vertex_56_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 56 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 56 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_56_xcoordinate`'.format(value))
        self._data["Vertex 56 X-coordinate"] = value

    @property
    def vertex_56_ycoordinate(self):
        """Get vertex_56_ycoordinate

        Returns:
            float: the value of `vertex_56_ycoordinate` or None if not set
        """
        return self._data["Vertex 56 Y-coordinate"]

    @vertex_56_ycoordinate.setter
    def vertex_56_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 56 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 56 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_56_ycoordinate`'.format(value))
        self._data["Vertex 56 Y-coordinate"] = value

    @property
    def vertex_56_zcoordinate(self):
        """Get vertex_56_zcoordinate

        Returns:
            float: the value of `vertex_56_zcoordinate` or None if not set
        """
        return self._data["Vertex 56 Z-coordinate"]

    @vertex_56_zcoordinate.setter
    def vertex_56_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 56 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 56 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_56_zcoordinate`'.format(value))
        self._data["Vertex 56 Z-coordinate"] = value

    @property
    def vertex_57_xcoordinate(self):
        """Get vertex_57_xcoordinate

        Returns:
            float: the value of `vertex_57_xcoordinate` or None if not set
        """
        return self._data["Vertex 57 X-coordinate"]

    @vertex_57_xcoordinate.setter
    def vertex_57_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 57 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 57 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_57_xcoordinate`'.format(value))
        self._data["Vertex 57 X-coordinate"] = value

    @property
    def vertex_57_ycoordinate(self):
        """Get vertex_57_ycoordinate

        Returns:
            float: the value of `vertex_57_ycoordinate` or None if not set
        """
        return self._data["Vertex 57 Y-coordinate"]

    @vertex_57_ycoordinate.setter
    def vertex_57_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 57 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 57 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_57_ycoordinate`'.format(value))
        self._data["Vertex 57 Y-coordinate"] = value

    @property
    def vertex_57_zcoordinate(self):
        """Get vertex_57_zcoordinate

        Returns:
            float: the value of `vertex_57_zcoordinate` or None if not set
        """
        return self._data["Vertex 57 Z-coordinate"]

    @vertex_57_zcoordinate.setter
    def vertex_57_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 57 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 57 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_57_zcoordinate`'.format(value))
        self._data["Vertex 57 Z-coordinate"] = value

    @property
    def vertex_58_xcoordinate(self):
        """Get vertex_58_xcoordinate

        Returns:
            float: the value of `vertex_58_xcoordinate` or None if not set
        """
        return self._data["Vertex 58 X-coordinate"]

    @vertex_58_xcoordinate.setter
    def vertex_58_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 58 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 58 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_58_xcoordinate`'.format(value))
        self._data["Vertex 58 X-coordinate"] = value

    @property
    def vertex_58_ycoordinate(self):
        """Get vertex_58_ycoordinate

        Returns:
            float: the value of `vertex_58_ycoordinate` or None if not set
        """
        return self._data["Vertex 58 Y-coordinate"]

    @vertex_58_ycoordinate.setter
    def vertex_58_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 58 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 58 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_58_ycoordinate`'.format(value))
        self._data["Vertex 58 Y-coordinate"] = value

    @property
    def vertex_58_zcoordinate(self):
        """Get vertex_58_zcoordinate

        Returns:
            float: the value of `vertex_58_zcoordinate` or None if not set
        """
        return self._data["Vertex 58 Z-coordinate"]

    @vertex_58_zcoordinate.setter
    def vertex_58_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 58 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 58 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_58_zcoordinate`'.format(value))
        self._data["Vertex 58 Z-coordinate"] = value

    @property
    def vertex_59_xcoordinate(self):
        """Get vertex_59_xcoordinate

        Returns:
            float: the value of `vertex_59_xcoordinate` or None if not set
        """
        return self._data["Vertex 59 X-coordinate"]

    @vertex_59_xcoordinate.setter
    def vertex_59_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 59 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 59 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_59_xcoordinate`'.format(value))
        self._data["Vertex 59 X-coordinate"] = value

    @property
    def vertex_59_ycoordinate(self):
        """Get vertex_59_ycoordinate

        Returns:
            float: the value of `vertex_59_ycoordinate` or None if not set
        """
        return self._data["Vertex 59 Y-coordinate"]

    @vertex_59_ycoordinate.setter
    def vertex_59_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 59 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 59 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_59_ycoordinate`'.format(value))
        self._data["Vertex 59 Y-coordinate"] = value

    @property
    def vertex_59_zcoordinate(self):
        """Get vertex_59_zcoordinate

        Returns:
            float: the value of `vertex_59_zcoordinate` or None if not set
        """
        return self._data["Vertex 59 Z-coordinate"]

    @vertex_59_zcoordinate.setter
    def vertex_59_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 59 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 59 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_59_zcoordinate`'.format(value))
        self._data["Vertex 59 Z-coordinate"] = value

    @property
    def vertex_60_xcoordinate(self):
        """Get vertex_60_xcoordinate

        Returns:
            float: the value of `vertex_60_xcoordinate` or None if not set
        """
        return self._data["Vertex 60 X-coordinate"]

    @vertex_60_xcoordinate.setter
    def vertex_60_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 60 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 60 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_60_xcoordinate`'.format(value))
        self._data["Vertex 60 X-coordinate"] = value

    @property
    def vertex_60_ycoordinate(self):
        """Get vertex_60_ycoordinate

        Returns:
            float: the value of `vertex_60_ycoordinate` or None if not set
        """
        return self._data["Vertex 60 Y-coordinate"]

    @vertex_60_ycoordinate.setter
    def vertex_60_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 60 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 60 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_60_ycoordinate`'.format(value))
        self._data["Vertex 60 Y-coordinate"] = value

    @property
    def vertex_60_zcoordinate(self):
        """Get vertex_60_zcoordinate

        Returns:
            float: the value of `vertex_60_zcoordinate` or None if not set
        """
        return self._data["Vertex 60 Z-coordinate"]

    @vertex_60_zcoordinate.setter
    def vertex_60_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 60 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 60 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_60_zcoordinate`'.format(value))
        self._data["Vertex 60 Z-coordinate"] = value

    @property
    def vertex_61_xcoordinate(self):
        """Get vertex_61_xcoordinate

        Returns:
            float: the value of `vertex_61_xcoordinate` or None if not set
        """
        return self._data["Vertex 61 X-coordinate"]

    @vertex_61_xcoordinate.setter
    def vertex_61_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 61 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 61 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_61_xcoordinate`'.format(value))
        self._data["Vertex 61 X-coordinate"] = value

    @property
    def vertex_61_ycoordinate(self):
        """Get vertex_61_ycoordinate

        Returns:
            float: the value of `vertex_61_ycoordinate` or None if not set
        """
        return self._data["Vertex 61 Y-coordinate"]

    @vertex_61_ycoordinate.setter
    def vertex_61_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 61 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 61 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_61_ycoordinate`'.format(value))
        self._data["Vertex 61 Y-coordinate"] = value

    @property
    def vertex_61_zcoordinate(self):
        """Get vertex_61_zcoordinate

        Returns:
            float: the value of `vertex_61_zcoordinate` or None if not set
        """
        return self._data["Vertex 61 Z-coordinate"]

    @vertex_61_zcoordinate.setter
    def vertex_61_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 61 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 61 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_61_zcoordinate`'.format(value))
        self._data["Vertex 61 Z-coordinate"] = value

    @property
    def vertex_62_xcoordinate(self):
        """Get vertex_62_xcoordinate

        Returns:
            float: the value of `vertex_62_xcoordinate` or None if not set
        """
        return self._data["Vertex 62 X-coordinate"]

    @vertex_62_xcoordinate.setter
    def vertex_62_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 62 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 62 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_62_xcoordinate`'.format(value))
        self._data["Vertex 62 X-coordinate"] = value

    @property
    def vertex_62_ycoordinate(self):
        """Get vertex_62_ycoordinate

        Returns:
            float: the value of `vertex_62_ycoordinate` or None if not set
        """
        return self._data["Vertex 62 Y-coordinate"]

    @vertex_62_ycoordinate.setter
    def vertex_62_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 62 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 62 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_62_ycoordinate`'.format(value))
        self._data["Vertex 62 Y-coordinate"] = value

    @property
    def vertex_62_zcoordinate(self):
        """Get vertex_62_zcoordinate

        Returns:
            float: the value of `vertex_62_zcoordinate` or None if not set
        """
        return self._data["Vertex 62 Z-coordinate"]

    @vertex_62_zcoordinate.setter
    def vertex_62_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 62 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 62 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_62_zcoordinate`'.format(value))
        self._data["Vertex 62 Z-coordinate"] = value

    @property
    def vertex_63_xcoordinate(self):
        """Get vertex_63_xcoordinate

        Returns:
            float: the value of `vertex_63_xcoordinate` or None if not set
        """
        return self._data["Vertex 63 X-coordinate"]

    @vertex_63_xcoordinate.setter
    def vertex_63_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 63 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 63 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_63_xcoordinate`'.format(value))
        self._data["Vertex 63 X-coordinate"] = value

    @property
    def vertex_63_ycoordinate(self):
        """Get vertex_63_ycoordinate

        Returns:
            float: the value of `vertex_63_ycoordinate` or None if not set
        """
        return self._data["Vertex 63 Y-coordinate"]

    @vertex_63_ycoordinate.setter
    def vertex_63_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 63 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 63 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_63_ycoordinate`'.format(value))
        self._data["Vertex 63 Y-coordinate"] = value

    @property
    def vertex_63_zcoordinate(self):
        """Get vertex_63_zcoordinate

        Returns:
            float: the value of `vertex_63_zcoordinate` or None if not set
        """
        return self._data["Vertex 63 Z-coordinate"]

    @vertex_63_zcoordinate.setter
    def vertex_63_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 63 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 63 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_63_zcoordinate`'.format(value))
        self._data["Vertex 63 Z-coordinate"] = value

    @property
    def vertex_64_xcoordinate(self):
        """Get vertex_64_xcoordinate

        Returns:
            float: the value of `vertex_64_xcoordinate` or None if not set
        """
        return self._data["Vertex 64 X-coordinate"]

    @vertex_64_xcoordinate.setter
    def vertex_64_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 64 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 64 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_64_xcoordinate`'.format(value))
        self._data["Vertex 64 X-coordinate"] = value

    @property
    def vertex_64_ycoordinate(self):
        """Get vertex_64_ycoordinate

        Returns:
            float: the value of `vertex_64_ycoordinate` or None if not set
        """
        return self._data["Vertex 64 Y-coordinate"]

    @vertex_64_ycoordinate.setter
    def vertex_64_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 64 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 64 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_64_ycoordinate`'.format(value))
        self._data["Vertex 64 Y-coordinate"] = value

    @property
    def vertex_64_zcoordinate(self):
        """Get vertex_64_zcoordinate

        Returns:
            float: the value of `vertex_64_zcoordinate` or None if not set
        """
        return self._data["Vertex 64 Z-coordinate"]

    @vertex_64_zcoordinate.setter
    def vertex_64_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 64 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 64 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_64_zcoordinate`'.format(value))
        self._data["Vertex 64 Z-coordinate"] = value

    @property
    def vertex_65_xcoordinate(self):
        """Get vertex_65_xcoordinate

        Returns:
            float: the value of `vertex_65_xcoordinate` or None if not set
        """
        return self._data["Vertex 65 X-coordinate"]

    @vertex_65_xcoordinate.setter
    def vertex_65_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 65 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 65 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_65_xcoordinate`'.format(value))
        self._data["Vertex 65 X-coordinate"] = value

    @property
    def vertex_65_ycoordinate(self):
        """Get vertex_65_ycoordinate

        Returns:
            float: the value of `vertex_65_ycoordinate` or None if not set
        """
        return self._data["Vertex 65 Y-coordinate"]

    @vertex_65_ycoordinate.setter
    def vertex_65_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 65 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 65 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_65_ycoordinate`'.format(value))
        self._data["Vertex 65 Y-coordinate"] = value

    @property
    def vertex_65_zcoordinate(self):
        """Get vertex_65_zcoordinate

        Returns:
            float: the value of `vertex_65_zcoordinate` or None if not set
        """
        return self._data["Vertex 65 Z-coordinate"]

    @vertex_65_zcoordinate.setter
    def vertex_65_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 65 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 65 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_65_zcoordinate`'.format(value))
        self._data["Vertex 65 Z-coordinate"] = value

    @property
    def vertex_66_xcoordinate(self):
        """Get vertex_66_xcoordinate

        Returns:
            float: the value of `vertex_66_xcoordinate` or None if not set
        """
        return self._data["Vertex 66 X-coordinate"]

    @vertex_66_xcoordinate.setter
    def vertex_66_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 66 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 66 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_66_xcoordinate`'.format(value))
        self._data["Vertex 66 X-coordinate"] = value

    @property
    def vertex_66_ycoordinate(self):
        """Get vertex_66_ycoordinate

        Returns:
            float: the value of `vertex_66_ycoordinate` or None if not set
        """
        return self._data["Vertex 66 Y-coordinate"]

    @vertex_66_ycoordinate.setter
    def vertex_66_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 66 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 66 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_66_ycoordinate`'.format(value))
        self._data["Vertex 66 Y-coordinate"] = value

    @property
    def vertex_66_zcoordinate(self):
        """Get vertex_66_zcoordinate

        Returns:
            float: the value of `vertex_66_zcoordinate` or None if not set
        """
        return self._data["Vertex 66 Z-coordinate"]

    @vertex_66_zcoordinate.setter
    def vertex_66_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 66 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 66 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_66_zcoordinate`'.format(value))
        self._data["Vertex 66 Z-coordinate"] = value

    @property
    def vertex_67_xcoordinate(self):
        """Get vertex_67_xcoordinate

        Returns:
            float: the value of `vertex_67_xcoordinate` or None if not set
        """
        return self._data["Vertex 67 X-coordinate"]

    @vertex_67_xcoordinate.setter
    def vertex_67_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 67 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 67 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_67_xcoordinate`'.format(value))
        self._data["Vertex 67 X-coordinate"] = value

    @property
    def vertex_67_ycoordinate(self):
        """Get vertex_67_ycoordinate

        Returns:
            float: the value of `vertex_67_ycoordinate` or None if not set
        """
        return self._data["Vertex 67 Y-coordinate"]

    @vertex_67_ycoordinate.setter
    def vertex_67_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 67 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 67 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_67_ycoordinate`'.format(value))
        self._data["Vertex 67 Y-coordinate"] = value

    @property
    def vertex_67_zcoordinate(self):
        """Get vertex_67_zcoordinate

        Returns:
            float: the value of `vertex_67_zcoordinate` or None if not set
        """
        return self._data["Vertex 67 Z-coordinate"]

    @vertex_67_zcoordinate.setter
    def vertex_67_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 67 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 67 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_67_zcoordinate`'.format(value))
        self._data["Vertex 67 Z-coordinate"] = value

    @property
    def vertex_68_xcoordinate(self):
        """Get vertex_68_xcoordinate

        Returns:
            float: the value of `vertex_68_xcoordinate` or None if not set
        """
        return self._data["Vertex 68 X-coordinate"]

    @vertex_68_xcoordinate.setter
    def vertex_68_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 68 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 68 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_68_xcoordinate`'.format(value))
        self._data["Vertex 68 X-coordinate"] = value

    @property
    def vertex_68_ycoordinate(self):
        """Get vertex_68_ycoordinate

        Returns:
            float: the value of `vertex_68_ycoordinate` or None if not set
        """
        return self._data["Vertex 68 Y-coordinate"]

    @vertex_68_ycoordinate.setter
    def vertex_68_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 68 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 68 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_68_ycoordinate`'.format(value))
        self._data["Vertex 68 Y-coordinate"] = value

    @property
    def vertex_68_zcoordinate(self):
        """Get vertex_68_zcoordinate

        Returns:
            float: the value of `vertex_68_zcoordinate` or None if not set
        """
        return self._data["Vertex 68 Z-coordinate"]

    @vertex_68_zcoordinate.setter
    def vertex_68_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 68 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 68 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_68_zcoordinate`'.format(value))
        self._data["Vertex 68 Z-coordinate"] = value

    @property
    def vertex_69_xcoordinate(self):
        """Get vertex_69_xcoordinate

        Returns:
            float: the value of `vertex_69_xcoordinate` or None if not set
        """
        return self._data["Vertex 69 X-coordinate"]

    @vertex_69_xcoordinate.setter
    def vertex_69_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 69 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 69 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_69_xcoordinate`'.format(value))
        self._data["Vertex 69 X-coordinate"] = value

    @property
    def vertex_69_ycoordinate(self):
        """Get vertex_69_ycoordinate

        Returns:
            float: the value of `vertex_69_ycoordinate` or None if not set
        """
        return self._data["Vertex 69 Y-coordinate"]

    @vertex_69_ycoordinate.setter
    def vertex_69_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 69 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 69 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_69_ycoordinate`'.format(value))
        self._data["Vertex 69 Y-coordinate"] = value

    @property
    def vertex_69_zcoordinate(self):
        """Get vertex_69_zcoordinate

        Returns:
            float: the value of `vertex_69_zcoordinate` or None if not set
        """
        return self._data["Vertex 69 Z-coordinate"]

    @vertex_69_zcoordinate.setter
    def vertex_69_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 69 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 69 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_69_zcoordinate`'.format(value))
        self._data["Vertex 69 Z-coordinate"] = value

    @property
    def vertex_70_xcoordinate(self):
        """Get vertex_70_xcoordinate

        Returns:
            float: the value of `vertex_70_xcoordinate` or None if not set
        """
        return self._data["Vertex 70 X-coordinate"]

    @vertex_70_xcoordinate.setter
    def vertex_70_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 70 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 70 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_70_xcoordinate`'.format(value))
        self._data["Vertex 70 X-coordinate"] = value

    @property
    def vertex_70_ycoordinate(self):
        """Get vertex_70_ycoordinate

        Returns:
            float: the value of `vertex_70_ycoordinate` or None if not set
        """
        return self._data["Vertex 70 Y-coordinate"]

    @vertex_70_ycoordinate.setter
    def vertex_70_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 70 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 70 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_70_ycoordinate`'.format(value))
        self._data["Vertex 70 Y-coordinate"] = value

    @property
    def vertex_70_zcoordinate(self):
        """Get vertex_70_zcoordinate

        Returns:
            float: the value of `vertex_70_zcoordinate` or None if not set
        """
        return self._data["Vertex 70 Z-coordinate"]

    @vertex_70_zcoordinate.setter
    def vertex_70_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 70 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 70 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_70_zcoordinate`'.format(value))
        self._data["Vertex 70 Z-coordinate"] = value

    @property
    def vertex_71_xcoordinate(self):
        """Get vertex_71_xcoordinate

        Returns:
            float: the value of `vertex_71_xcoordinate` or None if not set
        """
        return self._data["Vertex 71 X-coordinate"]

    @vertex_71_xcoordinate.setter
    def vertex_71_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 71 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 71 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_71_xcoordinate`'.format(value))
        self._data["Vertex 71 X-coordinate"] = value

    @property
    def vertex_71_ycoordinate(self):
        """Get vertex_71_ycoordinate

        Returns:
            float: the value of `vertex_71_ycoordinate` or None if not set
        """
        return self._data["Vertex 71 Y-coordinate"]

    @vertex_71_ycoordinate.setter
    def vertex_71_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 71 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 71 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_71_ycoordinate`'.format(value))
        self._data["Vertex 71 Y-coordinate"] = value

    @property
    def vertex_71_zcoordinate(self):
        """Get vertex_71_zcoordinate

        Returns:
            float: the value of `vertex_71_zcoordinate` or None if not set
        """
        return self._data["Vertex 71 Z-coordinate"]

    @vertex_71_zcoordinate.setter
    def vertex_71_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 71 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 71 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_71_zcoordinate`'.format(value))
        self._data["Vertex 71 Z-coordinate"] = value

    @property
    def vertex_72_xcoordinate(self):
        """Get vertex_72_xcoordinate

        Returns:
            float: the value of `vertex_72_xcoordinate` or None if not set
        """
        return self._data["Vertex 72 X-coordinate"]

    @vertex_72_xcoordinate.setter
    def vertex_72_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 72 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 72 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_72_xcoordinate`'.format(value))
        self._data["Vertex 72 X-coordinate"] = value

    @property
    def vertex_72_ycoordinate(self):
        """Get vertex_72_ycoordinate

        Returns:
            float: the value of `vertex_72_ycoordinate` or None if not set
        """
        return self._data["Vertex 72 Y-coordinate"]

    @vertex_72_ycoordinate.setter
    def vertex_72_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 72 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 72 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_72_ycoordinate`'.format(value))
        self._data["Vertex 72 Y-coordinate"] = value

    @property
    def vertex_72_zcoordinate(self):
        """Get vertex_72_zcoordinate

        Returns:
            float: the value of `vertex_72_zcoordinate` or None if not set
        """
        return self._data["Vertex 72 Z-coordinate"]

    @vertex_72_zcoordinate.setter
    def vertex_72_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 72 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 72 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_72_zcoordinate`'.format(value))
        self._data["Vertex 72 Z-coordinate"] = value

    @property
    def vertex_73_xcoordinate(self):
        """Get vertex_73_xcoordinate

        Returns:
            float: the value of `vertex_73_xcoordinate` or None if not set
        """
        return self._data["Vertex 73 X-coordinate"]

    @vertex_73_xcoordinate.setter
    def vertex_73_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 73 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 73 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_73_xcoordinate`'.format(value))
        self._data["Vertex 73 X-coordinate"] = value

    @property
    def vertex_73_ycoordinate(self):
        """Get vertex_73_ycoordinate

        Returns:
            float: the value of `vertex_73_ycoordinate` or None if not set
        """
        return self._data["Vertex 73 Y-coordinate"]

    @vertex_73_ycoordinate.setter
    def vertex_73_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 73 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 73 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_73_ycoordinate`'.format(value))
        self._data["Vertex 73 Y-coordinate"] = value

    @property
    def vertex_73_zcoordinate(self):
        """Get vertex_73_zcoordinate

        Returns:
            float: the value of `vertex_73_zcoordinate` or None if not set
        """
        return self._data["Vertex 73 Z-coordinate"]

    @vertex_73_zcoordinate.setter
    def vertex_73_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 73 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 73 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_73_zcoordinate`'.format(value))
        self._data["Vertex 73 Z-coordinate"] = value

    @property
    def vertex_74_xcoordinate(self):
        """Get vertex_74_xcoordinate

        Returns:
            float: the value of `vertex_74_xcoordinate` or None if not set
        """
        return self._data["Vertex 74 X-coordinate"]

    @vertex_74_xcoordinate.setter
    def vertex_74_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 74 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 74 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_74_xcoordinate`'.format(value))
        self._data["Vertex 74 X-coordinate"] = value

    @property
    def vertex_74_ycoordinate(self):
        """Get vertex_74_ycoordinate

        Returns:
            float: the value of `vertex_74_ycoordinate` or None if not set
        """
        return self._data["Vertex 74 Y-coordinate"]

    @vertex_74_ycoordinate.setter
    def vertex_74_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 74 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 74 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_74_ycoordinate`'.format(value))
        self._data["Vertex 74 Y-coordinate"] = value

    @property
    def vertex_74_zcoordinate(self):
        """Get vertex_74_zcoordinate

        Returns:
            float: the value of `vertex_74_zcoordinate` or None if not set
        """
        return self._data["Vertex 74 Z-coordinate"]

    @vertex_74_zcoordinate.setter
    def vertex_74_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 74 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 74 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_74_zcoordinate`'.format(value))
        self._data["Vertex 74 Z-coordinate"] = value

    @property
    def vertex_75_xcoordinate(self):
        """Get vertex_75_xcoordinate

        Returns:
            float: the value of `vertex_75_xcoordinate` or None if not set
        """
        return self._data["Vertex 75 X-coordinate"]

    @vertex_75_xcoordinate.setter
    def vertex_75_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 75 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 75 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_75_xcoordinate`'.format(value))
        self._data["Vertex 75 X-coordinate"] = value

    @property
    def vertex_75_ycoordinate(self):
        """Get vertex_75_ycoordinate

        Returns:
            float: the value of `vertex_75_ycoordinate` or None if not set
        """
        return self._data["Vertex 75 Y-coordinate"]

    @vertex_75_ycoordinate.setter
    def vertex_75_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 75 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 75 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_75_ycoordinate`'.format(value))
        self._data["Vertex 75 Y-coordinate"] = value

    @property
    def vertex_75_zcoordinate(self):
        """Get vertex_75_zcoordinate

        Returns:
            float: the value of `vertex_75_zcoordinate` or None if not set
        """
        return self._data["Vertex 75 Z-coordinate"]

    @vertex_75_zcoordinate.setter
    def vertex_75_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 75 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 75 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_75_zcoordinate`'.format(value))
        self._data["Vertex 75 Z-coordinate"] = value

    @property
    def vertex_76_xcoordinate(self):
        """Get vertex_76_xcoordinate

        Returns:
            float: the value of `vertex_76_xcoordinate` or None if not set
        """
        return self._data["Vertex 76 X-coordinate"]

    @vertex_76_xcoordinate.setter
    def vertex_76_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 76 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 76 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_76_xcoordinate`'.format(value))
        self._data["Vertex 76 X-coordinate"] = value

    @property
    def vertex_76_ycoordinate(self):
        """Get vertex_76_ycoordinate

        Returns:
            float: the value of `vertex_76_ycoordinate` or None if not set
        """
        return self._data["Vertex 76 Y-coordinate"]

    @vertex_76_ycoordinate.setter
    def vertex_76_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 76 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 76 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_76_ycoordinate`'.format(value))
        self._data["Vertex 76 Y-coordinate"] = value

    @property
    def vertex_76_zcoordinate(self):
        """Get vertex_76_zcoordinate

        Returns:
            float: the value of `vertex_76_zcoordinate` or None if not set
        """
        return self._data["Vertex 76 Z-coordinate"]

    @vertex_76_zcoordinate.setter
    def vertex_76_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 76 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 76 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_76_zcoordinate`'.format(value))
        self._data["Vertex 76 Z-coordinate"] = value

    @property
    def vertex_77_xcoordinate(self):
        """Get vertex_77_xcoordinate

        Returns:
            float: the value of `vertex_77_xcoordinate` or None if not set
        """
        return self._data["Vertex 77 X-coordinate"]

    @vertex_77_xcoordinate.setter
    def vertex_77_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 77 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 77 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_77_xcoordinate`'.format(value))
        self._data["Vertex 77 X-coordinate"] = value

    @property
    def vertex_77_ycoordinate(self):
        """Get vertex_77_ycoordinate

        Returns:
            float: the value of `vertex_77_ycoordinate` or None if not set
        """
        return self._data["Vertex 77 Y-coordinate"]

    @vertex_77_ycoordinate.setter
    def vertex_77_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 77 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 77 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_77_ycoordinate`'.format(value))
        self._data["Vertex 77 Y-coordinate"] = value

    @property
    def vertex_77_zcoordinate(self):
        """Get vertex_77_zcoordinate

        Returns:
            float: the value of `vertex_77_zcoordinate` or None if not set
        """
        return self._data["Vertex 77 Z-coordinate"]

    @vertex_77_zcoordinate.setter
    def vertex_77_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 77 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 77 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_77_zcoordinate`'.format(value))
        self._data["Vertex 77 Z-coordinate"] = value

    @property
    def vertex_78_xcoordinate(self):
        """Get vertex_78_xcoordinate

        Returns:
            float: the value of `vertex_78_xcoordinate` or None if not set
        """
        return self._data["Vertex 78 X-coordinate"]

    @vertex_78_xcoordinate.setter
    def vertex_78_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 78 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 78 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_78_xcoordinate`'.format(value))
        self._data["Vertex 78 X-coordinate"] = value

    @property
    def vertex_78_ycoordinate(self):
        """Get vertex_78_ycoordinate

        Returns:
            float: the value of `vertex_78_ycoordinate` or None if not set
        """
        return self._data["Vertex 78 Y-coordinate"]

    @vertex_78_ycoordinate.setter
    def vertex_78_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 78 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 78 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_78_ycoordinate`'.format(value))
        self._data["Vertex 78 Y-coordinate"] = value

    @property
    def vertex_78_zcoordinate(self):
        """Get vertex_78_zcoordinate

        Returns:
            float: the value of `vertex_78_zcoordinate` or None if not set
        """
        return self._data["Vertex 78 Z-coordinate"]

    @vertex_78_zcoordinate.setter
    def vertex_78_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 78 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 78 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_78_zcoordinate`'.format(value))
        self._data["Vertex 78 Z-coordinate"] = value

    @property
    def vertex_79_xcoordinate(self):
        """Get vertex_79_xcoordinate

        Returns:
            float: the value of `vertex_79_xcoordinate` or None if not set
        """
        return self._data["Vertex 79 X-coordinate"]

    @vertex_79_xcoordinate.setter
    def vertex_79_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 79 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 79 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_79_xcoordinate`'.format(value))
        self._data["Vertex 79 X-coordinate"] = value

    @property
    def vertex_79_ycoordinate(self):
        """Get vertex_79_ycoordinate

        Returns:
            float: the value of `vertex_79_ycoordinate` or None if not set
        """
        return self._data["Vertex 79 Y-coordinate"]

    @vertex_79_ycoordinate.setter
    def vertex_79_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 79 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 79 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_79_ycoordinate`'.format(value))
        self._data["Vertex 79 Y-coordinate"] = value

    @property
    def vertex_79_zcoordinate(self):
        """Get vertex_79_zcoordinate

        Returns:
            float: the value of `vertex_79_zcoordinate` or None if not set
        """
        return self._data["Vertex 79 Z-coordinate"]

    @vertex_79_zcoordinate.setter
    def vertex_79_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 79 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 79 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_79_zcoordinate`'.format(value))
        self._data["Vertex 79 Z-coordinate"] = value

    @property
    def vertex_80_xcoordinate(self):
        """Get vertex_80_xcoordinate

        Returns:
            float: the value of `vertex_80_xcoordinate` or None if not set
        """
        return self._data["Vertex 80 X-coordinate"]

    @vertex_80_xcoordinate.setter
    def vertex_80_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 80 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 80 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_80_xcoordinate`'.format(value))
        self._data["Vertex 80 X-coordinate"] = value

    @property
    def vertex_80_ycoordinate(self):
        """Get vertex_80_ycoordinate

        Returns:
            float: the value of `vertex_80_ycoordinate` or None if not set
        """
        return self._data["Vertex 80 Y-coordinate"]

    @vertex_80_ycoordinate.setter
    def vertex_80_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 80 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 80 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_80_ycoordinate`'.format(value))
        self._data["Vertex 80 Y-coordinate"] = value

    @property
    def vertex_80_zcoordinate(self):
        """Get vertex_80_zcoordinate

        Returns:
            float: the value of `vertex_80_zcoordinate` or None if not set
        """
        return self._data["Vertex 80 Z-coordinate"]

    @vertex_80_zcoordinate.setter
    def vertex_80_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 80 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 80 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_80_zcoordinate`'.format(value))
        self._data["Vertex 80 Z-coordinate"] = value

    @property
    def vertex_81_xcoordinate(self):
        """Get vertex_81_xcoordinate

        Returns:
            float: the value of `vertex_81_xcoordinate` or None if not set
        """
        return self._data["Vertex 81 X-coordinate"]

    @vertex_81_xcoordinate.setter
    def vertex_81_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 81 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 81 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_81_xcoordinate`'.format(value))
        self._data["Vertex 81 X-coordinate"] = value

    @property
    def vertex_81_ycoordinate(self):
        """Get vertex_81_ycoordinate

        Returns:
            float: the value of `vertex_81_ycoordinate` or None if not set
        """
        return self._data["Vertex 81 Y-coordinate"]

    @vertex_81_ycoordinate.setter
    def vertex_81_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 81 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 81 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_81_ycoordinate`'.format(value))
        self._data["Vertex 81 Y-coordinate"] = value

    @property
    def vertex_81_zcoordinate(self):
        """Get vertex_81_zcoordinate

        Returns:
            float: the value of `vertex_81_zcoordinate` or None if not set
        """
        return self._data["Vertex 81 Z-coordinate"]

    @vertex_81_zcoordinate.setter
    def vertex_81_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 81 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 81 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_81_zcoordinate`'.format(value))
        self._data["Vertex 81 Z-coordinate"] = value

    @property
    def vertex_82_xcoordinate(self):
        """Get vertex_82_xcoordinate

        Returns:
            float: the value of `vertex_82_xcoordinate` or None if not set
        """
        return self._data["Vertex 82 X-coordinate"]

    @vertex_82_xcoordinate.setter
    def vertex_82_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 82 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 82 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_82_xcoordinate`'.format(value))
        self._data["Vertex 82 X-coordinate"] = value

    @property
    def vertex_82_ycoordinate(self):
        """Get vertex_82_ycoordinate

        Returns:
            float: the value of `vertex_82_ycoordinate` or None if not set
        """
        return self._data["Vertex 82 Y-coordinate"]

    @vertex_82_ycoordinate.setter
    def vertex_82_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 82 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 82 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_82_ycoordinate`'.format(value))
        self._data["Vertex 82 Y-coordinate"] = value

    @property
    def vertex_82_zcoordinate(self):
        """Get vertex_82_zcoordinate

        Returns:
            float: the value of `vertex_82_zcoordinate` or None if not set
        """
        return self._data["Vertex 82 Z-coordinate"]

    @vertex_82_zcoordinate.setter
    def vertex_82_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 82 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 82 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_82_zcoordinate`'.format(value))
        self._data["Vertex 82 Z-coordinate"] = value

    @property
    def vertex_83_xcoordinate(self):
        """Get vertex_83_xcoordinate

        Returns:
            float: the value of `vertex_83_xcoordinate` or None if not set
        """
        return self._data["Vertex 83 X-coordinate"]

    @vertex_83_xcoordinate.setter
    def vertex_83_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 83 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 83 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_83_xcoordinate`'.format(value))
        self._data["Vertex 83 X-coordinate"] = value

    @property
    def vertex_83_ycoordinate(self):
        """Get vertex_83_ycoordinate

        Returns:
            float: the value of `vertex_83_ycoordinate` or None if not set
        """
        return self._data["Vertex 83 Y-coordinate"]

    @vertex_83_ycoordinate.setter
    def vertex_83_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 83 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 83 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_83_ycoordinate`'.format(value))
        self._data["Vertex 83 Y-coordinate"] = value

    @property
    def vertex_83_zcoordinate(self):
        """Get vertex_83_zcoordinate

        Returns:
            float: the value of `vertex_83_zcoordinate` or None if not set
        """
        return self._data["Vertex 83 Z-coordinate"]

    @vertex_83_zcoordinate.setter
    def vertex_83_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 83 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 83 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_83_zcoordinate`'.format(value))
        self._data["Vertex 83 Z-coordinate"] = value

    @property
    def vertex_84_xcoordinate(self):
        """Get vertex_84_xcoordinate

        Returns:
            float: the value of `vertex_84_xcoordinate` or None if not set
        """
        return self._data["Vertex 84 X-coordinate"]

    @vertex_84_xcoordinate.setter
    def vertex_84_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 84 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 84 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_84_xcoordinate`'.format(value))
        self._data["Vertex 84 X-coordinate"] = value

    @property
    def vertex_84_ycoordinate(self):
        """Get vertex_84_ycoordinate

        Returns:
            float: the value of `vertex_84_ycoordinate` or None if not set
        """
        return self._data["Vertex 84 Y-coordinate"]

    @vertex_84_ycoordinate.setter
    def vertex_84_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 84 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 84 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_84_ycoordinate`'.format(value))
        self._data["Vertex 84 Y-coordinate"] = value

    @property
    def vertex_84_zcoordinate(self):
        """Get vertex_84_zcoordinate

        Returns:
            float: the value of `vertex_84_zcoordinate` or None if not set
        """
        return self._data["Vertex 84 Z-coordinate"]

    @vertex_84_zcoordinate.setter
    def vertex_84_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 84 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 84 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_84_zcoordinate`'.format(value))
        self._data["Vertex 84 Z-coordinate"] = value

    @property
    def vertex_85_xcoordinate(self):
        """Get vertex_85_xcoordinate

        Returns:
            float: the value of `vertex_85_xcoordinate` or None if not set
        """
        return self._data["Vertex 85 X-coordinate"]

    @vertex_85_xcoordinate.setter
    def vertex_85_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 85 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 85 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_85_xcoordinate`'.format(value))
        self._data["Vertex 85 X-coordinate"] = value

    @property
    def vertex_85_ycoordinate(self):
        """Get vertex_85_ycoordinate

        Returns:
            float: the value of `vertex_85_ycoordinate` or None if not set
        """
        return self._data["Vertex 85 Y-coordinate"]

    @vertex_85_ycoordinate.setter
    def vertex_85_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 85 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 85 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_85_ycoordinate`'.format(value))
        self._data["Vertex 85 Y-coordinate"] = value

    @property
    def vertex_85_zcoordinate(self):
        """Get vertex_85_zcoordinate

        Returns:
            float: the value of `vertex_85_zcoordinate` or None if not set
        """
        return self._data["Vertex 85 Z-coordinate"]

    @vertex_85_zcoordinate.setter
    def vertex_85_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 85 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 85 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_85_zcoordinate`'.format(value))
        self._data["Vertex 85 Z-coordinate"] = value

    @property
    def vertex_86_xcoordinate(self):
        """Get vertex_86_xcoordinate

        Returns:
            float: the value of `vertex_86_xcoordinate` or None if not set
        """
        return self._data["Vertex 86 X-coordinate"]

    @vertex_86_xcoordinate.setter
    def vertex_86_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 86 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 86 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_86_xcoordinate`'.format(value))
        self._data["Vertex 86 X-coordinate"] = value

    @property
    def vertex_86_ycoordinate(self):
        """Get vertex_86_ycoordinate

        Returns:
            float: the value of `vertex_86_ycoordinate` or None if not set
        """
        return self._data["Vertex 86 Y-coordinate"]

    @vertex_86_ycoordinate.setter
    def vertex_86_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 86 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 86 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_86_ycoordinate`'.format(value))
        self._data["Vertex 86 Y-coordinate"] = value

    @property
    def vertex_86_zcoordinate(self):
        """Get vertex_86_zcoordinate

        Returns:
            float: the value of `vertex_86_zcoordinate` or None if not set
        """
        return self._data["Vertex 86 Z-coordinate"]

    @vertex_86_zcoordinate.setter
    def vertex_86_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 86 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 86 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_86_zcoordinate`'.format(value))
        self._data["Vertex 86 Z-coordinate"] = value

    @property
    def vertex_87_xcoordinate(self):
        """Get vertex_87_xcoordinate

        Returns:
            float: the value of `vertex_87_xcoordinate` or None if not set
        """
        return self._data["Vertex 87 X-coordinate"]

    @vertex_87_xcoordinate.setter
    def vertex_87_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 87 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 87 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_87_xcoordinate`'.format(value))
        self._data["Vertex 87 X-coordinate"] = value

    @property
    def vertex_87_ycoordinate(self):
        """Get vertex_87_ycoordinate

        Returns:
            float: the value of `vertex_87_ycoordinate` or None if not set
        """
        return self._data["Vertex 87 Y-coordinate"]

    @vertex_87_ycoordinate.setter
    def vertex_87_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 87 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 87 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_87_ycoordinate`'.format(value))
        self._data["Vertex 87 Y-coordinate"] = value

    @property
    def vertex_87_zcoordinate(self):
        """Get vertex_87_zcoordinate

        Returns:
            float: the value of `vertex_87_zcoordinate` or None if not set
        """
        return self._data["Vertex 87 Z-coordinate"]

    @vertex_87_zcoordinate.setter
    def vertex_87_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 87 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 87 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_87_zcoordinate`'.format(value))
        self._data["Vertex 87 Z-coordinate"] = value

    @property
    def vertex_88_xcoordinate(self):
        """Get vertex_88_xcoordinate

        Returns:
            float: the value of `vertex_88_xcoordinate` or None if not set
        """
        return self._data["Vertex 88 X-coordinate"]

    @vertex_88_xcoordinate.setter
    def vertex_88_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 88 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 88 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_88_xcoordinate`'.format(value))
        self._data["Vertex 88 X-coordinate"] = value

    @property
    def vertex_88_ycoordinate(self):
        """Get vertex_88_ycoordinate

        Returns:
            float: the value of `vertex_88_ycoordinate` or None if not set
        """
        return self._data["Vertex 88 Y-coordinate"]

    @vertex_88_ycoordinate.setter
    def vertex_88_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 88 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 88 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_88_ycoordinate`'.format(value))
        self._data["Vertex 88 Y-coordinate"] = value

    @property
    def vertex_88_zcoordinate(self):
        """Get vertex_88_zcoordinate

        Returns:
            float: the value of `vertex_88_zcoordinate` or None if not set
        """
        return self._data["Vertex 88 Z-coordinate"]

    @vertex_88_zcoordinate.setter
    def vertex_88_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 88 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 88 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_88_zcoordinate`'.format(value))
        self._data["Vertex 88 Z-coordinate"] = value

    @property
    def vertex_89_xcoordinate(self):
        """Get vertex_89_xcoordinate

        Returns:
            float: the value of `vertex_89_xcoordinate` or None if not set
        """
        return self._data["Vertex 89 X-coordinate"]

    @vertex_89_xcoordinate.setter
    def vertex_89_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 89 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 89 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_89_xcoordinate`'.format(value))
        self._data["Vertex 89 X-coordinate"] = value

    @property
    def vertex_89_ycoordinate(self):
        """Get vertex_89_ycoordinate

        Returns:
            float: the value of `vertex_89_ycoordinate` or None if not set
        """
        return self._data["Vertex 89 Y-coordinate"]

    @vertex_89_ycoordinate.setter
    def vertex_89_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 89 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 89 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_89_ycoordinate`'.format(value))
        self._data["Vertex 89 Y-coordinate"] = value

    @property
    def vertex_89_zcoordinate(self):
        """Get vertex_89_zcoordinate

        Returns:
            float: the value of `vertex_89_zcoordinate` or None if not set
        """
        return self._data["Vertex 89 Z-coordinate"]

    @vertex_89_zcoordinate.setter
    def vertex_89_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 89 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 89 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_89_zcoordinate`'.format(value))
        self._data["Vertex 89 Z-coordinate"] = value

    @property
    def vertex_90_xcoordinate(self):
        """Get vertex_90_xcoordinate

        Returns:
            float: the value of `vertex_90_xcoordinate` or None if not set
        """
        return self._data["Vertex 90 X-coordinate"]

    @vertex_90_xcoordinate.setter
    def vertex_90_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 90 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 90 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_90_xcoordinate`'.format(value))
        self._data["Vertex 90 X-coordinate"] = value

    @property
    def vertex_90_ycoordinate(self):
        """Get vertex_90_ycoordinate

        Returns:
            float: the value of `vertex_90_ycoordinate` or None if not set
        """
        return self._data["Vertex 90 Y-coordinate"]

    @vertex_90_ycoordinate.setter
    def vertex_90_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 90 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 90 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_90_ycoordinate`'.format(value))
        self._data["Vertex 90 Y-coordinate"] = value

    @property
    def vertex_90_zcoordinate(self):
        """Get vertex_90_zcoordinate

        Returns:
            float: the value of `vertex_90_zcoordinate` or None if not set
        """
        return self._data["Vertex 90 Z-coordinate"]

    @vertex_90_zcoordinate.setter
    def vertex_90_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 90 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 90 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_90_zcoordinate`'.format(value))
        self._data["Vertex 90 Z-coordinate"] = value

    @property
    def vertex_91_xcoordinate(self):
        """Get vertex_91_xcoordinate

        Returns:
            float: the value of `vertex_91_xcoordinate` or None if not set
        """
        return self._data["Vertex 91 X-coordinate"]

    @vertex_91_xcoordinate.setter
    def vertex_91_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 91 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 91 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_91_xcoordinate`'.format(value))
        self._data["Vertex 91 X-coordinate"] = value

    @property
    def vertex_91_ycoordinate(self):
        """Get vertex_91_ycoordinate

        Returns:
            float: the value of `vertex_91_ycoordinate` or None if not set
        """
        return self._data["Vertex 91 Y-coordinate"]

    @vertex_91_ycoordinate.setter
    def vertex_91_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 91 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 91 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_91_ycoordinate`'.format(value))
        self._data["Vertex 91 Y-coordinate"] = value

    @property
    def vertex_91_zcoordinate(self):
        """Get vertex_91_zcoordinate

        Returns:
            float: the value of `vertex_91_zcoordinate` or None if not set
        """
        return self._data["Vertex 91 Z-coordinate"]

    @vertex_91_zcoordinate.setter
    def vertex_91_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 91 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 91 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_91_zcoordinate`'.format(value))
        self._data["Vertex 91 Z-coordinate"] = value

    @property
    def vertex_92_xcoordinate(self):
        """Get vertex_92_xcoordinate

        Returns:
            float: the value of `vertex_92_xcoordinate` or None if not set
        """
        return self._data["Vertex 92 X-coordinate"]

    @vertex_92_xcoordinate.setter
    def vertex_92_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 92 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 92 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_92_xcoordinate`'.format(value))
        self._data["Vertex 92 X-coordinate"] = value

    @property
    def vertex_92_ycoordinate(self):
        """Get vertex_92_ycoordinate

        Returns:
            float: the value of `vertex_92_ycoordinate` or None if not set
        """
        return self._data["Vertex 92 Y-coordinate"]

    @vertex_92_ycoordinate.setter
    def vertex_92_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 92 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 92 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_92_ycoordinate`'.format(value))
        self._data["Vertex 92 Y-coordinate"] = value

    @property
    def vertex_92_zcoordinate(self):
        """Get vertex_92_zcoordinate

        Returns:
            float: the value of `vertex_92_zcoordinate` or None if not set
        """
        return self._data["Vertex 92 Z-coordinate"]

    @vertex_92_zcoordinate.setter
    def vertex_92_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 92 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 92 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_92_zcoordinate`'.format(value))
        self._data["Vertex 92 Z-coordinate"] = value

    @property
    def vertex_93_xcoordinate(self):
        """Get vertex_93_xcoordinate

        Returns:
            float: the value of `vertex_93_xcoordinate` or None if not set
        """
        return self._data["Vertex 93 X-coordinate"]

    @vertex_93_xcoordinate.setter
    def vertex_93_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 93 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 93 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_93_xcoordinate`'.format(value))
        self._data["Vertex 93 X-coordinate"] = value

    @property
    def vertex_93_ycoordinate(self):
        """Get vertex_93_ycoordinate

        Returns:
            float: the value of `vertex_93_ycoordinate` or None if not set
        """
        return self._data["Vertex 93 Y-coordinate"]

    @vertex_93_ycoordinate.setter
    def vertex_93_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 93 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 93 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_93_ycoordinate`'.format(value))
        self._data["Vertex 93 Y-coordinate"] = value

    @property
    def vertex_93_zcoordinate(self):
        """Get vertex_93_zcoordinate

        Returns:
            float: the value of `vertex_93_zcoordinate` or None if not set
        """
        return self._data["Vertex 93 Z-coordinate"]

    @vertex_93_zcoordinate.setter
    def vertex_93_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 93 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 93 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_93_zcoordinate`'.format(value))
        self._data["Vertex 93 Z-coordinate"] = value

    @property
    def vertex_94_xcoordinate(self):
        """Get vertex_94_xcoordinate

        Returns:
            float: the value of `vertex_94_xcoordinate` or None if not set
        """
        return self._data["Vertex 94 X-coordinate"]

    @vertex_94_xcoordinate.setter
    def vertex_94_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 94 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 94 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_94_xcoordinate`'.format(value))
        self._data["Vertex 94 X-coordinate"] = value

    @property
    def vertex_94_ycoordinate(self):
        """Get vertex_94_ycoordinate

        Returns:
            float: the value of `vertex_94_ycoordinate` or None if not set
        """
        return self._data["Vertex 94 Y-coordinate"]

    @vertex_94_ycoordinate.setter
    def vertex_94_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 94 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 94 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_94_ycoordinate`'.format(value))
        self._data["Vertex 94 Y-coordinate"] = value

    @property
    def vertex_94_zcoordinate(self):
        """Get vertex_94_zcoordinate

        Returns:
            float: the value of `vertex_94_zcoordinate` or None if not set
        """
        return self._data["Vertex 94 Z-coordinate"]

    @vertex_94_zcoordinate.setter
    def vertex_94_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 94 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 94 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_94_zcoordinate`'.format(value))
        self._data["Vertex 94 Z-coordinate"] = value

    @property
    def vertex_95_xcoordinate(self):
        """Get vertex_95_xcoordinate

        Returns:
            float: the value of `vertex_95_xcoordinate` or None if not set
        """
        return self._data["Vertex 95 X-coordinate"]

    @vertex_95_xcoordinate.setter
    def vertex_95_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 95 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 95 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_95_xcoordinate`'.format(value))
        self._data["Vertex 95 X-coordinate"] = value

    @property
    def vertex_95_ycoordinate(self):
        """Get vertex_95_ycoordinate

        Returns:
            float: the value of `vertex_95_ycoordinate` or None if not set
        """
        return self._data["Vertex 95 Y-coordinate"]

    @vertex_95_ycoordinate.setter
    def vertex_95_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 95 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 95 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_95_ycoordinate`'.format(value))
        self._data["Vertex 95 Y-coordinate"] = value

    @property
    def vertex_95_zcoordinate(self):
        """Get vertex_95_zcoordinate

        Returns:
            float: the value of `vertex_95_zcoordinate` or None if not set
        """
        return self._data["Vertex 95 Z-coordinate"]

    @vertex_95_zcoordinate.setter
    def vertex_95_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 95 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 95 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_95_zcoordinate`'.format(value))
        self._data["Vertex 95 Z-coordinate"] = value

    @property
    def vertex_96_xcoordinate(self):
        """Get vertex_96_xcoordinate

        Returns:
            float: the value of `vertex_96_xcoordinate` or None if not set
        """
        return self._data["Vertex 96 X-coordinate"]

    @vertex_96_xcoordinate.setter
    def vertex_96_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 96 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 96 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_96_xcoordinate`'.format(value))
        self._data["Vertex 96 X-coordinate"] = value

    @property
    def vertex_96_ycoordinate(self):
        """Get vertex_96_ycoordinate

        Returns:
            float: the value of `vertex_96_ycoordinate` or None if not set
        """
        return self._data["Vertex 96 Y-coordinate"]

    @vertex_96_ycoordinate.setter
    def vertex_96_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 96 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 96 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_96_ycoordinate`'.format(value))
        self._data["Vertex 96 Y-coordinate"] = value

    @property
    def vertex_96_zcoordinate(self):
        """Get vertex_96_zcoordinate

        Returns:
            float: the value of `vertex_96_zcoordinate` or None if not set
        """
        return self._data["Vertex 96 Z-coordinate"]

    @vertex_96_zcoordinate.setter
    def vertex_96_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 96 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 96 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_96_zcoordinate`'.format(value))
        self._data["Vertex 96 Z-coordinate"] = value

    @property
    def vertex_97_xcoordinate(self):
        """Get vertex_97_xcoordinate

        Returns:
            float: the value of `vertex_97_xcoordinate` or None if not set
        """
        return self._data["Vertex 97 X-coordinate"]

    @vertex_97_xcoordinate.setter
    def vertex_97_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 97 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 97 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_97_xcoordinate`'.format(value))
        self._data["Vertex 97 X-coordinate"] = value

    @property
    def vertex_97_ycoordinate(self):
        """Get vertex_97_ycoordinate

        Returns:
            float: the value of `vertex_97_ycoordinate` or None if not set
        """
        return self._data["Vertex 97 Y-coordinate"]

    @vertex_97_ycoordinate.setter
    def vertex_97_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 97 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 97 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_97_ycoordinate`'.format(value))
        self._data["Vertex 97 Y-coordinate"] = value

    @property
    def vertex_97_zcoordinate(self):
        """Get vertex_97_zcoordinate

        Returns:
            float: the value of `vertex_97_zcoordinate` or None if not set
        """
        return self._data["Vertex 97 Z-coordinate"]

    @vertex_97_zcoordinate.setter
    def vertex_97_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 97 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 97 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_97_zcoordinate`'.format(value))
        self._data["Vertex 97 Z-coordinate"] = value

    @property
    def vertex_98_xcoordinate(self):
        """Get vertex_98_xcoordinate

        Returns:
            float: the value of `vertex_98_xcoordinate` or None if not set
        """
        return self._data["Vertex 98 X-coordinate"]

    @vertex_98_xcoordinate.setter
    def vertex_98_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 98 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 98 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_98_xcoordinate`'.format(value))
        self._data["Vertex 98 X-coordinate"] = value

    @property
    def vertex_98_ycoordinate(self):
        """Get vertex_98_ycoordinate

        Returns:
            float: the value of `vertex_98_ycoordinate` or None if not set
        """
        return self._data["Vertex 98 Y-coordinate"]

    @vertex_98_ycoordinate.setter
    def vertex_98_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 98 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 98 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_98_ycoordinate`'.format(value))
        self._data["Vertex 98 Y-coordinate"] = value

    @property
    def vertex_98_zcoordinate(self):
        """Get vertex_98_zcoordinate

        Returns:
            float: the value of `vertex_98_zcoordinate` or None if not set
        """
        return self._data["Vertex 98 Z-coordinate"]

    @vertex_98_zcoordinate.setter
    def vertex_98_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 98 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 98 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_98_zcoordinate`'.format(value))
        self._data["Vertex 98 Z-coordinate"] = value

    @property
    def vertex_99_xcoordinate(self):
        """Get vertex_99_xcoordinate

        Returns:
            float: the value of `vertex_99_xcoordinate` or None if not set
        """
        return self._data["Vertex 99 X-coordinate"]

    @vertex_99_xcoordinate.setter
    def vertex_99_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 99 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 99 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_99_xcoordinate`'.format(value))
        self._data["Vertex 99 X-coordinate"] = value

    @property
    def vertex_99_ycoordinate(self):
        """Get vertex_99_ycoordinate

        Returns:
            float: the value of `vertex_99_ycoordinate` or None if not set
        """
        return self._data["Vertex 99 Y-coordinate"]

    @vertex_99_ycoordinate.setter
    def vertex_99_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 99 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 99 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_99_ycoordinate`'.format(value))
        self._data["Vertex 99 Y-coordinate"] = value

    @property
    def vertex_99_zcoordinate(self):
        """Get vertex_99_zcoordinate

        Returns:
            float: the value of `vertex_99_zcoordinate` or None if not set
        """
        return self._data["Vertex 99 Z-coordinate"]

    @vertex_99_zcoordinate.setter
    def vertex_99_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 99 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 99 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_99_zcoordinate`'.format(value))
        self._data["Vertex 99 Z-coordinate"] = value

    @property
    def vertex_100_xcoordinate(self):
        """Get vertex_100_xcoordinate

        Returns:
            float: the value of `vertex_100_xcoordinate` or None if not set
        """
        return self._data["Vertex 100 X-coordinate"]

    @vertex_100_xcoordinate.setter
    def vertex_100_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 100 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 100 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_100_xcoordinate`'.format(value))
        self._data["Vertex 100 X-coordinate"] = value

    @property
    def vertex_100_ycoordinate(self):
        """Get vertex_100_ycoordinate

        Returns:
            float: the value of `vertex_100_ycoordinate` or None if not set
        """
        return self._data["Vertex 100 Y-coordinate"]

    @vertex_100_ycoordinate.setter
    def vertex_100_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 100 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 100 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_100_ycoordinate`'.format(value))
        self._data["Vertex 100 Y-coordinate"] = value

    @property
    def vertex_100_zcoordinate(self):
        """Get vertex_100_zcoordinate

        Returns:
            float: the value of `vertex_100_zcoordinate` or None if not set
        """
        return self._data["Vertex 100 Z-coordinate"]

    @vertex_100_zcoordinate.setter
    def vertex_100_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 100 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 100 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_100_zcoordinate`'.format(value))
        self._data["Vertex 100 Z-coordinate"] = value

    @property
    def vertex_101_xcoordinate(self):
        """Get vertex_101_xcoordinate

        Returns:
            float: the value of `vertex_101_xcoordinate` or None if not set
        """
        return self._data["Vertex 101 X-coordinate"]

    @vertex_101_xcoordinate.setter
    def vertex_101_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 101 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 101 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_101_xcoordinate`'.format(value))
        self._data["Vertex 101 X-coordinate"] = value

    @property
    def vertex_101_ycoordinate(self):
        """Get vertex_101_ycoordinate

        Returns:
            float: the value of `vertex_101_ycoordinate` or None if not set
        """
        return self._data["Vertex 101 Y-coordinate"]

    @vertex_101_ycoordinate.setter
    def vertex_101_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 101 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 101 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_101_ycoordinate`'.format(value))
        self._data["Vertex 101 Y-coordinate"] = value

    @property
    def vertex_101_zcoordinate(self):
        """Get vertex_101_zcoordinate

        Returns:
            float: the value of `vertex_101_zcoordinate` or None if not set
        """
        return self._data["Vertex 101 Z-coordinate"]

    @vertex_101_zcoordinate.setter
    def vertex_101_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 101 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 101 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_101_zcoordinate`'.format(value))
        self._data["Vertex 101 Z-coordinate"] = value

    @property
    def vertex_102_xcoordinate(self):
        """Get vertex_102_xcoordinate

        Returns:
            float: the value of `vertex_102_xcoordinate` or None if not set
        """
        return self._data["Vertex 102 X-coordinate"]

    @vertex_102_xcoordinate.setter
    def vertex_102_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 102 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 102 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_102_xcoordinate`'.format(value))
        self._data["Vertex 102 X-coordinate"] = value

    @property
    def vertex_102_ycoordinate(self):
        """Get vertex_102_ycoordinate

        Returns:
            float: the value of `vertex_102_ycoordinate` or None if not set
        """
        return self._data["Vertex 102 Y-coordinate"]

    @vertex_102_ycoordinate.setter
    def vertex_102_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 102 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 102 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_102_ycoordinate`'.format(value))
        self._data["Vertex 102 Y-coordinate"] = value

    @property
    def vertex_102_zcoordinate(self):
        """Get vertex_102_zcoordinate

        Returns:
            float: the value of `vertex_102_zcoordinate` or None if not set
        """
        return self._data["Vertex 102 Z-coordinate"]

    @vertex_102_zcoordinate.setter
    def vertex_102_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 102 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 102 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_102_zcoordinate`'.format(value))
        self._data["Vertex 102 Z-coordinate"] = value

    @property
    def vertex_103_xcoordinate(self):
        """Get vertex_103_xcoordinate

        Returns:
            float: the value of `vertex_103_xcoordinate` or None if not set
        """
        return self._data["Vertex 103 X-coordinate"]

    @vertex_103_xcoordinate.setter
    def vertex_103_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 103 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 103 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_103_xcoordinate`'.format(value))
        self._data["Vertex 103 X-coordinate"] = value

    @property
    def vertex_103_ycoordinate(self):
        """Get vertex_103_ycoordinate

        Returns:
            float: the value of `vertex_103_ycoordinate` or None if not set
        """
        return self._data["Vertex 103 Y-coordinate"]

    @vertex_103_ycoordinate.setter
    def vertex_103_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 103 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 103 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_103_ycoordinate`'.format(value))
        self._data["Vertex 103 Y-coordinate"] = value

    @property
    def vertex_103_zcoordinate(self):
        """Get vertex_103_zcoordinate

        Returns:
            float: the value of `vertex_103_zcoordinate` or None if not set
        """
        return self._data["Vertex 103 Z-coordinate"]

    @vertex_103_zcoordinate.setter
    def vertex_103_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 103 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 103 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_103_zcoordinate`'.format(value))
        self._data["Vertex 103 Z-coordinate"] = value

    @property
    def vertex_104_xcoordinate(self):
        """Get vertex_104_xcoordinate

        Returns:
            float: the value of `vertex_104_xcoordinate` or None if not set
        """
        return self._data["Vertex 104 X-coordinate"]

    @vertex_104_xcoordinate.setter
    def vertex_104_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 104 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 104 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_104_xcoordinate`'.format(value))
        self._data["Vertex 104 X-coordinate"] = value

    @property
    def vertex_104_ycoordinate(self):
        """Get vertex_104_ycoordinate

        Returns:
            float: the value of `vertex_104_ycoordinate` or None if not set
        """
        return self._data["Vertex 104 Y-coordinate"]

    @vertex_104_ycoordinate.setter
    def vertex_104_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 104 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 104 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_104_ycoordinate`'.format(value))
        self._data["Vertex 104 Y-coordinate"] = value

    @property
    def vertex_104_zcoordinate(self):
        """Get vertex_104_zcoordinate

        Returns:
            float: the value of `vertex_104_zcoordinate` or None if not set
        """
        return self._data["Vertex 104 Z-coordinate"]

    @vertex_104_zcoordinate.setter
    def vertex_104_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 104 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 104 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_104_zcoordinate`'.format(value))
        self._data["Vertex 104 Z-coordinate"] = value

    @property
    def vertex_105_xcoordinate(self):
        """Get vertex_105_xcoordinate

        Returns:
            float: the value of `vertex_105_xcoordinate` or None if not set
        """
        return self._data["Vertex 105 X-coordinate"]

    @vertex_105_xcoordinate.setter
    def vertex_105_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 105 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 105 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_105_xcoordinate`'.format(value))
        self._data["Vertex 105 X-coordinate"] = value

    @property
    def vertex_105_ycoordinate(self):
        """Get vertex_105_ycoordinate

        Returns:
            float: the value of `vertex_105_ycoordinate` or None if not set
        """
        return self._data["Vertex 105 Y-coordinate"]

    @vertex_105_ycoordinate.setter
    def vertex_105_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 105 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 105 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_105_ycoordinate`'.format(value))
        self._data["Vertex 105 Y-coordinate"] = value

    @property
    def vertex_105_zcoordinate(self):
        """Get vertex_105_zcoordinate

        Returns:
            float: the value of `vertex_105_zcoordinate` or None if not set
        """
        return self._data["Vertex 105 Z-coordinate"]

    @vertex_105_zcoordinate.setter
    def vertex_105_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 105 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 105 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_105_zcoordinate`'.format(value))
        self._data["Vertex 105 Z-coordinate"] = value

    @property
    def vertex_106_xcoordinate(self):
        """Get vertex_106_xcoordinate

        Returns:
            float: the value of `vertex_106_xcoordinate` or None if not set
        """
        return self._data["Vertex 106 X-coordinate"]

    @vertex_106_xcoordinate.setter
    def vertex_106_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 106 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 106 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_106_xcoordinate`'.format(value))
        self._data["Vertex 106 X-coordinate"] = value

    @property
    def vertex_106_ycoordinate(self):
        """Get vertex_106_ycoordinate

        Returns:
            float: the value of `vertex_106_ycoordinate` or None if not set
        """
        return self._data["Vertex 106 Y-coordinate"]

    @vertex_106_ycoordinate.setter
    def vertex_106_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 106 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 106 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_106_ycoordinate`'.format(value))
        self._data["Vertex 106 Y-coordinate"] = value

    @property
    def vertex_106_zcoordinate(self):
        """Get vertex_106_zcoordinate

        Returns:
            float: the value of `vertex_106_zcoordinate` or None if not set
        """
        return self._data["Vertex 106 Z-coordinate"]

    @vertex_106_zcoordinate.setter
    def vertex_106_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 106 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 106 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_106_zcoordinate`'.format(value))
        self._data["Vertex 106 Z-coordinate"] = value

    @property
    def vertex_107_xcoordinate(self):
        """Get vertex_107_xcoordinate

        Returns:
            float: the value of `vertex_107_xcoordinate` or None if not set
        """
        return self._data["Vertex 107 X-coordinate"]

    @vertex_107_xcoordinate.setter
    def vertex_107_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 107 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 107 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_107_xcoordinate`'.format(value))
        self._data["Vertex 107 X-coordinate"] = value

    @property
    def vertex_107_ycoordinate(self):
        """Get vertex_107_ycoordinate

        Returns:
            float: the value of `vertex_107_ycoordinate` or None if not set
        """
        return self._data["Vertex 107 Y-coordinate"]

    @vertex_107_ycoordinate.setter
    def vertex_107_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 107 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 107 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_107_ycoordinate`'.format(value))
        self._data["Vertex 107 Y-coordinate"] = value

    @property
    def vertex_107_zcoordinate(self):
        """Get vertex_107_zcoordinate

        Returns:
            float: the value of `vertex_107_zcoordinate` or None if not set
        """
        return self._data["Vertex 107 Z-coordinate"]

    @vertex_107_zcoordinate.setter
    def vertex_107_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 107 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 107 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_107_zcoordinate`'.format(value))
        self._data["Vertex 107 Z-coordinate"] = value

    @property
    def vertex_108_xcoordinate(self):
        """Get vertex_108_xcoordinate

        Returns:
            float: the value of `vertex_108_xcoordinate` or None if not set
        """
        return self._data["Vertex 108 X-coordinate"]

    @vertex_108_xcoordinate.setter
    def vertex_108_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 108 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 108 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_108_xcoordinate`'.format(value))
        self._data["Vertex 108 X-coordinate"] = value

    @property
    def vertex_108_ycoordinate(self):
        """Get vertex_108_ycoordinate

        Returns:
            float: the value of `vertex_108_ycoordinate` or None if not set
        """
        return self._data["Vertex 108 Y-coordinate"]

    @vertex_108_ycoordinate.setter
    def vertex_108_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 108 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 108 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_108_ycoordinate`'.format(value))
        self._data["Vertex 108 Y-coordinate"] = value

    @property
    def vertex_108_zcoordinate(self):
        """Get vertex_108_zcoordinate

        Returns:
            float: the value of `vertex_108_zcoordinate` or None if not set
        """
        return self._data["Vertex 108 Z-coordinate"]

    @vertex_108_zcoordinate.setter
    def vertex_108_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 108 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 108 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_108_zcoordinate`'.format(value))
        self._data["Vertex 108 Z-coordinate"] = value

    @property
    def vertex_109_xcoordinate(self):
        """Get vertex_109_xcoordinate

        Returns:
            float: the value of `vertex_109_xcoordinate` or None if not set
        """
        return self._data["Vertex 109 X-coordinate"]

    @vertex_109_xcoordinate.setter
    def vertex_109_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 109 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 109 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_109_xcoordinate`'.format(value))
        self._data["Vertex 109 X-coordinate"] = value

    @property
    def vertex_109_ycoordinate(self):
        """Get vertex_109_ycoordinate

        Returns:
            float: the value of `vertex_109_ycoordinate` or None if not set
        """
        return self._data["Vertex 109 Y-coordinate"]

    @vertex_109_ycoordinate.setter
    def vertex_109_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 109 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 109 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_109_ycoordinate`'.format(value))
        self._data["Vertex 109 Y-coordinate"] = value

    @property
    def vertex_109_zcoordinate(self):
        """Get vertex_109_zcoordinate

        Returns:
            float: the value of `vertex_109_zcoordinate` or None if not set
        """
        return self._data["Vertex 109 Z-coordinate"]

    @vertex_109_zcoordinate.setter
    def vertex_109_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 109 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 109 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_109_zcoordinate`'.format(value))
        self._data["Vertex 109 Z-coordinate"] = value

    @property
    def vertex_110_xcoordinate(self):
        """Get vertex_110_xcoordinate

        Returns:
            float: the value of `vertex_110_xcoordinate` or None if not set
        """
        return self._data["Vertex 110 X-coordinate"]

    @vertex_110_xcoordinate.setter
    def vertex_110_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 110 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 110 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_110_xcoordinate`'.format(value))
        self._data["Vertex 110 X-coordinate"] = value

    @property
    def vertex_110_ycoordinate(self):
        """Get vertex_110_ycoordinate

        Returns:
            float: the value of `vertex_110_ycoordinate` or None if not set
        """
        return self._data["Vertex 110 Y-coordinate"]

    @vertex_110_ycoordinate.setter
    def vertex_110_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 110 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 110 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_110_ycoordinate`'.format(value))
        self._data["Vertex 110 Y-coordinate"] = value

    @property
    def vertex_110_zcoordinate(self):
        """Get vertex_110_zcoordinate

        Returns:
            float: the value of `vertex_110_zcoordinate` or None if not set
        """
        return self._data["Vertex 110 Z-coordinate"]

    @vertex_110_zcoordinate.setter
    def vertex_110_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 110 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 110 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_110_zcoordinate`'.format(value))
        self._data["Vertex 110 Z-coordinate"] = value

    @property
    def vertex_111_xcoordinate(self):
        """Get vertex_111_xcoordinate

        Returns:
            float: the value of `vertex_111_xcoordinate` or None if not set
        """
        return self._data["Vertex 111 X-coordinate"]

    @vertex_111_xcoordinate.setter
    def vertex_111_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 111 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 111 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_111_xcoordinate`'.format(value))
        self._data["Vertex 111 X-coordinate"] = value

    @property
    def vertex_111_ycoordinate(self):
        """Get vertex_111_ycoordinate

        Returns:
            float: the value of `vertex_111_ycoordinate` or None if not set
        """
        return self._data["Vertex 111 Y-coordinate"]

    @vertex_111_ycoordinate.setter
    def vertex_111_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 111 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 111 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_111_ycoordinate`'.format(value))
        self._data["Vertex 111 Y-coordinate"] = value

    @property
    def vertex_111_zcoordinate(self):
        """Get vertex_111_zcoordinate

        Returns:
            float: the value of `vertex_111_zcoordinate` or None if not set
        """
        return self._data["Vertex 111 Z-coordinate"]

    @vertex_111_zcoordinate.setter
    def vertex_111_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 111 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 111 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_111_zcoordinate`'.format(value))
        self._data["Vertex 111 Z-coordinate"] = value

    @property
    def vertex_112_xcoordinate(self):
        """Get vertex_112_xcoordinate

        Returns:
            float: the value of `vertex_112_xcoordinate` or None if not set
        """
        return self._data["Vertex 112 X-coordinate"]

    @vertex_112_xcoordinate.setter
    def vertex_112_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 112 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 112 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_112_xcoordinate`'.format(value))
        self._data["Vertex 112 X-coordinate"] = value

    @property
    def vertex_112_ycoordinate(self):
        """Get vertex_112_ycoordinate

        Returns:
            float: the value of `vertex_112_ycoordinate` or None if not set
        """
        return self._data["Vertex 112 Y-coordinate"]

    @vertex_112_ycoordinate.setter
    def vertex_112_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 112 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 112 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_112_ycoordinate`'.format(value))
        self._data["Vertex 112 Y-coordinate"] = value

    @property
    def vertex_112_zcoordinate(self):
        """Get vertex_112_zcoordinate

        Returns:
            float: the value of `vertex_112_zcoordinate` or None if not set
        """
        return self._data["Vertex 112 Z-coordinate"]

    @vertex_112_zcoordinate.setter
    def vertex_112_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 112 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 112 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_112_zcoordinate`'.format(value))
        self._data["Vertex 112 Z-coordinate"] = value

    @property
    def vertex_113_xcoordinate(self):
        """Get vertex_113_xcoordinate

        Returns:
            float: the value of `vertex_113_xcoordinate` or None if not set
        """
        return self._data["Vertex 113 X-coordinate"]

    @vertex_113_xcoordinate.setter
    def vertex_113_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 113 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 113 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_113_xcoordinate`'.format(value))
        self._data["Vertex 113 X-coordinate"] = value

    @property
    def vertex_113_ycoordinate(self):
        """Get vertex_113_ycoordinate

        Returns:
            float: the value of `vertex_113_ycoordinate` or None if not set
        """
        return self._data["Vertex 113 Y-coordinate"]

    @vertex_113_ycoordinate.setter
    def vertex_113_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 113 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 113 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_113_ycoordinate`'.format(value))
        self._data["Vertex 113 Y-coordinate"] = value

    @property
    def vertex_113_zcoordinate(self):
        """Get vertex_113_zcoordinate

        Returns:
            float: the value of `vertex_113_zcoordinate` or None if not set
        """
        return self._data["Vertex 113 Z-coordinate"]

    @vertex_113_zcoordinate.setter
    def vertex_113_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 113 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 113 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_113_zcoordinate`'.format(value))
        self._data["Vertex 113 Z-coordinate"] = value

    @property
    def vertex_114_xcoordinate(self):
        """Get vertex_114_xcoordinate

        Returns:
            float: the value of `vertex_114_xcoordinate` or None if not set
        """
        return self._data["Vertex 114 X-coordinate"]

    @vertex_114_xcoordinate.setter
    def vertex_114_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 114 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 114 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_114_xcoordinate`'.format(value))
        self._data["Vertex 114 X-coordinate"] = value

    @property
    def vertex_114_ycoordinate(self):
        """Get vertex_114_ycoordinate

        Returns:
            float: the value of `vertex_114_ycoordinate` or None if not set
        """
        return self._data["Vertex 114 Y-coordinate"]

    @vertex_114_ycoordinate.setter
    def vertex_114_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 114 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 114 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_114_ycoordinate`'.format(value))
        self._data["Vertex 114 Y-coordinate"] = value

    @property
    def vertex_114_zcoordinate(self):
        """Get vertex_114_zcoordinate

        Returns:
            float: the value of `vertex_114_zcoordinate` or None if not set
        """
        return self._data["Vertex 114 Z-coordinate"]

    @vertex_114_zcoordinate.setter
    def vertex_114_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 114 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 114 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_114_zcoordinate`'.format(value))
        self._data["Vertex 114 Z-coordinate"] = value

    @property
    def vertex_115_xcoordinate(self):
        """Get vertex_115_xcoordinate

        Returns:
            float: the value of `vertex_115_xcoordinate` or None if not set
        """
        return self._data["Vertex 115 X-coordinate"]

    @vertex_115_xcoordinate.setter
    def vertex_115_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 115 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 115 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_115_xcoordinate`'.format(value))
        self._data["Vertex 115 X-coordinate"] = value

    @property
    def vertex_115_ycoordinate(self):
        """Get vertex_115_ycoordinate

        Returns:
            float: the value of `vertex_115_ycoordinate` or None if not set
        """
        return self._data["Vertex 115 Y-coordinate"]

    @vertex_115_ycoordinate.setter
    def vertex_115_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 115 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 115 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_115_ycoordinate`'.format(value))
        self._data["Vertex 115 Y-coordinate"] = value

    @property
    def vertex_115_zcoordinate(self):
        """Get vertex_115_zcoordinate

        Returns:
            float: the value of `vertex_115_zcoordinate` or None if not set
        """
        return self._data["Vertex 115 Z-coordinate"]

    @vertex_115_zcoordinate.setter
    def vertex_115_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 115 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 115 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_115_zcoordinate`'.format(value))
        self._data["Vertex 115 Z-coordinate"] = value

    @property
    def vertex_116_xcoordinate(self):
        """Get vertex_116_xcoordinate

        Returns:
            float: the value of `vertex_116_xcoordinate` or None if not set
        """
        return self._data["Vertex 116 X-coordinate"]

    @vertex_116_xcoordinate.setter
    def vertex_116_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 116 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 116 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_116_xcoordinate`'.format(value))
        self._data["Vertex 116 X-coordinate"] = value

    @property
    def vertex_116_ycoordinate(self):
        """Get vertex_116_ycoordinate

        Returns:
            float: the value of `vertex_116_ycoordinate` or None if not set
        """
        return self._data["Vertex 116 Y-coordinate"]

    @vertex_116_ycoordinate.setter
    def vertex_116_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 116 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 116 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_116_ycoordinate`'.format(value))
        self._data["Vertex 116 Y-coordinate"] = value

    @property
    def vertex_116_zcoordinate(self):
        """Get vertex_116_zcoordinate

        Returns:
            float: the value of `vertex_116_zcoordinate` or None if not set
        """
        return self._data["Vertex 116 Z-coordinate"]

    @vertex_116_zcoordinate.setter
    def vertex_116_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 116 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 116 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_116_zcoordinate`'.format(value))
        self._data["Vertex 116 Z-coordinate"] = value

    @property
    def vertex_117_xcoordinate(self):
        """Get vertex_117_xcoordinate

        Returns:
            float: the value of `vertex_117_xcoordinate` or None if not set
        """
        return self._data["Vertex 117 X-coordinate"]

    @vertex_117_xcoordinate.setter
    def vertex_117_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 117 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 117 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_117_xcoordinate`'.format(value))
        self._data["Vertex 117 X-coordinate"] = value

    @property
    def vertex_117_ycoordinate(self):
        """Get vertex_117_ycoordinate

        Returns:
            float: the value of `vertex_117_ycoordinate` or None if not set
        """
        return self._data["Vertex 117 Y-coordinate"]

    @vertex_117_ycoordinate.setter
    def vertex_117_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 117 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 117 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_117_ycoordinate`'.format(value))
        self._data["Vertex 117 Y-coordinate"] = value

    @property
    def vertex_117_zcoordinate(self):
        """Get vertex_117_zcoordinate

        Returns:
            float: the value of `vertex_117_zcoordinate` or None if not set
        """
        return self._data["Vertex 117 Z-coordinate"]

    @vertex_117_zcoordinate.setter
    def vertex_117_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 117 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 117 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_117_zcoordinate`'.format(value))
        self._data["Vertex 117 Z-coordinate"] = value

    @property
    def vertex_118_xcoordinate(self):
        """Get vertex_118_xcoordinate

        Returns:
            float: the value of `vertex_118_xcoordinate` or None if not set
        """
        return self._data["Vertex 118 X-coordinate"]

    @vertex_118_xcoordinate.setter
    def vertex_118_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 118 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 118 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_118_xcoordinate`'.format(value))
        self._data["Vertex 118 X-coordinate"] = value

    @property
    def vertex_118_ycoordinate(self):
        """Get vertex_118_ycoordinate

        Returns:
            float: the value of `vertex_118_ycoordinate` or None if not set
        """
        return self._data["Vertex 118 Y-coordinate"]

    @vertex_118_ycoordinate.setter
    def vertex_118_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 118 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 118 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_118_ycoordinate`'.format(value))
        self._data["Vertex 118 Y-coordinate"] = value

    @property
    def vertex_118_zcoordinate(self):
        """Get vertex_118_zcoordinate

        Returns:
            float: the value of `vertex_118_zcoordinate` or None if not set
        """
        return self._data["Vertex 118 Z-coordinate"]

    @vertex_118_zcoordinate.setter
    def vertex_118_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 118 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 118 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_118_zcoordinate`'.format(value))
        self._data["Vertex 118 Z-coordinate"] = value

    @property
    def vertex_119_xcoordinate(self):
        """Get vertex_119_xcoordinate

        Returns:
            float: the value of `vertex_119_xcoordinate` or None if not set
        """
        return self._data["Vertex 119 X-coordinate"]

    @vertex_119_xcoordinate.setter
    def vertex_119_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 119 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 119 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_119_xcoordinate`'.format(value))
        self._data["Vertex 119 X-coordinate"] = value

    @property
    def vertex_119_ycoordinate(self):
        """Get vertex_119_ycoordinate

        Returns:
            float: the value of `vertex_119_ycoordinate` or None if not set
        """
        return self._data["Vertex 119 Y-coordinate"]

    @vertex_119_ycoordinate.setter
    def vertex_119_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 119 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 119 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_119_ycoordinate`'.format(value))
        self._data["Vertex 119 Y-coordinate"] = value

    @property
    def vertex_119_zcoordinate(self):
        """Get vertex_119_zcoordinate

        Returns:
            float: the value of `vertex_119_zcoordinate` or None if not set
        """
        return self._data["Vertex 119 Z-coordinate"]

    @vertex_119_zcoordinate.setter
    def vertex_119_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 119 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 119 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_119_zcoordinate`'.format(value))
        self._data["Vertex 119 Z-coordinate"] = value

    @property
    def vertex_120_xcoordinate(self):
        """Get vertex_120_xcoordinate

        Returns:
            float: the value of `vertex_120_xcoordinate` or None if not set
        """
        return self._data["Vertex 120 X-coordinate"]

    @vertex_120_xcoordinate.setter
    def vertex_120_xcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 120 X-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 120 X-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_120_xcoordinate`'.format(value))
        self._data["Vertex 120 X-coordinate"] = value

    @property
    def vertex_120_ycoordinate(self):
        """Get vertex_120_ycoordinate

        Returns:
            float: the value of `vertex_120_ycoordinate` or None if not set
        """
        return self._data["Vertex 120 Y-coordinate"]

    @vertex_120_ycoordinate.setter
    def vertex_120_ycoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 120 Y-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 120 Y-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_120_ycoordinate`'.format(value))
        self._data["Vertex 120 Y-coordinate"] = value

    @property
    def vertex_120_zcoordinate(self):
        """Get vertex_120_zcoordinate

        Returns:
            float: the value of `vertex_120_zcoordinate` or None if not set
        """
        return self._data["Vertex 120 Z-coordinate"]

    @vertex_120_zcoordinate.setter
    def vertex_120_zcoordinate(self, value=None):
        """  Corresponds to IDD Field `Vertex 120 Z-coordinate`

        Args:
            value (float): value for IDD Field `Vertex 120 Z-coordinate`
                Units: m
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vertex_120_zcoordinate`'.format(value))
        self._data["Vertex 120 Z-coordinate"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ShadingPropertyReflectance(object):
    """ Corresponds to IDD object `ShadingProperty:Reflectance`
        If this object is not defined for a shading surface the default values
        listed in following fields will be used in the solar reflection calculation.
    
    """
    internal_name = "ShadingProperty:Reflectance"
    field_count = 5
    required_fields = ["Shading Surface Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ShadingProperty:Reflectance`
        """
        self._data = OrderedDict()
        self._data["Shading Surface Name"] = None
        self._data["Diffuse Solar Reflectance of Unglazed Part of Shading Surface"] = None
        self._data["Diffuse Visible Reflectance of Unglazed Part of Shading Surface"] = None
        self._data["Fraction of Shading Surface That Is Glazed"] = None
        self._data["Glazing Construction Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.shading_surface_name = None
        else:
            self.shading_surface_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.diffuse_solar_reflectance_of_unglazed_part_of_shading_surface = None
        else:
            self.diffuse_solar_reflectance_of_unglazed_part_of_shading_surface = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.diffuse_visible_reflectance_of_unglazed_part_of_shading_surface = None
        else:
            self.diffuse_visible_reflectance_of_unglazed_part_of_shading_surface = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_shading_surface_that_is_glazed = None
        else:
            self.fraction_of_shading_surface_that_is_glazed = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.glazing_construction_name = None
        else:
            self.glazing_construction_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def shading_surface_name(self):
        """Get shading_surface_name

        Returns:
            str: the value of `shading_surface_name` or None if not set
        """
        return self._data["Shading Surface Name"]

    @shading_surface_name.setter
    def shading_surface_name(self, value=None):
        """  Corresponds to IDD Field `Shading Surface Name`

        Args:
            value (str): value for IDD Field `Shading Surface Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `shading_surface_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `shading_surface_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `shading_surface_name`')
        self._data["Shading Surface Name"] = value

    @property
    def diffuse_solar_reflectance_of_unglazed_part_of_shading_surface(self):
        """Get diffuse_solar_reflectance_of_unglazed_part_of_shading_surface

        Returns:
            float: the value of `diffuse_solar_reflectance_of_unglazed_part_of_shading_surface` or None if not set
        """
        return self._data["Diffuse Solar Reflectance of Unglazed Part of Shading Surface"]

    @diffuse_solar_reflectance_of_unglazed_part_of_shading_surface.setter
    def diffuse_solar_reflectance_of_unglazed_part_of_shading_surface(self, value=0.2):
        """  Corresponds to IDD Field `Diffuse Solar Reflectance of Unglazed Part of Shading Surface`

        Args:
            value (float): value for IDD Field `Diffuse Solar Reflectance of Unglazed Part of Shading Surface`
                Default value: 0.2
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `diffuse_solar_reflectance_of_unglazed_part_of_shading_surface`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `diffuse_solar_reflectance_of_unglazed_part_of_shading_surface`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `diffuse_solar_reflectance_of_unglazed_part_of_shading_surface`')
        self._data["Diffuse Solar Reflectance of Unglazed Part of Shading Surface"] = value

    @property
    def diffuse_visible_reflectance_of_unglazed_part_of_shading_surface(self):
        """Get diffuse_visible_reflectance_of_unglazed_part_of_shading_surface

        Returns:
            float: the value of `diffuse_visible_reflectance_of_unglazed_part_of_shading_surface` or None if not set
        """
        return self._data["Diffuse Visible Reflectance of Unglazed Part of Shading Surface"]

    @diffuse_visible_reflectance_of_unglazed_part_of_shading_surface.setter
    def diffuse_visible_reflectance_of_unglazed_part_of_shading_surface(self, value=0.2):
        """  Corresponds to IDD Field `Diffuse Visible Reflectance of Unglazed Part of Shading Surface`

        Args:
            value (float): value for IDD Field `Diffuse Visible Reflectance of Unglazed Part of Shading Surface`
                Default value: 0.2
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `diffuse_visible_reflectance_of_unglazed_part_of_shading_surface`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `diffuse_visible_reflectance_of_unglazed_part_of_shading_surface`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `diffuse_visible_reflectance_of_unglazed_part_of_shading_surface`')
        self._data["Diffuse Visible Reflectance of Unglazed Part of Shading Surface"] = value

    @property
    def fraction_of_shading_surface_that_is_glazed(self):
        """Get fraction_of_shading_surface_that_is_glazed

        Returns:
            float: the value of `fraction_of_shading_surface_that_is_glazed` or None if not set
        """
        return self._data["Fraction of Shading Surface That Is Glazed"]

    @fraction_of_shading_surface_that_is_glazed.setter
    def fraction_of_shading_surface_that_is_glazed(self, value=0.0):
        """  Corresponds to IDD Field `Fraction of Shading Surface That Is Glazed`

        Args:
            value (float): value for IDD Field `Fraction of Shading Surface That Is Glazed`
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_shading_surface_that_is_glazed`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_shading_surface_that_is_glazed`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_shading_surface_that_is_glazed`')
        self._data["Fraction of Shading Surface That Is Glazed"] = value

    @property
    def glazing_construction_name(self):
        """Get glazing_construction_name

        Returns:
            str: the value of `glazing_construction_name` or None if not set
        """
        return self._data["Glazing Construction Name"]

    @glazing_construction_name.setter
    def glazing_construction_name(self, value=None):
        """  Corresponds to IDD Field `Glazing Construction Name`
        Required if Fraction of Shading Surface That Is Glazed > 0.0

        Args:
            value (str): value for IDD Field `Glazing Construction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `glazing_construction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `glazing_construction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `glazing_construction_name`')
        self._data["Glazing Construction Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])