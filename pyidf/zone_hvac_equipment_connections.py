from collections import OrderedDict

class ZoneHvacEquipmentList(object):
    """ Corresponds to IDD object `ZoneHVAC:EquipmentList`
        List equipment in simulation order.  Note that an ZoneHVAC:AirDistributionUnit or
        AirTerminal:SingleDuct:Uncontrolled object must be listed in this statement if there is a forced
        air system serving the zone from the air loop.
        Equipment is simulated in the order specified by Zone Equipment Cooling Sequence and
        Zone Equipment Heating or No-Load Sequence, depending on the thermostat request.
        For equipment of similar type, assign sequence 1 to the first system intended to
        serve that type of load.  For situations where one or more equipment types has limited capacity or
        limited control, order the sequence so that the most controllable piece of equipment runs last.
        For example, with a dedicated outdoor air system (DOAS), the air terminal for the DOAS
        should be assigned Heating Sequence = 1 and Cooling Sequence = 1.  Any other equipment should
        be assigned sequence 2 or higher so that it will see the net load after the DOAS air is added
        to the zone.
    
    """
    internal_name = "ZoneHVAC:EquipmentList"
    field_count = 73
    required_fields = ["Name", "Zone Equipment 1 Object Type", "Zone Equipment 1 Name", "Zone Equipment 1 Cooling Sequence", "Zone Equipment 1 Heating or No-Load Sequence"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ZoneHVAC:EquipmentList`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Zone Equipment 1 Object Type"] = None
        self._data["Zone Equipment 1 Name"] = None
        self._data["Zone Equipment 1 Cooling Sequence"] = None
        self._data["Zone Equipment 1 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 2 Object Type"] = None
        self._data["Zone Equipment 2 Name"] = None
        self._data["Zone Equipment 2 Cooling Sequence"] = None
        self._data["Zone Equipment 2 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 3 Object Type"] = None
        self._data["Zone Equipment 3 Name"] = None
        self._data["Zone Equipment 3 Cooling Sequence"] = None
        self._data["Zone Equipment 3 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 4 Object Type"] = None
        self._data["Zone Equipment 4 Name"] = None
        self._data["Zone Equipment 4 Cooling Sequence"] = None
        self._data["Zone Equipment 4 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 5 Object Type"] = None
        self._data["Zone Equipment 5 Name"] = None
        self._data["Zone Equipment 5 Cooling Sequence"] = None
        self._data["Zone Equipment 5 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 6 Object Type"] = None
        self._data["Zone Equipment 6 Name"] = None
        self._data["Zone Equipment 6 Cooling Sequence"] = None
        self._data["Zone Equipment 6 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 7 Object Type"] = None
        self._data["Zone Equipment 7 Name"] = None
        self._data["Zone Equipment 7 Cooling Sequence"] = None
        self._data["Zone Equipment 7 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 8 Object Type"] = None
        self._data["Zone Equipment 8 Name"] = None
        self._data["Zone Equipment 8 Cooling Sequence"] = None
        self._data["Zone Equipment 8 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 9 Object Type"] = None
        self._data["Zone Equipment 9 Name"] = None
        self._data["Zone Equipment 9 Cooling Sequence"] = None
        self._data["Zone Equipment 9 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 10 Object Type"] = None
        self._data["Zone Equipment 10 Name"] = None
        self._data["Zone Equipment 10 Cooling Sequence"] = None
        self._data["Zone Equipment 10 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 11 Object Type"] = None
        self._data["Zone Equipment 11 Name"] = None
        self._data["Zone Equipment 11 Cooling Sequence"] = None
        self._data["Zone Equipment 11 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 12 Object Type"] = None
        self._data["Zone Equipment 12 Name"] = None
        self._data["Zone Equipment 12 Cooling Sequence"] = None
        self._data["Zone Equipment 12 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 13 Object Type"] = None
        self._data["Zone Equipment 13 Name"] = None
        self._data["Zone Equipment 13 Cooling Sequence"] = None
        self._data["Zone Equipment 13 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 14 Object Type"] = None
        self._data["Zone Equipment 14 Name"] = None
        self._data["Zone Equipment 14 Cooling Sequence"] = None
        self._data["Zone Equipment 14 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 15 Object Type"] = None
        self._data["Zone Equipment 15 Name"] = None
        self._data["Zone Equipment 15 Cooling Sequence"] = None
        self._data["Zone Equipment 15 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 16 Object Type"] = None
        self._data["Zone Equipment 16 Name"] = None
        self._data["Zone Equipment 16 Cooling Sequence"] = None
        self._data["Zone Equipment 16 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 17 Object Type"] = None
        self._data["Zone Equipment 17 Name"] = None
        self._data["Zone Equipment 17 Cooling Sequence"] = None
        self._data["Zone Equipment 17 Heating or No-Load Sequence"] = None
        self._data["Zone Equipment 18 Object Type"] = None
        self._data["Zone Equipment 18 Name"] = None
        self._data["Zone Equipment 18 Cooling Sequence"] = None
        self._data["Zone Equipment 18 Heating or No-Load Sequence"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_1_object_type = None
        else:
            self.zone_equipment_1_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_1_name = None
        else:
            self.zone_equipment_1_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_1_cooling_sequence = None
        else:
            self.zone_equipment_1_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_1_heating_or_noload_sequence = None
        else:
            self.zone_equipment_1_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_2_object_type = None
        else:
            self.zone_equipment_2_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_2_name = None
        else:
            self.zone_equipment_2_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_2_cooling_sequence = None
        else:
            self.zone_equipment_2_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_2_heating_or_noload_sequence = None
        else:
            self.zone_equipment_2_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_3_object_type = None
        else:
            self.zone_equipment_3_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_3_name = None
        else:
            self.zone_equipment_3_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_3_cooling_sequence = None
        else:
            self.zone_equipment_3_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_3_heating_or_noload_sequence = None
        else:
            self.zone_equipment_3_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_4_object_type = None
        else:
            self.zone_equipment_4_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_4_name = None
        else:
            self.zone_equipment_4_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_4_cooling_sequence = None
        else:
            self.zone_equipment_4_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_4_heating_or_noload_sequence = None
        else:
            self.zone_equipment_4_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_5_object_type = None
        else:
            self.zone_equipment_5_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_5_name = None
        else:
            self.zone_equipment_5_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_5_cooling_sequence = None
        else:
            self.zone_equipment_5_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_5_heating_or_noload_sequence = None
        else:
            self.zone_equipment_5_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_6_object_type = None
        else:
            self.zone_equipment_6_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_6_name = None
        else:
            self.zone_equipment_6_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_6_cooling_sequence = None
        else:
            self.zone_equipment_6_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_6_heating_or_noload_sequence = None
        else:
            self.zone_equipment_6_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_7_object_type = None
        else:
            self.zone_equipment_7_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_7_name = None
        else:
            self.zone_equipment_7_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_7_cooling_sequence = None
        else:
            self.zone_equipment_7_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_7_heating_or_noload_sequence = None
        else:
            self.zone_equipment_7_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_8_object_type = None
        else:
            self.zone_equipment_8_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_8_name = None
        else:
            self.zone_equipment_8_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_8_cooling_sequence = None
        else:
            self.zone_equipment_8_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_8_heating_or_noload_sequence = None
        else:
            self.zone_equipment_8_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_9_object_type = None
        else:
            self.zone_equipment_9_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_9_name = None
        else:
            self.zone_equipment_9_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_9_cooling_sequence = None
        else:
            self.zone_equipment_9_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_9_heating_or_noload_sequence = None
        else:
            self.zone_equipment_9_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_10_object_type = None
        else:
            self.zone_equipment_10_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_10_name = None
        else:
            self.zone_equipment_10_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_10_cooling_sequence = None
        else:
            self.zone_equipment_10_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_10_heating_or_noload_sequence = None
        else:
            self.zone_equipment_10_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_11_object_type = None
        else:
            self.zone_equipment_11_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_11_name = None
        else:
            self.zone_equipment_11_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_11_cooling_sequence = None
        else:
            self.zone_equipment_11_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_11_heating_or_noload_sequence = None
        else:
            self.zone_equipment_11_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_12_object_type = None
        else:
            self.zone_equipment_12_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_12_name = None
        else:
            self.zone_equipment_12_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_12_cooling_sequence = None
        else:
            self.zone_equipment_12_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_12_heating_or_noload_sequence = None
        else:
            self.zone_equipment_12_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_13_object_type = None
        else:
            self.zone_equipment_13_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_13_name = None
        else:
            self.zone_equipment_13_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_13_cooling_sequence = None
        else:
            self.zone_equipment_13_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_13_heating_or_noload_sequence = None
        else:
            self.zone_equipment_13_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_14_object_type = None
        else:
            self.zone_equipment_14_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_14_name = None
        else:
            self.zone_equipment_14_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_14_cooling_sequence = None
        else:
            self.zone_equipment_14_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_14_heating_or_noload_sequence = None
        else:
            self.zone_equipment_14_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_15_object_type = None
        else:
            self.zone_equipment_15_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_15_name = None
        else:
            self.zone_equipment_15_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_15_cooling_sequence = None
        else:
            self.zone_equipment_15_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_15_heating_or_noload_sequence = None
        else:
            self.zone_equipment_15_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_16_object_type = None
        else:
            self.zone_equipment_16_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_16_name = None
        else:
            self.zone_equipment_16_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_16_cooling_sequence = None
        else:
            self.zone_equipment_16_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_16_heating_or_noload_sequence = None
        else:
            self.zone_equipment_16_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_17_object_type = None
        else:
            self.zone_equipment_17_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_17_name = None
        else:
            self.zone_equipment_17_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_17_cooling_sequence = None
        else:
            self.zone_equipment_17_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_17_heating_or_noload_sequence = None
        else:
            self.zone_equipment_17_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_18_object_type = None
        else:
            self.zone_equipment_18_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_18_name = None
        else:
            self.zone_equipment_18_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_18_cooling_sequence = None
        else:
            self.zone_equipment_18_cooling_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_equipment_18_heating_or_noload_sequence = None
        else:
            self.zone_equipment_18_heating_or_noload_sequence = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {'type': 'alpha', u'reference': u'ZoneEquipmentLists', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def zone_equipment_1_object_type(self):
        """Get zone_equipment_1_object_type

        Returns:
            str: the value of `zone_equipment_1_object_type` or None if not set
        """
        return self._data["Zone Equipment 1 Object Type"]

    @zone_equipment_1_object_type.setter
    def zone_equipment_1_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 1 Object Type`
        
        {'pytype': 'str', u'type': u'choice', u'required-field': True, u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], u'begin-extensible': u''}

        Args:
            value (str): value for IDD Field `Zone Equipment 1 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_1_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_1_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_1_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_1_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 1 Object Type"] = value

    @property
    def zone_equipment_1_name(self):
        """Get zone_equipment_1_name

        Returns:
            str: the value of `zone_equipment_1_name` or None if not set
        """
        return self._data["Zone Equipment 1 Name"]

    @zone_equipment_1_name.setter
    def zone_equipment_1_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 1 Name`
        
        {'type': 'alpha', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 1 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_1_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_1_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_1_name`')
        self._data["Zone Equipment 1 Name"] = value

    @property
    def zone_equipment_1_cooling_sequence(self):
        """Get zone_equipment_1_cooling_sequence

        Returns:
            int: the value of `zone_equipment_1_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 1 Cooling Sequence"]

    @zone_equipment_1_cooling_sequence.setter
    def zone_equipment_1_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 1 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', u'required-field': True, 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 1 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_1_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_1_cooling_sequence`')
        self._data["Zone Equipment 1 Cooling Sequence"] = value

    @property
    def zone_equipment_1_heating_or_noload_sequence(self):
        """Get zone_equipment_1_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_1_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 1 Heating or No-Load Sequence"]

    @zone_equipment_1_heating_or_noload_sequence.setter
    def zone_equipment_1_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 1 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', u'required-field': True, 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 1 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_1_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_1_heating_or_noload_sequence`')
        self._data["Zone Equipment 1 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_2_object_type(self):
        """Get zone_equipment_2_object_type

        Returns:
            str: the value of `zone_equipment_2_object_type` or None if not set
        """
        return self._data["Zone Equipment 2 Object Type"]

    @zone_equipment_2_object_type.setter
    def zone_equipment_2_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 2 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 2 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_2_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_2_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_2_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_2_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 2 Object Type"] = value

    @property
    def zone_equipment_2_name(self):
        """Get zone_equipment_2_name

        Returns:
            str: the value of `zone_equipment_2_name` or None if not set
        """
        return self._data["Zone Equipment 2 Name"]

    @zone_equipment_2_name.setter
    def zone_equipment_2_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 2 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 2 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_2_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_2_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_2_name`')
        self._data["Zone Equipment 2 Name"] = value

    @property
    def zone_equipment_2_cooling_sequence(self):
        """Get zone_equipment_2_cooling_sequence

        Returns:
            int: the value of `zone_equipment_2_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 2 Cooling Sequence"]

    @zone_equipment_2_cooling_sequence.setter
    def zone_equipment_2_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 2 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 2 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_2_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_2_cooling_sequence`')
        self._data["Zone Equipment 2 Cooling Sequence"] = value

    @property
    def zone_equipment_2_heating_or_noload_sequence(self):
        """Get zone_equipment_2_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_2_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 2 Heating or No-Load Sequence"]

    @zone_equipment_2_heating_or_noload_sequence.setter
    def zone_equipment_2_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 2 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 2 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_2_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_2_heating_or_noload_sequence`')
        self._data["Zone Equipment 2 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_3_object_type(self):
        """Get zone_equipment_3_object_type

        Returns:
            str: the value of `zone_equipment_3_object_type` or None if not set
        """
        return self._data["Zone Equipment 3 Object Type"]

    @zone_equipment_3_object_type.setter
    def zone_equipment_3_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 3 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 3 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_3_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_3_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_3_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_3_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 3 Object Type"] = value

    @property
    def zone_equipment_3_name(self):
        """Get zone_equipment_3_name

        Returns:
            str: the value of `zone_equipment_3_name` or None if not set
        """
        return self._data["Zone Equipment 3 Name"]

    @zone_equipment_3_name.setter
    def zone_equipment_3_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 3 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 3 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_3_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_3_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_3_name`')
        self._data["Zone Equipment 3 Name"] = value

    @property
    def zone_equipment_3_cooling_sequence(self):
        """Get zone_equipment_3_cooling_sequence

        Returns:
            int: the value of `zone_equipment_3_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 3 Cooling Sequence"]

    @zone_equipment_3_cooling_sequence.setter
    def zone_equipment_3_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 3 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 3 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_3_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_3_cooling_sequence`')
        self._data["Zone Equipment 3 Cooling Sequence"] = value

    @property
    def zone_equipment_3_heating_or_noload_sequence(self):
        """Get zone_equipment_3_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_3_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 3 Heating or No-Load Sequence"]

    @zone_equipment_3_heating_or_noload_sequence.setter
    def zone_equipment_3_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 3 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 3 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_3_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_3_heating_or_noload_sequence`')
        self._data["Zone Equipment 3 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_4_object_type(self):
        """Get zone_equipment_4_object_type

        Returns:
            str: the value of `zone_equipment_4_object_type` or None if not set
        """
        return self._data["Zone Equipment 4 Object Type"]

    @zone_equipment_4_object_type.setter
    def zone_equipment_4_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 4 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 4 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_4_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_4_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_4_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_4_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 4 Object Type"] = value

    @property
    def zone_equipment_4_name(self):
        """Get zone_equipment_4_name

        Returns:
            str: the value of `zone_equipment_4_name` or None if not set
        """
        return self._data["Zone Equipment 4 Name"]

    @zone_equipment_4_name.setter
    def zone_equipment_4_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 4 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 4 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_4_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_4_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_4_name`')
        self._data["Zone Equipment 4 Name"] = value

    @property
    def zone_equipment_4_cooling_sequence(self):
        """Get zone_equipment_4_cooling_sequence

        Returns:
            int: the value of `zone_equipment_4_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 4 Cooling Sequence"]

    @zone_equipment_4_cooling_sequence.setter
    def zone_equipment_4_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 4 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 4 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_4_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_4_cooling_sequence`')
        self._data["Zone Equipment 4 Cooling Sequence"] = value

    @property
    def zone_equipment_4_heating_or_noload_sequence(self):
        """Get zone_equipment_4_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_4_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 4 Heating or No-Load Sequence"]

    @zone_equipment_4_heating_or_noload_sequence.setter
    def zone_equipment_4_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 4 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 4 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_4_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_4_heating_or_noload_sequence`')
        self._data["Zone Equipment 4 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_5_object_type(self):
        """Get zone_equipment_5_object_type

        Returns:
            str: the value of `zone_equipment_5_object_type` or None if not set
        """
        return self._data["Zone Equipment 5 Object Type"]

    @zone_equipment_5_object_type.setter
    def zone_equipment_5_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 5 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 5 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_5_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_5_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_5_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_5_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 5 Object Type"] = value

    @property
    def zone_equipment_5_name(self):
        """Get zone_equipment_5_name

        Returns:
            str: the value of `zone_equipment_5_name` or None if not set
        """
        return self._data["Zone Equipment 5 Name"]

    @zone_equipment_5_name.setter
    def zone_equipment_5_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 5 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 5 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_5_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_5_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_5_name`')
        self._data["Zone Equipment 5 Name"] = value

    @property
    def zone_equipment_5_cooling_sequence(self):
        """Get zone_equipment_5_cooling_sequence

        Returns:
            int: the value of `zone_equipment_5_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 5 Cooling Sequence"]

    @zone_equipment_5_cooling_sequence.setter
    def zone_equipment_5_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 5 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 5 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_5_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_5_cooling_sequence`')
        self._data["Zone Equipment 5 Cooling Sequence"] = value

    @property
    def zone_equipment_5_heating_or_noload_sequence(self):
        """Get zone_equipment_5_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_5_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 5 Heating or No-Load Sequence"]

    @zone_equipment_5_heating_or_noload_sequence.setter
    def zone_equipment_5_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 5 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 5 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_5_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_5_heating_or_noload_sequence`')
        self._data["Zone Equipment 5 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_6_object_type(self):
        """Get zone_equipment_6_object_type

        Returns:
            str: the value of `zone_equipment_6_object_type` or None if not set
        """
        return self._data["Zone Equipment 6 Object Type"]

    @zone_equipment_6_object_type.setter
    def zone_equipment_6_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 6 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 6 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_6_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_6_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_6_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_6_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 6 Object Type"] = value

    @property
    def zone_equipment_6_name(self):
        """Get zone_equipment_6_name

        Returns:
            str: the value of `zone_equipment_6_name` or None if not set
        """
        return self._data["Zone Equipment 6 Name"]

    @zone_equipment_6_name.setter
    def zone_equipment_6_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 6 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 6 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_6_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_6_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_6_name`')
        self._data["Zone Equipment 6 Name"] = value

    @property
    def zone_equipment_6_cooling_sequence(self):
        """Get zone_equipment_6_cooling_sequence

        Returns:
            int: the value of `zone_equipment_6_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 6 Cooling Sequence"]

    @zone_equipment_6_cooling_sequence.setter
    def zone_equipment_6_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 6 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 6 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_6_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_6_cooling_sequence`')
        self._data["Zone Equipment 6 Cooling Sequence"] = value

    @property
    def zone_equipment_6_heating_or_noload_sequence(self):
        """Get zone_equipment_6_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_6_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 6 Heating or No-Load Sequence"]

    @zone_equipment_6_heating_or_noload_sequence.setter
    def zone_equipment_6_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 6 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 6 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_6_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_6_heating_or_noload_sequence`')
        self._data["Zone Equipment 6 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_7_object_type(self):
        """Get zone_equipment_7_object_type

        Returns:
            str: the value of `zone_equipment_7_object_type` or None if not set
        """
        return self._data["Zone Equipment 7 Object Type"]

    @zone_equipment_7_object_type.setter
    def zone_equipment_7_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 7 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 7 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_7_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_7_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_7_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_7_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 7 Object Type"] = value

    @property
    def zone_equipment_7_name(self):
        """Get zone_equipment_7_name

        Returns:
            str: the value of `zone_equipment_7_name` or None if not set
        """
        return self._data["Zone Equipment 7 Name"]

    @zone_equipment_7_name.setter
    def zone_equipment_7_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 7 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 7 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_7_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_7_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_7_name`')
        self._data["Zone Equipment 7 Name"] = value

    @property
    def zone_equipment_7_cooling_sequence(self):
        """Get zone_equipment_7_cooling_sequence

        Returns:
            int: the value of `zone_equipment_7_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 7 Cooling Sequence"]

    @zone_equipment_7_cooling_sequence.setter
    def zone_equipment_7_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 7 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 7 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_7_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_7_cooling_sequence`')
        self._data["Zone Equipment 7 Cooling Sequence"] = value

    @property
    def zone_equipment_7_heating_or_noload_sequence(self):
        """Get zone_equipment_7_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_7_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 7 Heating or No-Load Sequence"]

    @zone_equipment_7_heating_or_noload_sequence.setter
    def zone_equipment_7_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 7 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 7 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_7_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_7_heating_or_noload_sequence`')
        self._data["Zone Equipment 7 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_8_object_type(self):
        """Get zone_equipment_8_object_type

        Returns:
            str: the value of `zone_equipment_8_object_type` or None if not set
        """
        return self._data["Zone Equipment 8 Object Type"]

    @zone_equipment_8_object_type.setter
    def zone_equipment_8_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 8 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 8 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_8_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_8_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_8_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_8_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 8 Object Type"] = value

    @property
    def zone_equipment_8_name(self):
        """Get zone_equipment_8_name

        Returns:
            str: the value of `zone_equipment_8_name` or None if not set
        """
        return self._data["Zone Equipment 8 Name"]

    @zone_equipment_8_name.setter
    def zone_equipment_8_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 8 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 8 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_8_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_8_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_8_name`')
        self._data["Zone Equipment 8 Name"] = value

    @property
    def zone_equipment_8_cooling_sequence(self):
        """Get zone_equipment_8_cooling_sequence

        Returns:
            int: the value of `zone_equipment_8_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 8 Cooling Sequence"]

    @zone_equipment_8_cooling_sequence.setter
    def zone_equipment_8_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 8 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 8 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_8_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_8_cooling_sequence`')
        self._data["Zone Equipment 8 Cooling Sequence"] = value

    @property
    def zone_equipment_8_heating_or_noload_sequence(self):
        """Get zone_equipment_8_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_8_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 8 Heating or No-Load Sequence"]

    @zone_equipment_8_heating_or_noload_sequence.setter
    def zone_equipment_8_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 8 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 8 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_8_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_8_heating_or_noload_sequence`')
        self._data["Zone Equipment 8 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_9_object_type(self):
        """Get zone_equipment_9_object_type

        Returns:
            str: the value of `zone_equipment_9_object_type` or None if not set
        """
        return self._data["Zone Equipment 9 Object Type"]

    @zone_equipment_9_object_type.setter
    def zone_equipment_9_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 9 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 9 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_9_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_9_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_9_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_9_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 9 Object Type"] = value

    @property
    def zone_equipment_9_name(self):
        """Get zone_equipment_9_name

        Returns:
            str: the value of `zone_equipment_9_name` or None if not set
        """
        return self._data["Zone Equipment 9 Name"]

    @zone_equipment_9_name.setter
    def zone_equipment_9_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 9 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 9 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_9_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_9_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_9_name`')
        self._data["Zone Equipment 9 Name"] = value

    @property
    def zone_equipment_9_cooling_sequence(self):
        """Get zone_equipment_9_cooling_sequence

        Returns:
            int: the value of `zone_equipment_9_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 9 Cooling Sequence"]

    @zone_equipment_9_cooling_sequence.setter
    def zone_equipment_9_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 9 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 9 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_9_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_9_cooling_sequence`')
        self._data["Zone Equipment 9 Cooling Sequence"] = value

    @property
    def zone_equipment_9_heating_or_noload_sequence(self):
        """Get zone_equipment_9_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_9_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 9 Heating or No-Load Sequence"]

    @zone_equipment_9_heating_or_noload_sequence.setter
    def zone_equipment_9_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 9 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 9 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_9_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_9_heating_or_noload_sequence`')
        self._data["Zone Equipment 9 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_10_object_type(self):
        """Get zone_equipment_10_object_type

        Returns:
            str: the value of `zone_equipment_10_object_type` or None if not set
        """
        return self._data["Zone Equipment 10 Object Type"]

    @zone_equipment_10_object_type.setter
    def zone_equipment_10_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 10 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 10 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_10_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_10_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_10_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_10_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 10 Object Type"] = value

    @property
    def zone_equipment_10_name(self):
        """Get zone_equipment_10_name

        Returns:
            str: the value of `zone_equipment_10_name` or None if not set
        """
        return self._data["Zone Equipment 10 Name"]

    @zone_equipment_10_name.setter
    def zone_equipment_10_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 10 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 10 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_10_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_10_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_10_name`')
        self._data["Zone Equipment 10 Name"] = value

    @property
    def zone_equipment_10_cooling_sequence(self):
        """Get zone_equipment_10_cooling_sequence

        Returns:
            int: the value of `zone_equipment_10_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 10 Cooling Sequence"]

    @zone_equipment_10_cooling_sequence.setter
    def zone_equipment_10_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 10 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 10 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_10_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_10_cooling_sequence`')
        self._data["Zone Equipment 10 Cooling Sequence"] = value

    @property
    def zone_equipment_10_heating_or_noload_sequence(self):
        """Get zone_equipment_10_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_10_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 10 Heating or No-Load Sequence"]

    @zone_equipment_10_heating_or_noload_sequence.setter
    def zone_equipment_10_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 10 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 10 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_10_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_10_heating_or_noload_sequence`')
        self._data["Zone Equipment 10 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_11_object_type(self):
        """Get zone_equipment_11_object_type

        Returns:
            str: the value of `zone_equipment_11_object_type` or None if not set
        """
        return self._data["Zone Equipment 11 Object Type"]

    @zone_equipment_11_object_type.setter
    def zone_equipment_11_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 11 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 11 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_11_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_11_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_11_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_11_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 11 Object Type"] = value

    @property
    def zone_equipment_11_name(self):
        """Get zone_equipment_11_name

        Returns:
            str: the value of `zone_equipment_11_name` or None if not set
        """
        return self._data["Zone Equipment 11 Name"]

    @zone_equipment_11_name.setter
    def zone_equipment_11_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 11 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 11 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_11_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_11_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_11_name`')
        self._data["Zone Equipment 11 Name"] = value

    @property
    def zone_equipment_11_cooling_sequence(self):
        """Get zone_equipment_11_cooling_sequence

        Returns:
            int: the value of `zone_equipment_11_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 11 Cooling Sequence"]

    @zone_equipment_11_cooling_sequence.setter
    def zone_equipment_11_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 11 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 11 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_11_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_11_cooling_sequence`')
        self._data["Zone Equipment 11 Cooling Sequence"] = value

    @property
    def zone_equipment_11_heating_or_noload_sequence(self):
        """Get zone_equipment_11_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_11_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 11 Heating or No-Load Sequence"]

    @zone_equipment_11_heating_or_noload_sequence.setter
    def zone_equipment_11_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 11 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 11 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_11_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_11_heating_or_noload_sequence`')
        self._data["Zone Equipment 11 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_12_object_type(self):
        """Get zone_equipment_12_object_type

        Returns:
            str: the value of `zone_equipment_12_object_type` or None if not set
        """
        return self._data["Zone Equipment 12 Object Type"]

    @zone_equipment_12_object_type.setter
    def zone_equipment_12_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 12 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 12 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_12_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_12_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_12_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_12_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 12 Object Type"] = value

    @property
    def zone_equipment_12_name(self):
        """Get zone_equipment_12_name

        Returns:
            str: the value of `zone_equipment_12_name` or None if not set
        """
        return self._data["Zone Equipment 12 Name"]

    @zone_equipment_12_name.setter
    def zone_equipment_12_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 12 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 12 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_12_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_12_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_12_name`')
        self._data["Zone Equipment 12 Name"] = value

    @property
    def zone_equipment_12_cooling_sequence(self):
        """Get zone_equipment_12_cooling_sequence

        Returns:
            int: the value of `zone_equipment_12_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 12 Cooling Sequence"]

    @zone_equipment_12_cooling_sequence.setter
    def zone_equipment_12_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 12 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 12 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_12_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_12_cooling_sequence`')
        self._data["Zone Equipment 12 Cooling Sequence"] = value

    @property
    def zone_equipment_12_heating_or_noload_sequence(self):
        """Get zone_equipment_12_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_12_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 12 Heating or No-Load Sequence"]

    @zone_equipment_12_heating_or_noload_sequence.setter
    def zone_equipment_12_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 12 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 12 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_12_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_12_heating_or_noload_sequence`')
        self._data["Zone Equipment 12 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_13_object_type(self):
        """Get zone_equipment_13_object_type

        Returns:
            str: the value of `zone_equipment_13_object_type` or None if not set
        """
        return self._data["Zone Equipment 13 Object Type"]

    @zone_equipment_13_object_type.setter
    def zone_equipment_13_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 13 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 13 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_13_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_13_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_13_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_13_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 13 Object Type"] = value

    @property
    def zone_equipment_13_name(self):
        """Get zone_equipment_13_name

        Returns:
            str: the value of `zone_equipment_13_name` or None if not set
        """
        return self._data["Zone Equipment 13 Name"]

    @zone_equipment_13_name.setter
    def zone_equipment_13_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 13 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 13 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_13_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_13_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_13_name`')
        self._data["Zone Equipment 13 Name"] = value

    @property
    def zone_equipment_13_cooling_sequence(self):
        """Get zone_equipment_13_cooling_sequence

        Returns:
            int: the value of `zone_equipment_13_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 13 Cooling Sequence"]

    @zone_equipment_13_cooling_sequence.setter
    def zone_equipment_13_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 13 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 13 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_13_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_13_cooling_sequence`')
        self._data["Zone Equipment 13 Cooling Sequence"] = value

    @property
    def zone_equipment_13_heating_or_noload_sequence(self):
        """Get zone_equipment_13_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_13_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 13 Heating or No-Load Sequence"]

    @zone_equipment_13_heating_or_noload_sequence.setter
    def zone_equipment_13_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 13 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 13 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_13_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_13_heating_or_noload_sequence`')
        self._data["Zone Equipment 13 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_14_object_type(self):
        """Get zone_equipment_14_object_type

        Returns:
            str: the value of `zone_equipment_14_object_type` or None if not set
        """
        return self._data["Zone Equipment 14 Object Type"]

    @zone_equipment_14_object_type.setter
    def zone_equipment_14_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 14 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 14 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_14_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_14_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_14_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_14_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 14 Object Type"] = value

    @property
    def zone_equipment_14_name(self):
        """Get zone_equipment_14_name

        Returns:
            str: the value of `zone_equipment_14_name` or None if not set
        """
        return self._data["Zone Equipment 14 Name"]

    @zone_equipment_14_name.setter
    def zone_equipment_14_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 14 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 14 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_14_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_14_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_14_name`')
        self._data["Zone Equipment 14 Name"] = value

    @property
    def zone_equipment_14_cooling_sequence(self):
        """Get zone_equipment_14_cooling_sequence

        Returns:
            int: the value of `zone_equipment_14_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 14 Cooling Sequence"]

    @zone_equipment_14_cooling_sequence.setter
    def zone_equipment_14_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 14 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 14 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_14_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_14_cooling_sequence`')
        self._data["Zone Equipment 14 Cooling Sequence"] = value

    @property
    def zone_equipment_14_heating_or_noload_sequence(self):
        """Get zone_equipment_14_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_14_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 14 Heating or No-Load Sequence"]

    @zone_equipment_14_heating_or_noload_sequence.setter
    def zone_equipment_14_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 14 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 14 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_14_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_14_heating_or_noload_sequence`')
        self._data["Zone Equipment 14 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_15_object_type(self):
        """Get zone_equipment_15_object_type

        Returns:
            str: the value of `zone_equipment_15_object_type` or None if not set
        """
        return self._data["Zone Equipment 15 Object Type"]

    @zone_equipment_15_object_type.setter
    def zone_equipment_15_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 15 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 15 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_15_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_15_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_15_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_15_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 15 Object Type"] = value

    @property
    def zone_equipment_15_name(self):
        """Get zone_equipment_15_name

        Returns:
            str: the value of `zone_equipment_15_name` or None if not set
        """
        return self._data["Zone Equipment 15 Name"]

    @zone_equipment_15_name.setter
    def zone_equipment_15_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 15 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 15 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_15_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_15_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_15_name`')
        self._data["Zone Equipment 15 Name"] = value

    @property
    def zone_equipment_15_cooling_sequence(self):
        """Get zone_equipment_15_cooling_sequence

        Returns:
            int: the value of `zone_equipment_15_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 15 Cooling Sequence"]

    @zone_equipment_15_cooling_sequence.setter
    def zone_equipment_15_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 15 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 15 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_15_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_15_cooling_sequence`')
        self._data["Zone Equipment 15 Cooling Sequence"] = value

    @property
    def zone_equipment_15_heating_or_noload_sequence(self):
        """Get zone_equipment_15_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_15_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 15 Heating or No-Load Sequence"]

    @zone_equipment_15_heating_or_noload_sequence.setter
    def zone_equipment_15_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 15 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 15 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_15_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_15_heating_or_noload_sequence`')
        self._data["Zone Equipment 15 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_16_object_type(self):
        """Get zone_equipment_16_object_type

        Returns:
            str: the value of `zone_equipment_16_object_type` or None if not set
        """
        return self._data["Zone Equipment 16 Object Type"]

    @zone_equipment_16_object_type.setter
    def zone_equipment_16_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 16 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 16 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_16_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_16_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_16_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_16_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 16 Object Type"] = value

    @property
    def zone_equipment_16_name(self):
        """Get zone_equipment_16_name

        Returns:
            str: the value of `zone_equipment_16_name` or None if not set
        """
        return self._data["Zone Equipment 16 Name"]

    @zone_equipment_16_name.setter
    def zone_equipment_16_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 16 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 16 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_16_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_16_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_16_name`')
        self._data["Zone Equipment 16 Name"] = value

    @property
    def zone_equipment_16_cooling_sequence(self):
        """Get zone_equipment_16_cooling_sequence

        Returns:
            int: the value of `zone_equipment_16_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 16 Cooling Sequence"]

    @zone_equipment_16_cooling_sequence.setter
    def zone_equipment_16_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 16 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 16 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_16_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_16_cooling_sequence`')
        self._data["Zone Equipment 16 Cooling Sequence"] = value

    @property
    def zone_equipment_16_heating_or_noload_sequence(self):
        """Get zone_equipment_16_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_16_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 16 Heating or No-Load Sequence"]

    @zone_equipment_16_heating_or_noload_sequence.setter
    def zone_equipment_16_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 16 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 16 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_16_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_16_heating_or_noload_sequence`')
        self._data["Zone Equipment 16 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_17_object_type(self):
        """Get zone_equipment_17_object_type

        Returns:
            str: the value of `zone_equipment_17_object_type` or None if not set
        """
        return self._data["Zone Equipment 17 Object Type"]

    @zone_equipment_17_object_type.setter
    def zone_equipment_17_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 17 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 17 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_17_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_17_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_17_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_17_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 17 Object Type"] = value

    @property
    def zone_equipment_17_name(self):
        """Get zone_equipment_17_name

        Returns:
            str: the value of `zone_equipment_17_name` or None if not set
        """
        return self._data["Zone Equipment 17 Name"]

    @zone_equipment_17_name.setter
    def zone_equipment_17_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 17 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 17 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_17_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_17_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_17_name`')
        self._data["Zone Equipment 17 Name"] = value

    @property
    def zone_equipment_17_cooling_sequence(self):
        """Get zone_equipment_17_cooling_sequence

        Returns:
            int: the value of `zone_equipment_17_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 17 Cooling Sequence"]

    @zone_equipment_17_cooling_sequence.setter
    def zone_equipment_17_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 17 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 17 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_17_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_17_cooling_sequence`')
        self._data["Zone Equipment 17 Cooling Sequence"] = value

    @property
    def zone_equipment_17_heating_or_noload_sequence(self):
        """Get zone_equipment_17_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_17_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 17 Heating or No-Load Sequence"]

    @zone_equipment_17_heating_or_noload_sequence.setter
    def zone_equipment_17_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 17 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 17 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_17_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_17_heating_or_noload_sequence`')
        self._data["Zone Equipment 17 Heating or No-Load Sequence"] = value

    @property
    def zone_equipment_18_object_type(self):
        """Get zone_equipment_18_object_type

        Returns:
            str: the value of `zone_equipment_18_object_type` or None if not set
        """
        return self._data["Zone Equipment 18 Object Type"]

    @zone_equipment_18_object_type.setter
    def zone_equipment_18_object_type(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 18 Object Type`
        
        {u'type': u'choice', u'key': [u'ZoneHVAC:TerminalUnit:VariableRefrigerantFlow', u'ZoneHVAC:AirDistributionUnit', u'AirTerminal:SingleDuct:Uncontrolled', u'ZoneHVAC:EnergyRecoveryVentilator', u'ZoneHVAC:FourPipeFanCoil', u'ZoneHVAC:OutdoorAirUnit', u'ZoneHVAC:PackagedTerminalAirConditioner', u'ZoneHVAC:PackagedTerminalHeatPump', u'ZoneHVAC:UnitHeater', u'ZoneHVAC:UnitVentilator', u'ZoneHVAC:VentilatedSlab', u'ZoneHVAC:WaterToAirHeatPump', u'ZoneHVAC:WindowAirConditioner', u'ZoneHVAC:Baseboard:RadiantConvective:Electric', u'ZoneHVAC:Baseboard:RadiantConvective:Water', u'ZoneHVAC:Baseboard:RadiantConvective:Steam', u'ZoneHVAC:Baseboard:Convective:Electric', u'ZoneHVAC:Baseboard:Convective:Water', u'ZoneHVAC:HighTemperatureRadiant', u'ZoneHVAC:LowTemperatureRadiant:VariableFlow', u'ZoneHVAC:LowTemperatureRadiant:ConstantFlow', u'ZoneHVAC:LowTemperatureRadiant:Electric', u'ZoneHVAC:Dehumidifier:DX', u'ZoneHVAC:IdealLoadsAirSystem', u'ZoneHVAC:RefrigerationChillerSet', u'Fan:ZoneExhaust', u'WaterHeater:HeatPump'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 18 Object Type`
                Accepted values are:
                      - ZoneHVAC:TerminalUnit:VariableRefrigerantFlow
                      - ZoneHVAC:AirDistributionUnit
                      - AirTerminal:SingleDuct:Uncontrolled
                      - ZoneHVAC:EnergyRecoveryVentilator
                      - ZoneHVAC:FourPipeFanCoil
                      - ZoneHVAC:OutdoorAirUnit
                      - ZoneHVAC:PackagedTerminalAirConditioner
                      - ZoneHVAC:PackagedTerminalHeatPump
                      - ZoneHVAC:UnitHeater
                      - ZoneHVAC:UnitVentilator
                      - ZoneHVAC:VentilatedSlab
                      - ZoneHVAC:WaterToAirHeatPump
                      - ZoneHVAC:WindowAirConditioner
                      - ZoneHVAC:Baseboard:RadiantConvective:Electric
                      - ZoneHVAC:Baseboard:RadiantConvective:Water
                      - ZoneHVAC:Baseboard:RadiantConvective:Steam
                      - ZoneHVAC:Baseboard:Convective:Electric
                      - ZoneHVAC:Baseboard:Convective:Water
                      - ZoneHVAC:HighTemperatureRadiant
                      - ZoneHVAC:LowTemperatureRadiant:VariableFlow
                      - ZoneHVAC:LowTemperatureRadiant:ConstantFlow
                      - ZoneHVAC:LowTemperatureRadiant:Electric
                      - ZoneHVAC:Dehumidifier:DX
                      - ZoneHVAC:IdealLoadsAirSystem
                      - ZoneHVAC:RefrigerationChillerSet
                      - Fan:ZoneExhaust
                      - WaterHeater:HeatPump
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_18_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_18_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_18_object_type`')
            vals = {}
            vals["zonehvac:terminalunit:variablerefrigerantflow"] = "ZoneHVAC:TerminalUnit:VariableRefrigerantFlow"
            vals["zonehvac:airdistributionunit"] = "ZoneHVAC:AirDistributionUnit"
            vals["airterminal:singleduct:uncontrolled"] = "AirTerminal:SingleDuct:Uncontrolled"
            vals["zonehvac:energyrecoveryventilator"] = "ZoneHVAC:EnergyRecoveryVentilator"
            vals["zonehvac:fourpipefancoil"] = "ZoneHVAC:FourPipeFanCoil"
            vals["zonehvac:outdoorairunit"] = "ZoneHVAC:OutdoorAirUnit"
            vals["zonehvac:packagedterminalairconditioner"] = "ZoneHVAC:PackagedTerminalAirConditioner"
            vals["zonehvac:packagedterminalheatpump"] = "ZoneHVAC:PackagedTerminalHeatPump"
            vals["zonehvac:unitheater"] = "ZoneHVAC:UnitHeater"
            vals["zonehvac:unitventilator"] = "ZoneHVAC:UnitVentilator"
            vals["zonehvac:ventilatedslab"] = "ZoneHVAC:VentilatedSlab"
            vals["zonehvac:watertoairheatpump"] = "ZoneHVAC:WaterToAirHeatPump"
            vals["zonehvac:windowairconditioner"] = "ZoneHVAC:WindowAirConditioner"
            vals["zonehvac:baseboard:radiantconvective:electric"] = "ZoneHVAC:Baseboard:RadiantConvective:Electric"
            vals["zonehvac:baseboard:radiantconvective:water"] = "ZoneHVAC:Baseboard:RadiantConvective:Water"
            vals["zonehvac:baseboard:radiantconvective:steam"] = "ZoneHVAC:Baseboard:RadiantConvective:Steam"
            vals["zonehvac:baseboard:convective:electric"] = "ZoneHVAC:Baseboard:Convective:Electric"
            vals["zonehvac:baseboard:convective:water"] = "ZoneHVAC:Baseboard:Convective:Water"
            vals["zonehvac:hightemperatureradiant"] = "ZoneHVAC:HighTemperatureRadiant"
            vals["zonehvac:lowtemperatureradiant:variableflow"] = "ZoneHVAC:LowTemperatureRadiant:VariableFlow"
            vals["zonehvac:lowtemperatureradiant:constantflow"] = "ZoneHVAC:LowTemperatureRadiant:ConstantFlow"
            vals["zonehvac:lowtemperatureradiant:electric"] = "ZoneHVAC:LowTemperatureRadiant:Electric"
            vals["zonehvac:dehumidifier:dx"] = "ZoneHVAC:Dehumidifier:DX"
            vals["zonehvac:idealloadsairsystem"] = "ZoneHVAC:IdealLoadsAirSystem"
            vals["zonehvac:refrigerationchillerset"] = "ZoneHVAC:RefrigerationChillerSet"
            vals["fan:zoneexhaust"] = "Fan:ZoneExhaust"
            vals["waterheater:heatpump"] = "WaterHeater:HeatPump"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `zone_equipment_18_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Zone Equipment 18 Object Type"] = value

    @property
    def zone_equipment_18_name(self):
        """Get zone_equipment_18_name

        Returns:
            str: the value of `zone_equipment_18_name` or None if not set
        """
        return self._data["Zone Equipment 18 Name"]

    @zone_equipment_18_name.setter
    def zone_equipment_18_name(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 18 Name`
        
        {'type': 'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Equipment 18 Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_equipment_18_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_equipment_18_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_equipment_18_name`')
        self._data["Zone Equipment 18 Name"] = value

    @property
    def zone_equipment_18_cooling_sequence(self):
        """Get zone_equipment_18_cooling_sequence

        Returns:
            int: the value of `zone_equipment_18_cooling_sequence` or None if not set
        """
        return self._data["Zone Equipment 18 Cooling Sequence"]

    @zone_equipment_18_cooling_sequence.setter
    def zone_equipment_18_cooling_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 18 Cooling Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests cooling
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests cooling'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 18 Cooling Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_18_cooling_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_18_cooling_sequence`')
        self._data["Zone Equipment 18 Cooling Sequence"] = value

    @property
    def zone_equipment_18_heating_or_noload_sequence(self):
        """Get zone_equipment_18_heating_or_noload_sequence

        Returns:
            int: the value of `zone_equipment_18_heating_or_noload_sequence` or None if not set
        """
        return self._data["Zone Equipment 18 Heating or No-Load Sequence"]

    @zone_equipment_18_heating_or_noload_sequence.setter
    def zone_equipment_18_heating_or_noload_sequence(self, value=None):
        """  Corresponds to IDD Field `Zone Equipment 18 Heating or No-Load Sequence`
        Specifies the zone equipment simulation order
        when the zone thermostat requests heating or no load
        
        {u'note': [u'Specifies the zone equipment simulation order', u'when the zone thermostat requests heating or no load'], u'minimum': '1', u'type': u'integer', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Zone Equipment 18 Heating or No-Load Sequence`
                value >= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `zone_equipment_18_heating_or_noload_sequence`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `zone_equipment_18_heating_or_noload_sequence`')
        self._data["Zone Equipment 18 Heating or No-Load Sequence"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class ZoneHvacEquipmentConnections(object):
    """ Corresponds to IDD object `ZoneHVAC:EquipmentConnections`
        Specifies the HVAC equipment connections for a zone. Node names are specified for the
        zone air node, air inlet nodes, air exhaust nodes, and the air return node. A zone
        equipment list is referenced which lists all HVAC equipment connected to the zone.
    
    """
    internal_name = "ZoneHVAC:EquipmentConnections"
    field_count = 6
    required_fields = ["Zone Name", "Zone Conditioning Equipment List Name", "Zone Air Node Name", "Zone Return Air Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `ZoneHVAC:EquipmentConnections`
        """
        self._data = OrderedDict()
        self._data["Zone Name"] = None
        self._data["Zone Conditioning Equipment List Name"] = None
        self._data["Zone Air Inlet Node or NodeList Name"] = None
        self._data["Zone Air Exhaust Node or NodeList Name"] = None
        self._data["Zone Air Node Name"] = None
        self._data["Zone Return Air Node Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.zone_name = None
        else:
            self.zone_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_conditioning_equipment_list_name = None
        else:
            self.zone_conditioning_equipment_list_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_air_inlet_node_or_nodelist_name = None
        else:
            self.zone_air_inlet_node_or_nodelist_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_air_exhaust_node_or_nodelist_name = None
        else:
            self.zone_air_exhaust_node_or_nodelist_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_air_node_name = None
        else:
            self.zone_air_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.zone_return_air_node_name = None
        else:
            self.zone_return_air_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def zone_name(self):
        """Get zone_name

        Returns:
            str: the value of `zone_name` or None if not set
        """
        return self._data["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """  Corresponds to IDD Field `Zone Name`
        
        {u'type': u'object-list', u'object-list': u'ZoneNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_name`')
        self._data["Zone Name"] = value

    @property
    def zone_conditioning_equipment_list_name(self):
        """Get zone_conditioning_equipment_list_name

        Returns:
            str: the value of `zone_conditioning_equipment_list_name` or None if not set
        """
        return self._data["Zone Conditioning Equipment List Name"]

    @zone_conditioning_equipment_list_name.setter
    def zone_conditioning_equipment_list_name(self, value=None):
        """  Corresponds to IDD Field `Zone Conditioning Equipment List Name`
        Enter the name of a ZoneHVAC:EquipmentList object.
        
        {u'note': [u'Enter the name of a ZoneHVAC:EquipmentList object.'], u'type': u'object-list', u'object-list': u'ZoneEquipmentLists', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Conditioning Equipment List Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_conditioning_equipment_list_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_conditioning_equipment_list_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_conditioning_equipment_list_name`')
        self._data["Zone Conditioning Equipment List Name"] = value

    @property
    def zone_air_inlet_node_or_nodelist_name(self):
        """Get zone_air_inlet_node_or_nodelist_name

        Returns:
            str: the value of `zone_air_inlet_node_or_nodelist_name` or None if not set
        """
        return self._data["Zone Air Inlet Node or NodeList Name"]

    @zone_air_inlet_node_or_nodelist_name.setter
    def zone_air_inlet_node_or_nodelist_name(self, value=None):
        """  Corresponds to IDD Field `Zone Air Inlet Node or NodeList Name`
        
        {u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Air Inlet Node or NodeList Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_air_inlet_node_or_nodelist_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_air_inlet_node_or_nodelist_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_air_inlet_node_or_nodelist_name`')
        self._data["Zone Air Inlet Node or NodeList Name"] = value

    @property
    def zone_air_exhaust_node_or_nodelist_name(self):
        """Get zone_air_exhaust_node_or_nodelist_name

        Returns:
            str: the value of `zone_air_exhaust_node_or_nodelist_name` or None if not set
        """
        return self._data["Zone Air Exhaust Node or NodeList Name"]

    @zone_air_exhaust_node_or_nodelist_name.setter
    def zone_air_exhaust_node_or_nodelist_name(self, value=None):
        """  Corresponds to IDD Field `Zone Air Exhaust Node or NodeList Name`
        
        {u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Air Exhaust Node or NodeList Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_air_exhaust_node_or_nodelist_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_air_exhaust_node_or_nodelist_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_air_exhaust_node_or_nodelist_name`')
        self._data["Zone Air Exhaust Node or NodeList Name"] = value

    @property
    def zone_air_node_name(self):
        """Get zone_air_node_name

        Returns:
            str: the value of `zone_air_node_name` or None if not set
        """
        return self._data["Zone Air Node Name"]

    @zone_air_node_name.setter
    def zone_air_node_name(self, value=None):
        """  Corresponds to IDD Field `Zone Air Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Air Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_air_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_air_node_name`')
        self._data["Zone Air Node Name"] = value

    @property
    def zone_return_air_node_name(self):
        """Get zone_return_air_node_name

        Returns:
            str: the value of `zone_return_air_node_name` or None if not set
        """
        return self._data["Zone Return Air Node Name"]

    @zone_return_air_node_name.setter
    def zone_return_air_node_name(self, value=None):
        """  Corresponds to IDD Field `Zone Return Air Node Name`
        
        {u'Group': u'Fans', u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Zone Return Air Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `zone_return_air_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `zone_return_air_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `zone_return_air_node_name`')
        self._data["Zone Return Air Node Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class FanConstantVolume(object):
    """ Corresponds to IDD object `Fan:ConstantVolume`
        Constant volume fan that is intended to operate continuously based on a time schedule.
        This fan will not cycle on and off based on cooling/heating load or other control
        signals.
    
    """
    internal_name = "Fan:ConstantVolume"
    field_count = 10
    required_fields = ["Name", "Pressure Rise", "Air Inlet Node Name", "Air Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Fan:ConstantVolume`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Fan Total Efficiency"] = None
        self._data["Pressure Rise"] = None
        self._data["Maximum Flow Rate"] = None
        self._data["Motor Efficiency"] = None
        self._data["Motor In Airstream Fraction"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["End-Use Subcategory"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_total_efficiency = None
        else:
            self.fan_total_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.pressure_rise = None
        else:
            self.pressure_rise = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_flow_rate = None
        else:
            self.maximum_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.motor_efficiency = None
        else:
            self.motor_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.motor_in_airstream_fraction = None
        else:
            self.motor_in_airstream_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {'type': 'alpha', u'reference': u'FansCVandOnOffandVAV', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def fan_total_efficiency(self):
        """Get fan_total_efficiency

        Returns:
            float: the value of `fan_total_efficiency` or None if not set
        """
        return self._data["Fan Total Efficiency"]

    @fan_total_efficiency.setter
    def fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `Fan Total Efficiency`
        
        {u'default': '0.7', u'minimum>': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Fan Total Efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fan_total_efficiency`')
        self._data["Fan Total Efficiency"] = value

    @property
    def pressure_rise(self):
        """Get pressure_rise

        Returns:
            float: the value of `pressure_rise` or None if not set
        """
        return self._data["Pressure Rise"]

    @pressure_rise.setter
    def pressure_rise(self, value=None):
        """  Corresponds to IDD Field `Pressure Rise`
        
        {u'units': u'Pa', u'ip-units': u'inH2O', 'type': 'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Pressure Rise`
                Units: Pa
                IP-Units: inH2O
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `pressure_rise`'.format(value))
        self._data["Pressure Rise"] = value

    @property
    def maximum_flow_rate(self):
        """Get maximum_flow_rate

        Returns:
            float: the value of `maximum_flow_rate` or None if not set
        """
        return self._data["Maximum Flow Rate"]

    @maximum_flow_rate.setter
    def maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Maximum Flow Rate`
        
        {u'units': u'm3/s', u'autosizable': u'', u'minimum': '0.0', 'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_flow_rate`')
        self._data["Maximum Flow Rate"] = value

    @property
    def motor_efficiency(self):
        """Get motor_efficiency

        Returns:
            float: the value of `motor_efficiency` or None if not set
        """
        return self._data["Motor Efficiency"]

    @motor_efficiency.setter
    def motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `Motor Efficiency`
        
        {u'default': '0.9', u'minimum>': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Motor Efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `motor_efficiency`')
        self._data["Motor Efficiency"] = value

    @property
    def motor_in_airstream_fraction(self):
        """Get motor_in_airstream_fraction

        Returns:
            float: the value of `motor_in_airstream_fraction` or None if not set
        """
        return self._data["Motor In Airstream Fraction"]

    @motor_in_airstream_fraction.setter
    def motor_in_airstream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `Motor In Airstream Fraction`
        0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream
        
        {'pytype': 'float', u'default': '1.0', u'maximum': '1.0', u'note': [u'0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream'], u'minimum': '0.0', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Motor In Airstream Fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `motor_in_airstream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `motor_in_airstream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `motor_in_airstream_fraction`')
        self._data["Motor In Airstream Fraction"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `End-Use Subcategory`
        
        {u'default': 'General', u'retaincase': u'', u'type': u'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `End-Use Subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `enduse_subcategory`')
        self._data["End-Use Subcategory"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class FanVariableVolume(object):
    """ Corresponds to IDD object `Fan:VariableVolume`
        Variable air volume fan where the electric power input varies according to a
        performance curve as a function of flow fraction.
    
    """
    internal_name = "Fan:VariableVolume"
    field_count = 18
    required_fields = ["Name", "Pressure Rise", "Air Inlet Node Name", "Air Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Fan:VariableVolume`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Fan Total Efficiency"] = None
        self._data["Pressure Rise"] = None
        self._data["Maximum Flow Rate"] = None
        self._data["Fan Power Minimum Flow Rate Input Method"] = None
        self._data["Fan Power Minimum Flow Fraction"] = None
        self._data["Fan Power Minimum Air Flow Rate"] = None
        self._data["Motor Efficiency"] = None
        self._data["Motor In Airstream Fraction"] = None
        self._data["Fan Power Coefficient 1"] = None
        self._data["Fan Power Coefficient 2"] = None
        self._data["Fan Power Coefficient 3"] = None
        self._data["Fan Power Coefficient 4"] = None
        self._data["Fan Power Coefficient 5"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["End-Use Subcategory"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_total_efficiency = None
        else:
            self.fan_total_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.pressure_rise = None
        else:
            self.pressure_rise = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_flow_rate = None
        else:
            self.maximum_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_power_minimum_flow_rate_input_method = None
        else:
            self.fan_power_minimum_flow_rate_input_method = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_power_minimum_flow_fraction = None
        else:
            self.fan_power_minimum_flow_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_power_minimum_air_flow_rate = None
        else:
            self.fan_power_minimum_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.motor_efficiency = None
        else:
            self.motor_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.motor_in_airstream_fraction = None
        else:
            self.motor_in_airstream_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_power_coefficient_1 = None
        else:
            self.fan_power_coefficient_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_power_coefficient_2 = None
        else:
            self.fan_power_coefficient_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_power_coefficient_3 = None
        else:
            self.fan_power_coefficient_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_power_coefficient_4 = None
        else:
            self.fan_power_coefficient_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_power_coefficient_5 = None
        else:
            self.fan_power_coefficient_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {'type': 'alpha', u'reference': u'FansCVandOnOffandVAV', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def fan_total_efficiency(self):
        """Get fan_total_efficiency

        Returns:
            float: the value of `fan_total_efficiency` or None if not set
        """
        return self._data["Fan Total Efficiency"]

    @fan_total_efficiency.setter
    def fan_total_efficiency(self, value=0.7 ):
        """  Corresponds to IDD Field `Fan Total Efficiency`
        
        {u'default': '0.7', u'minimum>': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Fan Total Efficiency`
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fan_total_efficiency`')
        self._data["Fan Total Efficiency"] = value

    @property
    def pressure_rise(self):
        """Get pressure_rise

        Returns:
            float: the value of `pressure_rise` or None if not set
        """
        return self._data["Pressure Rise"]

    @pressure_rise.setter
    def pressure_rise(self, value=None):
        """  Corresponds to IDD Field `Pressure Rise`
        
        {u'units': u'Pa', u'ip-units': u'inH2O', 'type': 'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Pressure Rise`
                Units: Pa
                IP-Units: inH2O
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `pressure_rise`'.format(value))
        self._data["Pressure Rise"] = value

    @property
    def maximum_flow_rate(self):
        """Get maximum_flow_rate

        Returns:
            float: the value of `maximum_flow_rate` or None if not set
        """
        return self._data["Maximum Flow Rate"]

    @maximum_flow_rate.setter
    def maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Maximum Flow Rate`
        
        {u'units': u'm3/s', u'autosizable': u'', u'minimum': '0.0', 'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_flow_rate`')
        self._data["Maximum Flow Rate"] = value

    @property
    def fan_power_minimum_flow_rate_input_method(self):
        """Get fan_power_minimum_flow_rate_input_method

        Returns:
            str: the value of `fan_power_minimum_flow_rate_input_method` or None if not set
        """
        return self._data["Fan Power Minimum Flow Rate Input Method"]

    @fan_power_minimum_flow_rate_input_method.setter
    def fan_power_minimum_flow_rate_input_method(self, value="Fraction"):
        """  Corresponds to IDD Field `Fan Power Minimum Flow Rate Input Method`
        
        {u'default': u'Fraction', u'type': u'choice', u'key': [u'Fraction', u'FixedFlowRate'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Fan Power Minimum Flow Rate Input Method`
                Accepted values are:
                      - Fraction
                      - FixedFlowRate
                Default value: Fraction
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_power_minimum_flow_rate_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_power_minimum_flow_rate_input_method`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fan_power_minimum_flow_rate_input_method`')
            vals = {}
            vals["fraction"] = "Fraction"
            vals["fixedflowrate"] = "FixedFlowRate"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `fan_power_minimum_flow_rate_input_method`'.format(value))
            value = vals[value_lower]
        self._data["Fan Power Minimum Flow Rate Input Method"] = value

    @property
    def fan_power_minimum_flow_fraction(self):
        """Get fan_power_minimum_flow_fraction

        Returns:
            float: the value of `fan_power_minimum_flow_fraction` or None if not set
        """
        return self._data["Fan Power Minimum Flow Fraction"]

    @fan_power_minimum_flow_fraction.setter
    def fan_power_minimum_flow_fraction(self, value=0.25 ):
        """  Corresponds to IDD Field `Fan Power Minimum Flow Fraction`
        
        {u'default': '0.25', u'minimum': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Fan Power Minimum Flow Fraction`
                Default value: 0.25
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_power_minimum_flow_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fan_power_minimum_flow_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fan_power_minimum_flow_fraction`')
        self._data["Fan Power Minimum Flow Fraction"] = value

    @property
    def fan_power_minimum_air_flow_rate(self):
        """Get fan_power_minimum_air_flow_rate

        Returns:
            float: the value of `fan_power_minimum_air_flow_rate` or None if not set
        """
        return self._data["Fan Power Minimum Air Flow Rate"]

    @fan_power_minimum_air_flow_rate.setter
    def fan_power_minimum_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Fan Power Minimum Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Fan Power Minimum Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_power_minimum_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fan_power_minimum_air_flow_rate`')
        self._data["Fan Power Minimum Air Flow Rate"] = value

    @property
    def motor_efficiency(self):
        """Get motor_efficiency

        Returns:
            float: the value of `motor_efficiency` or None if not set
        """
        return self._data["Motor Efficiency"]

    @motor_efficiency.setter
    def motor_efficiency(self, value=0.9 ):
        """  Corresponds to IDD Field `Motor Efficiency`
        
        {u'default': '0.9', u'minimum>': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Motor Efficiency`
                Default value: 0.9
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `motor_efficiency`')
        self._data["Motor Efficiency"] = value

    @property
    def motor_in_airstream_fraction(self):
        """Get motor_in_airstream_fraction

        Returns:
            float: the value of `motor_in_airstream_fraction` or None if not set
        """
        return self._data["Motor In Airstream Fraction"]

    @motor_in_airstream_fraction.setter
    def motor_in_airstream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `Motor In Airstream Fraction`
        0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream
        
        {'pytype': 'float', u'default': '1.0', u'maximum': '1.0', u'note': [u'0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream'], u'minimum': '0.0', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Motor In Airstream Fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `motor_in_airstream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `motor_in_airstream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `motor_in_airstream_fraction`')
        self._data["Motor In Airstream Fraction"] = value

    @property
    def fan_power_coefficient_1(self):
        """Get fan_power_coefficient_1

        Returns:
            float: the value of `fan_power_coefficient_1` or None if not set
        """
        return self._data["Fan Power Coefficient 1"]

    @fan_power_coefficient_1.setter
    def fan_power_coefficient_1(self, value=None):
        """  Corresponds to IDD Field `Fan Power Coefficient 1`
        all Fan Power Coefficients should not be 0.0 or no fan power will be consumed.
        Fan Power Coefficents are specified as function of full flow rate/power
        Equation:
        
        {u'note': [u'all Fan Power Coefficients should not be 0.0 or no fan power will be consumed.', u'Fan Power Coefficents are specified as function of full flow rate/power', u'Equation:'], 'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Fan Power Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_power_coefficient_1`'.format(value))
        self._data["Fan Power Coefficient 1"] = value

    @property
    def fan_power_coefficient_2(self):
        """Get fan_power_coefficient_2

        Returns:
            float: the value of `fan_power_coefficient_2` or None if not set
        """
        return self._data["Fan Power Coefficient 2"]

    @fan_power_coefficient_2.setter
    def fan_power_coefficient_2(self, value=None):
        """  Corresponds to IDD Field `Fan Power Coefficient 2`
        
        {'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Fan Power Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_power_coefficient_2`'.format(value))
        self._data["Fan Power Coefficient 2"] = value

    @property
    def fan_power_coefficient_3(self):
        """Get fan_power_coefficient_3

        Returns:
            float: the value of `fan_power_coefficient_3` or None if not set
        """
        return self._data["Fan Power Coefficient 3"]

    @fan_power_coefficient_3.setter
    def fan_power_coefficient_3(self, value=None):
        """  Corresponds to IDD Field `Fan Power Coefficient 3`
        
        {'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Fan Power Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_power_coefficient_3`'.format(value))
        self._data["Fan Power Coefficient 3"] = value

    @property
    def fan_power_coefficient_4(self):
        """Get fan_power_coefficient_4

        Returns:
            float: the value of `fan_power_coefficient_4` or None if not set
        """
        return self._data["Fan Power Coefficient 4"]

    @fan_power_coefficient_4.setter
    def fan_power_coefficient_4(self, value=None):
        """  Corresponds to IDD Field `Fan Power Coefficient 4`
        
        {'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Fan Power Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_power_coefficient_4`'.format(value))
        self._data["Fan Power Coefficient 4"] = value

    @property
    def fan_power_coefficient_5(self):
        """Get fan_power_coefficient_5

        Returns:
            float: the value of `fan_power_coefficient_5` or None if not set
        """
        return self._data["Fan Power Coefficient 5"]

    @fan_power_coefficient_5.setter
    def fan_power_coefficient_5(self, value=None):
        """  Corresponds to IDD Field `Fan Power Coefficient 5`
        
        {'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Fan Power Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_power_coefficient_5`'.format(value))
        self._data["Fan Power Coefficient 5"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `End-Use Subcategory`
        
        {u'default': 'General', u'retaincase': u'', u'type': u'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `End-Use Subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `enduse_subcategory`')
        self._data["End-Use Subcategory"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class FanOnOff(object):
    """ Corresponds to IDD object `Fan:OnOff`
        Constant volume fan that is intended to cycle on and off based on cooling/heating load
        or other control signals. This fan can also operate continuously like
        Fan:ConstantVolume.
    
    """
    internal_name = "Fan:OnOff"
    field_count = 12
    required_fields = ["Name", "Pressure Rise", "Air Inlet Node Name", "Air Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Fan:OnOff`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Fan Total Efficiency"] = None
        self._data["Pressure Rise"] = None
        self._data["Maximum Flow Rate"] = None
        self._data["Motor Efficiency"] = None
        self._data["Motor In Airstream Fraction"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Fan Power Ratio Function of Speed Ratio Curve Name"] = None
        self._data["Fan Efficiency Ratio Function of Speed Ratio Curve Name"] = None
        self._data["End-Use Subcategory"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_total_efficiency = None
        else:
            self.fan_total_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.pressure_rise = None
        else:
            self.pressure_rise = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_flow_rate = None
        else:
            self.maximum_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.motor_efficiency = None
        else:
            self.motor_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.motor_in_airstream_fraction = None
        else:
            self.motor_in_airstream_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_power_ratio_function_of_speed_ratio_curve_name = None
        else:
            self.fan_power_ratio_function_of_speed_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_efficiency_ratio_function_of_speed_ratio_curve_name = None
        else:
            self.fan_efficiency_ratio_function_of_speed_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {'type': 'alpha', u'reference': u'FansCVandOnOffandVAV', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def fan_total_efficiency(self):
        """Get fan_total_efficiency

        Returns:
            float: the value of `fan_total_efficiency` or None if not set
        """
        return self._data["Fan Total Efficiency"]

    @fan_total_efficiency.setter
    def fan_total_efficiency(self, value=0.6 ):
        """  Corresponds to IDD Field `Fan Total Efficiency`
        
        {u'default': '0.6', u'minimum>': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Fan Total Efficiency`
                Default value: 0.6
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fan_total_efficiency`')
        self._data["Fan Total Efficiency"] = value

    @property
    def pressure_rise(self):
        """Get pressure_rise

        Returns:
            float: the value of `pressure_rise` or None if not set
        """
        return self._data["Pressure Rise"]

    @pressure_rise.setter
    def pressure_rise(self, value=None):
        """  Corresponds to IDD Field `Pressure Rise`
        
        {u'units': u'Pa', u'ip-units': u'inH2O', 'type': 'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Pressure Rise`
                Units: Pa
                IP-Units: inH2O
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `pressure_rise`'.format(value))
        self._data["Pressure Rise"] = value

    @property
    def maximum_flow_rate(self):
        """Get maximum_flow_rate

        Returns:
            float: the value of `maximum_flow_rate` or None if not set
        """
        return self._data["Maximum Flow Rate"]

    @maximum_flow_rate.setter
    def maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Maximum Flow Rate`
        
        {u'units': u'm3/s', u'autosizable': u'', u'minimum': '0.0', 'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_flow_rate`')
        self._data["Maximum Flow Rate"] = value

    @property
    def motor_efficiency(self):
        """Get motor_efficiency

        Returns:
            float: the value of `motor_efficiency` or None if not set
        """
        return self._data["Motor Efficiency"]

    @motor_efficiency.setter
    def motor_efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `Motor Efficiency`
        
        {u'default': '0.8', u'minimum>': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Motor Efficiency`
                Default value: 0.8
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `motor_efficiency`')
        self._data["Motor Efficiency"] = value

    @property
    def motor_in_airstream_fraction(self):
        """Get motor_in_airstream_fraction

        Returns:
            float: the value of `motor_in_airstream_fraction` or None if not set
        """
        return self._data["Motor In Airstream Fraction"]

    @motor_in_airstream_fraction.setter
    def motor_in_airstream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `Motor In Airstream Fraction`
        0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream
        
        {'pytype': 'float', u'default': '1.0', u'maximum': '1.0', u'note': [u'0.0 means fan motor outside of air stream, 1.0 means motor inside of air stream'], u'minimum': '0.0', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Motor In Airstream Fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `motor_in_airstream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `motor_in_airstream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `motor_in_airstream_fraction`')
        self._data["Motor In Airstream Fraction"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def fan_power_ratio_function_of_speed_ratio_curve_name(self):
        """Get fan_power_ratio_function_of_speed_ratio_curve_name

        Returns:
            str: the value of `fan_power_ratio_function_of_speed_ratio_curve_name` or None if not set
        """
        return self._data["Fan Power Ratio Function of Speed Ratio Curve Name"]

    @fan_power_ratio_function_of_speed_ratio_curve_name.setter
    def fan_power_ratio_function_of_speed_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Fan Power Ratio Function of Speed Ratio Curve Name`
        Table:OneIndependentVariable can also be used
        
        {u'note': [u'Table:OneIndependentVariable can also be used'], u'type': u'object-list', u'object-list': u'ExponentCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Fan Power Ratio Function of Speed Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_power_ratio_function_of_speed_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_power_ratio_function_of_speed_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fan_power_ratio_function_of_speed_ratio_curve_name`')
        self._data["Fan Power Ratio Function of Speed Ratio Curve Name"] = value

    @property
    def fan_efficiency_ratio_function_of_speed_ratio_curve_name(self):
        """Get fan_efficiency_ratio_function_of_speed_ratio_curve_name

        Returns:
            str: the value of `fan_efficiency_ratio_function_of_speed_ratio_curve_name` or None if not set
        """
        return self._data["Fan Efficiency Ratio Function of Speed Ratio Curve Name"]

    @fan_efficiency_ratio_function_of_speed_ratio_curve_name.setter
    def fan_efficiency_ratio_function_of_speed_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Fan Efficiency Ratio Function of Speed Ratio Curve Name`
        Table:OneIndependentVariable can also be used
        
        {u'note': [u'Table:OneIndependentVariable can also be used'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Fan Efficiency Ratio Function of Speed Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_efficiency_ratio_function_of_speed_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_efficiency_ratio_function_of_speed_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fan_efficiency_ratio_function_of_speed_ratio_curve_name`')
        self._data["Fan Efficiency Ratio Function of Speed Ratio Curve Name"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `End-Use Subcategory`
        
        {u'default': 'General', u'retaincase': u'', u'type': u'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `End-Use Subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `enduse_subcategory`')
        self._data["End-Use Subcategory"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class FanZoneExhaust(object):
    """ Corresponds to IDD object `Fan:ZoneExhaust`
        Models a fan that exhausts air from a zone.
    
    """
    internal_name = "Fan:ZoneExhaust"
    field_count = 12
    required_fields = ["Name", "Pressure Rise", "Air Inlet Node Name", "Air Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Fan:ZoneExhaust`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Fan Total Efficiency"] = None
        self._data["Pressure Rise"] = None
        self._data["Maximum Flow Rate"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["End-Use Subcategory"] = None
        self._data["Flow Fraction Schedule Name"] = None
        self._data["System Availability Manager Coupling Mode"] = None
        self._data["Minimum Zone Temperature Limit Schedule Name"] = None
        self._data["Balanced Exhaust Fraction Schedule Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_total_efficiency = None
        else:
            self.fan_total_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.pressure_rise = None
        else:
            self.pressure_rise = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_flow_rate = None
        else:
            self.maximum_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_fraction_schedule_name = None
        else:
            self.flow_fraction_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.system_availability_manager_coupling_mode = None
        else:
            self.system_availability_manager_coupling_mode = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_zone_temperature_limit_schedule_name = None
        else:
            self.minimum_zone_temperature_limit_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.balanced_exhaust_fraction_schedule_name = None
        else:
            self.balanced_exhaust_fraction_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {'type': 'alpha', u'reference': u'FansZoneExhaust', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def fan_total_efficiency(self):
        """Get fan_total_efficiency

        Returns:
            float: the value of `fan_total_efficiency` or None if not set
        """
        return self._data["Fan Total Efficiency"]

    @fan_total_efficiency.setter
    def fan_total_efficiency(self, value=0.6 ):
        """  Corresponds to IDD Field `Fan Total Efficiency`
        
        {u'default': '0.6', u'minimum>': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Fan Total Efficiency`
                Default value: 0.6
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fan_total_efficiency`')
        self._data["Fan Total Efficiency"] = value

    @property
    def pressure_rise(self):
        """Get pressure_rise

        Returns:
            float: the value of `pressure_rise` or None if not set
        """
        return self._data["Pressure Rise"]

    @pressure_rise.setter
    def pressure_rise(self, value=None):
        """  Corresponds to IDD Field `Pressure Rise`
        
        {u'units': u'Pa', u'ip-units': u'inH2O', 'type': 'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Pressure Rise`
                Units: Pa
                IP-Units: inH2O
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `pressure_rise`'.format(value))
        self._data["Pressure Rise"] = value

    @property
    def maximum_flow_rate(self):
        """Get maximum_flow_rate

        Returns:
            float: the value of `maximum_flow_rate` or None if not set
        """
        return self._data["Maximum Flow Rate"]

    @maximum_flow_rate.setter
    def maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Maximum Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', 'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_flow_rate`')
        self._data["Maximum Flow Rate"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `End-Use Subcategory`
        
        {u'default': 'General', u'retaincase': u'', u'type': u'alpha', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `End-Use Subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `enduse_subcategory`')
        self._data["End-Use Subcategory"] = value

    @property
    def flow_fraction_schedule_name(self):
        """Get flow_fraction_schedule_name

        Returns:
            str: the value of `flow_fraction_schedule_name` or None if not set
        """
        return self._data["Flow Fraction Schedule Name"]

    @flow_fraction_schedule_name.setter
    def flow_fraction_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Flow Fraction Schedule Name`
        If field is used, then when fan runs the exhausted air flow rate is controlled to be the scheduled fraction times the Maximum Flow Rate
        
        {u'note': [u'If field is used, then when fan runs the exhausted air flow rate is controlled to be the scheduled fraction times the Maximum Flow Rate'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Flow Fraction Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `flow_fraction_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `flow_fraction_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `flow_fraction_schedule_name`')
        self._data["Flow Fraction Schedule Name"] = value

    @property
    def system_availability_manager_coupling_mode(self):
        """Get system_availability_manager_coupling_mode

        Returns:
            str: the value of `system_availability_manager_coupling_mode` or None if not set
        """
        return self._data["System Availability Manager Coupling Mode"]

    @system_availability_manager_coupling_mode.setter
    def system_availability_manager_coupling_mode(self, value="Coupled"):
        """  Corresponds to IDD Field `System Availability Manager Coupling Mode`
        Control if fan is to be interlocked with HVAC system Availability Managerrs or not.
        
        {u'note': [u'Control if fan is to be interlocked with HVAC system Availability Managerrs or not.'], u'default': u'Coupled', u'type': u'choice', u'key': [u'Coupled', u'Decoupled'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `System Availability Manager Coupling Mode`
                Accepted values are:
                      - Coupled
                      - Decoupled
                Default value: Coupled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `system_availability_manager_coupling_mode`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `system_availability_manager_coupling_mode`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `system_availability_manager_coupling_mode`')
            vals = {}
            vals["coupled"] = "Coupled"
            vals["decoupled"] = "Decoupled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `system_availability_manager_coupling_mode`'.format(value))
            value = vals[value_lower]
        self._data["System Availability Manager Coupling Mode"] = value

    @property
    def minimum_zone_temperature_limit_schedule_name(self):
        """Get minimum_zone_temperature_limit_schedule_name

        Returns:
            str: the value of `minimum_zone_temperature_limit_schedule_name` or None if not set
        """
        return self._data["Minimum Zone Temperature Limit Schedule Name"]

    @minimum_zone_temperature_limit_schedule_name.setter
    def minimum_zone_temperature_limit_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Minimum Zone Temperature Limit Schedule Name`
        If field is used, the exhaust fan will not run if the zone temperature is lower than this limit
        
        {u'note': [u'If field is used, the exhaust fan will not run if the zone temperature is lower than this limit'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Minimum Zone Temperature Limit Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `minimum_zone_temperature_limit_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `minimum_zone_temperature_limit_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `minimum_zone_temperature_limit_schedule_name`')
        self._data["Minimum Zone Temperature Limit Schedule Name"] = value

    @property
    def balanced_exhaust_fraction_schedule_name(self):
        """Get balanced_exhaust_fraction_schedule_name

        Returns:
            str: the value of `balanced_exhaust_fraction_schedule_name` or None if not set
        """
        return self._data["Balanced Exhaust Fraction Schedule Name"]

    @balanced_exhaust_fraction_schedule_name.setter
    def balanced_exhaust_fraction_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Balanced Exhaust Fraction Schedule Name`
        Used to control fan's impact on flow at the return air node. Enter the portion of the exhaust that is balanced by simple airflows.
        
        
        {u'note': [u"Used to control fan's impact on flow at the return air node. Enter the portion of the exhaust that is balanced by simple airflows.", u''], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Balanced Exhaust Fraction Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `balanced_exhaust_fraction_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `balanced_exhaust_fraction_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `balanced_exhaust_fraction_schedule_name`')
        self._data["Balanced Exhaust Fraction Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class FanPerformanceNightVentilation(object):
    """ Corresponds to IDD object `FanPerformance:NightVentilation`
        Specifies an alternate set of performance parameters for a fan. These alternate
        parameters are used when a system manager (such as AvailabilityManager:NightVentilation)
        sets a specified flow rate.  May be used with any type of fan except not with
        Fan:ComponentModel. If the fan model senses that a fixed flow rate has been set, it
        will use these alternate performance parameters. It is assumed that the fan will
        run at a fixed speed in the alternate mode.
    
    """
    internal_name = "FanPerformance:NightVentilation"
    field_count = 6
    required_fields = ["Fan Name", "Fan Total Efficiency", "Pressure Rise", "Motor Efficiency"]

    def __init__(self):
        """ Init data dictionary object for IDD  `FanPerformance:NightVentilation`
        """
        self._data = OrderedDict()
        self._data["Fan Name"] = None
        self._data["Fan Total Efficiency"] = None
        self._data["Pressure Rise"] = None
        self._data["Maximum Flow Rate"] = None
        self._data["Motor Efficiency"] = None
        self._data["Motor in Airstream Fraction"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.fan_name = None
        else:
            self.fan_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_total_efficiency = None
        else:
            self.fan_total_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.pressure_rise = None
        else:
            self.pressure_rise = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_flow_rate = None
        else:
            self.maximum_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.motor_efficiency = None
        else:
            self.motor_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.motor_in_airstream_fraction = None
        else:
            self.motor_in_airstream_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def fan_name(self):
        """Get fan_name

        Returns:
            str: the value of `fan_name` or None if not set
        """
        return self._data["Fan Name"]

    @fan_name.setter
    def fan_name(self, value=None):
        """  Corresponds to IDD Field `Fan Name`
        
        {u'type': u'object-list', u'object-list': u'FansCVandVAV', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Fan Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fan_name`')
        self._data["Fan Name"] = value

    @property
    def fan_total_efficiency(self):
        """Get fan_total_efficiency

        Returns:
            float: the value of `fan_total_efficiency` or None if not set
        """
        return self._data["Fan Total Efficiency"]

    @fan_total_efficiency.setter
    def fan_total_efficiency(self, value=None):
        """  Corresponds to IDD Field `Fan Total Efficiency`
        
        {u'minimum>': '0.0', u'type': u'real', u'maximum': '1.0', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Fan Total Efficiency`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_total_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fan_total_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fan_total_efficiency`')
        self._data["Fan Total Efficiency"] = value

    @property
    def pressure_rise(self):
        """Get pressure_rise

        Returns:
            float: the value of `pressure_rise` or None if not set
        """
        return self._data["Pressure Rise"]

    @pressure_rise.setter
    def pressure_rise(self, value=None):
        """  Corresponds to IDD Field `Pressure Rise`
        
        {u'units': u'Pa', u'ip-units': u'inH2O', 'type': 'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Pressure Rise`
                Units: Pa
                IP-Units: inH2O
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `pressure_rise`'.format(value))
        self._data["Pressure Rise"] = value

    @property
    def maximum_flow_rate(self):
        """Get maximum_flow_rate

        Returns:
            float: the value of `maximum_flow_rate` or None if not set
        """
        return self._data["Maximum Flow Rate"]

    @maximum_flow_rate.setter
    def maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Maximum Flow Rate`
        
        {u'units': u'm3/s', u'autosizable': u'', u'minimum': '0.0', 'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_flow_rate`')
        self._data["Maximum Flow Rate"] = value

    @property
    def motor_efficiency(self):
        """Get motor_efficiency

        Returns:
            float: the value of `motor_efficiency` or None if not set
        """
        return self._data["Motor Efficiency"]

    @motor_efficiency.setter
    def motor_efficiency(self, value=None):
        """  Corresponds to IDD Field `Motor Efficiency`
        
        {u'minimum>': '0.0', u'type': u'real', u'maximum': '1.0', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Motor Efficiency`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `motor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `motor_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `motor_efficiency`')
        self._data["Motor Efficiency"] = value

    @property
    def motor_in_airstream_fraction(self):
        """Get motor_in_airstream_fraction

        Returns:
            float: the value of `motor_in_airstream_fraction` or None if not set
        """
        return self._data["Motor in Airstream Fraction"]

    @motor_in_airstream_fraction.setter
    def motor_in_airstream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `Motor in Airstream Fraction`
        0.0 means fan motor outside of airstream
        1.0 means fan motor inside of airstream
        
        {'pytype': 'float', u'default': '1.0', u'maximum': '1.0', u'note': [u'0.0 means fan motor outside of airstream', u'1.0 means fan motor inside of airstream'], u'minimum': '0.0', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Motor in Airstream Fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `motor_in_airstream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `motor_in_airstream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `motor_in_airstream_fraction`')
        self._data["Motor in Airstream Fraction"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class FanComponentModel(object):
    """ Corresponds to IDD object `Fan:ComponentModel`
        A detailed fan type for constant-air-volume (CAV) and variable-air-volume (VAV)
        systems. It includes inputs that describe the air-distribution system as well as the
        fan, drive belt (if used), motor, and variable-frequency-drive (if used).
    
    """
    internal_name = "Fan:ComponentModel"
    field_count = 37
    required_fields = ["Name", "Air Inlet Node Name", "Air Outlet Node Name", "Fan Wheel Diameter", "Fan Outlet Area", "Maximum Fan Static Efficiency", "Euler Number at Maximum Fan Static Efficiency", "Maximum Dimensionless Fan Airflow", "Belt Maximum Torque", "Motor Maximum Speed", "Maximum Motor Output Power", "Maximum VFD Output Power", "Fan Pressure Rise Curve Name", "Duct Static Pressure Reset Curve Name", "Normalized Fan Static Efficiency Curve Name-Non-Stall Region", "Normalized Fan Static Efficiency Curve Name-Stall Region", "Normalized Dimensionless Airflow Curve Name-Non-Stall Region", "Normalized Dimensionless Airflow Curve Name-Stall Region"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Fan:ComponentModel`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Maximum Flow Rate"] = None
        self._data["Minimum Flow Rate"] = None
        self._data["Fan Sizing Factor"] = None
        self._data["Fan Wheel Diameter"] = None
        self._data["Fan Outlet Area"] = None
        self._data["Maximum Fan Static Efficiency"] = None
        self._data["Euler Number at Maximum Fan Static Efficiency"] = None
        self._data["Maximum Dimensionless Fan Airflow"] = None
        self._data["Motor Fan Pulley Ratio"] = None
        self._data["Belt Maximum Torque"] = None
        self._data["Belt Sizing Factor"] = None
        self._data["Belt Fractional Torque Transition"] = None
        self._data["Motor Maximum Speed"] = None
        self._data["Maximum Motor Output Power"] = None
        self._data["Motor Sizing Factor"] = None
        self._data["Motor In Airstream Fraction"] = None
        self._data["VFD Efficiency Type"] = None
        self._data["Maximum VFD Output Power"] = None
        self._data["VFD Sizing Factor"] = None
        self._data["Fan Pressure Rise Curve Name"] = None
        self._data["Duct Static Pressure Reset Curve Name"] = None
        self._data["Normalized Fan Static Efficiency Curve Name-Non-Stall Region"] = None
        self._data["Normalized Fan Static Efficiency Curve Name-Stall Region"] = None
        self._data["Normalized Dimensionless Airflow Curve Name-Non-Stall Region"] = None
        self._data["Normalized Dimensionless Airflow Curve Name-Stall Region"] = None
        self._data["Maximum Belt Efficiency Curve Name"] = None
        self._data["Normalized Belt Efficiency Curve Name - Region 1"] = None
        self._data["Normalized Belt Efficiency Curve Name - Region 2"] = None
        self._data["Normalized Belt Efficiency Curve Name - Region 3"] = None
        self._data["Maximum Motor Efficiency Curve Name"] = None
        self._data["Normalized Motor Efficiency Curve Name"] = None
        self._data["VFD Efficiency Curve Name"] = None
        self._data["End-Use Subcategory"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_flow_rate = None
        else:
            self.maximum_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_flow_rate = None
        else:
            self.minimum_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_sizing_factor = None
        else:
            self.fan_sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_wheel_diameter = None
        else:
            self.fan_wheel_diameter = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_outlet_area = None
        else:
            self.fan_outlet_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_fan_static_efficiency = None
        else:
            self.maximum_fan_static_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.euler_number_at_maximum_fan_static_efficiency = None
        else:
            self.euler_number_at_maximum_fan_static_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_dimensionless_fan_airflow = None
        else:
            self.maximum_dimensionless_fan_airflow = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.motor_fan_pulley_ratio = None
        else:
            self.motor_fan_pulley_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.belt_maximum_torque = None
        else:
            self.belt_maximum_torque = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.belt_sizing_factor = None
        else:
            self.belt_sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.belt_fractional_torque_transition = None
        else:
            self.belt_fractional_torque_transition = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.motor_maximum_speed = None
        else:
            self.motor_maximum_speed = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_motor_output_power = None
        else:
            self.maximum_motor_output_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.motor_sizing_factor = None
        else:
            self.motor_sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.motor_in_airstream_fraction = None
        else:
            self.motor_in_airstream_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vfd_efficiency_type = None
        else:
            self.vfd_efficiency_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_vfd_output_power = None
        else:
            self.maximum_vfd_output_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vfd_sizing_factor = None
        else:
            self.vfd_sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fan_pressure_rise_curve_name = None
        else:
            self.fan_pressure_rise_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.duct_static_pressure_reset_curve_name = None
        else:
            self.duct_static_pressure_reset_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.normalized_fan_static_efficiency_curve_namenonstall_region = None
        else:
            self.normalized_fan_static_efficiency_curve_namenonstall_region = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.normalized_fan_static_efficiency_curve_namestall_region = None
        else:
            self.normalized_fan_static_efficiency_curve_namestall_region = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.normalized_dimensionless_airflow_curve_namenonstall_region = None
        else:
            self.normalized_dimensionless_airflow_curve_namenonstall_region = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.normalized_dimensionless_airflow_curve_namestall_region = None
        else:
            self.normalized_dimensionless_airflow_curve_namestall_region = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_belt_efficiency_curve_name = None
        else:
            self.maximum_belt_efficiency_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.normalized_belt_efficiency_curve_name_region_1 = None
        else:
            self.normalized_belt_efficiency_curve_name_region_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.normalized_belt_efficiency_curve_name_region_2 = None
        else:
            self.normalized_belt_efficiency_curve_name_region_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.normalized_belt_efficiency_curve_name_region_3 = None
        else:
            self.normalized_belt_efficiency_curve_name_region_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_motor_efficiency_curve_name = None
        else:
            self.maximum_motor_efficiency_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.normalized_motor_efficiency_curve_name = None
        else:
            self.normalized_motor_efficiency_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.vfd_efficiency_curve_name = None
        else:
            self.vfd_efficiency_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.enduse_subcategory = None
        else:
            self.enduse_subcategory = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {'type': 'alpha', u'reference': u'Fans', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def maximum_flow_rate(self):
        """Get maximum_flow_rate

        Returns:
            float: the value of `maximum_flow_rate` or None if not set
        """
        return self._data["Maximum Flow Rate"]

    @maximum_flow_rate.setter
    def maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Maximum Flow Rate`
        
        {u'units': u'm3/s', u'autosizable': u'', u'minimum': '0.0', 'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_flow_rate`')
        self._data["Maximum Flow Rate"] = value

    @property
    def minimum_flow_rate(self):
        """Get minimum_flow_rate

        Returns:
            float: the value of `minimum_flow_rate` or None if not set
        """
        return self._data["Minimum Flow Rate"]

    @minimum_flow_rate.setter
    def minimum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Minimum Flow Rate`
        
        {u'units': u'm3/s', u'autosizable': u'', u'minimum': '0.0', 'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Minimum Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_flow_rate`')
        self._data["Minimum Flow Rate"] = value

    @property
    def fan_sizing_factor(self):
        """Get fan_sizing_factor

        Returns:
            float: the value of `fan_sizing_factor` or None if not set
        """
        return self._data["Fan Sizing Factor"]

    @fan_sizing_factor.setter
    def fan_sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `Fan Sizing Factor`
        Applied to specified or autosized max fan airflow
        
        {u'default': '1.0', u'note': [u'Applied to specified or autosized max fan airflow'], u'minimum': '1.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Fan Sizing Factor`
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_sizing_factor`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `fan_sizing_factor`')
        self._data["Fan Sizing Factor"] = value

    @property
    def fan_wheel_diameter(self):
        """Get fan_wheel_diameter

        Returns:
            float: the value of `fan_wheel_diameter` or None if not set
        """
        return self._data["Fan Wheel Diameter"]

    @fan_wheel_diameter.setter
    def fan_wheel_diameter(self, value=None):
        """  Corresponds to IDD Field `Fan Wheel Diameter`
        Diameter of wheel outer circumference
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Diameter of wheel outer circumference'], u'units': u'm', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Fan Wheel Diameter`
                Units: m
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_wheel_diameter`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fan_wheel_diameter`')
        self._data["Fan Wheel Diameter"] = value

    @property
    def fan_outlet_area(self):
        """Get fan_outlet_area

        Returns:
            float: the value of `fan_outlet_area` or None if not set
        """
        return self._data["Fan Outlet Area"]

    @fan_outlet_area.setter
    def fan_outlet_area(self, value=None):
        """  Corresponds to IDD Field `Fan Outlet Area`
        Area at fan outlet plane for determining discharge velocity pressure
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Area at fan outlet plane for determining discharge velocity pressure'], u'units': u'm2', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Fan Outlet Area`
                Units: m2
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fan_outlet_area`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fan_outlet_area`')
        self._data["Fan Outlet Area"] = value

    @property
    def maximum_fan_static_efficiency(self):
        """Get maximum_fan_static_efficiency

        Returns:
            float: the value of `maximum_fan_static_efficiency` or None if not set
        """
        return self._data["Maximum Fan Static Efficiency"]

    @maximum_fan_static_efficiency.setter
    def maximum_fan_static_efficiency(self, value=None):
        """  Corresponds to IDD Field `Maximum Fan Static Efficiency`
        Maximum ratio between power delivered to air and fan shaft input power
        Determined from fan performance data
        
        {'pytype': 'float', u'minimum>': '0.0', u'maximum': '1.0', u'required-field': True, u'note': [u'Maximum ratio between power delivered to air and fan shaft input power', u'Determined from fan performance data'], u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Fan Static Efficiency`
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_fan_static_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_fan_static_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_fan_static_efficiency`')
        self._data["Maximum Fan Static Efficiency"] = value

    @property
    def euler_number_at_maximum_fan_static_efficiency(self):
        """Get euler_number_at_maximum_fan_static_efficiency

        Returns:
            float: the value of `euler_number_at_maximum_fan_static_efficiency` or None if not set
        """
        return self._data["Euler Number at Maximum Fan Static Efficiency"]

    @euler_number_at_maximum_fan_static_efficiency.setter
    def euler_number_at_maximum_fan_static_efficiency(self, value=None):
        """  Corresponds to IDD Field `Euler Number at Maximum Fan Static Efficiency`
        Euler number (Eu) determined from fan performance data
        
        {u'note': [u'Euler number (Eu) determined from fan performance data'], u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Euler Number at Maximum Fan Static Efficiency`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `euler_number_at_maximum_fan_static_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `euler_number_at_maximum_fan_static_efficiency`')
        self._data["Euler Number at Maximum Fan Static Efficiency"] = value

    @property
    def maximum_dimensionless_fan_airflow(self):
        """Get maximum_dimensionless_fan_airflow

        Returns:
            float: the value of `maximum_dimensionless_fan_airflow` or None if not set
        """
        return self._data["Maximum Dimensionless Fan Airflow"]

    @maximum_dimensionless_fan_airflow.setter
    def maximum_dimensionless_fan_airflow(self, value=None):
        """  Corresponds to IDD Field `Maximum Dimensionless Fan Airflow`
        Corresponds to maximum ratio between fan airflow and
        fan shaft rotational speed for specified fan wheel diameter
        Determined from fan performance data
        
        {u'note': [u'Corresponds to maximum ratio between fan airflow and', u'fan shaft rotational speed for specified fan wheel diameter', u'Determined from fan performance data'], u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Dimensionless Fan Airflow`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_dimensionless_fan_airflow`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_dimensionless_fan_airflow`')
        self._data["Maximum Dimensionless Fan Airflow"] = value

    @property
    def motor_fan_pulley_ratio(self):
        """Get motor_fan_pulley_ratio

        Returns:
            float: the value of `motor_fan_pulley_ratio` or None if not set
        """
        return self._data["Motor Fan Pulley Ratio"]

    @motor_fan_pulley_ratio.setter
    def motor_fan_pulley_ratio(self, value=1.0 ):
        """  Corresponds to IDD Field `Motor Fan Pulley Ratio`
        Ratio of motor pulley diameter to fan pulley diameter
        
        {'pytype': 'float', u'default': '1.0', u'minimum>': '0.0', u'note': [u'Ratio of motor pulley diameter to fan pulley diameter'], u'autosizable': u'', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Motor Fan Pulley Ratio`
                Default value: 1.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `motor_fan_pulley_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `motor_fan_pulley_ratio`')
        self._data["Motor Fan Pulley Ratio"] = value

    @property
    def belt_maximum_torque(self):
        """Get belt_maximum_torque

        Returns:
            float: the value of `belt_maximum_torque` or None if not set
        """
        return self._data["Belt Maximum Torque"]

    @belt_maximum_torque.setter
    def belt_maximum_torque(self, value=None):
        """  Corresponds to IDD Field `Belt Maximum Torque`
        Maximum torque transmitted by belt
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Maximum torque transmitted by belt'], u'autosizable': u'', u'units': u'N-m', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Belt Maximum Torque`
                Units: N-m
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `belt_maximum_torque`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `belt_maximum_torque`')
        self._data["Belt Maximum Torque"] = value

    @property
    def belt_sizing_factor(self):
        """Get belt_sizing_factor

        Returns:
            float: the value of `belt_sizing_factor` or None if not set
        """
        return self._data["Belt Sizing Factor"]

    @belt_sizing_factor.setter
    def belt_sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `Belt Sizing Factor`
        Applied to specified or autosized max torque transmitted by belt
        
        {u'default': '1.0', u'note': [u'Applied to specified or autosized max torque transmitted by belt'], u'minimum': '1.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Belt Sizing Factor`
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `belt_sizing_factor`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `belt_sizing_factor`')
        self._data["Belt Sizing Factor"] = value

    @property
    def belt_fractional_torque_transition(self):
        """Get belt_fractional_torque_transition

        Returns:
            float: the value of `belt_fractional_torque_transition` or None if not set
        """
        return self._data["Belt Fractional Torque Transition"]

    @belt_fractional_torque_transition.setter
    def belt_fractional_torque_transition(self, value=0.167 ):
        """  Corresponds to IDD Field `Belt Fractional Torque Transition`
        Region 1 to 2 curve transition for belt normalized efficiency
        
        {'pytype': 'float', u'default': '0.167', u'maximum': '1.0', u'note': [u'Region 1 to 2 curve transition for belt normalized efficiency'], u'minimum': '0.0', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Belt Fractional Torque Transition`
                Default value: 0.167
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `belt_fractional_torque_transition`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `belt_fractional_torque_transition`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `belt_fractional_torque_transition`')
        self._data["Belt Fractional Torque Transition"] = value

    @property
    def motor_maximum_speed(self):
        """Get motor_maximum_speed

        Returns:
            float: the value of `motor_maximum_speed` or None if not set
        """
        return self._data["Motor Maximum Speed"]

    @motor_maximum_speed.setter
    def motor_maximum_speed(self, value=None):
        """  Corresponds to IDD Field `Motor Maximum Speed`
        Maximum rotational speed of fan motor shaft
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Maximum rotational speed of fan motor shaft'], u'units': u'rev/min', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Motor Maximum Speed`
                Units: rev/min
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `motor_maximum_speed`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `motor_maximum_speed`')
        self._data["Motor Maximum Speed"] = value

    @property
    def maximum_motor_output_power(self):
        """Get maximum_motor_output_power

        Returns:
            float: the value of `maximum_motor_output_power` or None if not set
        """
        return self._data["Maximum Motor Output Power"]

    @maximum_motor_output_power.setter
    def maximum_motor_output_power(self, value=None):
        """  Corresponds to IDD Field `Maximum Motor Output Power`
        Maximum power input to drive belt by motor
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Maximum power input to drive belt by motor'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Motor Output Power`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_motor_output_power`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_motor_output_power`')
        self._data["Maximum Motor Output Power"] = value

    @property
    def motor_sizing_factor(self):
        """Get motor_sizing_factor

        Returns:
            float: the value of `motor_sizing_factor` or None if not set
        """
        return self._data["Motor Sizing Factor"]

    @motor_sizing_factor.setter
    def motor_sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `Motor Sizing Factor`
        Applied to specified or autosized motor output power
        
        {u'default': '1.0', u'note': [u'Applied to specified or autosized motor output power'], u'minimum': '1.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Motor Sizing Factor`
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `motor_sizing_factor`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `motor_sizing_factor`')
        self._data["Motor Sizing Factor"] = value

    @property
    def motor_in_airstream_fraction(self):
        """Get motor_in_airstream_fraction

        Returns:
            float: the value of `motor_in_airstream_fraction` or None if not set
        """
        return self._data["Motor In Airstream Fraction"]

    @motor_in_airstream_fraction.setter
    def motor_in_airstream_fraction(self, value=1.0 ):
        """  Corresponds to IDD Field `Motor In Airstream Fraction`
        0.0 means motor outside air stream
        1.0 means motor inside air stream
        
        {'pytype': 'float', u'default': '1.0', u'maximum': '1.0', u'note': [u'0.0 means motor outside air stream', u'1.0 means motor inside air stream'], u'minimum': '0.0', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Motor In Airstream Fraction`
                Default value: 1.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `motor_in_airstream_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `motor_in_airstream_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `motor_in_airstream_fraction`')
        self._data["Motor In Airstream Fraction"] = value

    @property
    def vfd_efficiency_type(self):
        """Get vfd_efficiency_type

        Returns:
            str: the value of `vfd_efficiency_type` or None if not set
        """
        return self._data["VFD Efficiency Type"]

    @vfd_efficiency_type.setter
    def vfd_efficiency_type(self, value=None):
        """  Corresponds to IDD Field `VFD Efficiency Type`
        Efficiency depends on fraction of full-load motor speed
        Efficiency depends on  fraction of full-load motor input power
        If field blank, then assumes constant VFD efficiency (0.97)
        
        {u'note': [u'Efficiency depends on fraction of full-load motor speed', u'Efficiency depends on  fraction of full-load motor input power', u'If field blank, then assumes constant VFD efficiency (0.97)'], u'type': u'choice', u'key': [u'Speed', u'Power'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `VFD Efficiency Type`
                Accepted values are:
                      - Speed
                      - Power
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `vfd_efficiency_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `vfd_efficiency_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `vfd_efficiency_type`')
            vals = {}
            vals["speed"] = "Speed"
            vals["power"] = "Power"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `vfd_efficiency_type`'.format(value))
            value = vals[value_lower]
        self._data["VFD Efficiency Type"] = value

    @property
    def maximum_vfd_output_power(self):
        """Get maximum_vfd_output_power

        Returns:
            float: the value of `maximum_vfd_output_power` or None if not set
        """
        return self._data["Maximum VFD Output Power"]

    @maximum_vfd_output_power.setter
    def maximum_vfd_output_power(self, value=None):
        """  Corresponds to IDD Field `Maximum VFD Output Power`
        Maximum power input to motor by VFD
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Maximum power input to motor by VFD'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum VFD Output Power`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_vfd_output_power`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_vfd_output_power`')
        self._data["Maximum VFD Output Power"] = value

    @property
    def vfd_sizing_factor(self):
        """Get vfd_sizing_factor

        Returns:
            float: the value of `vfd_sizing_factor` or None if not set
        """
        return self._data["VFD Sizing Factor"]

    @vfd_sizing_factor.setter
    def vfd_sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `VFD Sizing Factor`
        Applied to specified or autosized VFD output power
        
        {u'default': '1.0', u'note': [u'Applied to specified or autosized VFD output power'], u'minimum': '1.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `VFD Sizing Factor`
                Default value: 1.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `vfd_sizing_factor`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `vfd_sizing_factor`')
        self._data["VFD Sizing Factor"] = value

    @property
    def fan_pressure_rise_curve_name(self):
        """Get fan_pressure_rise_curve_name

        Returns:
            str: the value of `fan_pressure_rise_curve_name` or None if not set
        """
        return self._data["Fan Pressure Rise Curve Name"]

    @fan_pressure_rise_curve_name.setter
    def fan_pressure_rise_curve_name(self, value=None):
        """  Corresponds to IDD Field `Fan Pressure Rise Curve Name`
        Table:OneIndependentVariable object can also be used
        Pressure rise depends on volumetric flow, system resistances,
        system leakage, and duct static pressure set point
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'Pressure rise depends on volumetric flow, system resistances,', u'system leakage, and duct static pressure set point'], u'type': u'object-list', u'object-list': u'FanPressureRiseCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Fan Pressure Rise Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `fan_pressure_rise_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fan_pressure_rise_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fan_pressure_rise_curve_name`')
        self._data["Fan Pressure Rise Curve Name"] = value

    @property
    def duct_static_pressure_reset_curve_name(self):
        """Get duct_static_pressure_reset_curve_name

        Returns:
            str: the value of `duct_static_pressure_reset_curve_name` or None if not set
        """
        return self._data["Duct Static Pressure Reset Curve Name"]

    @duct_static_pressure_reset_curve_name.setter
    def duct_static_pressure_reset_curve_name(self, value=None):
        """  Corresponds to IDD Field `Duct Static Pressure Reset Curve Name`
        Table:OneIndependentVariable object can also be used
        Function of fan volumetric flow
        Minimum and maximum fan airflows correspond respectively to
        minimum and maximum duct static pressure set points
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'Function of fan volumetric flow', u'Minimum and maximum fan airflows correspond respectively to', u'minimum and maximum duct static pressure set points'], u'type': u'object-list', u'object-list': u'LinearCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Duct Static Pressure Reset Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `duct_static_pressure_reset_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `duct_static_pressure_reset_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `duct_static_pressure_reset_curve_name`')
        self._data["Duct Static Pressure Reset Curve Name"] = value

    @property
    def normalized_fan_static_efficiency_curve_namenonstall_region(self):
        """Get normalized_fan_static_efficiency_curve_namenonstall_region

        Returns:
            str: the value of `normalized_fan_static_efficiency_curve_namenonstall_region` or None if not set
        """
        return self._data["Normalized Fan Static Efficiency Curve Name-Non-Stall Region"]

    @normalized_fan_static_efficiency_curve_namenonstall_region.setter
    def normalized_fan_static_efficiency_curve_namenonstall_region(self, value=None):
        """  Corresponds to IDD Field `Normalized Fan Static Efficiency Curve Name-Non-Stall Region`
        Table:OneIndependentVariable object can also be used
        xfan <= 0
        Curve should have maximum of 1.0
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'xfan <= 0', u'Curve should have maximum of 1.0'], u'type': u'object-list', u'object-list': u'ExponentialSkewNormalCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Normalized Fan Static Efficiency Curve Name-Non-Stall Region`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `normalized_fan_static_efficiency_curve_namenonstall_region`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `normalized_fan_static_efficiency_curve_namenonstall_region`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `normalized_fan_static_efficiency_curve_namenonstall_region`')
        self._data["Normalized Fan Static Efficiency Curve Name-Non-Stall Region"] = value

    @property
    def normalized_fan_static_efficiency_curve_namestall_region(self):
        """Get normalized_fan_static_efficiency_curve_namestall_region

        Returns:
            str: the value of `normalized_fan_static_efficiency_curve_namestall_region` or None if not set
        """
        return self._data["Normalized Fan Static Efficiency Curve Name-Stall Region"]

    @normalized_fan_static_efficiency_curve_namestall_region.setter
    def normalized_fan_static_efficiency_curve_namestall_region(self, value=None):
        """  Corresponds to IDD Field `Normalized Fan Static Efficiency Curve Name-Stall Region`
        Table:OneIndependentVariable object can also be used
        xfan > 0
        Curve should have maximum of 1.0
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'xfan > 0', u'Curve should have maximum of 1.0'], u'type': u'object-list', u'object-list': u'ExponentialSkewNormalCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Normalized Fan Static Efficiency Curve Name-Stall Region`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `normalized_fan_static_efficiency_curve_namestall_region`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `normalized_fan_static_efficiency_curve_namestall_region`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `normalized_fan_static_efficiency_curve_namestall_region`')
        self._data["Normalized Fan Static Efficiency Curve Name-Stall Region"] = value

    @property
    def normalized_dimensionless_airflow_curve_namenonstall_region(self):
        """Get normalized_dimensionless_airflow_curve_namenonstall_region

        Returns:
            str: the value of `normalized_dimensionless_airflow_curve_namenonstall_region` or None if not set
        """
        return self._data["Normalized Dimensionless Airflow Curve Name-Non-Stall Region"]

    @normalized_dimensionless_airflow_curve_namenonstall_region.setter
    def normalized_dimensionless_airflow_curve_namenonstall_region(self, value=None):
        """  Corresponds to IDD Field `Normalized Dimensionless Airflow Curve Name-Non-Stall Region`
        Table:OneIndependentVariable object can also be used
        xspd <= 0
        Curve should have maximum of 1.0
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'xspd <= 0', u'Curve should have maximum of 1.0'], u'type': u'object-list', u'object-list': u'SigmoidCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Normalized Dimensionless Airflow Curve Name-Non-Stall Region`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `normalized_dimensionless_airflow_curve_namenonstall_region`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `normalized_dimensionless_airflow_curve_namenonstall_region`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `normalized_dimensionless_airflow_curve_namenonstall_region`')
        self._data["Normalized Dimensionless Airflow Curve Name-Non-Stall Region"] = value

    @property
    def normalized_dimensionless_airflow_curve_namestall_region(self):
        """Get normalized_dimensionless_airflow_curve_namestall_region

        Returns:
            str: the value of `normalized_dimensionless_airflow_curve_namestall_region` or None if not set
        """
        return self._data["Normalized Dimensionless Airflow Curve Name-Stall Region"]

    @normalized_dimensionless_airflow_curve_namestall_region.setter
    def normalized_dimensionless_airflow_curve_namestall_region(self, value=None):
        """  Corresponds to IDD Field `Normalized Dimensionless Airflow Curve Name-Stall Region`
        Table:OneIndependentVariable object can also be used
        xspd > 0
        Curve should have maximum of 1.0
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'xspd > 0', u'Curve should have maximum of 1.0'], u'type': u'object-list', u'object-list': u'SigmoidCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Normalized Dimensionless Airflow Curve Name-Stall Region`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `normalized_dimensionless_airflow_curve_namestall_region`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `normalized_dimensionless_airflow_curve_namestall_region`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `normalized_dimensionless_airflow_curve_namestall_region`')
        self._data["Normalized Dimensionless Airflow Curve Name-Stall Region"] = value

    @property
    def maximum_belt_efficiency_curve_name(self):
        """Get maximum_belt_efficiency_curve_name

        Returns:
            str: the value of `maximum_belt_efficiency_curve_name` or None if not set
        """
        return self._data["Maximum Belt Efficiency Curve Name"]

    @maximum_belt_efficiency_curve_name.setter
    def maximum_belt_efficiency_curve_name(self, value=None):
        """  Corresponds to IDD Field `Maximum Belt Efficiency Curve Name`
        Table:OneIndependentVariable object can also be used
        Determines maximum fan drive belt efficiency in log space
        as function of xbelt,max
        Curve should have minimum of -4.6 and maximum of 0.0
        If field blank, assumes output of curve is always 1.0
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'Determines maximum fan drive belt efficiency in log space', u'as function of xbelt,max', u'Curve should have minimum of -4.6 and maximum of 0.0', u'If field blank, assumes output of curve is always 1.0'], u'type': u'object-list', u'object-list': u'QuarticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Maximum Belt Efficiency Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `maximum_belt_efficiency_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `maximum_belt_efficiency_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `maximum_belt_efficiency_curve_name`')
        self._data["Maximum Belt Efficiency Curve Name"] = value

    @property
    def normalized_belt_efficiency_curve_name_region_1(self):
        """Get normalized_belt_efficiency_curve_name_region_1

        Returns:
            str: the value of `normalized_belt_efficiency_curve_name_region_1` or None if not set
        """
        return self._data["Normalized Belt Efficiency Curve Name - Region 1"]

    @normalized_belt_efficiency_curve_name_region_1.setter
    def normalized_belt_efficiency_curve_name_region_1(self, value=None):
        """  Corresponds to IDD Field `Normalized Belt Efficiency Curve Name - Region 1`
        Table:OneIndependentVariable object can also be used
        Region 1 (0 <= xbelt < xbelt,trans)
        Curve should have minimum > 0.0 and maximum of 1.0
        If field blank, assumes output of curve is always 1.0 in Region 1
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'Region 1 (0 <= xbelt < xbelt,trans)', u'Curve should have minimum > 0.0 and maximum of 1.0', u'If field blank, assumes output of curve is always 1.0 in Region 1'], u'type': u'object-list', u'object-list': u'RectangularHyperbola2Curves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Normalized Belt Efficiency Curve Name - Region 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `normalized_belt_efficiency_curve_name_region_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `normalized_belt_efficiency_curve_name_region_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `normalized_belt_efficiency_curve_name_region_1`')
        self._data["Normalized Belt Efficiency Curve Name - Region 1"] = value

    @property
    def normalized_belt_efficiency_curve_name_region_2(self):
        """Get normalized_belt_efficiency_curve_name_region_2

        Returns:
            str: the value of `normalized_belt_efficiency_curve_name_region_2` or None if not set
        """
        return self._data["Normalized Belt Efficiency Curve Name - Region 2"]

    @normalized_belt_efficiency_curve_name_region_2.setter
    def normalized_belt_efficiency_curve_name_region_2(self, value=None):
        """  Corresponds to IDD Field `Normalized Belt Efficiency Curve Name - Region 2`
        Table:OneIndependentVariable object can also be used
        Region 2 (xbelt,trans <= xbelt <= 1)
        Curve should have minimum > 0.0 and maximum of 1.0
        If field blank, assumes output of curve is always 1.0 in Region 2
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'Region 2 (xbelt,trans <= xbelt <= 1)', u'Curve should have minimum > 0.0 and maximum of 1.0', u'If field blank, assumes output of curve is always 1.0 in Region 2'], u'type': u'object-list', u'object-list': u'ExponentialDecayCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Normalized Belt Efficiency Curve Name - Region 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `normalized_belt_efficiency_curve_name_region_2`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `normalized_belt_efficiency_curve_name_region_2`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `normalized_belt_efficiency_curve_name_region_2`')
        self._data["Normalized Belt Efficiency Curve Name - Region 2"] = value

    @property
    def normalized_belt_efficiency_curve_name_region_3(self):
        """Get normalized_belt_efficiency_curve_name_region_3

        Returns:
            str: the value of `normalized_belt_efficiency_curve_name_region_3` or None if not set
        """
        return self._data["Normalized Belt Efficiency Curve Name - Region 3"]

    @normalized_belt_efficiency_curve_name_region_3.setter
    def normalized_belt_efficiency_curve_name_region_3(self, value=None):
        """  Corresponds to IDD Field `Normalized Belt Efficiency Curve Name - Region 3`
        Table:OneIndependentVariable object can also be used
        Determines normalized drive belt efficiency Region 3 (xbelt > 1)
        Curve should have minimum > 0.0 and maximum of 1.0
        If field blank, assumes output of curve is always 1.0 in Region 3
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'Determines normalized drive belt efficiency Region 3 (xbelt > 1)', u'Curve should have minimum > 0.0 and maximum of 1.0', u'If field blank, assumes output of curve is always 1.0 in Region 3'], u'type': u'object-list', u'object-list': u'RectangularHyperbola2Curves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Normalized Belt Efficiency Curve Name - Region 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `normalized_belt_efficiency_curve_name_region_3`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `normalized_belt_efficiency_curve_name_region_3`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `normalized_belt_efficiency_curve_name_region_3`')
        self._data["Normalized Belt Efficiency Curve Name - Region 3"] = value

    @property
    def maximum_motor_efficiency_curve_name(self):
        """Get maximum_motor_efficiency_curve_name

        Returns:
            str: the value of `maximum_motor_efficiency_curve_name` or None if not set
        """
        return self._data["Maximum Motor Efficiency Curve Name"]

    @maximum_motor_efficiency_curve_name.setter
    def maximum_motor_efficiency_curve_name(self, value=None):
        """  Corresponds to IDD Field `Maximum Motor Efficiency Curve Name`
        Table:OneIndependentVariable object can also be used
        Curve should have minimum > 0.0 and maximum of 1.0
        If field blank, assumes output of curve is always 1.0
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'Curve should have minimum > 0.0 and maximum of 1.0', u'If field blank, assumes output of curve is always 1.0'], u'type': u'object-list', u'object-list': u'RectangularHyperbola1Curves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Maximum Motor Efficiency Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `maximum_motor_efficiency_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `maximum_motor_efficiency_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `maximum_motor_efficiency_curve_name`')
        self._data["Maximum Motor Efficiency Curve Name"] = value

    @property
    def normalized_motor_efficiency_curve_name(self):
        """Get normalized_motor_efficiency_curve_name

        Returns:
            str: the value of `normalized_motor_efficiency_curve_name` or None if not set
        """
        return self._data["Normalized Motor Efficiency Curve Name"]

    @normalized_motor_efficiency_curve_name.setter
    def normalized_motor_efficiency_curve_name(self, value=None):
        """  Corresponds to IDD Field `Normalized Motor Efficiency Curve Name`
        Table:OneIndependentVariable object can also be used
        Curve should have minimum > 0.0 and maximum of 1.0
        If field blank, assumes output of curve is always 1.0
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'Curve should have minimum > 0.0 and maximum of 1.0', u'If field blank, assumes output of curve is always 1.0'], u'type': u'object-list', u'object-list': u'RectangularHyperbola2Curves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Normalized Motor Efficiency Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `normalized_motor_efficiency_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `normalized_motor_efficiency_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `normalized_motor_efficiency_curve_name`')
        self._data["Normalized Motor Efficiency Curve Name"] = value

    @property
    def vfd_efficiency_curve_name(self):
        """Get vfd_efficiency_curve_name

        Returns:
            str: the value of `vfd_efficiency_curve_name` or None if not set
        """
        return self._data["VFD Efficiency Curve Name"]

    @vfd_efficiency_curve_name.setter
    def vfd_efficiency_curve_name(self, value=None):
        """  Corresponds to IDD Field `VFD Efficiency Curve Name`
        Table:OneIndependentVariable object can also be used
        Determines VFD efficiency as function of motor load or speed fraction
        Curve should have minimum > 0.0 and maximum of 1.0
        If field blank, assumes constant VFD efficiency (0.97)
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'Determines VFD efficiency as function of motor load or speed fraction', u'Curve should have minimum > 0.0 and maximum of 1.0', u'If field blank, assumes constant VFD efficiency (0.97)'], u'type': u'object-list', u'object-list': u'RectangularHyperbola2Curves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `VFD Efficiency Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `vfd_efficiency_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `vfd_efficiency_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `vfd_efficiency_curve_name`')
        self._data["VFD Efficiency Curve Name"] = value

    @property
    def enduse_subcategory(self):
        """Get enduse_subcategory

        Returns:
            str: the value of `enduse_subcategory` or None if not set
        """
        return self._data["End-Use Subcategory"]

    @enduse_subcategory.setter
    def enduse_subcategory(self, value="General"):
        """  Corresponds to IDD Field `End-Use Subcategory`
        
        {u'default': 'General', u'retaincase': u'', u'type': u'alpha', u'Group': u'Coils', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `End-Use Subcategory`
                Default value: General
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `enduse_subcategory`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `enduse_subcategory`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `enduse_subcategory`')
        self._data["End-Use Subcategory"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilCoolingWater(object):
    """ Corresponds to IDD object `Coil:Cooling:Water`
        Chilled water cooling coil, NTU-effectiveness model, with inputs for design entering
        and leaving conditionss.
    
    """
    internal_name = "Coil:Cooling:Water"
    field_count = 16
    required_fields = ["Name", "Water Inlet Node Name", "Water Outlet Node Name", "Air Inlet Node Name", "Air Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Cooling:Water`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Design Water Flow Rate"] = None
        self._data["Design Air Flow Rate"] = None
        self._data["Design Inlet Water Temperature"] = None
        self._data["Design Inlet Air Temperature"] = None
        self._data["Design Outlet Air Temperature"] = None
        self._data["Design Inlet Air Humidity Ratio"] = None
        self._data["Design Outlet Air Humidity Ratio"] = None
        self._data["Water Inlet Node Name"] = None
        self._data["Water Outlet Node Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Type of Analysis"] = None
        self._data["Heat Exchanger Configuration"] = None
        self._data["Condensate Collection Water Storage Tank Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_water_flow_rate = None
        else:
            self.design_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_air_flow_rate = None
        else:
            self.design_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_inlet_water_temperature = None
        else:
            self.design_inlet_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_inlet_air_temperature = None
        else:
            self.design_inlet_air_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_outlet_air_temperature = None
        else:
            self.design_outlet_air_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_inlet_air_humidity_ratio = None
        else:
            self.design_inlet_air_humidity_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_outlet_air_humidity_ratio = None
        else:
            self.design_outlet_air_humidity_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_inlet_node_name = None
        else:
            self.water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_outlet_node_name = None
        else:
            self.water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.type_of_analysis = None
        else:
            self.type_of_analysis = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_exchanger_configuration = None
        else:
            self.heat_exchanger_configuration = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condensate_collection_water_storage_tank_name = None
        else:
            self.condensate_collection_water_storage_tank_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {'type': 'alpha', u'reference': u'SimpleCoils', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def design_water_flow_rate(self):
        """Get design_water_flow_rate

        Returns:
            float: the value of `design_water_flow_rate` or None if not set
        """
        return self._data["Design Water Flow Rate"]

    @design_water_flow_rate.setter
    def design_water_flow_rate(self, value="autosize" ):
        """  Corresponds to IDD Field `Design Water Flow Rate`
        
        {'pytype': 'float', u'default': '"autosize"', u'ip-units': u'gal/min', u'autosizable': u'', u'minimum': '0.0', u'units': u'm3/s', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Design Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: "autosize"
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_water_flow_rate`')
        self._data["Design Water Flow Rate"] = value

    @property
    def design_air_flow_rate(self):
        """Get design_air_flow_rate

        Returns:
            float: the value of `design_air_flow_rate` or None if not set
        """
        return self._data["Design Air Flow Rate"]

    @design_air_flow_rate.setter
    def design_air_flow_rate(self, value="autosize" ):
        """  Corresponds to IDD Field `Design Air Flow Rate`
        
        {'pytype': 'float', u'default': '"autosize"', u'autosizable': u'', u'minimum': '0.0', u'units': u'm3/s', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Design Air Flow Rate`
                Units: m3/s
                Default value: "autosize"
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_air_flow_rate`')
        self._data["Design Air Flow Rate"] = value

    @property
    def design_inlet_water_temperature(self):
        """Get design_inlet_water_temperature

        Returns:
            float: the value of `design_inlet_water_temperature` or None if not set
        """
        return self._data["Design Inlet Water Temperature"]

    @design_inlet_water_temperature.setter
    def design_inlet_water_temperature(self, value="autosize" ):
        """  Corresponds to IDD Field `Design Inlet Water Temperature`
        
        {'pytype': 'float', u'default': '"autosize"', u'minimum>': '0.0', u'autosizable': u'', u'units': u'C', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Design Inlet Water Temperature`
                Units: C
                Default value: "autosize"
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_inlet_water_temperature`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_inlet_water_temperature`')
        self._data["Design Inlet Water Temperature"] = value

    @property
    def design_inlet_air_temperature(self):
        """Get design_inlet_air_temperature

        Returns:
            float: the value of `design_inlet_air_temperature` or None if not set
        """
        return self._data["Design Inlet Air Temperature"]

    @design_inlet_air_temperature.setter
    def design_inlet_air_temperature(self, value="autosize" ):
        """  Corresponds to IDD Field `Design Inlet Air Temperature`
        
        {'pytype': 'float', u'default': '"autosize"', u'minimum>': '0.0', u'autosizable': u'', u'units': u'C', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Design Inlet Air Temperature`
                Units: C
                Default value: "autosize"
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_inlet_air_temperature`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_inlet_air_temperature`')
        self._data["Design Inlet Air Temperature"] = value

    @property
    def design_outlet_air_temperature(self):
        """Get design_outlet_air_temperature

        Returns:
            float: the value of `design_outlet_air_temperature` or None if not set
        """
        return self._data["Design Outlet Air Temperature"]

    @design_outlet_air_temperature.setter
    def design_outlet_air_temperature(self, value="autosize" ):
        """  Corresponds to IDD Field `Design Outlet Air Temperature`
        
        {'pytype': 'float', u'default': '"autosize"', u'minimum>': '0.0', u'autosizable': u'', u'units': u'C', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Design Outlet Air Temperature`
                Units: C
                Default value: "autosize"
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_outlet_air_temperature`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_outlet_air_temperature`')
        self._data["Design Outlet Air Temperature"] = value

    @property
    def design_inlet_air_humidity_ratio(self):
        """Get design_inlet_air_humidity_ratio

        Returns:
            float: the value of `design_inlet_air_humidity_ratio` or None if not set
        """
        return self._data["Design Inlet Air Humidity Ratio"]

    @design_inlet_air_humidity_ratio.setter
    def design_inlet_air_humidity_ratio(self, value="autosize" ):
        """  Corresponds to IDD Field `Design Inlet Air Humidity Ratio`
        
        {'pytype': 'float', u'default': '"autosize"', u'autosizable': u'', u'minimum': '0.0', u'units': u'kgWater/kgDryAir', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Design Inlet Air Humidity Ratio`
                Units: kgWater/kgDryAir
                Default value: "autosize"
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_inlet_air_humidity_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_inlet_air_humidity_ratio`')
        self._data["Design Inlet Air Humidity Ratio"] = value

    @property
    def design_outlet_air_humidity_ratio(self):
        """Get design_outlet_air_humidity_ratio

        Returns:
            float: the value of `design_outlet_air_humidity_ratio` or None if not set
        """
        return self._data["Design Outlet Air Humidity Ratio"]

    @design_outlet_air_humidity_ratio.setter
    def design_outlet_air_humidity_ratio(self, value="autosize" ):
        """  Corresponds to IDD Field `Design Outlet Air Humidity Ratio`
        
        {'pytype': 'float', u'default': '"autosize"', u'autosizable': u'', u'minimum': '0.0', u'units': u'kgWater/kgDryAir', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Design Outlet Air Humidity Ratio`
                Units: kgWater/kgDryAir
                Default value: "autosize"
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_outlet_air_humidity_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `design_outlet_air_humidity_ratio`')
        self._data["Design Outlet Air Humidity Ratio"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name

        Returns:
            str: the value of `water_inlet_node_name` or None if not set
        """
        return self._data["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_inlet_node_name`')
        self._data["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name

        Returns:
            str: the value of `water_outlet_node_name` or None if not set
        """
        return self._data["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_outlet_node_name`')
        self._data["Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def type_of_analysis(self):
        """Get type_of_analysis

        Returns:
            str: the value of `type_of_analysis` or None if not set
        """
        return self._data["Type of Analysis"]

    @type_of_analysis.setter
    def type_of_analysis(self, value="SimpleAnalysis"):
        """  Corresponds to IDD Field `Type of Analysis`
        
        {u'default': u'SimpleAnalysis', u'type': u'choice', u'key': [u'SimpleAnalysis', u'DetailedAnalysis'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Type of Analysis`
                Accepted values are:
                      - SimpleAnalysis
                      - DetailedAnalysis
                Default value: SimpleAnalysis
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `type_of_analysis`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `type_of_analysis`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `type_of_analysis`')
            vals = {}
            vals["simpleanalysis"] = "SimpleAnalysis"
            vals["detailedanalysis"] = "DetailedAnalysis"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `type_of_analysis`'.format(value))
            value = vals[value_lower]
        self._data["Type of Analysis"] = value

    @property
    def heat_exchanger_configuration(self):
        """Get heat_exchanger_configuration

        Returns:
            str: the value of `heat_exchanger_configuration` or None if not set
        """
        return self._data["Heat Exchanger Configuration"]

    @heat_exchanger_configuration.setter
    def heat_exchanger_configuration(self, value="CounterFlow"):
        """  Corresponds to IDD Field `Heat Exchanger Configuration`
        
        {u'default': u'CounterFlow', u'type': u'choice', u'key': [u'CrossFlow', u'CounterFlow'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heat Exchanger Configuration`
                Accepted values are:
                      - CrossFlow
                      - CounterFlow
                Default value: CounterFlow
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_exchanger_configuration`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_exchanger_configuration`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_exchanger_configuration`')
            vals = {}
            vals["crossflow"] = "CrossFlow"
            vals["counterflow"] = "CounterFlow"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heat_exchanger_configuration`'.format(value))
            value = vals[value_lower]
        self._data["Heat Exchanger Configuration"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set
        """
        return self._data["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `Condensate Collection Water Storage Tank Name`
        
        {u'type': u'object-list', u'object-list': u'WaterStorageTankNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condensate Collection Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condensate_collection_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condensate_collection_water_storage_tank_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condensate_collection_water_storage_tank_name`')
        self._data["Condensate Collection Water Storage Tank Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilCoolingWaterDetailedGeometry(object):
    """ Corresponds to IDD object `Coil:Cooling:Water:DetailedGeometry`
        Chilled water cooling coil, detailed flat fin coil model for continuous plate fins,
        with inputs for detailed coil geometry specificatons.
    
    """
    internal_name = "Coil:Cooling:Water:DetailedGeometry"
    field_count = 23
    required_fields = ["Name", "Water Inlet Node Name", "Water Outlet Node Name", "Air Inlet Node Name", "Air Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Cooling:Water:DetailedGeometry`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Maximum Water Flow Rate"] = None
        self._data["Tube Outside Surface Area"] = None
        self._data["Total Tube Inside Area"] = None
        self._data["Fin Surface Area"] = None
        self._data["Minimum Airflow Area"] = None
        self._data["Coil Depth"] = None
        self._data["Fin Diameter"] = None
        self._data["Fin Thickness"] = None
        self._data["Tube Inside Diameter"] = None
        self._data["Tube Outside Diameter"] = None
        self._data["Tube Thermal Conductivity"] = None
        self._data["Fin Thermal Conductivity"] = None
        self._data["Fin Spacing"] = None
        self._data["Tube Depth Spacing"] = None
        self._data["Number of Tube Rows"] = None
        self._data["Number of Tubes per Row"] = None
        self._data["Water Inlet Node Name"] = None
        self._data["Water Outlet Node Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Condensate Collection Water Storage Tank Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_water_flow_rate = None
        else:
            self.maximum_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tube_outside_surface_area = None
        else:
            self.tube_outside_surface_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_tube_inside_area = None
        else:
            self.total_tube_inside_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fin_surface_area = None
        else:
            self.fin_surface_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_airflow_area = None
        else:
            self.minimum_airflow_area = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coil_depth = None
        else:
            self.coil_depth = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fin_diameter = None
        else:
            self.fin_diameter = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fin_thickness = None
        else:
            self.fin_thickness = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tube_inside_diameter = None
        else:
            self.tube_inside_diameter = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tube_outside_diameter = None
        else:
            self.tube_outside_diameter = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tube_thermal_conductivity = None
        else:
            self.tube_thermal_conductivity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fin_thermal_conductivity = None
        else:
            self.fin_thermal_conductivity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fin_spacing = None
        else:
            self.fin_spacing = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tube_depth_spacing = None
        else:
            self.tube_depth_spacing = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_tube_rows = None
        else:
            self.number_of_tube_rows = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_tubes_per_row = None
        else:
            self.number_of_tubes_per_row = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_inlet_node_name = None
        else:
            self.water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_outlet_node_name = None
        else:
            self.water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condensate_collection_water_storage_tank_name = None
        else:
            self.condensate_collection_water_storage_tank_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {'type': 'alpha', u'reference': u'AFNCoilNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def maximum_water_flow_rate(self):
        """Get maximum_water_flow_rate

        Returns:
            float: the value of `maximum_water_flow_rate` or None if not set
        """
        return self._data["Maximum Water Flow Rate"]

    @maximum_water_flow_rate.setter
    def maximum_water_flow_rate(self, value="autosize" ):
        """  Corresponds to IDD Field `Maximum Water Flow Rate`
        
        {'pytype': 'float', u'default': '"autosize"', u'ip-units': u'gal/min', u'autosizable': u'', u'units': u'm3/s', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Maximum Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_water_flow_rate`'.format(value))
        self._data["Maximum Water Flow Rate"] = value

    @property
    def tube_outside_surface_area(self):
        """Get tube_outside_surface_area

        Returns:
            float: the value of `tube_outside_surface_area` or None if not set
        """
        return self._data["Tube Outside Surface Area"]

    @tube_outside_surface_area.setter
    def tube_outside_surface_area(self, value="autosize" ):
        """  Corresponds to IDD Field `Tube Outside Surface Area`
        Tube Primary Surface Area
        
        {'pytype': 'float', u'default': '"autosize"', u'note': [u'Tube Primary Surface Area'], u'autosizable': u'', u'units': u'm2', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Tube Outside Surface Area`
                Units: m2
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tube_outside_surface_area`'.format(value))
        self._data["Tube Outside Surface Area"] = value

    @property
    def total_tube_inside_area(self):
        """Get total_tube_inside_area

        Returns:
            float: the value of `total_tube_inside_area` or None if not set
        """
        return self._data["Total Tube Inside Area"]

    @total_tube_inside_area.setter
    def total_tube_inside_area(self, value="autosize" ):
        """  Corresponds to IDD Field `Total Tube Inside Area`
        Total tube inside surface area
        
        {'pytype': 'float', u'default': '"autosize"', u'minimum>': '0.0', u'note': [u'Total tube inside surface area'], u'autosizable': u'', u'units': u'm2', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Total Tube Inside Area`
                Units: m2
                Default value: "autosize"
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_tube_inside_area`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `total_tube_inside_area`')
        self._data["Total Tube Inside Area"] = value

    @property
    def fin_surface_area(self):
        """Get fin_surface_area

        Returns:
            float: the value of `fin_surface_area` or None if not set
        """
        return self._data["Fin Surface Area"]

    @fin_surface_area.setter
    def fin_surface_area(self, value="autosize" ):
        """  Corresponds to IDD Field `Fin Surface Area`
        
        {u'units': u'm2', u'default': '"autosize"', u'autosizable': u'', 'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Fin Surface Area`
                Units: m2
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fin_surface_area`'.format(value))
        self._data["Fin Surface Area"] = value

    @property
    def minimum_airflow_area(self):
        """Get minimum_airflow_area

        Returns:
            float: the value of `minimum_airflow_area` or None if not set
        """
        return self._data["Minimum Airflow Area"]

    @minimum_airflow_area.setter
    def minimum_airflow_area(self, value="autosize" ):
        """  Corresponds to IDD Field `Minimum Airflow Area`
        
        {'pytype': 'float', u'default': '"autosize"', u'minimum>': '0.0', u'autosizable': u'', u'units': u'm2', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Minimum Airflow Area`
                Units: m2
                Default value: "autosize"
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_airflow_area`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `minimum_airflow_area`')
        self._data["Minimum Airflow Area"] = value

    @property
    def coil_depth(self):
        """Get coil_depth

        Returns:
            float: the value of `coil_depth` or None if not set
        """
        return self._data["Coil Depth"]

    @coil_depth.setter
    def coil_depth(self, value="autosize" ):
        """  Corresponds to IDD Field `Coil Depth`
        
        {'pytype': 'float', u'default': '"autosize"', u'minimum>': '0.0', u'ip-units': u'in', u'autosizable': u'', u'units': u'm', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Coil Depth`
                Units: m
                IP-Units: in
                Default value: "autosize"
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `coil_depth`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `coil_depth`')
        self._data["Coil Depth"] = value

    @property
    def fin_diameter(self):
        """Get fin_diameter

        Returns:
            float: the value of `fin_diameter` or None if not set
        """
        return self._data["Fin Diameter"]

    @fin_diameter.setter
    def fin_diameter(self, value="autosize" ):
        """  Corresponds to IDD Field `Fin Diameter`
        Fin diameter or the coil height
        
        {'pytype': 'float', u'default': '"autosize"', u'minimum>': '0.0', u'note': [u'Fin diameter or the coil height'], u'ip-units': u'in', u'autosizable': u'', u'units': u'm', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Fin Diameter`
                Units: m
                IP-Units: in
                Default value: "autosize"
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fin_diameter`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fin_diameter`')
        self._data["Fin Diameter"] = value

    @property
    def fin_thickness(self):
        """Get fin_thickness

        Returns:
            float: the value of `fin_thickness` or None if not set
        """
        return self._data["Fin Thickness"]

    @fin_thickness.setter
    def fin_thickness(self, value=0.0015 ):
        """  Corresponds to IDD Field `Fin Thickness`
        
        {'pytype': 'float', u'default': '0.0015', u'minimum>': '0.0', u'ip-units': u'in', u'units': u'm', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Fin Thickness`
                Units: m
                IP-Units: in
                Default value: 0.0015
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fin_thickness`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fin_thickness`')
        self._data["Fin Thickness"] = value

    @property
    def tube_inside_diameter(self):
        """Get tube_inside_diameter

        Returns:
            float: the value of `tube_inside_diameter` or None if not set
        """
        return self._data["Tube Inside Diameter"]

    @tube_inside_diameter.setter
    def tube_inside_diameter(self, value=0.01445 ):
        """  Corresponds to IDD Field `Tube Inside Diameter`
        Inner diameter of tubes
        
        {'pytype': 'float', u'default': '0.01445', u'minimum>': '0.0', u'note': [u'Inner diameter of tubes'], u'ip-units': u'in', u'units': u'm', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Tube Inside Diameter`
                Units: m
                IP-Units: in
                Default value: 0.01445
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tube_inside_diameter`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `tube_inside_diameter`')
        self._data["Tube Inside Diameter"] = value

    @property
    def tube_outside_diameter(self):
        """Get tube_outside_diameter

        Returns:
            float: the value of `tube_outside_diameter` or None if not set
        """
        return self._data["Tube Outside Diameter"]

    @tube_outside_diameter.setter
    def tube_outside_diameter(self, value=0.0159 ):
        """  Corresponds to IDD Field `Tube Outside Diameter`
        Outer diameter of tubes
        
        {'pytype': 'float', u'default': '0.0159', u'minimum>': '0.0', u'note': [u'Outer diameter of tubes'], u'ip-units': u'in', u'units': u'm', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Tube Outside Diameter`
                Units: m
                IP-Units: in
                Default value: 0.0159
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tube_outside_diameter`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `tube_outside_diameter`')
        self._data["Tube Outside Diameter"] = value

    @property
    def tube_thermal_conductivity(self):
        """Get tube_thermal_conductivity

        Returns:
            float: the value of `tube_thermal_conductivity` or None if not set
        """
        return self._data["Tube Thermal Conductivity"]

    @tube_thermal_conductivity.setter
    def tube_thermal_conductivity(self, value=386.0 ):
        """  Corresponds to IDD Field `Tube Thermal Conductivity`
        
        {u'units': u'W/m-K', u'default': '386.0', u'minimum': '1.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Tube Thermal Conductivity`
                Units: W/m-K
                Default value: 386.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tube_thermal_conductivity`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `tube_thermal_conductivity`')
        self._data["Tube Thermal Conductivity"] = value

    @property
    def fin_thermal_conductivity(self):
        """Get fin_thermal_conductivity

        Returns:
            float: the value of `fin_thermal_conductivity` or None if not set
        """
        return self._data["Fin Thermal Conductivity"]

    @fin_thermal_conductivity.setter
    def fin_thermal_conductivity(self, value=204.0 ):
        """  Corresponds to IDD Field `Fin Thermal Conductivity`
        
        {u'units': u'W/m-K', u'default': '204.0', u'minimum': '1.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Fin Thermal Conductivity`
                Units: W/m-K
                Default value: 204.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fin_thermal_conductivity`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `fin_thermal_conductivity`')
        self._data["Fin Thermal Conductivity"] = value

    @property
    def fin_spacing(self):
        """Get fin_spacing

        Returns:
            float: the value of `fin_spacing` or None if not set
        """
        return self._data["Fin Spacing"]

    @fin_spacing.setter
    def fin_spacing(self, value=0.0018 ):
        """  Corresponds to IDD Field `Fin Spacing`
        Fin spacing or distance
        
        {'pytype': 'float', u'default': '0.0018', u'minimum>': '0.0', u'note': [u'Fin spacing or distance'], u'ip-units': u'in', u'units': u'm', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Fin Spacing`
                Units: m
                IP-Units: in
                Default value: 0.0018
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fin_spacing`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fin_spacing`')
        self._data["Fin Spacing"] = value

    @property
    def tube_depth_spacing(self):
        """Get tube_depth_spacing

        Returns:
            float: the value of `tube_depth_spacing` or None if not set
        """
        return self._data["Tube Depth Spacing"]

    @tube_depth_spacing.setter
    def tube_depth_spacing(self, value=0.026 ):
        """  Corresponds to IDD Field `Tube Depth Spacing`
        
        {'pytype': 'float', u'default': '0.026', u'minimum>': '0.0', u'ip-units': u'in', u'units': u'm', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Tube Depth Spacing`
                Units: m
                IP-Units: in
                Default value: 0.026
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `tube_depth_spacing`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `tube_depth_spacing`')
        self._data["Tube Depth Spacing"] = value

    @property
    def number_of_tube_rows(self):
        """Get number_of_tube_rows

        Returns:
            float: the value of `number_of_tube_rows` or None if not set
        """
        return self._data["Number of Tube Rows"]

    @number_of_tube_rows.setter
    def number_of_tube_rows(self, value=4.0 ):
        """  Corresponds to IDD Field `Number of Tube Rows`
        
        {u'default': '4.0', u'minimum>': '0.0', 'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Number of Tube Rows`
                Default value: 4.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_tube_rows`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `number_of_tube_rows`')
        self._data["Number of Tube Rows"] = value

    @property
    def number_of_tubes_per_row(self):
        """Get number_of_tubes_per_row

        Returns:
            float: the value of `number_of_tubes_per_row` or None if not set
        """
        return self._data["Number of Tubes per Row"]

    @number_of_tubes_per_row.setter
    def number_of_tubes_per_row(self, value="autosize" ):
        """  Corresponds to IDD Field `Number of Tubes per Row`
        
        {u'default': '"autosize"', u'autosizable': u'', 'type': 'real', u'minimum>': '0.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Number of Tubes per Row`
                Default value: "autosize"
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `number_of_tubes_per_row`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `number_of_tubes_per_row`')
        self._data["Number of Tubes per Row"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name

        Returns:
            str: the value of `water_inlet_node_name` or None if not set
        """
        return self._data["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_inlet_node_name`')
        self._data["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name

        Returns:
            str: the value of `water_outlet_node_name` or None if not set
        """
        return self._data["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_outlet_node_name`')
        self._data["Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set
        """
        return self._data["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `Condensate Collection Water Storage Tank Name`
        
        {u'type': u'object-list', u'object-list': u'WaterStorageTankNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condensate Collection Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condensate_collection_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condensate_collection_water_storage_tank_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condensate_collection_water_storage_tank_name`')
        self._data["Condensate Collection Water Storage Tank Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilCoolingDxSingleSpeed(object):
    """ Corresponds to IDD object `Coil:Cooling:DX:SingleSpeed`
        Direct expansion (DX) cooling coil and condensing unit (includes electric compressor
        and condenser fan), single-speed. Optional inputs for moisture evaporation from wet
        coil when compressor cycles off with continuous fan operation.
    
    """
    internal_name = "Coil:Cooling:DX:SingleSpeed"
    field_count = 32
    required_fields = ["Name", "Gross Rated Total Cooling Capacity", "Gross Rated Sensible Heat Ratio", "Rated Air Flow Rate", "Air Inlet Node Name", "Air Outlet Node Name", "Total Cooling Capacity Function of Temperature Curve Name", "Total Cooling Capacity Function of Flow Fraction Curve Name", "Energy Input Ratio Function of Temperature Curve Name", "Energy Input Ratio Function of Flow Fraction Curve Name", "Part Load Fraction Correlation Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Cooling:DX:SingleSpeed`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Gross Rated Total Cooling Capacity"] = None
        self._data["Gross Rated Sensible Heat Ratio"] = None
        self._data["Gross Rated Cooling COP"] = None
        self._data["Rated Air Flow Rate"] = None
        self._data["Rated Evaporator Fan Power Per Volume Flow Rate"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Total Cooling Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Part Load Fraction Correlation Curve Name"] = None
        self._data["Nominal Time for Condensate Removal to Begin"] = None
        self._data["Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"] = None
        self._data["Maximum Cycling Rate"] = None
        self._data["Latent Capacity Time Constant"] = None
        self._data["Condenser Air Inlet Node Name"] = None
        self._data["Condenser Type"] = None
        self._data["Evaporative Condenser Effectiveness"] = None
        self._data["Evaporative Condenser Air Flow Rate"] = None
        self._data["Evaporative Condenser Pump Rated Power Consumption"] = None
        self._data["Crankcase Heater Capacity"] = None
        self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = None
        self._data["Supply Water Storage Tank Name"] = None
        self._data["Condensate Collection Water Storage Tank Name"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Operating Schedule Name"] = None
        self._data["Sensible Heat Ratio Function of Temperature Curve Name"] = None
        self._data["Sensible Heat Ratio Function of Flow Fraction Curve Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_total_cooling_capacity = None
        else:
            self.gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_sensible_heat_ratio = None
        else:
            self.gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_cooling_cop = None
        else:
            self.gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_air_flow_rate = None
        else:
            self.rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_evaporator_fan_power_per_volume_flow_rate = None
        else:
            self.rated_evaporator_fan_power_per_volume_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_cooling_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.total_cooling_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.part_load_fraction_correlation_curve_name = None
        else:
            self.part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_time_for_condensate_removal_to_begin = None
        else:
            self.nominal_time_for_condensate_removal_to_begin = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity = None
        else:
            self.ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_cycling_rate = None
        else:
            self.maximum_cycling_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.latent_capacity_time_constant = None
        else:
            self.latent_capacity_time_constant = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_air_inlet_node_name = None
        else:
            self.condenser_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.evaporative_condenser_effectiveness = None
        else:
            self.evaporative_condenser_effectiveness = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.evaporative_condenser_air_flow_rate = None
        else:
            self.evaporative_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.evaporative_condenser_pump_rated_power_consumption = None
        else:
            self.evaporative_condenser_pump_rated_power_consumption = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.crankcase_heater_capacity = None
        else:
            self.crankcase_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.supply_water_storage_tank_name = None
        else:
            self.supply_water_storage_tank_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condensate_collection_water_storage_tank_name = None
        else:
            self.condensate_collection_water_storage_tank_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_operating_schedule_name = None
        else:
            self.basin_heater_operating_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensible_heat_ratio_function_of_temperature_curve_name = None
        else:
            self.sensible_heat_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensible_heat_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.sensible_heat_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'AFNCoilNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def gross_rated_total_cooling_capacity(self):
        """Get gross_rated_total_cooling_capacity

        Returns:
            float: the value of `gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Gross Rated Total Cooling Capacity"]

    @gross_rated_total_cooling_capacity.setter
    def gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        gross capacity excluding supply air fan heat
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat', u'gross capacity excluding supply air fan heat', u'rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and', u'air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Total Cooling Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_total_cooling_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_total_cooling_capacity`')
        self._data["Gross Rated Total Cooling Capacity"] = value

    @property
    def gross_rated_sensible_heat_ratio(self):
        """Get gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Gross Rated Sensible Heat Ratio"]

    @gross_rated_sensible_heat_ratio.setter
    def gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Gross Rated Sensible Heat Ratio`
        Rated sensible heat ratio (gross sensible capacity/gross total capacity)
        sensible and total capacities do not include supply fan heat
        
        {'pytype': 'float', u'maximum': '1.0', u'required-field': True, u'note': [u'Rated sensible heat ratio (gross sensible capacity/gross total capacity)', u'sensible and total capacities do not include supply fan heat'], u'autosizable': u'', u'minimum': '0.5', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Sensible Heat Ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `gross_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `gross_rated_sensible_heat_ratio`')
        self._data["Gross Rated Sensible Heat Ratio"] = value

    @property
    def gross_rated_cooling_cop(self):
        """Get gross_rated_cooling_cop

        Returns:
            float: the value of `gross_rated_cooling_cop` or None if not set
        """
        return self._data["Gross Rated Cooling COP"]

    @gross_rated_cooling_cop.setter
    def gross_rated_cooling_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `Gross Rated Cooling COP`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply fan heat or supply fan electrical energy input
        
        {'pytype': 'float', u'default': '3.0', u'minimum>': '0.0', u'note': [u'Gross cooling capacity divided by power input to the compressor and outdoor fan,', u'does not include supply fan heat or supply fan electrical energy input'], u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_cooling_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_cooling_cop`')
        self._data["Gross Rated Cooling COP"] = value

    @property
    def rated_air_flow_rate(self):
        """Get rated_air_flow_rate

        Returns:
            float: the value of `rated_air_flow_rate` or None if not set
        """
        return self._data["Rated Air Flow Rate"]

    @rated_air_flow_rate.setter
    def rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Air Flow Rate`
        Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP', u'should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_air_flow_rate`')
        self._data["Rated Air Flow Rate"] = value

    @property
    def rated_evaporator_fan_power_per_volume_flow_rate(self):
        """Get rated_evaporator_fan_power_per_volume_flow_rate

        Returns:
            float: the value of `rated_evaporator_fan_power_per_volume_flow_rate` or None if not set
        """
        return self._data["Rated Evaporator Fan Power Per Volume Flow Rate"]

    @rated_evaporator_fan_power_per_volume_flow_rate.setter
    def rated_evaporator_fan_power_per_volume_flow_rate(self, value=773.3 ):
        """  Corresponds to IDD Field `Rated Evaporator Fan Power Per Volume Flow Rate`
        Enter the evaporator fan power per air volume flow rate at the rated test conditions.
        The test conditions vary external static pressure based on total cooling capacity.
        This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), Energy
        Efficiency Ratio (EER), Integrated Energy Efficiency Ratio (IEER), and the Standard Rating
        (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file.  This value is not
        used for modeling the evaporator fan during simulations.
        
        {'pytype': 'float', u'default': '773.3', u'maximum': '1250.0', u'note': [u'Enter the evaporator fan power per air volume flow rate at the rated test conditions.', u'The test conditions vary external static pressure based on total cooling capacity.', u'This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), Energy', u'Efficiency Ratio (EER), Integrated Energy Efficiency Ratio (IEER), and the Standard Rating', u'(Net) Cooling Capacity which will be outputs in the EnergyPlus eio file.  This value is not', u'used for modeling the evaporator fan during simulations.'], u'minimum': '0.0', u'units': u'W/(m3/s)', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Evaporator Fan Power Per Volume Flow Rate`
                Units: W/(m3/s)
                Default value: 773.3
                value >= 0.0
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_evaporator_fan_power_per_volume_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_evaporator_fan_power_per_volume_flow_rate`')
            if value > 1250.0:
                raise ValueError('value need to be smaller 1250.0 '
                                 'for field `rated_evaporator_fan_power_per_volume_flow_rate`')
        self._data["Rated Evaporator Fan Power Per Volume Flow Rate"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Total Cooling Capacity Function of Temperature Curve Name"]

    @total_cooling_capacity_function_of_temperature_curve_name.setter
    def total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariable object can also be used', u'curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb', u'wb = entering wet-bulb temperature (C)', u'edb = dry-bulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def total_cooling_capacity_function_of_flow_fraction_curve_name(self):
        """Get total_cooling_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `total_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Total Cooling Capacity Function of Flow Fraction Curve Name"]

    @total_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def total_cooling_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Total Cooling Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = Fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = Fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Total Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `total_cooling_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `total_cooling_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `total_cooling_capacity_function_of_flow_fraction_curve_name`')
        self._data["Total Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def energy_input_ratio_function_of_temperature_curve_name(self):
        """Get energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Energy Input Ratio Function of Temperature Curve Name"]

    @energy_input_ratio_function_of_temperature_curve_name.setter
    def energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be sued
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariable object can also be sued', u'curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb', u'wb = entering wet-bulb temperature (C)', u'edb = dry-bulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Energy Input Ratio Function of Flow Fraction Curve Name"]

    @energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = Fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = Fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def part_load_fraction_correlation_curve_name(self):
        """Get part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Part Load Fraction Correlation Curve Name"]

    @part_load_fraction_correlation_curve_name.setter
    def part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (cooling load/steady state capacity)
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLR = part load ratio (cooling load/steady state capacity)'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `part_load_fraction_correlation_curve_name`')
        self._data["Part Load Fraction Correlation Curve Name"] = value

    @property
    def nominal_time_for_condensate_removal_to_begin(self):
        """Get nominal_time_for_condensate_removal_to_begin

        Returns:
            float: the value of `nominal_time_for_condensate_removal_to_begin` or None if not set
        """
        return self._data["Nominal Time for Condensate Removal to Begin"]

    @nominal_time_for_condensate_removal_to_begin.setter
    def nominal_time_for_condensate_removal_to_begin(self, value=0.0 ):
        """  Corresponds to IDD Field `Nominal Time for Condensate Removal to Begin`
        The nominal time for condensate to begin leaving the coil's condensate
        drain line at the coil's rated air flow rate and temperature conditions.
        Nominal time is equal to the ratio of the energy of the coil's maximum
        condensate holding capacity (J) to the coil's steady state latent capacity (W).
        Suggested value is 1000; zero value means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '3000.0', u'note': [u"The nominal time for condensate to begin leaving the coil's condensate", u"drain line at the coil's rated air flow rate and temperature conditions.", u"Nominal time is equal to the ratio of the energy of the coil's maximum", u"condensate holding capacity (J) to the coil's steady state latent capacity (W).", u'Suggested value is 1000; zero value means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u's', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Nominal Time for Condensate Removal to Begin`
                Units: s
                Default value: 0.0
                value >= 0.0
                value <= 3000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_time_for_condensate_removal_to_begin`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_time_for_condensate_removal_to_begin`')
            if value > 3000.0:
                raise ValueError('value need to be smaller 3000.0 '
                                 'for field `nominal_time_for_condensate_removal_to_begin`')
        self._data["Nominal Time for Condensate Removal to Begin"] = value

    @property
    def ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(self):
        """Get ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity

        Returns:
            float: the value of `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity` or None if not set
        """
        return self._data["Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"]

    @ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity.setter
    def ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
        Ratio of the initial moisture evaporation rate from the cooling coil (when
        the compressor first turns off) and the coil's steady state latent capacity
        at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value
        means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '5.0', u'note': [u'Ratio of the initial moisture evaporation rate from the cooling coil (when', u"the compressor first turns off) and the coil's steady state latent capacity", u'at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value', u'means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`')
        self._data["Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"] = value

    @property
    def maximum_cycling_rate(self):
        """Get maximum_cycling_rate

        Returns:
            float: the value of `maximum_cycling_rate` or None if not set
        """
        return self._data["Maximum Cycling Rate"]

    @maximum_cycling_rate.setter
    def maximum_cycling_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `Maximum Cycling Rate`
        The maximum on-off cycling Rate for the compressor, which occurs at 50% run time
        fraction. Suggested value is 3; zero value means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '5.0', u'note': [u'The maximum on-off cycling Rate for the compressor, which occurs at 50% run time', u'fraction. Suggested value is 3; zero value means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u'cycles/hr', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Cycling Rate`
                Units: cycles/hr
                Default value: 0.0
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_cycling_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_cycling_rate`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `maximum_cycling_rate`')
        self._data["Maximum Cycling Rate"] = value

    @property
    def latent_capacity_time_constant(self):
        """Get latent_capacity_time_constant

        Returns:
            float: the value of `latent_capacity_time_constant` or None if not set
        """
        return self._data["Latent Capacity Time Constant"]

    @latent_capacity_time_constant.setter
    def latent_capacity_time_constant(self, value=0.0 ):
        """  Corresponds to IDD Field `Latent Capacity Time Constant`
        Time constant for the cooling coil's latent capacity to reach steady state after
        startup. Suggested value is 45; zero value means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '500.0', u'note': [u"Time constant for the cooling coil's latent capacity to reach steady state after", u'startup. Suggested value is 45; zero value means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u's', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Latent Capacity Time Constant`
                Units: s
                Default value: 0.0
                value >= 0.0
                value <= 500.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `latent_capacity_time_constant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `latent_capacity_time_constant`')
            if value > 500.0:
                raise ValueError('value need to be smaller 500.0 '
                                 'for field `latent_capacity_time_constant`')
        self._data["Latent Capacity Time Constant"] = value

    @property
    def condenser_air_inlet_node_name(self):
        """Get condenser_air_inlet_node_name

        Returns:
            str: the value of `condenser_air_inlet_node_name` or None if not set
        """
        return self._data["Condenser Air Inlet Node Name"]

    @condenser_air_inlet_node_name.setter
    def condenser_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Air Inlet Node Name`
        Enter the name of an outdoor air node. This node name is also specified in
        an OutdoorAir:Node or OutdoorAir:NodeList object.
        
        {u'note': [u'Enter the name of an outdoor air node. This node name is also specified in', u'an OutdoorAir:Node or OutdoorAir:NodeList object.'], u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_air_inlet_node_name`')
        self._data["Condenser Air Inlet Node Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """  Corresponds to IDD Field `Condenser Type`
        
        {u'default': u'AirCooled', u'type': u'choice', u'key': [u'AirCooled', u'EvaporativelyCooled'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Type`
                Accepted values are:
                      - AirCooled
                      - EvaporativelyCooled
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_type`')
            vals = {}
            vals["aircooled"] = "AirCooled"
            vals["evaporativelycooled"] = "EvaporativelyCooled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condenser_type`'.format(value))
            value = vals[value_lower]
        self._data["Condenser Type"] = value

    @property
    def evaporative_condenser_effectiveness(self):
        """Get evaporative_condenser_effectiveness

        Returns:
            float: the value of `evaporative_condenser_effectiveness` or None if not set
        """
        return self._data["Evaporative Condenser Effectiveness"]

    @evaporative_condenser_effectiveness.setter
    def evaporative_condenser_effectiveness(self, value=0.9 ):
        """  Corresponds to IDD Field `Evaporative Condenser Effectiveness`
        
        {'pytype': 'float', u'default': '0.9', u'maximum': '1.0', u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporative_condenser_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `evaporative_condenser_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `evaporative_condenser_effectiveness`')
        self._data["Evaporative Condenser Effectiveness"] = value

    @property
    def evaporative_condenser_air_flow_rate(self):
        """Get evaporative_condenser_air_flow_rate

        Returns:
            float: the value of `evaporative_condenser_air_flow_rate` or None if not set
        """
        return self._data["Evaporative Condenser Air Flow Rate"]

    @evaporative_condenser_air_flow_rate.setter
    def evaporative_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Evaporative Condenser Air Flow Rate`
        Used to calculate evaporative condenser water use
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Used to calculate evaporative condenser water use'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Evaporative Condenser Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporative_condenser_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `evaporative_condenser_air_flow_rate`')
        self._data["Evaporative Condenser Air Flow Rate"] = value

    @property
    def evaporative_condenser_pump_rated_power_consumption(self):
        """Get evaporative_condenser_pump_rated_power_consumption

        Returns:
            float: the value of `evaporative_condenser_pump_rated_power_consumption` or None if not set
        """
        return self._data["Evaporative Condenser Pump Rated Power Consumption"]

    @evaporative_condenser_pump_rated_power_consumption.setter
    def evaporative_condenser_pump_rated_power_consumption(self, value=0.0 ):
        """  Corresponds to IDD Field `Evaporative Condenser Pump Rated Power Consumption`
        Rated power consumed by the evaporative condenser's water pump
        
        {'pytype': 'float', u'default': '0.0', u'note': [u"Rated power consumed by the evaporative condenser's water pump"], u'autosizable': u'', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Evaporative Condenser Pump Rated Power Consumption`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporative_condenser_pump_rated_power_consumption`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `evaporative_condenser_pump_rated_power_consumption`')
        self._data["Evaporative Condenser Pump Rated Power Consumption"] = value

    @property
    def crankcase_heater_capacity(self):
        """Get crankcase_heater_capacity

        Returns:
            float: the value of `crankcase_heater_capacity` or None if not set
        """
        return self._data["Crankcase Heater Capacity"]

    @crankcase_heater_capacity.setter
    def crankcase_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Crankcase Heater Capacity`
        
        {'pytype': 'float', u'default': '0.0', u'ip-units': u'W', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Crankcase Heater Capacity`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `crankcase_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `crankcase_heater_capacity`')
        self._data["Crankcase Heater Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(self, value=10.0 ):
        """  Corresponds to IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
        
        {u'default': '10.0', u'units': u'C', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
                Units: C
                Default value: 10.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation`')
        self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = value

    @property
    def supply_water_storage_tank_name(self):
        """Get supply_water_storage_tank_name

        Returns:
            str: the value of `supply_water_storage_tank_name` or None if not set
        """
        return self._data["Supply Water Storage Tank Name"]

    @supply_water_storage_tank_name.setter
    def supply_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `Supply Water Storage Tank Name`
        
        {u'type': u'object-list', u'object-list': u'WaterStorageTankNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Supply Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_water_storage_tank_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `supply_water_storage_tank_name`')
        self._data["Supply Water Storage Tank Name"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set
        """
        return self._data["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `Condensate Collection Water Storage Tank Name`
        
        {u'type': u'object-list', u'object-list': u'WaterStorageTankNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condensate Collection Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condensate_collection_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condensate_collection_water_storage_tank_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condensate_collection_water_storage_tank_name`')
        self._data["Condensate Collection Water Storage Tank Name"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the DX coil is off.
        
        {'pytype': 'float', u'default': '0.0', u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled and for periods', u'when the basin heater is available (field Basin Heater Operating Schedule Name).', u'For this situation, the heater maintains the basin water temperature at the basin heater', u'setpoint temperature when the outdoor air temperature falls below the setpoint temperature.', u'The basin heater only operates when the DX coil is off.'], u'minimum': '0.0', u'units': u'W/K', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')
        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0 ):
        """  Corresponds to IDD Field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.
        
        {'pytype': 'float', u'default': '2.0', u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled.', u'Enter the outdoor dry-bulb temperature when the basin heater turns on.'], u'minimum': '2.0', u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')
        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self._data["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Basin Heater Operating Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.
        
        {u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled.', u'Schedule values greater than 0 allow the basin heater to operate whenever the outdoor', u'air dry-bulb temperature is below the basin heater setpoint temperature.', u'If a schedule name is not entered, the basin heater is allowed to operate', u'throughout the entire simulation.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Basin Heater Operating Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `basin_heater_operating_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_operating_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `basin_heater_operating_schedule_name`')
        self._data["Basin Heater Operating Schedule Name"] = value

    @property
    def sensible_heat_ratio_function_of_temperature_curve_name(self):
        """Get sensible_heat_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `sensible_heat_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Sensible Heat Ratio Function of Temperature Curve Name"]

    @sensible_heat_ratio_function_of_temperature_curve_name.setter
    def sensible_heat_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Sensible Heat Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db
        wb = entering wet-bulb temperature seen by the DX cooling coil (C)
        db = entering dry-bulb temperature seen by the DX cooling coil (C)
        entering temperature can be outside air or pretreated air.
        
        {u'note': [u'Table:TwoIndependentVariable object can also be used', u'curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db', u'wb = entering wet-bulb temperature seen by the DX cooling coil (C)', u'db = entering dry-bulb temperature seen by the DX cooling coil (C)', u'entering temperature can be outside air or pretreated air.'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Sensible Heat Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `sensible_heat_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sensible_heat_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `sensible_heat_ratio_function_of_temperature_curve_name`')
        self._data["Sensible Heat Ratio Function of Temperature Curve Name"] = value

    @property
    def sensible_heat_ratio_function_of_flow_fraction_curve_name(self):
        """Get sensible_heat_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `sensible_heat_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Sensible Heat Ratio Function of Flow Fraction Curve Name"]

    @sensible_heat_ratio_function_of_flow_fraction_curve_name.setter
    def sensible_heat_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Sensible Heat Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Sensible Heat Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `sensible_heat_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sensible_heat_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `sensible_heat_ratio_function_of_flow_fraction_curve_name`')
        self._data["Sensible Heat Ratio Function of Flow Fraction Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilCoolingDxTwoSpeed(object):
    """ Corresponds to IDD object `Coil:Cooling:DX:TwoSpeed`
        Direct expansion (DX) cooling coil and condensing unit (includes electric compressor
        and condenser fan), two-speed (or variable-speed). Requires two sets of performance
        data and will interpolate between speeds. Modelled as a single coil (multi-speed
        compressor or multiple compressors with row split or intertwined coil).
    
    """
    internal_name = "Coil:Cooling:DX:TwoSpeed"
    field_count = 37
    required_fields = ["Name", "High Speed Gross Rated Total Cooling Capacity", "High Speed Rated Sensible Heat Ratio", "High Speed Rated Air Flow Rate", "Air Inlet Node Name", "Air Outlet Node Name", "Total Cooling Capacity Function of Temperature Curve Name", "Total Cooling Capacity Function of Flow Fraction Curve Name", "Energy Input Ratio Function of Temperature Curve Name", "Energy Input Ratio Function of Flow Fraction Curve Name", "Part Load Fraction Correlation Curve Name", "Low Speed Gross Rated Total Cooling Capacity", "Low Speed Gross Rated Sensible Heat Ratio", "Low Speed Rated Air Flow Rate", "Low Speed Total Cooling Capacity Function of Temperature Curve Name", "Low Speed Energy Input Ratio Function of Temperature Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Cooling:DX:TwoSpeed`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["High Speed Gross Rated Total Cooling Capacity"] = None
        self._data["High Speed Rated Sensible Heat Ratio"] = None
        self._data["High Speed Gross Rated Cooling COP"] = None
        self._data["High Speed Rated Air Flow Rate"] = None
        self._data["Unit Internal Static Air Pressure"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Total Cooling Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Part Load Fraction Correlation Curve Name"] = None
        self._data["Low Speed Gross Rated Total Cooling Capacity"] = None
        self._data["Low Speed Gross Rated Sensible Heat Ratio"] = None
        self._data["Low Speed Gross Rated Cooling COP"] = None
        self._data["Low Speed Rated Air Flow Rate"] = None
        self._data["Low Speed Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Low Speed Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Condenser Air Inlet Node Name"] = None
        self._data["Condenser Type"] = None
        self._data["High Speed Evaporative Condenser Effectiveness"] = None
        self._data["High Speed Evaporative Condenser Air Flow Rate"] = None
        self._data["High Speed Evaporative Condenser Pump Rated Power Consumption"] = None
        self._data["Low Speed Evaporative Condenser Effectiveness"] = None
        self._data["Low Speed Evaporative Condenser Air Flow Rate"] = None
        self._data["Low Speed Evaporative Condenser Pump Rated Power Consumption"] = None
        self._data["Supply Water Storage Tank Name"] = None
        self._data["Condensate Collection Water Storage Tank Name"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Operating Schedule Name"] = None
        self._data["Sensible Heat Ratio Function of Temperature Curve Name"] = None
        self._data["Sensible Heat Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Low Speed Sensible Heat Ratio Function of Temperature Curve Name"] = None
        self._data["Low Speed Sensible Heat Ratio Function of Flow Fraction Curve Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.high_speed_gross_rated_total_cooling_capacity = None
        else:
            self.high_speed_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.high_speed_rated_sensible_heat_ratio = None
        else:
            self.high_speed_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.high_speed_gross_rated_cooling_cop = None
        else:
            self.high_speed_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.high_speed_rated_air_flow_rate = None
        else:
            self.high_speed_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.unit_internal_static_air_pressure = None
        else:
            self.unit_internal_static_air_pressure = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_cooling_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.total_cooling_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.part_load_fraction_correlation_curve_name = None
        else:
            self.part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.low_speed_gross_rated_total_cooling_capacity = None
        else:
            self.low_speed_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.low_speed_gross_rated_sensible_heat_ratio = None
        else:
            self.low_speed_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.low_speed_gross_rated_cooling_cop = None
        else:
            self.low_speed_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.low_speed_rated_air_flow_rate = None
        else:
            self.low_speed_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.low_speed_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.low_speed_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.low_speed_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.low_speed_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_air_inlet_node_name = None
        else:
            self.condenser_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.high_speed_evaporative_condenser_effectiveness = None
        else:
            self.high_speed_evaporative_condenser_effectiveness = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.high_speed_evaporative_condenser_air_flow_rate = None
        else:
            self.high_speed_evaporative_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.high_speed_evaporative_condenser_pump_rated_power_consumption = None
        else:
            self.high_speed_evaporative_condenser_pump_rated_power_consumption = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.low_speed_evaporative_condenser_effectiveness = None
        else:
            self.low_speed_evaporative_condenser_effectiveness = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.low_speed_evaporative_condenser_air_flow_rate = None
        else:
            self.low_speed_evaporative_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.low_speed_evaporative_condenser_pump_rated_power_consumption = None
        else:
            self.low_speed_evaporative_condenser_pump_rated_power_consumption = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.supply_water_storage_tank_name = None
        else:
            self.supply_water_storage_tank_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condensate_collection_water_storage_tank_name = None
        else:
            self.condensate_collection_water_storage_tank_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_operating_schedule_name = None
        else:
            self.basin_heater_operating_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensible_heat_ratio_function_of_temperature_curve_name = None
        else:
            self.sensible_heat_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensible_heat_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.sensible_heat_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.low_speed_sensible_heat_ratio_function_of_temperature_curve_name = None
        else:
            self.low_speed_sensible_heat_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'DesuperHeatingCoilSources', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def high_speed_gross_rated_total_cooling_capacity(self):
        """Get high_speed_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `high_speed_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["High Speed Gross Rated Total Cooling Capacity"]

    @high_speed_gross_rated_total_cooling_capacity.setter
    def high_speed_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `High Speed Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        gross capacity excluding supply air fan heat
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat', u'gross capacity excluding supply air fan heat', u'rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and', u'air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `High Speed Gross Rated Total Cooling Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `high_speed_gross_rated_total_cooling_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `high_speed_gross_rated_total_cooling_capacity`')
        self._data["High Speed Gross Rated Total Cooling Capacity"] = value

    @property
    def high_speed_rated_sensible_heat_ratio(self):
        """Get high_speed_rated_sensible_heat_ratio

        Returns:
            float: the value of `high_speed_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["High Speed Rated Sensible Heat Ratio"]

    @high_speed_rated_sensible_heat_ratio.setter
    def high_speed_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `High Speed Rated Sensible Heat Ratio`
        Rated sensible heat ratio (gross sensible capacity/gross total capacity)
        sensible and total capacities do not include supply fan heat
        
        {'pytype': 'float', u'maximum': '1.0', u'required-field': True, u'note': [u'Rated sensible heat ratio (gross sensible capacity/gross total capacity)', u'sensible and total capacities do not include supply fan heat'], u'autosizable': u'', u'minimum': '0.5', u'type': u'real'}

        Args:
            value (float): value for IDD Field `High Speed Rated Sensible Heat Ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `high_speed_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `high_speed_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `high_speed_rated_sensible_heat_ratio`')
        self._data["High Speed Rated Sensible Heat Ratio"] = value

    @property
    def high_speed_gross_rated_cooling_cop(self):
        """Get high_speed_gross_rated_cooling_cop

        Returns:
            float: the value of `high_speed_gross_rated_cooling_cop` or None if not set
        """
        return self._data["High Speed Gross Rated Cooling COP"]

    @high_speed_gross_rated_cooling_cop.setter
    def high_speed_gross_rated_cooling_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `High Speed Gross Rated Cooling COP`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply fan heat or supply fan electrical energy input
        
        {'pytype': 'float', u'default': '3.0', u'minimum>': '0.0', u'note': [u'Gross cooling capacity divided by power input to the compressor and outdoor fan,', u'does not include supply fan heat or supply fan electrical energy input'], u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `High Speed Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `high_speed_gross_rated_cooling_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `high_speed_gross_rated_cooling_cop`')
        self._data["High Speed Gross Rated Cooling COP"] = value

    @property
    def high_speed_rated_air_flow_rate(self):
        """Get high_speed_rated_air_flow_rate

        Returns:
            float: the value of `high_speed_rated_air_flow_rate` or None if not set
        """
        return self._data["High Speed Rated Air Flow Rate"]

    @high_speed_rated_air_flow_rate.setter
    def high_speed_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `High Speed Rated Air Flow Rate`
        Flow rate corresponding to rated total cooling capacity, Rated SHR
        and Rated COP. Should be between 0.00004027 m3/s and .00006041 m3/s per watt
        of rated total cooling capacity.
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Flow rate corresponding to rated total cooling capacity, Rated SHR', u'and Rated COP. Should be between 0.00004027 m3/s and .00006041 m3/s per watt', u'of rated total cooling capacity.'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `High Speed Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `high_speed_rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `high_speed_rated_air_flow_rate`')
        self._data["High Speed Rated Air Flow Rate"] = value

    @property
    def unit_internal_static_air_pressure(self):
        """Get unit_internal_static_air_pressure

        Returns:
            float: the value of `unit_internal_static_air_pressure` or None if not set
        """
        return self._data["Unit Internal Static Air Pressure"]

    @unit_internal_static_air_pressure.setter
    def unit_internal_static_air_pressure(self, value=None):
        """  Corresponds to IDD Field `Unit Internal Static Air Pressure`
        Enter pressure drop for the unit containing the coil.
        This value is only used to calculate Energy Efficiency Ratio
        (EER), Integrated Energy Efficiency Ratio (IEER), and the
        Standard Rating (Net) Cooling Capacity. This value is not
        used for modeling the evaporator fan during simulations.
        
        {u'note': [u'Enter pressure drop for the unit containing the coil.', u'This value is only used to calculate Energy Efficiency Ratio', u'(EER), Integrated Energy Efficiency Ratio (IEER), and the', u'Standard Rating (Net) Cooling Capacity. This value is not', u'used for modeling the evaporator fan during simulations.'], u'units': u'Pa', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Unit Internal Static Air Pressure`
                Units: Pa
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `unit_internal_static_air_pressure`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `unit_internal_static_air_pressure`')
        self._data["Unit Internal Static Air Pressure"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Total Cooling Capacity Function of Temperature Curve Name"]

    @total_cooling_capacity_function_of_temperature_curve_name.setter
    def total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariable object can also be used', u'curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb', u'wb = entering wet-bulb temperature (C)', u'edb = dry-bulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def total_cooling_capacity_function_of_flow_fraction_curve_name(self):
        """Get total_cooling_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `total_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Total Cooling Capacity Function of Flow Fraction Curve Name"]

    @total_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def total_cooling_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Total Cooling Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Total Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `total_cooling_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `total_cooling_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `total_cooling_capacity_function_of_flow_fraction_curve_name`')
        self._data["Total Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def energy_input_ratio_function_of_temperature_curve_name(self):
        """Get energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Energy Input Ratio Function of Temperature Curve Name"]

    @energy_input_ratio_function_of_temperature_curve_name.setter
    def energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Energy Input Ratio Function of Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb', u'wb = entering wet-bulb temperature (C)', u'edb = dry-bulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Energy Input Ratio Function of Flow Fraction Curve Name"]

    @energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def part_load_fraction_correlation_curve_name(self):
        """Get part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Part Load Fraction Correlation Curve Name"]

    @part_load_fraction_correlation_curve_name.setter
    def part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (cooling load/steady state capacity)
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLR = part load ratio (cooling load/steady state capacity)'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `part_load_fraction_correlation_curve_name`')
        self._data["Part Load Fraction Correlation Curve Name"] = value

    @property
    def low_speed_gross_rated_total_cooling_capacity(self):
        """Get low_speed_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `low_speed_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Low Speed Gross Rated Total Cooling Capacity"]

    @low_speed_gross_rated_total_cooling_capacity.setter
    def low_speed_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Low Speed Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        gross capacity excluding supply air fan heat
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat', u'gross capacity excluding supply air fan heat', u'rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and', u'air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Low Speed Gross Rated Total Cooling Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `low_speed_gross_rated_total_cooling_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `low_speed_gross_rated_total_cooling_capacity`')
        self._data["Low Speed Gross Rated Total Cooling Capacity"] = value

    @property
    def low_speed_gross_rated_sensible_heat_ratio(self):
        """Get low_speed_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `low_speed_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Low Speed Gross Rated Sensible Heat Ratio"]

    @low_speed_gross_rated_sensible_heat_ratio.setter
    def low_speed_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Low Speed Gross Rated Sensible Heat Ratio`
        Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity)
        sensible and total capacities do not include supply fan heat
        
        {'pytype': 'float', u'maximum': '1.0', u'required-field': True, u'note': [u'Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity)', u'sensible and total capacities do not include supply fan heat'], u'autosizable': u'', u'minimum': '0.5', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Low Speed Gross Rated Sensible Heat Ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `low_speed_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `low_speed_gross_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `low_speed_gross_rated_sensible_heat_ratio`')
        self._data["Low Speed Gross Rated Sensible Heat Ratio"] = value

    @property
    def low_speed_gross_rated_cooling_cop(self):
        """Get low_speed_gross_rated_cooling_cop

        Returns:
            float: the value of `low_speed_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Low Speed Gross Rated Cooling COP"]

    @low_speed_gross_rated_cooling_cop.setter
    def low_speed_gross_rated_cooling_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `Low Speed Gross Rated Cooling COP`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply fan heat or supply fan electrical energy input
        
        {'pytype': 'float', u'default': '3.0', u'minimum>': '0.0', u'note': [u'Gross cooling capacity divided by power input to the compressor and outdoor fan,', u'does not include supply fan heat or supply fan electrical energy input'], u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Low Speed Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `low_speed_gross_rated_cooling_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `low_speed_gross_rated_cooling_cop`')
        self._data["Low Speed Gross Rated Cooling COP"] = value

    @property
    def low_speed_rated_air_flow_rate(self):
        """Get low_speed_rated_air_flow_rate

        Returns:
            float: the value of `low_speed_rated_air_flow_rate` or None if not set
        """
        return self._data["Low Speed Rated Air Flow Rate"]

    @low_speed_rated_air_flow_rate.setter
    def low_speed_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Low Speed Rated Air Flow Rate`
        Flow rate corresponding to rated total cooling capacity, Rated SHR
        and Rated COP. Should be between 0.00004027 m3/s and .00006041 m3/s per watt
        of rated total cooling capacity.
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Flow rate corresponding to rated total cooling capacity, Rated SHR', u'and Rated COP. Should be between 0.00004027 m3/s and .00006041 m3/s per watt', u'of rated total cooling capacity.'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Low Speed Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `low_speed_rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `low_speed_rated_air_flow_rate`')
        self._data["Low Speed Rated Air Flow Rate"] = value

    @property
    def low_speed_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get low_speed_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `low_speed_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Low Speed Total Cooling Capacity Function of Temperature Curve Name"]

    @low_speed_total_cooling_capacity_function_of_temperature_curve_name.setter
    def low_speed_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Low Speed Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariable object can also be used', u'curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb', u'wb = entering wet-bulb temperature (C)', u'edb = dry-bulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Low Speed Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `low_speed_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `low_speed_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `low_speed_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Low Speed Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def low_speed_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get low_speed_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `low_speed_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Low Speed Energy Input Ratio Function of Temperature Curve Name"]

    @low_speed_energy_input_ratio_function_of_temperature_curve_name.setter
    def low_speed_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Low Speed Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariable object can also be used', u'curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb', u'wb = entering wet-bulb temperature (C)', u'edb = dry-bulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Low Speed Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `low_speed_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `low_speed_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `low_speed_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Low Speed Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def condenser_air_inlet_node_name(self):
        """Get condenser_air_inlet_node_name

        Returns:
            str: the value of `condenser_air_inlet_node_name` or None if not set
        """
        return self._data["Condenser Air Inlet Node Name"]

    @condenser_air_inlet_node_name.setter
    def condenser_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Air Inlet Node Name`
        Enter the name of an outdoor air node. This node name is also specified in
        an OutdoorAir:Node or OutdoorAir:NodeList object.
        
        {u'note': [u'Enter the name of an outdoor air node. This node name is also specified in', u'an OutdoorAir:Node or OutdoorAir:NodeList object.'], u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_air_inlet_node_name`')
        self._data["Condenser Air Inlet Node Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """  Corresponds to IDD Field `Condenser Type`
        
        {u'default': u'AirCooled', u'type': u'choice', u'key': [u'AirCooled', u'EvaporativelyCooled'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Type`
                Accepted values are:
                      - AirCooled
                      - EvaporativelyCooled
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_type`')
            vals = {}
            vals["aircooled"] = "AirCooled"
            vals["evaporativelycooled"] = "EvaporativelyCooled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condenser_type`'.format(value))
            value = vals[value_lower]
        self._data["Condenser Type"] = value

    @property
    def high_speed_evaporative_condenser_effectiveness(self):
        """Get high_speed_evaporative_condenser_effectiveness

        Returns:
            float: the value of `high_speed_evaporative_condenser_effectiveness` or None if not set
        """
        return self._data["High Speed Evaporative Condenser Effectiveness"]

    @high_speed_evaporative_condenser_effectiveness.setter
    def high_speed_evaporative_condenser_effectiveness(self, value=0.9 ):
        """  Corresponds to IDD Field `High Speed Evaporative Condenser Effectiveness`
        
        {'pytype': 'float', u'default': '0.9', u'maximum': '1.0', u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `High Speed Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `high_speed_evaporative_condenser_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `high_speed_evaporative_condenser_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `high_speed_evaporative_condenser_effectiveness`')
        self._data["High Speed Evaporative Condenser Effectiveness"] = value

    @property
    def high_speed_evaporative_condenser_air_flow_rate(self):
        """Get high_speed_evaporative_condenser_air_flow_rate

        Returns:
            float: the value of `high_speed_evaporative_condenser_air_flow_rate` or None if not set
        """
        return self._data["High Speed Evaporative Condenser Air Flow Rate"]

    @high_speed_evaporative_condenser_air_flow_rate.setter
    def high_speed_evaporative_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `High Speed Evaporative Condenser Air Flow Rate`
        Used to calculate evaporative condenser water use
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Used to calculate evaporative condenser water use'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `High Speed Evaporative Condenser Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `high_speed_evaporative_condenser_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `high_speed_evaporative_condenser_air_flow_rate`')
        self._data["High Speed Evaporative Condenser Air Flow Rate"] = value

    @property
    def high_speed_evaporative_condenser_pump_rated_power_consumption(self):
        """Get high_speed_evaporative_condenser_pump_rated_power_consumption

        Returns:
            float: the value of `high_speed_evaporative_condenser_pump_rated_power_consumption` or None if not set
        """
        return self._data["High Speed Evaporative Condenser Pump Rated Power Consumption"]

    @high_speed_evaporative_condenser_pump_rated_power_consumption.setter
    def high_speed_evaporative_condenser_pump_rated_power_consumption(self, value=None):
        """  Corresponds to IDD Field `High Speed Evaporative Condenser Pump Rated Power Consumption`
        Rated power consumed by the evaporative condenser's water pump at high speed
        
        {'pytype': 'float', u'note': [u"Rated power consumed by the evaporative condenser's water pump at high speed"], u'autosizable': u'', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `High Speed Evaporative Condenser Pump Rated Power Consumption`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `high_speed_evaporative_condenser_pump_rated_power_consumption`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `high_speed_evaporative_condenser_pump_rated_power_consumption`')
        self._data["High Speed Evaporative Condenser Pump Rated Power Consumption"] = value

    @property
    def low_speed_evaporative_condenser_effectiveness(self):
        """Get low_speed_evaporative_condenser_effectiveness

        Returns:
            float: the value of `low_speed_evaporative_condenser_effectiveness` or None if not set
        """
        return self._data["Low Speed Evaporative Condenser Effectiveness"]

    @low_speed_evaporative_condenser_effectiveness.setter
    def low_speed_evaporative_condenser_effectiveness(self, value=0.9 ):
        """  Corresponds to IDD Field `Low Speed Evaporative Condenser Effectiveness`
        
        {'pytype': 'float', u'default': '0.9', u'maximum': '1.0', u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Low Speed Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `low_speed_evaporative_condenser_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `low_speed_evaporative_condenser_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `low_speed_evaporative_condenser_effectiveness`')
        self._data["Low Speed Evaporative Condenser Effectiveness"] = value

    @property
    def low_speed_evaporative_condenser_air_flow_rate(self):
        """Get low_speed_evaporative_condenser_air_flow_rate

        Returns:
            float: the value of `low_speed_evaporative_condenser_air_flow_rate` or None if not set
        """
        return self._data["Low Speed Evaporative Condenser Air Flow Rate"]

    @low_speed_evaporative_condenser_air_flow_rate.setter
    def low_speed_evaporative_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Low Speed Evaporative Condenser Air Flow Rate`
        Used to calculate evaporative condenser water use
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Used to calculate evaporative condenser water use'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Low Speed Evaporative Condenser Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `low_speed_evaporative_condenser_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `low_speed_evaporative_condenser_air_flow_rate`')
        self._data["Low Speed Evaporative Condenser Air Flow Rate"] = value

    @property
    def low_speed_evaporative_condenser_pump_rated_power_consumption(self):
        """Get low_speed_evaporative_condenser_pump_rated_power_consumption

        Returns:
            float: the value of `low_speed_evaporative_condenser_pump_rated_power_consumption` or None if not set
        """
        return self._data["Low Speed Evaporative Condenser Pump Rated Power Consumption"]

    @low_speed_evaporative_condenser_pump_rated_power_consumption.setter
    def low_speed_evaporative_condenser_pump_rated_power_consumption(self, value=None):
        """  Corresponds to IDD Field `Low Speed Evaporative Condenser Pump Rated Power Consumption`
        Rated power consumed by the evaporative condenser's water pump at low speed
        
        {'pytype': 'float', u'note': [u"Rated power consumed by the evaporative condenser's water pump at low speed"], u'autosizable': u'', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Low Speed Evaporative Condenser Pump Rated Power Consumption`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `low_speed_evaporative_condenser_pump_rated_power_consumption`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `low_speed_evaporative_condenser_pump_rated_power_consumption`')
        self._data["Low Speed Evaporative Condenser Pump Rated Power Consumption"] = value

    @property
    def supply_water_storage_tank_name(self):
        """Get supply_water_storage_tank_name

        Returns:
            str: the value of `supply_water_storage_tank_name` or None if not set
        """
        return self._data["Supply Water Storage Tank Name"]

    @supply_water_storage_tank_name.setter
    def supply_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `Supply Water Storage Tank Name`
        
        {u'type': u'object-list', u'object-list': u'WaterStorageTankNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Supply Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_water_storage_tank_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `supply_water_storage_tank_name`')
        self._data["Supply Water Storage Tank Name"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set
        """
        return self._data["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `Condensate Collection Water Storage Tank Name`
        
        {u'type': u'object-list', u'object-list': u'WaterStorageTankNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condensate Collection Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condensate_collection_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condensate_collection_water_storage_tank_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condensate_collection_water_storage_tank_name`')
        self._data["Condensate Collection Water Storage Tank Name"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the DX coil is off.
        
        {'pytype': 'float', u'default': '0.0', u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled and for periods', u'when the basin heater is available (field Basin Heater Operating Schedule Name).', u'For this situation, the heater maintains the basin water temperature at the basin heater', u'setpoint temperature when the outdoor air temperature falls below the setpoint temperature.', u'The basin heater only operates when the DX coil is off.'], u'minimum': '0.0', u'units': u'W/K', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')
        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0 ):
        """  Corresponds to IDD Field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.
        
        {'pytype': 'float', u'default': '2.0', u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled.', u'Enter the outdoor dry-bulb temperature when the basin heater turns on.'], u'minimum': '2.0', u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')
        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self._data["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Basin Heater Operating Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.
        
        {u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled.', u'Schedule values greater than 0 allow the basin heater to operate whenever the outdoor', u'air dry-bulb temperature is below the basin heater setpoint temperature.', u'If a schedule name is not entered, the basin heater is allowed to operate', u'throughout the entire simulation.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Basin Heater Operating Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `basin_heater_operating_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_operating_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `basin_heater_operating_schedule_name`')
        self._data["Basin Heater Operating Schedule Name"] = value

    @property
    def sensible_heat_ratio_function_of_temperature_curve_name(self):
        """Get sensible_heat_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `sensible_heat_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Sensible Heat Ratio Function of Temperature Curve Name"]

    @sensible_heat_ratio_function_of_temperature_curve_name.setter
    def sensible_heat_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Sensible Heat Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db
        wb = entering wet-bulb temperature seen by the DX cooling coil (C)
        db = entering dry-bulb temperature seen by the DX cooling coil (C)
        entering temperature can be outside air or pretreated air.
        
        {u'note': [u'Table:TwoIndependentVariable object can also be used', u'curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db', u'wb = entering wet-bulb temperature seen by the DX cooling coil (C)', u'db = entering dry-bulb temperature seen by the DX cooling coil (C)', u'entering temperature can be outside air or pretreated air.'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Sensible Heat Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `sensible_heat_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sensible_heat_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `sensible_heat_ratio_function_of_temperature_curve_name`')
        self._data["Sensible Heat Ratio Function of Temperature Curve Name"] = value

    @property
    def sensible_heat_ratio_function_of_flow_fraction_curve_name(self):
        """Get sensible_heat_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `sensible_heat_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Sensible Heat Ratio Function of Flow Fraction Curve Name"]

    @sensible_heat_ratio_function_of_flow_fraction_curve_name.setter
    def sensible_heat_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Sensible Heat Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Sensible Heat Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `sensible_heat_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sensible_heat_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `sensible_heat_ratio_function_of_flow_fraction_curve_name`')
        self._data["Sensible Heat Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def low_speed_sensible_heat_ratio_function_of_temperature_curve_name(self):
        """Get low_speed_sensible_heat_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `low_speed_sensible_heat_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Low Speed Sensible Heat Ratio Function of Temperature Curve Name"]

    @low_speed_sensible_heat_ratio_function_of_temperature_curve_name.setter
    def low_speed_sensible_heat_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Low Speed Sensible Heat Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db
        wb = entering wet-bulb temperature seen by the DX cooling coil (C)
        db = entering dry-bulb temperature seen by the DX cooling coil (C)
        entering temperature can be outside air or pretreated air.
        
        {u'note': [u'Table:TwoIndependentVariable object can also be used', u'curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db', u'wb = entering wet-bulb temperature seen by the DX cooling coil (C)', u'db = entering dry-bulb temperature seen by the DX cooling coil (C)', u'entering temperature can be outside air or pretreated air.'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Low Speed Sensible Heat Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `low_speed_sensible_heat_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `low_speed_sensible_heat_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `low_speed_sensible_heat_ratio_function_of_temperature_curve_name`')
        self._data["Low Speed Sensible Heat Ratio Function of Temperature Curve Name"] = value

    @property
    def low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name(self):
        """Get low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Low Speed Sensible Heat Ratio Function of Flow Fraction Curve Name"]

    @low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name.setter
    def low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Low Speed Sensible Heat Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Low Speed Sensible Heat Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name`')
        self._data["Low Speed Sensible Heat Ratio Function of Flow Fraction Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilCoolingDxMultiSpeed(object):
    """ Corresponds to IDD object `Coil:Cooling:DX:MultiSpeed`
        Direct expansion (DX) cooling coil and condensing unit (includes electric or
        engine-driven compressor and condenser fan), multi-speed (or variable-speed).
        Optional moisture evaporation from wet coil when compressor cycles off with continuous
        fan operation. Requires two to four sets of performance data and will interpolate
        between speeds. Modeled as a single coil (multi-speed compressor or multiple
        compressors with row split or intertwined coil).
    
    """
    internal_name = "Coil:Cooling:DX:MultiSpeed"
    field_count = 93
    required_fields = ["Name", "Air Inlet Node Name", "Air Outlet Node Name", "Number of Speeds", "Speed 1 Gross Rated Total Cooling Capacity", "Speed 1 Gross Rated Sensible Heat Ratio", "Speed 1 Rated Air Flow Rate", "Speed 1 Total Cooling Capacity Function of Temperature Curve Name", "Speed 1 Total Cooling Capacity Function of Flow Fraction Curve Name", "Speed 1 Energy Input Ratio Function of Temperature Curve Name", "Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name", "Speed 1 Part Load Fraction Correlation Curve Name", "Speed 1 Rated Waste Heat Fraction of Power Input", "Speed 2 Gross Rated Total Cooling Capacity", "Speed 2 Gross Rated Sensible Heat Ratio", "Speed 2 Rated Air Flow Rate", "Speed 2 Total Cooling Capacity Function of Temperature Curve Name", "Speed 2 Total Cooling Capacity Function of Flow Fraction Curve Name", "Speed 2 Energy Input Ratio Function of Temperature Curve Name", "Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name", "Speed 2 Part Load Fraction Correlation Curve Name", "Speed 2 Rated Waste Heat Fraction of Power Input"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Cooling:DX:MultiSpeed`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Condenser Air Inlet Node Name"] = None
        self._data["Condenser Type"] = None
        self._data["Supply Water Storage Tank Name"] = None
        self._data["Condensate Collection Water Storage Tank Name"] = None
        self._data["Apply Part Load Fraction to Speeds Greater than 1"] = None
        self._data["Apply Latent Degradation to Speeds Greater than 1"] = None
        self._data["Crankcase Heater Capacity"] = None
        self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Operating Schedule Name"] = None
        self._data["Fuel Type"] = None
        self._data["Number of Speeds"] = None
        self._data["Speed 1 Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 1 Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 1 Gross Rated Cooling COP"] = None
        self._data["Speed 1 Rated Air Flow Rate"] = None
        self._data["Rated Evaporator Fan Power Per Volume Flow Rate"] = None
        self._data["Speed 1 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 1 Total Cooling Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Speed 1 Part Load Fraction Correlation Curve Name"] = None
        self._data["Speed 1 Nominal Time for Condensate Removal to Begin"] = None
        self._data["Speed 1 Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"] = None
        self._data["Speed 1 Maximum Cycling Rate"] = None
        self._data["Speed 1 Latent Capacity Time Constant"] = None
        self._data["Speed 1 Rated Waste Heat Fraction of Power Input"] = None
        self._data["Speed 1 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 1 Evaporative Condenser Effectiveness"] = None
        self._data["Speed 1 Evaporative Condenser Air Flow Rate"] = None
        self._data["Speed 1 Rated Evaporative Condenser Pump Power Consumption"] = None
        self._data["Speed 2 Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 2 Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 2 Gross Rated Cooling COP"] = None
        self._data["Speed 2 Rated Air Flow Rate"] = None
        self._data["Rated Evaporator Fan Power Per Volume Flow Rate v3"] = None
        self._data["Speed 2 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 2 Total Cooling Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Speed 2 Part Load Fraction Correlation Curve Name"] = None
        self._data["Speed 2 Nominal Time for Condensate Removal to Begin"] = None
        self._data["Speed 2 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity"] = None
        self._data["Speed 2 Maximum Cycling Rate"] = None
        self._data["Speed 2 Latent Capacity Time Constant"] = None
        self._data["Speed 2 Rated Waste Heat Fraction of Power Input"] = None
        self._data["Speed 2 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 2 Evaporative Condenser Effectiveness"] = None
        self._data["Speed 2 Evaporative Condenser Air Flow Rate"] = None
        self._data["Speed 2 Rated Evaporative Condenser Pump Power Consumption"] = None
        self._data["Speed 3 Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 3 Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 3 Gross Rated Cooling COP"] = None
        self._data["Speed 3 Rated Air Flow Rate"] = None
        self._data["Rated Evaporator Fan Power Per Volume Flow Rate v4"] = None
        self._data["Speed 3 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 3 Total Cooling Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Speed 3 Part Load Fraction Correlation Curve Name"] = None
        self._data["Speed 3 Nominal Time for Condensate Removal to Begin"] = None
        self._data["Speed 3 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity"] = None
        self._data["Speed 3 Maximum Cycling Rate"] = None
        self._data["Speed 3 Latent Capacity Time Constant"] = None
        self._data["Speed 3 Rated Waste Heat Fraction of Power Input"] = None
        self._data["Speed 3 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 3 Evaporative Condenser Effectiveness"] = None
        self._data["Speed 3 Evaporative Condenser Air Flow Rate"] = None
        self._data["Speed 3 Rated Evaporative Condenser Pump Power Consumption"] = None
        self._data["Speed 4 Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 4 Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 4 Gross Rated Cooling COP"] = None
        self._data["Speed 4 Rated Air Flow Rate"] = None
        self._data["Rated Evaporator Fan Power Per Volume Flow Rate v5"] = None
        self._data["Speed 4 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 4 Total Cooling Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Speed 4 Part Load Fraction Correlation Curve Name"] = None
        self._data["Speed 4 Nominal Time for Condensate Removal to Begin"] = None
        self._data["Speed 4 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity"] = None
        self._data["Speed 4 Maximum Cycling Rate"] = None
        self._data["Speed 4 Latent Capacity Time Constant"] = None
        self._data["Speed 4 Rated Waste Heat Fraction of Power Input"] = None
        self._data["Speed 4 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 4 Evaporative Condenser Effectiveness"] = None
        self._data["Speed 4 Evaporative Condenser Air Flow Rate"] = None
        self._data["Speed 4 Rated Evaporative Condenser Pump Power Consumption"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_air_inlet_node_name = None
        else:
            self.condenser_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.supply_water_storage_tank_name = None
        else:
            self.supply_water_storage_tank_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condensate_collection_water_storage_tank_name = None
        else:
            self.condensate_collection_water_storage_tank_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.apply_part_load_fraction_to_speeds_greater_than_1 = None
        else:
            self.apply_part_load_fraction_to_speeds_greater_than_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.apply_latent_degradation_to_speeds_greater_than_1 = None
        else:
            self.apply_latent_degradation_to_speeds_greater_than_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.crankcase_heater_capacity = None
        else:
            self.crankcase_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_operating_schedule_name = None
        else:
            self.basin_heater_operating_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_speeds = None
        else:
            self.number_of_speeds = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_gross_rated_total_cooling_capacity = None
        else:
            self.speed_1_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_1_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_gross_rated_cooling_cop = None
        else:
            self.speed_1_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_rated_air_flow_rate = None
        else:
            self.speed_1_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_evaporator_fan_power_per_volume_flow_rate = None
        else:
            self.rated_evaporator_fan_power_per_volume_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_1_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_1_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.speed_1_energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_part_load_fraction_correlation_curve_name = None
        else:
            self.speed_1_part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_nominal_time_for_condensate_removal_to_begin = None
        else:
            self.speed_1_nominal_time_for_condensate_removal_to_begin = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity = None
        else:
            self.speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_maximum_cycling_rate = None
        else:
            self.speed_1_maximum_cycling_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_latent_capacity_time_constant = None
        else:
            self.speed_1_latent_capacity_time_constant = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_rated_waste_heat_fraction_of_power_input = None
        else:
            self.speed_1_rated_waste_heat_fraction_of_power_input = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_1_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_evaporative_condenser_effectiveness = None
        else:
            self.speed_1_evaporative_condenser_effectiveness = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_evaporative_condenser_air_flow_rate = None
        else:
            self.speed_1_evaporative_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_rated_evaporative_condenser_pump_power_consumption = None
        else:
            self.speed_1_rated_evaporative_condenser_pump_power_consumption = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_gross_rated_total_cooling_capacity = None
        else:
            self.speed_2_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_2_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_gross_rated_cooling_cop = None
        else:
            self.speed_2_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_rated_air_flow_rate = None
        else:
            self.speed_2_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_evaporator_fan_power_per_volume_flow_rate_v3 = None
        else:
            self.rated_evaporator_fan_power_per_volume_flow_rate_v3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_2_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_2_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.speed_2_energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_part_load_fraction_correlation_curve_name = None
        else:
            self.speed_2_part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_nominal_time_for_condensate_removal_to_begin = None
        else:
            self.speed_2_nominal_time_for_condensate_removal_to_begin = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity = None
        else:
            self.speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_maximum_cycling_rate = None
        else:
            self.speed_2_maximum_cycling_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_latent_capacity_time_constant = None
        else:
            self.speed_2_latent_capacity_time_constant = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_rated_waste_heat_fraction_of_power_input = None
        else:
            self.speed_2_rated_waste_heat_fraction_of_power_input = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_2_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_evaporative_condenser_effectiveness = None
        else:
            self.speed_2_evaporative_condenser_effectiveness = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_evaporative_condenser_air_flow_rate = None
        else:
            self.speed_2_evaporative_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_rated_evaporative_condenser_pump_power_consumption = None
        else:
            self.speed_2_rated_evaporative_condenser_pump_power_consumption = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_gross_rated_total_cooling_capacity = None
        else:
            self.speed_3_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_3_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_gross_rated_cooling_cop = None
        else:
            self.speed_3_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_rated_air_flow_rate = None
        else:
            self.speed_3_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_evaporator_fan_power_per_volume_flow_rate_v4 = None
        else:
            self.rated_evaporator_fan_power_per_volume_flow_rate_v4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_3_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_3_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.speed_3_energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_part_load_fraction_correlation_curve_name = None
        else:
            self.speed_3_part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_nominal_time_for_condensate_removal_to_begin = None
        else:
            self.speed_3_nominal_time_for_condensate_removal_to_begin = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity = None
        else:
            self.speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_maximum_cycling_rate = None
        else:
            self.speed_3_maximum_cycling_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_latent_capacity_time_constant = None
        else:
            self.speed_3_latent_capacity_time_constant = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_rated_waste_heat_fraction_of_power_input = None
        else:
            self.speed_3_rated_waste_heat_fraction_of_power_input = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_3_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_evaporative_condenser_effectiveness = None
        else:
            self.speed_3_evaporative_condenser_effectiveness = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_evaporative_condenser_air_flow_rate = None
        else:
            self.speed_3_evaporative_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_rated_evaporative_condenser_pump_power_consumption = None
        else:
            self.speed_3_rated_evaporative_condenser_pump_power_consumption = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_gross_rated_total_cooling_capacity = None
        else:
            self.speed_4_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_4_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_gross_rated_cooling_cop = None
        else:
            self.speed_4_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_rated_air_flow_rate = None
        else:
            self.speed_4_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_evaporator_fan_power_per_volume_flow_rate_v5 = None
        else:
            self.rated_evaporator_fan_power_per_volume_flow_rate_v5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_4_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_4_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.speed_4_energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_part_load_fraction_correlation_curve_name = None
        else:
            self.speed_4_part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_nominal_time_for_condensate_removal_to_begin = None
        else:
            self.speed_4_nominal_time_for_condensate_removal_to_begin = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity = None
        else:
            self.speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_maximum_cycling_rate = None
        else:
            self.speed_4_maximum_cycling_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_latent_capacity_time_constant = None
        else:
            self.speed_4_latent_capacity_time_constant = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_rated_waste_heat_fraction_of_power_input = None
        else:
            self.speed_4_rated_waste_heat_fraction_of_power_input = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_4_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_evaporative_condenser_effectiveness = None
        else:
            self.speed_4_evaporative_condenser_effectiveness = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_evaporative_condenser_air_flow_rate = None
        else:
            self.speed_4_evaporative_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_rated_evaporative_condenser_pump_power_consumption = None
        else:
            self.speed_4_rated_evaporative_condenser_pump_power_consumption = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'AFNCoilNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def condenser_air_inlet_node_name(self):
        """Get condenser_air_inlet_node_name

        Returns:
            str: the value of `condenser_air_inlet_node_name` or None if not set
        """
        return self._data["Condenser Air Inlet Node Name"]

    @condenser_air_inlet_node_name.setter
    def condenser_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Air Inlet Node Name`
        Enter the name of an outdoor air node. This node name is also specified in
        an OutdoorAir:Node or OutdoorAir:NodeList object.
        
        {u'note': [u'Enter the name of an outdoor air node. This node name is also specified in', u'an OutdoorAir:Node or OutdoorAir:NodeList object.'], u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_air_inlet_node_name`')
        self._data["Condenser Air Inlet Node Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """  Corresponds to IDD Field `Condenser Type`
        
        {u'default': u'AirCooled', u'type': u'choice', u'key': [u'AirCooled', u'EvaporativelyCooled'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Type`
                Accepted values are:
                      - AirCooled
                      - EvaporativelyCooled
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_type`')
            vals = {}
            vals["aircooled"] = "AirCooled"
            vals["evaporativelycooled"] = "EvaporativelyCooled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condenser_type`'.format(value))
            value = vals[value_lower]
        self._data["Condenser Type"] = value

    @property
    def supply_water_storage_tank_name(self):
        """Get supply_water_storage_tank_name

        Returns:
            str: the value of `supply_water_storage_tank_name` or None if not set
        """
        return self._data["Supply Water Storage Tank Name"]

    @supply_water_storage_tank_name.setter
    def supply_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `Supply Water Storage Tank Name`
        
        {u'type': u'object-list', u'object-list': u'WaterStorageTankNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Supply Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_water_storage_tank_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `supply_water_storage_tank_name`')
        self._data["Supply Water Storage Tank Name"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set
        """
        return self._data["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `Condensate Collection Water Storage Tank Name`
        
        {u'type': u'object-list', u'object-list': u'WaterStorageTankNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condensate Collection Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condensate_collection_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condensate_collection_water_storage_tank_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condensate_collection_water_storage_tank_name`')
        self._data["Condensate Collection Water Storage Tank Name"] = value

    @property
    def apply_part_load_fraction_to_speeds_greater_than_1(self):
        """Get apply_part_load_fraction_to_speeds_greater_than_1

        Returns:
            str: the value of `apply_part_load_fraction_to_speeds_greater_than_1` or None if not set
        """
        return self._data["Apply Part Load Fraction to Speeds Greater than 1"]

    @apply_part_load_fraction_to_speeds_greater_than_1.setter
    def apply_part_load_fraction_to_speeds_greater_than_1(self, value="No"):
        """  Corresponds to IDD Field `Apply Part Load Fraction to Speeds Greater than 1`
        
        {u'default': u'No', u'type': u'choice', u'key': [u'Yes', u'No'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Apply Part Load Fraction to Speeds Greater than 1`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `apply_part_load_fraction_to_speeds_greater_than_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `apply_part_load_fraction_to_speeds_greater_than_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `apply_part_load_fraction_to_speeds_greater_than_1`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `apply_part_load_fraction_to_speeds_greater_than_1`'.format(value))
            value = vals[value_lower]
        self._data["Apply Part Load Fraction to Speeds Greater than 1"] = value

    @property
    def apply_latent_degradation_to_speeds_greater_than_1(self):
        """Get apply_latent_degradation_to_speeds_greater_than_1

        Returns:
            str: the value of `apply_latent_degradation_to_speeds_greater_than_1` or None if not set
        """
        return self._data["Apply Latent Degradation to Speeds Greater than 1"]

    @apply_latent_degradation_to_speeds_greater_than_1.setter
    def apply_latent_degradation_to_speeds_greater_than_1(self, value="No"):
        """  Corresponds to IDD Field `Apply Latent Degradation to Speeds Greater than 1`
        
        {u'default': u'No', u'type': u'choice', u'key': [u'Yes', u'No'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Apply Latent Degradation to Speeds Greater than 1`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `apply_latent_degradation_to_speeds_greater_than_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `apply_latent_degradation_to_speeds_greater_than_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `apply_latent_degradation_to_speeds_greater_than_1`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `apply_latent_degradation_to_speeds_greater_than_1`'.format(value))
            value = vals[value_lower]
        self._data["Apply Latent Degradation to Speeds Greater than 1"] = value

    @property
    def crankcase_heater_capacity(self):
        """Get crankcase_heater_capacity

        Returns:
            float: the value of `crankcase_heater_capacity` or None if not set
        """
        return self._data["Crankcase Heater Capacity"]

    @crankcase_heater_capacity.setter
    def crankcase_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Crankcase Heater Capacity`
        
        {'pytype': 'float', u'default': '0.0', u'ip-units': u'W', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Crankcase Heater Capacity`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `crankcase_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `crankcase_heater_capacity`')
        self._data["Crankcase Heater Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(self, value=10.0 ):
        """  Corresponds to IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
        
        {u'default': '10.0', u'units': u'C', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
                Units: C
                Default value: 10.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation`')
        self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the DX coil is off.
        
        {'pytype': 'float', u'default': '0.0', u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled and for periods', u'when the basin heater is available (field Basin Heater Operating Schedule Name).', u'For this situation, the heater maintains the basin water temperature at the basin heater', u'setpoint temperature when the outdoor air temperature falls below the setpoint temperature.', u'The basin heater only operates when the DX coil is off.'], u'minimum': '0.0', u'units': u'W/K', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')
        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0 ):
        """  Corresponds to IDD Field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.
        
        {'pytype': 'float', u'default': '2.0', u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled.', u'Enter the outdoor dry-bulb temperature when the basin heater turns on.'], u'minimum': '2.0', u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')
        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self._data["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Basin Heater Operating Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.
        
        {u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled.', u'Schedule values greater than 0 allow the basin heater to operate whenever the outdoor', u'air dry-bulb temperature is below the basin heater setpoint temperature.', u'If a schedule name is not entered, the basin heater is allowed to operate', u'throughout the entire simulation.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Basin Heater Operating Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `basin_heater_operating_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_operating_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `basin_heater_operating_schedule_name`')
        self._data["Basin Heater Operating Schedule Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="NaturalGas"):
        """  Corresponds to IDD Field `Fuel Type`
        
        {u'default': u'NaturalGas', u'type': u'choice', u'key': [u'Electricity', u'NaturalGas', u'PropaneGas', u'Diesel', u'Gasoline', u'FuelOil#1', u'FuelOil#2', u'OtherFuel1', u'OtherFuel2'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Fuel Type`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - PropaneGas
                      - Diesel
                      - Gasoline
                      - FuelOil#1
                      - FuelOil#2
                      - OtherFuel1
                      - OtherFuel2
                Default value: NaturalGas
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_type`')
            vals = {}
            vals["electricity"] = "Electricity"
            vals["naturalgas"] = "NaturalGas"
            vals["propanegas"] = "PropaneGas"
            vals["diesel"] = "Diesel"
            vals["gasoline"] = "Gasoline"
            vals["fueloil#1"] = "FuelOil#1"
            vals["fueloil#2"] = "FuelOil#2"
            vals["otherfuel1"] = "OtherFuel1"
            vals["otherfuel2"] = "OtherFuel2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `fuel_type`'.format(value))
            value = vals[value_lower]
        self._data["Fuel Type"] = value

    @property
    def number_of_speeds(self):
        """Get number_of_speeds

        Returns:
            int: the value of `number_of_speeds` or None if not set
        """
        return self._data["Number of Speeds"]

    @number_of_speeds.setter
    def number_of_speeds(self, value=None):
        """  Corresponds to IDD Field `Number of Speeds`
        Enter the number of the following sets of data for coil capacity, SHR, COP,
        flow rate, and associated curves.
        
        {'pytype': 'int', u'maximum': '4', u'required-field': True, u'note': [u'Enter the number of the following sets of data for coil capacity, SHR, COP,', u'flow rate, and associated curves.'], u'minimum': '2', u'type': u'integer'}

        Args:
            value (int): value for IDD Field `Number of Speeds`
                value >= 2
                value <= 4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_speeds`'.format(value))
            if value < 2:
                raise ValueError('value need to be greater or equal 2 '
                                 'for field `number_of_speeds`')
            if value > 4:
                raise ValueError('value need to be smaller 4 '
                                 'for field `number_of_speeds`')
        self._data["Number of Speeds"] = value

    @property
    def speed_1_gross_rated_total_cooling_capacity(self):
        """Get speed_1_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_1_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 1 Gross Rated Total Cooling Capacity"]

    @speed_1_gross_rated_total_cooling_capacity.setter
    def speed_1_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Gross capacity excluding supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        Speed 1 is defined as low speed
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat', u'Gross capacity excluding supply air fan heat', u'Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and', u'air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb', u'Speed 1 is defined as low speed'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Gross Rated Total Cooling Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_gross_rated_total_cooling_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_1_gross_rated_total_cooling_capacity`')
        self._data["Speed 1 Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_1_gross_rated_sensible_heat_ratio(self):
        """Get speed_1_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_1_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 1 Gross Rated Sensible Heat Ratio"]

    @speed_1_gross_rated_sensible_heat_ratio.setter
    def speed_1_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Gross Rated Sensible Heat Ratio`
        Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity)
        Sensible and total capacities do not include supply fan heat
        
        {'pytype': 'float', u'maximum': '1.0', u'required-field': True, u'note': [u'Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity)', u'Sensible and total capacities do not include supply fan heat'], u'autosizable': u'', u'minimum': '0.5', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Gross Rated Sensible Heat Ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `speed_1_gross_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_1_gross_rated_sensible_heat_ratio`')
        self._data["Speed 1 Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_1_gross_rated_cooling_cop(self):
        """Get speed_1_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_1_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 1 Gross Rated Cooling COP"]

    @speed_1_gross_rated_cooling_cop.setter
    def speed_1_gross_rated_cooling_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `Speed 1 Gross Rated Cooling COP`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply fan heat or supply fan electrical energy input
        
        {'pytype': 'float', u'default': '3.0', u'minimum>': '0.0', u'note': [u'Gross cooling capacity divided by power input to the compressor and outdoor fan,', u'does not include supply fan heat or supply fan electrical energy input'], u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_gross_rated_cooling_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_1_gross_rated_cooling_cop`')
        self._data["Speed 1 Gross Rated Cooling COP"] = value

    @property
    def speed_1_rated_air_flow_rate(self):
        """Get speed_1_rated_air_flow_rate

        Returns:
            float: the value of `speed_1_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 1 Rated Air Flow Rate"]

    @speed_1_rated_air_flow_rate.setter
    def speed_1_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Rated Air Flow Rate`
        Flow rate corresponding to rated total cooling capacity, rated SHR and rated
        COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total
        cooling capacity
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Flow rate corresponding to rated total cooling capacity, rated SHR and rated', u'COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total', u'cooling capacity'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_1_rated_air_flow_rate`')
        self._data["Speed 1 Rated Air Flow Rate"] = value

    @property
    def rated_evaporator_fan_power_per_volume_flow_rate(self):
        """Get rated_evaporator_fan_power_per_volume_flow_rate

        Returns:
            float: the value of `rated_evaporator_fan_power_per_volume_flow_rate` or None if not set
        """
        return self._data["Rated Evaporator Fan Power Per Volume Flow Rate"]

    @rated_evaporator_fan_power_per_volume_flow_rate.setter
    def rated_evaporator_fan_power_per_volume_flow_rate(self, value=773.3 ):
        """  Corresponds to IDD Field `Rated Evaporator Fan Power Per Volume Flow Rate`
        Enter the evaporator fan power per air volume flow rate at the rated test conditions.
        The test conditions vary external static pressure based on total cooling capacity.
        This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the
        Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file.
        This value is not used for modeling the evaporator fan during simulations.
        
        {'pytype': 'float', u'default': '773.3', u'maximum': '1250.0', u'note': [u'Enter the evaporator fan power per air volume flow rate at the rated test conditions.', u'The test conditions vary external static pressure based on total cooling capacity.', u'This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the', u'Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file.', u'This value is not used for modeling the evaporator fan during simulations.'], u'minimum': '0.0', u'units': u'W/(m3/s)', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Evaporator Fan Power Per Volume Flow Rate`
                Units: W/(m3/s)
                Default value: 773.3
                value >= 0.0
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_evaporator_fan_power_per_volume_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_evaporator_fan_power_per_volume_flow_rate`')
            if value > 1250.0:
                raise ValueError('value need to be smaller 1250.0 '
                                 'for field `rated_evaporator_fan_power_per_volume_flow_rate`')
        self._data["Rated Evaporator Fan Power Per Volume Flow Rate"] = value

    @property
    def speed_1_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_1_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_1_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 1 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_1_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_1_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariable object can also be used', u'curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb', u'wb = entering wet-bulb temperature (C)', u'edb = dry-bulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 1 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name(self):
        """Get speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 1 Total Cooling Capacity Function of Flow Fraction Curve Name"]

    @speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Total Cooling Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = Fraction of the full load Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = Fraction of the full load Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Total Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name`')
        self._data["Speed 1 Total Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_1_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariable object can also be used', u'curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb', u'wb = entering wet-bulb temperature (C)', u'edb = dry-bulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name"]

    @speed_1_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def speed_1_energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def speed_1_part_load_fraction_correlation_curve_name(self):
        """Get speed_1_part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `speed_1_part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Speed 1 Part Load Fraction Correlation Curve Name"]

    @speed_1_part_load_fraction_correlation_curve_name.setter
    def speed_1_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (cooling load/steady state capacity)
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLR = part load ratio (cooling load/steady state capacity)'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_part_load_fraction_correlation_curve_name`')
        self._data["Speed 1 Part Load Fraction Correlation Curve Name"] = value

    @property
    def speed_1_nominal_time_for_condensate_removal_to_begin(self):
        """Get speed_1_nominal_time_for_condensate_removal_to_begin

        Returns:
            float: the value of `speed_1_nominal_time_for_condensate_removal_to_begin` or None if not set
        """
        return self._data["Speed 1 Nominal Time for Condensate Removal to Begin"]

    @speed_1_nominal_time_for_condensate_removal_to_begin.setter
    def speed_1_nominal_time_for_condensate_removal_to_begin(self, value=0.0 ):
        """  Corresponds to IDD Field `Speed 1 Nominal Time for Condensate Removal to Begin`
        The nominal time for condensate to begin leaving the coil's condensate
        drain line at the coil's rated air flow rate and temperature conditions.
        Nominal time is equal to the ratio of the energy of the coil's maximum
        condensate holding capacity (J) to the coil's steady state latent capacity (W).
        Suggested value is 1000; zero value means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '3000.0', u'note': [u"The nominal time for condensate to begin leaving the coil's condensate", u"drain line at the coil's rated air flow rate and temperature conditions.", u"Nominal time is equal to the ratio of the energy of the coil's maximum", u"condensate holding capacity (J) to the coil's steady state latent capacity (W).", u'Suggested value is 1000; zero value means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u's', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Nominal Time for Condensate Removal to Begin`
                Units: s
                Default value: 0.0
                value >= 0.0
                value <= 3000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_nominal_time_for_condensate_removal_to_begin`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_nominal_time_for_condensate_removal_to_begin`')
            if value > 3000.0:
                raise ValueError('value need to be smaller 3000.0 '
                                 'for field `speed_1_nominal_time_for_condensate_removal_to_begin`')
        self._data["Speed 1 Nominal Time for Condensate Removal to Begin"] = value

    @property
    def speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(self):
        """Get speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity

        Returns:
            float: the value of `speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity` or None if not set
        """
        return self._data["Speed 1 Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"]

    @speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity.setter
    def speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Speed 1 Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
        Ratio of the initial moisture evaporation Rate from the Cooling Coil (when
        the compressor first turns off) and the Coil's steady state latent capacity
        at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value
        means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '5.0', u'note': [u'Ratio of the initial moisture evaporation Rate from the Cooling Coil (when', u"the compressor first turns off) and the Coil's steady state latent capacity", u'at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value', u'means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`')
        self._data["Speed 1 Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"] = value

    @property
    def speed_1_maximum_cycling_rate(self):
        """Get speed_1_maximum_cycling_rate

        Returns:
            float: the value of `speed_1_maximum_cycling_rate` or None if not set
        """
        return self._data["Speed 1 Maximum Cycling Rate"]

    @speed_1_maximum_cycling_rate.setter
    def speed_1_maximum_cycling_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `Speed 1 Maximum Cycling Rate`
        The maximum on-off cycling rate for the compressor, which occurs at 50% run time
        fraction. Suggested value is 3; zero value means latent degradation
        model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '5.0', u'note': [u'The maximum on-off cycling rate for the compressor, which occurs at 50% run time', u'fraction. Suggested value is 3; zero value means latent degradation', u'model is disabled.'], u'minimum': '0.0', u'units': u'cycles/hr', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Maximum Cycling Rate`
                Units: cycles/hr
                Default value: 0.0
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_maximum_cycling_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_maximum_cycling_rate`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `speed_1_maximum_cycling_rate`')
        self._data["Speed 1 Maximum Cycling Rate"] = value

    @property
    def speed_1_latent_capacity_time_constant(self):
        """Get speed_1_latent_capacity_time_constant

        Returns:
            float: the value of `speed_1_latent_capacity_time_constant` or None if not set
        """
        return self._data["Speed 1 Latent Capacity Time Constant"]

    @speed_1_latent_capacity_time_constant.setter
    def speed_1_latent_capacity_time_constant(self, value=0.0 ):
        """  Corresponds to IDD Field `Speed 1 Latent Capacity Time Constant`
        Time constant for the cooling coil's latent capacity to reach steady state after
        startup. Suggested value is 45; zero value means latent degradation
        model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '500.0', u'note': [u"Time constant for the cooling coil's latent capacity to reach steady state after", u'startup. Suggested value is 45; zero value means latent degradation', u'model is disabled.'], u'minimum': '0.0', u'units': u's', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Latent Capacity Time Constant`
                Units: s
                Default value: 0.0
                value >= 0.0
                value <= 500.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_latent_capacity_time_constant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_latent_capacity_time_constant`')
            if value > 500.0:
                raise ValueError('value need to be smaller 500.0 '
                                 'for field `speed_1_latent_capacity_time_constant`')
        self._data["Speed 1 Latent Capacity Time Constant"] = value

    @property
    def speed_1_rated_waste_heat_fraction_of_power_input(self):
        """Get speed_1_rated_waste_heat_fraction_of_power_input

        Returns:
            float: the value of `speed_1_rated_waste_heat_fraction_of_power_input` or None if not set
        """
        return self._data["Speed 1 Rated Waste Heat Fraction of Power Input"]

    @speed_1_rated_waste_heat_fraction_of_power_input.setter
    def speed_1_rated_waste_heat_fraction_of_power_input(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Rated Waste Heat Fraction of Power Input`
        Recoverable waste heat at full load and rated conditions
        
        {'pytype': 'float', u'minimum>': '0.0', u'maximum': '1.0', u'required-field': True, u'note': [u'Recoverable waste heat at full load and rated conditions'], u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Rated Waste Heat Fraction of Power Input`
                Units: dimensionless
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_rated_waste_heat_fraction_of_power_input`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_1_rated_waste_heat_fraction_of_power_input`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_1_rated_waste_heat_fraction_of_power_input`')
        self._data["Speed 1 Rated Waste Heat Fraction of Power Input"] = value

    @property
    def speed_1_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_1_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_1_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 1 Waste Heat Function of Temperature Curve Name"]

    @speed_1_waste_heat_function_of_temperature_curve_name.setter
    def speed_1_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db
        odb = Outdoor air dry-bulb temperature (C)
        db = entering coil dry-bulb temperature (C)
        
        {u'note': [u'Table:TwoIndependentVariable object can also be used', u'curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db', u'odb = Outdoor air dry-bulb temperature (C)', u'db = entering coil dry-bulb temperature (C)'], u'type': u'object-list', u'object-list': u'BiQuadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 1 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_1_evaporative_condenser_effectiveness(self):
        """Get speed_1_evaporative_condenser_effectiveness

        Returns:
            float: the value of `speed_1_evaporative_condenser_effectiveness` or None if not set
        """
        return self._data["Speed 1 Evaporative Condenser Effectiveness"]

    @speed_1_evaporative_condenser_effectiveness.setter
    def speed_1_evaporative_condenser_effectiveness(self, value=0.9 ):
        """  Corresponds to IDD Field `Speed 1 Evaporative Condenser Effectiveness`
        
        {'pytype': 'float', u'default': '0.9', u'maximum': '1.0', u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_evaporative_condenser_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_evaporative_condenser_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_1_evaporative_condenser_effectiveness`')
        self._data["Speed 1 Evaporative Condenser Effectiveness"] = value

    @property
    def speed_1_evaporative_condenser_air_flow_rate(self):
        """Get speed_1_evaporative_condenser_air_flow_rate

        Returns:
            float: the value of `speed_1_evaporative_condenser_air_flow_rate` or None if not set
        """
        return self._data["Speed 1 Evaporative Condenser Air Flow Rate"]

    @speed_1_evaporative_condenser_air_flow_rate.setter
    def speed_1_evaporative_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Evaporative Condenser Air Flow Rate`
        Used to calculate evaporative condenser water use
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Used to calculate evaporative condenser water use'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Evaporative Condenser Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_evaporative_condenser_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_1_evaporative_condenser_air_flow_rate`')
        self._data["Speed 1 Evaporative Condenser Air Flow Rate"] = value

    @property
    def speed_1_rated_evaporative_condenser_pump_power_consumption(self):
        """Get speed_1_rated_evaporative_condenser_pump_power_consumption

        Returns:
            float: the value of `speed_1_rated_evaporative_condenser_pump_power_consumption` or None if not set
        """
        return self._data["Speed 1 Rated Evaporative Condenser Pump Power Consumption"]

    @speed_1_rated_evaporative_condenser_pump_power_consumption.setter
    def speed_1_rated_evaporative_condenser_pump_power_consumption(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Rated Evaporative Condenser Pump Power Consumption`
        Rated power consumed by the evaporative condenser's water pump at high speed
        
        {'pytype': 'float', u'note': [u"Rated power consumed by the evaporative condenser's water pump at high speed"], u'autosizable': u'', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Rated Evaporative Condenser Pump Power Consumption`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_rated_evaporative_condenser_pump_power_consumption`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_rated_evaporative_condenser_pump_power_consumption`')
        self._data["Speed 1 Rated Evaporative Condenser Pump Power Consumption"] = value

    @property
    def speed_2_gross_rated_total_cooling_capacity(self):
        """Get speed_2_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_2_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 2 Gross Rated Total Cooling Capacity"]

    @speed_2_gross_rated_total_cooling_capacity.setter
    def speed_2_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Gross capacity excluding supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat', u'Gross capacity excluding supply air fan heat', u'Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and', u'air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Gross Rated Total Cooling Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_gross_rated_total_cooling_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_2_gross_rated_total_cooling_capacity`')
        self._data["Speed 2 Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_2_gross_rated_sensible_heat_ratio(self):
        """Get speed_2_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_2_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 2 Gross Rated Sensible Heat Ratio"]

    @speed_2_gross_rated_sensible_heat_ratio.setter
    def speed_2_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Gross Rated Sensible Heat Ratio`
        Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity)
        Sensible and total capacities do not include supply fan heat
        
        {'pytype': 'float', u'maximum': '1.0', u'required-field': True, u'note': [u'Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity)', u'Sensible and total capacities do not include supply fan heat'], u'autosizable': u'', u'minimum': '0.5', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Gross Rated Sensible Heat Ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `speed_2_gross_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_2_gross_rated_sensible_heat_ratio`')
        self._data["Speed 2 Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_2_gross_rated_cooling_cop(self):
        """Get speed_2_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_2_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 2 Gross Rated Cooling COP"]

    @speed_2_gross_rated_cooling_cop.setter
    def speed_2_gross_rated_cooling_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `Speed 2 Gross Rated Cooling COP`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply fan heat or supply fan electrical energy input
        
        {'pytype': 'float', u'default': '3.0', u'minimum>': '0.0', u'note': [u'Gross cooling capacity divided by power input to the compressor and outdoor fan,', u'does not include supply fan heat or supply fan electrical energy input'], u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_gross_rated_cooling_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_2_gross_rated_cooling_cop`')
        self._data["Speed 2 Gross Rated Cooling COP"] = value

    @property
    def speed_2_rated_air_flow_rate(self):
        """Get speed_2_rated_air_flow_rate

        Returns:
            float: the value of `speed_2_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 2 Rated Air Flow Rate"]

    @speed_2_rated_air_flow_rate.setter
    def speed_2_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Rated Air Flow Rate`
        Flow rate corresponding to rated total cooling capacity, rated SHR and rated
        COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total
        cooling capacity for Speed 2.
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Flow rate corresponding to rated total cooling capacity, rated SHR and rated', u'COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total', u'cooling capacity for Speed 2.'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_2_rated_air_flow_rate`')
        self._data["Speed 2 Rated Air Flow Rate"] = value

    @property
    def rated_evaporator_fan_power_per_volume_flow_rate_v3(self):
        """Get rated_evaporator_fan_power_per_volume_flow_rate_v3

        Returns:
            float: the value of `rated_evaporator_fan_power_per_volume_flow_rate_v3` or None if not set
        """
        return self._data["Rated Evaporator Fan Power Per Volume Flow Rate v3"]

    @rated_evaporator_fan_power_per_volume_flow_rate_v3.setter
    def rated_evaporator_fan_power_per_volume_flow_rate_v3(self, value=773.3 ):
        """  Corresponds to IDD Field `Rated Evaporator Fan Power Per Volume Flow Rate v3`
        Enter the evaporator fan power per air volume flow rate at the rated test conditions.
        The test conditions vary external static pressure based on total cooling capacity.
        This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the
        Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file.
        This value is not used for modeling the evaporator fan during simulations.
        
        {'pytype': 'float', u'default': '773.3', u'maximum': '1250.0', u'note': [u'Enter the evaporator fan power per air volume flow rate at the rated test conditions.', u'The test conditions vary external static pressure based on total cooling capacity.', u'This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the', u'Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file.', u'This value is not used for modeling the evaporator fan during simulations.'], u'minimum': '0.0', u'units': u'W/(m3/s)', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Evaporator Fan Power Per Volume Flow Rate v3`
                Units: W/(m3/s)
                Default value: 773.3
                value >= 0.0
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_evaporator_fan_power_per_volume_flow_rate_v3`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_evaporator_fan_power_per_volume_flow_rate_v3`')
            if value > 1250.0:
                raise ValueError('value need to be smaller 1250.0 '
                                 'for field `rated_evaporator_fan_power_per_volume_flow_rate_v3`')
        self._data["Rated Evaporator Fan Power Per Volume Flow Rate v3"] = value

    @property
    def speed_2_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_2_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_2_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 2 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_2_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_2_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariable object can also be used', u'curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb', u'wb = entering wet-bulb temperature (C)', u'edb = dry-bulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 2 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name(self):
        """Get speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 2 Total Cooling Capacity Function of Flow Fraction Curve Name"]

    @speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Total Cooling Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Total Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name`')
        self._data["Speed 2 Total Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_2_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariable object can also be used', u'curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb', u'wb = entering wet-bulb temperature (C)', u'edb = dry-bulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name"]

    @speed_2_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def speed_2_energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = Fraction of the full load Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = Fraction of the full load Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def speed_2_part_load_fraction_correlation_curve_name(self):
        """Get speed_2_part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `speed_2_part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Speed 2 Part Load Fraction Correlation Curve Name"]

    @speed_2_part_load_fraction_correlation_curve_name.setter
    def speed_2_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (Cooling load/steady state capacity)
        
        {u'note': [u'Table:OneIndependentVariable', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLR = part load ratio (Cooling load/steady state capacity)'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_part_load_fraction_correlation_curve_name`')
        self._data["Speed 2 Part Load Fraction Correlation Curve Name"] = value

    @property
    def speed_2_nominal_time_for_condensate_removal_to_begin(self):
        """Get speed_2_nominal_time_for_condensate_removal_to_begin

        Returns:
            float: the value of `speed_2_nominal_time_for_condensate_removal_to_begin` or None if not set
        """
        return self._data["Speed 2 Nominal Time for Condensate Removal to Begin"]

    @speed_2_nominal_time_for_condensate_removal_to_begin.setter
    def speed_2_nominal_time_for_condensate_removal_to_begin(self, value=0.0 ):
        """  Corresponds to IDD Field `Speed 2 Nominal Time for Condensate Removal to Begin`
        The nominal time for condensate to begin leaving the coil's condensate
        drain line at the coil's rated air flow rate and temperature conditions.
        Nominal time is equal to the ratio of the energy of the coil's maximum
        condensate holding capacity (J) to the coil's steady state latent capacity (W).
        Suggested value is 1000; zero value means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '3000.0', u'note': [u"The nominal time for condensate to begin leaving the coil's condensate", u"drain line at the coil's rated air flow rate and temperature conditions.", u"Nominal time is equal to the ratio of the energy of the coil's maximum", u"condensate holding capacity (J) to the coil's steady state latent capacity (W).", u'Suggested value is 1000; zero value means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u's', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Nominal Time for Condensate Removal to Begin`
                Units: s
                Default value: 0.0
                value >= 0.0
                value <= 3000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_nominal_time_for_condensate_removal_to_begin`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_nominal_time_for_condensate_removal_to_begin`')
            if value > 3000.0:
                raise ValueError('value need to be smaller 3000.0 '
                                 'for field `speed_2_nominal_time_for_condensate_removal_to_begin`')
        self._data["Speed 2 Nominal Time for Condensate Removal to Begin"] = value

    @property
    def speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(self):
        """Get speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity

        Returns:
            float: the value of `speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity` or None if not set
        """
        return self._data["Speed 2 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity"]

    @speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity.setter
    def speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Speed 2 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity`
        Ratio of the initial moisture evaporation rate from the cooling coil (when
        the compressor first turns off) and the coil's steady state latent capacity
        at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value
        means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '5.0', u'note': [u'Ratio of the initial moisture evaporation rate from the cooling coil (when', u"the compressor first turns off) and the coil's steady state latent capacity", u'at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value', u'means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`')
        self._data["Speed 2 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity"] = value

    @property
    def speed_2_maximum_cycling_rate(self):
        """Get speed_2_maximum_cycling_rate

        Returns:
            float: the value of `speed_2_maximum_cycling_rate` or None if not set
        """
        return self._data["Speed 2 Maximum Cycling Rate"]

    @speed_2_maximum_cycling_rate.setter
    def speed_2_maximum_cycling_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `Speed 2 Maximum Cycling Rate`
        The maximum on-off cycling rate for the compressor, which occurs at 50% run time
        fraction. Suggested value is 3; zero value means latent degradation
        model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '5.0', u'note': [u'The maximum on-off cycling rate for the compressor, which occurs at 50% run time', u'fraction. Suggested value is 3; zero value means latent degradation', u'model is disabled.'], u'minimum': '0.0', u'units': u'cycles/hr', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Maximum Cycling Rate`
                Units: cycles/hr
                Default value: 0.0
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_maximum_cycling_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_maximum_cycling_rate`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `speed_2_maximum_cycling_rate`')
        self._data["Speed 2 Maximum Cycling Rate"] = value

    @property
    def speed_2_latent_capacity_time_constant(self):
        """Get speed_2_latent_capacity_time_constant

        Returns:
            float: the value of `speed_2_latent_capacity_time_constant` or None if not set
        """
        return self._data["Speed 2 Latent Capacity Time Constant"]

    @speed_2_latent_capacity_time_constant.setter
    def speed_2_latent_capacity_time_constant(self, value=0.0 ):
        """  Corresponds to IDD Field `Speed 2 Latent Capacity Time Constant`
        Time constant for the cooling coil's latent capacity to reach steady state after
        startup. Suggested value is 45; zero value means latent degradation
        model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '500.0', u'note': [u"Time constant for the cooling coil's latent capacity to reach steady state after", u'startup. Suggested value is 45; zero value means latent degradation', u'model is disabled.'], u'minimum': '0.0', u'units': u's', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Latent Capacity Time Constant`
                Units: s
                Default value: 0.0
                value >= 0.0
                value <= 500.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_latent_capacity_time_constant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_latent_capacity_time_constant`')
            if value > 500.0:
                raise ValueError('value need to be smaller 500.0 '
                                 'for field `speed_2_latent_capacity_time_constant`')
        self._data["Speed 2 Latent Capacity Time Constant"] = value

    @property
    def speed_2_rated_waste_heat_fraction_of_power_input(self):
        """Get speed_2_rated_waste_heat_fraction_of_power_input

        Returns:
            float: the value of `speed_2_rated_waste_heat_fraction_of_power_input` or None if not set
        """
        return self._data["Speed 2 Rated Waste Heat Fraction of Power Input"]

    @speed_2_rated_waste_heat_fraction_of_power_input.setter
    def speed_2_rated_waste_heat_fraction_of_power_input(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Rated Waste Heat Fraction of Power Input`
        Recoverable waste heat at full load and rated conditions
        
        {'pytype': 'float', u'minimum>': '0.0', u'maximum': '1.0', u'required-field': True, u'note': [u'Recoverable waste heat at full load and rated conditions'], u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Rated Waste Heat Fraction of Power Input`
                Units: dimensionless
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_rated_waste_heat_fraction_of_power_input`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_2_rated_waste_heat_fraction_of_power_input`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_2_rated_waste_heat_fraction_of_power_input`')
        self._data["Speed 2 Rated Waste Heat Fraction of Power Input"] = value

    @property
    def speed_2_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_2_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_2_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 2 Waste Heat Function of Temperature Curve Name"]

    @speed_2_waste_heat_function_of_temperature_curve_name.setter
    def speed_2_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db
        odb = Outdoor air dry-bulb temperature (C)
        db = entering coil dry-bulb temperature (C)
        
        {u'note': [u'Table:TwoIndependentVariable object can also be used', u'curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db', u'odb = Outdoor air dry-bulb temperature (C)', u'db = entering coil dry-bulb temperature (C)'], u'type': u'object-list', u'object-list': u'BiQuadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 2 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_2_evaporative_condenser_effectiveness(self):
        """Get speed_2_evaporative_condenser_effectiveness

        Returns:
            float: the value of `speed_2_evaporative_condenser_effectiveness` or None if not set
        """
        return self._data["Speed 2 Evaporative Condenser Effectiveness"]

    @speed_2_evaporative_condenser_effectiveness.setter
    def speed_2_evaporative_condenser_effectiveness(self, value=0.9 ):
        """  Corresponds to IDD Field `Speed 2 Evaporative Condenser Effectiveness`
        
        {'pytype': 'float', u'default': '0.9', u'maximum': '1.0', u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_evaporative_condenser_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_evaporative_condenser_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_2_evaporative_condenser_effectiveness`')
        self._data["Speed 2 Evaporative Condenser Effectiveness"] = value

    @property
    def speed_2_evaporative_condenser_air_flow_rate(self):
        """Get speed_2_evaporative_condenser_air_flow_rate

        Returns:
            float: the value of `speed_2_evaporative_condenser_air_flow_rate` or None if not set
        """
        return self._data["Speed 2 Evaporative Condenser Air Flow Rate"]

    @speed_2_evaporative_condenser_air_flow_rate.setter
    def speed_2_evaporative_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Evaporative Condenser Air Flow Rate`
        Used to calculate evaporative condenser water use
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Used to calculate evaporative condenser water use'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Evaporative Condenser Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_evaporative_condenser_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_2_evaporative_condenser_air_flow_rate`')
        self._data["Speed 2 Evaporative Condenser Air Flow Rate"] = value

    @property
    def speed_2_rated_evaporative_condenser_pump_power_consumption(self):
        """Get speed_2_rated_evaporative_condenser_pump_power_consumption

        Returns:
            float: the value of `speed_2_rated_evaporative_condenser_pump_power_consumption` or None if not set
        """
        return self._data["Speed 2 Rated Evaporative Condenser Pump Power Consumption"]

    @speed_2_rated_evaporative_condenser_pump_power_consumption.setter
    def speed_2_rated_evaporative_condenser_pump_power_consumption(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Rated Evaporative Condenser Pump Power Consumption`
        Rated power consumed by the evaporative condenser's water pump at low speed
        
        {'pytype': 'float', u'note': [u"Rated power consumed by the evaporative condenser's water pump at low speed"], u'autosizable': u'', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Rated Evaporative Condenser Pump Power Consumption`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_rated_evaporative_condenser_pump_power_consumption`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_rated_evaporative_condenser_pump_power_consumption`')
        self._data["Speed 2 Rated Evaporative Condenser Pump Power Consumption"] = value

    @property
    def speed_3_gross_rated_total_cooling_capacity(self):
        """Get speed_3_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_3_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 3 Gross Rated Total Cooling Capacity"]

    @speed_3_gross_rated_total_cooling_capacity.setter
    def speed_3_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Gross capacity excluding supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat', u'Gross capacity excluding supply air fan heat', u'Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and', u'air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 3 Gross Rated Total Cooling Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_gross_rated_total_cooling_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_3_gross_rated_total_cooling_capacity`')
        self._data["Speed 3 Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_3_gross_rated_sensible_heat_ratio(self):
        """Get speed_3_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_3_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 3 Gross Rated Sensible Heat Ratio"]

    @speed_3_gross_rated_sensible_heat_ratio.setter
    def speed_3_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Gross Rated Sensible Heat Ratio`
        Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity)
        Sensible and total capacities do not include supply fan heat
        
        {'pytype': 'float', u'maximum': '1.0', u'note': [u'Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity)', u'Sensible and total capacities do not include supply fan heat'], u'autosizable': u'', u'minimum': '0.5', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 3 Gross Rated Sensible Heat Ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `speed_3_gross_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_3_gross_rated_sensible_heat_ratio`')
        self._data["Speed 3 Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_3_gross_rated_cooling_cop(self):
        """Get speed_3_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_3_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 3 Gross Rated Cooling COP"]

    @speed_3_gross_rated_cooling_cop.setter
    def speed_3_gross_rated_cooling_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `Speed 3 Gross Rated Cooling COP`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply fan heat or supply fan electrical energy input
        
        {'pytype': 'float', u'default': '3.0', u'minimum>': '0.0', u'note': [u'Gross cooling capacity divided by power input to the compressor and outdoor fan,', u'does not include supply fan heat or supply fan electrical energy input'], u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 3 Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_gross_rated_cooling_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_3_gross_rated_cooling_cop`')
        self._data["Speed 3 Gross Rated Cooling COP"] = value

    @property
    def speed_3_rated_air_flow_rate(self):
        """Get speed_3_rated_air_flow_rate

        Returns:
            float: the value of `speed_3_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 3 Rated Air Flow Rate"]

    @speed_3_rated_air_flow_rate.setter
    def speed_3_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Rated Air Flow Rate`
        Flow rate corresponding to rated total cooling capacity, rated SHR and rated
        COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total
        cooling capacity for Speed 3.
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Flow rate corresponding to rated total cooling capacity, rated SHR and rated', u'COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total', u'cooling capacity for Speed 3.'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 3 Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_3_rated_air_flow_rate`')
        self._data["Speed 3 Rated Air Flow Rate"] = value

    @property
    def rated_evaporator_fan_power_per_volume_flow_rate_v4(self):
        """Get rated_evaporator_fan_power_per_volume_flow_rate_v4

        Returns:
            float: the value of `rated_evaporator_fan_power_per_volume_flow_rate_v4` or None if not set
        """
        return self._data["Rated Evaporator Fan Power Per Volume Flow Rate v4"]

    @rated_evaporator_fan_power_per_volume_flow_rate_v4.setter
    def rated_evaporator_fan_power_per_volume_flow_rate_v4(self, value=773.3 ):
        """  Corresponds to IDD Field `Rated Evaporator Fan Power Per Volume Flow Rate v4`
        Enter the evaporator fan power per air volume flow rate at the rated test conditions.
        The test conditions vary external static pressure based on total cooling capacity.
        This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the
        Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file.
        This value is not used for modeling the evaporator fan during simulations.
        
        {'pytype': 'float', u'default': '773.3', u'maximum': '1250.0', u'note': [u'Enter the evaporator fan power per air volume flow rate at the rated test conditions.', u'The test conditions vary external static pressure based on total cooling capacity.', u'This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the', u'Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file.', u'This value is not used for modeling the evaporator fan during simulations.'], u'minimum': '0.0', u'units': u'W/(m3/s)', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Evaporator Fan Power Per Volume Flow Rate v4`
                Units: W/(m3/s)
                Default value: 773.3
                value >= 0.0
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_evaporator_fan_power_per_volume_flow_rate_v4`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_evaporator_fan_power_per_volume_flow_rate_v4`')
            if value > 1250.0:
                raise ValueError('value need to be smaller 1250.0 '
                                 'for field `rated_evaporator_fan_power_per_volume_flow_rate_v4`')
        self._data["Rated Evaporator Fan Power Per Volume Flow Rate v4"] = value

    @property
    def speed_3_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_3_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_3_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 3 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_3_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_3_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariable object can also be used', u'curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb', u'wb = entering wet-bulb temperature (C)', u'edb = dry-bulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 3 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name(self):
        """Get speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 3 Total Cooling Capacity Function of Flow Fraction Curve Name"]

    @speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Total Cooling Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Total Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name`')
        self._data["Speed 3 Total Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_3_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariable object can also be used', u'curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb', u'wb = entering wet-bulb temperature (C)', u'edb = dry-bulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name"]

    @speed_3_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def speed_3_energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def speed_3_part_load_fraction_correlation_curve_name(self):
        """Get speed_3_part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `speed_3_part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Speed 3 Part Load Fraction Correlation Curve Name"]

    @speed_3_part_load_fraction_correlation_curve_name.setter
    def speed_3_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (Cooling load/steady state capacity)
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLR = part load ratio (Cooling load/steady state capacity)'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_part_load_fraction_correlation_curve_name`')
        self._data["Speed 3 Part Load Fraction Correlation Curve Name"] = value

    @property
    def speed_3_nominal_time_for_condensate_removal_to_begin(self):
        """Get speed_3_nominal_time_for_condensate_removal_to_begin

        Returns:
            float: the value of `speed_3_nominal_time_for_condensate_removal_to_begin` or None if not set
        """
        return self._data["Speed 3 Nominal Time for Condensate Removal to Begin"]

    @speed_3_nominal_time_for_condensate_removal_to_begin.setter
    def speed_3_nominal_time_for_condensate_removal_to_begin(self, value=0.0 ):
        """  Corresponds to IDD Field `Speed 3 Nominal Time for Condensate Removal to Begin`
        The nominal time for condensate to begin leaving the coil's condensate
        drain line at the coil's rated air flow rate and temperature conditions.
        Nominal time is equal to the ratio of the energy of the coil's maximum
        condensate holding capacity (J) to the coil's steady state latent capacity (W).
        Suggested value is 1000; zero value means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '3000.0', u'note': [u"The nominal time for condensate to begin leaving the coil's condensate", u"drain line at the coil's rated air flow rate and temperature conditions.", u"Nominal time is equal to the ratio of the energy of the coil's maximum", u"condensate holding capacity (J) to the coil's steady state latent capacity (W).", u'Suggested value is 1000; zero value means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u's', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 3 Nominal Time for Condensate Removal to Begin`
                Units: s
                Default value: 0.0
                value >= 0.0
                value <= 3000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_nominal_time_for_condensate_removal_to_begin`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_nominal_time_for_condensate_removal_to_begin`')
            if value > 3000.0:
                raise ValueError('value need to be smaller 3000.0 '
                                 'for field `speed_3_nominal_time_for_condensate_removal_to_begin`')
        self._data["Speed 3 Nominal Time for Condensate Removal to Begin"] = value

    @property
    def speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(self):
        """Get speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity

        Returns:
            float: the value of `speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity` or None if not set
        """
        return self._data["Speed 3 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity"]

    @speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity.setter
    def speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Speed 3 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity`
        Ratio of the initial moisture evaporation rate from the cooling coil (when
        the compressor first turns off) and the coil's steady state latent capacity
        at rated air flow and temperature conditions. Suggested value is 1.5; zero value
        means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '5.0', u'note': [u'Ratio of the initial moisture evaporation rate from the cooling coil (when', u"the compressor first turns off) and the coil's steady state latent capacity", u'at rated air flow and temperature conditions. Suggested value is 1.5; zero value', u'means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 3 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`')
        self._data["Speed 3 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity"] = value

    @property
    def speed_3_maximum_cycling_rate(self):
        """Get speed_3_maximum_cycling_rate

        Returns:
            float: the value of `speed_3_maximum_cycling_rate` or None if not set
        """
        return self._data["Speed 3 Maximum Cycling Rate"]

    @speed_3_maximum_cycling_rate.setter
    def speed_3_maximum_cycling_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `Speed 3 Maximum Cycling Rate`
        The maximum on-off cycling rate for the compressor, which occurs at 50% run time
        fraction. Suggested value is 3; zero value means latent degradation
        model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '5.0', u'note': [u'The maximum on-off cycling rate for the compressor, which occurs at 50% run time', u'fraction. Suggested value is 3; zero value means latent degradation', u'model is disabled.'], u'minimum': '0.0', u'units': u'cycles/hr', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 3 Maximum Cycling Rate`
                Units: cycles/hr
                Default value: 0.0
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_maximum_cycling_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_maximum_cycling_rate`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `speed_3_maximum_cycling_rate`')
        self._data["Speed 3 Maximum Cycling Rate"] = value

    @property
    def speed_3_latent_capacity_time_constant(self):
        """Get speed_3_latent_capacity_time_constant

        Returns:
            float: the value of `speed_3_latent_capacity_time_constant` or None if not set
        """
        return self._data["Speed 3 Latent Capacity Time Constant"]

    @speed_3_latent_capacity_time_constant.setter
    def speed_3_latent_capacity_time_constant(self, value=0.0 ):
        """  Corresponds to IDD Field `Speed 3 Latent Capacity Time Constant`
        Time constant for the cooling coil's latent capacity to reach steady state after
        startup. Suggested value is 45; zero value means latent degradation
        model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '500.0', u'note': [u"Time constant for the cooling coil's latent capacity to reach steady state after", u'startup. Suggested value is 45; zero value means latent degradation', u'model is disabled.'], u'minimum': '0.0', u'units': u's', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 3 Latent Capacity Time Constant`
                Units: s
                Default value: 0.0
                value >= 0.0
                value <= 500.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_latent_capacity_time_constant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_latent_capacity_time_constant`')
            if value > 500.0:
                raise ValueError('value need to be smaller 500.0 '
                                 'for field `speed_3_latent_capacity_time_constant`')
        self._data["Speed 3 Latent Capacity Time Constant"] = value

    @property
    def speed_3_rated_waste_heat_fraction_of_power_input(self):
        """Get speed_3_rated_waste_heat_fraction_of_power_input

        Returns:
            float: the value of `speed_3_rated_waste_heat_fraction_of_power_input` or None if not set
        """
        return self._data["Speed 3 Rated Waste Heat Fraction of Power Input"]

    @speed_3_rated_waste_heat_fraction_of_power_input.setter
    def speed_3_rated_waste_heat_fraction_of_power_input(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Rated Waste Heat Fraction of Power Input`
        Recoverable waste heat at full load and rated conditions
        
        {'pytype': 'float', u'minimum>': '0.0', u'maximum': '1.0', u'note': [u'Recoverable waste heat at full load and rated conditions'], u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 3 Rated Waste Heat Fraction of Power Input`
                Units: dimensionless
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_rated_waste_heat_fraction_of_power_input`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_3_rated_waste_heat_fraction_of_power_input`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_3_rated_waste_heat_fraction_of_power_input`')
        self._data["Speed 3 Rated Waste Heat Fraction of Power Input"] = value

    @property
    def speed_3_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_3_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_3_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 3 Waste Heat Function of Temperature Curve Name"]

    @speed_3_waste_heat_function_of_temperature_curve_name.setter
    def speed_3_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db
        odb = Outdoor air dry-bulb temperature (C)
        db = entering coil dry-bulb temperature (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db', u'odb = Outdoor air dry-bulb temperature (C)', u'db = entering coil dry-bulb temperature (C)'], u'type': u'object-list', u'object-list': u'BiQuadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 3 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_3_evaporative_condenser_effectiveness(self):
        """Get speed_3_evaporative_condenser_effectiveness

        Returns:
            float: the value of `speed_3_evaporative_condenser_effectiveness` or None if not set
        """
        return self._data["Speed 3 Evaporative Condenser Effectiveness"]

    @speed_3_evaporative_condenser_effectiveness.setter
    def speed_3_evaporative_condenser_effectiveness(self, value=0.9 ):
        """  Corresponds to IDD Field `Speed 3 Evaporative Condenser Effectiveness`
        
        {'pytype': 'float', u'default': '0.9', u'maximum': '1.0', u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 3 Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_evaporative_condenser_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_evaporative_condenser_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_3_evaporative_condenser_effectiveness`')
        self._data["Speed 3 Evaporative Condenser Effectiveness"] = value

    @property
    def speed_3_evaporative_condenser_air_flow_rate(self):
        """Get speed_3_evaporative_condenser_air_flow_rate

        Returns:
            float: the value of `speed_3_evaporative_condenser_air_flow_rate` or None if not set
        """
        return self._data["Speed 3 Evaporative Condenser Air Flow Rate"]

    @speed_3_evaporative_condenser_air_flow_rate.setter
    def speed_3_evaporative_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Evaporative Condenser Air Flow Rate`
        Used to calculate evaporative condenser water use
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Used to calculate evaporative condenser water use'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 3 Evaporative Condenser Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_evaporative_condenser_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_3_evaporative_condenser_air_flow_rate`')
        self._data["Speed 3 Evaporative Condenser Air Flow Rate"] = value

    @property
    def speed_3_rated_evaporative_condenser_pump_power_consumption(self):
        """Get speed_3_rated_evaporative_condenser_pump_power_consumption

        Returns:
            float: the value of `speed_3_rated_evaporative_condenser_pump_power_consumption` or None if not set
        """
        return self._data["Speed 3 Rated Evaporative Condenser Pump Power Consumption"]

    @speed_3_rated_evaporative_condenser_pump_power_consumption.setter
    def speed_3_rated_evaporative_condenser_pump_power_consumption(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Rated Evaporative Condenser Pump Power Consumption`
        Rated power consumed by the evaporative condenser's water pump at Low speed
        
        {'pytype': 'float', u'note': [u"Rated power consumed by the evaporative condenser's water pump at Low speed"], u'autosizable': u'', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 3 Rated Evaporative Condenser Pump Power Consumption`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_rated_evaporative_condenser_pump_power_consumption`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_rated_evaporative_condenser_pump_power_consumption`')
        self._data["Speed 3 Rated Evaporative Condenser Pump Power Consumption"] = value

    @property
    def speed_4_gross_rated_total_cooling_capacity(self):
        """Get speed_4_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_4_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 4 Gross Rated Total Cooling Capacity"]

    @speed_4_gross_rated_total_cooling_capacity.setter
    def speed_4_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Gross capacity excluding supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat', u'Gross capacity excluding supply air fan heat', u'Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and', u'air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 4 Gross Rated Total Cooling Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_gross_rated_total_cooling_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_4_gross_rated_total_cooling_capacity`')
        self._data["Speed 4 Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_4_gross_rated_sensible_heat_ratio(self):
        """Get speed_4_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_4_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 4 Gross Rated Sensible Heat Ratio"]

    @speed_4_gross_rated_sensible_heat_ratio.setter
    def speed_4_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Gross Rated Sensible Heat Ratio`
        Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity)
        Sensible and total capacities do not include supply fan heat
        
        {'pytype': 'float', u'maximum': '1.0', u'note': [u'Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total capacity)', u'Sensible and total capacities do not include supply fan heat'], u'autosizable': u'', u'minimum': '0.5', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 4 Gross Rated Sensible Heat Ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `speed_4_gross_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_4_gross_rated_sensible_heat_ratio`')
        self._data["Speed 4 Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_4_gross_rated_cooling_cop(self):
        """Get speed_4_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_4_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 4 Gross Rated Cooling COP"]

    @speed_4_gross_rated_cooling_cop.setter
    def speed_4_gross_rated_cooling_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `Speed 4 Gross Rated Cooling COP`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply fan heat or supply fan electrical energy input
        
        {'pytype': 'float', u'default': '3.0', u'minimum>': '0.0', u'note': [u'Gross cooling capacity divided by power input to the compressor and outdoor fan,', u'does not include supply fan heat or supply fan electrical energy input'], u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 4 Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_gross_rated_cooling_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_4_gross_rated_cooling_cop`')
        self._data["Speed 4 Gross Rated Cooling COP"] = value

    @property
    def speed_4_rated_air_flow_rate(self):
        """Get speed_4_rated_air_flow_rate

        Returns:
            float: the value of `speed_4_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 4 Rated Air Flow Rate"]

    @speed_4_rated_air_flow_rate.setter
    def speed_4_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Rated Air Flow Rate`
        Flow rate corresponding to rated total cooling capacity, rated SHR and rated
        COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total
        cooling capacity for Speed 4
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Flow rate corresponding to rated total cooling capacity, rated SHR and rated', u'COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total', u'cooling capacity for Speed 4'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 4 Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_4_rated_air_flow_rate`')
        self._data["Speed 4 Rated Air Flow Rate"] = value

    @property
    def rated_evaporator_fan_power_per_volume_flow_rate_v5(self):
        """Get rated_evaporator_fan_power_per_volume_flow_rate_v5

        Returns:
            float: the value of `rated_evaporator_fan_power_per_volume_flow_rate_v5` or None if not set
        """
        return self._data["Rated Evaporator Fan Power Per Volume Flow Rate v5"]

    @rated_evaporator_fan_power_per_volume_flow_rate_v5.setter
    def rated_evaporator_fan_power_per_volume_flow_rate_v5(self, value=773.3 ):
        """  Corresponds to IDD Field `Rated Evaporator Fan Power Per Volume Flow Rate v5`
        Enter the evaporator fan power per air volume flow rate at the rated test conditions.
        The test conditions vary external static pressure based on total cooling capacity.
        This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the
        Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file.
        This value is not used for modeling the evaporator fan during simulations.
        
        {'pytype': 'float', u'default': '773.3', u'maximum': '1250.0', u'note': [u'Enter the evaporator fan power per air volume flow rate at the rated test conditions.', u'The test conditions vary external static pressure based on total cooling capacity.', u'This value is only used to calculate Seasonal Energy Efficiency Ratio (SEER), and the', u'Standard Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus eio file.', u'This value is not used for modeling the evaporator fan during simulations.'], u'minimum': '0.0', u'units': u'W/(m3/s)', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Evaporator Fan Power Per Volume Flow Rate v5`
                Units: W/(m3/s)
                Default value: 773.3
                value >= 0.0
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_evaporator_fan_power_per_volume_flow_rate_v5`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_evaporator_fan_power_per_volume_flow_rate_v5`')
            if value > 1250.0:
                raise ValueError('value need to be smaller 1250.0 '
                                 'for field `rated_evaporator_fan_power_per_volume_flow_rate_v5`')
        self._data["Rated Evaporator Fan Power Per Volume Flow Rate v5"] = value

    @property
    def speed_4_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_4_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_4_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 4 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_4_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_4_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb', u'wb = entering wet-bulb temperature (C)', u'edb = dry-bulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 4 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name(self):
        """Get speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 4 Total Cooling Capacity Function of Flow Fraction Curve Name"]

    @speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Total Cooling Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Total Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name`')
        self._data["Speed 4 Total Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_4_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb', u'wb = entering wet-bulb temperature (C)', u'edb = dry-bulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name"]

    @speed_4_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def speed_4_energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def speed_4_part_load_fraction_correlation_curve_name(self):
        """Get speed_4_part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `speed_4_part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Speed 4 Part Load Fraction Correlation Curve Name"]

    @speed_4_part_load_fraction_correlation_curve_name.setter
    def speed_4_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (cooling load/steady state capacity)
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLR = part load ratio (cooling load/steady state capacity)'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_part_load_fraction_correlation_curve_name`')
        self._data["Speed 4 Part Load Fraction Correlation Curve Name"] = value

    @property
    def speed_4_nominal_time_for_condensate_removal_to_begin(self):
        """Get speed_4_nominal_time_for_condensate_removal_to_begin

        Returns:
            float: the value of `speed_4_nominal_time_for_condensate_removal_to_begin` or None if not set
        """
        return self._data["Speed 4 Nominal Time for Condensate Removal to Begin"]

    @speed_4_nominal_time_for_condensate_removal_to_begin.setter
    def speed_4_nominal_time_for_condensate_removal_to_begin(self, value=0.0 ):
        """  Corresponds to IDD Field `Speed 4 Nominal Time for Condensate Removal to Begin`
        The nominal time for condensate to begin leaving the coil's condensate
        drain line at the coil's rated air flow rate and temperature conditions.
        Nominal time is equal to the ratio of the energy of the coil's maximum
        condensate holding capacity (J) to the coil's steady state latent capacity (W).
        Suggested value is 1000; zero value means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '3000.0', u'note': [u"The nominal time for condensate to begin leaving the coil's condensate", u"drain line at the coil's rated air flow rate and temperature conditions.", u"Nominal time is equal to the ratio of the energy of the coil's maximum", u"condensate holding capacity (J) to the coil's steady state latent capacity (W).", u'Suggested value is 1000; zero value means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u's', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 4 Nominal Time for Condensate Removal to Begin`
                Units: s
                Default value: 0.0
                value >= 0.0
                value <= 3000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_nominal_time_for_condensate_removal_to_begin`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_nominal_time_for_condensate_removal_to_begin`')
            if value > 3000.0:
                raise ValueError('value need to be smaller 3000.0 '
                                 'for field `speed_4_nominal_time_for_condensate_removal_to_begin`')
        self._data["Speed 4 Nominal Time for Condensate Removal to Begin"] = value

    @property
    def speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(self):
        """Get speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity

        Returns:
            float: the value of `speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity` or None if not set
        """
        return self._data["Speed 4 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity"]

    @speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity.setter
    def speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Speed 4 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity`
        Ratio of the initial moisture evaporation rate from the cooling coil (when
        the compressor first turns off) and the coil's steady state latent capacity
        at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value
        means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '5.0', u'note': [u'Ratio of the initial moisture evaporation rate from the cooling coil (when', u"the compressor first turns off) and the coil's steady state latent capacity", u'at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value', u'means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 4 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`')
        self._data["Speed 4 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity"] = value

    @property
    def speed_4_maximum_cycling_rate(self):
        """Get speed_4_maximum_cycling_rate

        Returns:
            float: the value of `speed_4_maximum_cycling_rate` or None if not set
        """
        return self._data["Speed 4 Maximum Cycling Rate"]

    @speed_4_maximum_cycling_rate.setter
    def speed_4_maximum_cycling_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `Speed 4 Maximum Cycling Rate`
        The maximum on-off cycling rate for the compressor, which occurs at 50% run time
        fraction. Suggested value is 3; zero value means latent degradation
        model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '5.0', u'note': [u'The maximum on-off cycling rate for the compressor, which occurs at 50% run time', u'fraction. Suggested value is 3; zero value means latent degradation', u'model is disabled.'], u'minimum': '0.0', u'units': u'cycles/hr', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 4 Maximum Cycling Rate`
                Units: cycles/hr
                Default value: 0.0
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_maximum_cycling_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_maximum_cycling_rate`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `speed_4_maximum_cycling_rate`')
        self._data["Speed 4 Maximum Cycling Rate"] = value

    @property
    def speed_4_latent_capacity_time_constant(self):
        """Get speed_4_latent_capacity_time_constant

        Returns:
            float: the value of `speed_4_latent_capacity_time_constant` or None if not set
        """
        return self._data["Speed 4 Latent Capacity Time Constant"]

    @speed_4_latent_capacity_time_constant.setter
    def speed_4_latent_capacity_time_constant(self, value=0.0 ):
        """  Corresponds to IDD Field `Speed 4 Latent Capacity Time Constant`
        Time constant for the cooling coil's latent capacity to reach steady state after
        startup. Suggested value is 45; zero value means latent degradation
        model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '500.0', u'note': [u"Time constant for the cooling coil's latent capacity to reach steady state after", u'startup. Suggested value is 45; zero value means latent degradation', u'model is disabled.'], u'minimum': '0.0', u'units': u's', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 4 Latent Capacity Time Constant`
                Units: s
                Default value: 0.0
                value >= 0.0
                value <= 500.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_latent_capacity_time_constant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_latent_capacity_time_constant`')
            if value > 500.0:
                raise ValueError('value need to be smaller 500.0 '
                                 'for field `speed_4_latent_capacity_time_constant`')
        self._data["Speed 4 Latent Capacity Time Constant"] = value

    @property
    def speed_4_rated_waste_heat_fraction_of_power_input(self):
        """Get speed_4_rated_waste_heat_fraction_of_power_input

        Returns:
            float: the value of `speed_4_rated_waste_heat_fraction_of_power_input` or None if not set
        """
        return self._data["Speed 4 Rated Waste Heat Fraction of Power Input"]

    @speed_4_rated_waste_heat_fraction_of_power_input.setter
    def speed_4_rated_waste_heat_fraction_of_power_input(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Rated Waste Heat Fraction of Power Input`
        Recoverable waste heat at full load and rated conditions
        
        {'pytype': 'float', u'minimum>': '0.0', u'maximum': '1.0', u'note': [u'Recoverable waste heat at full load and rated conditions'], u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 4 Rated Waste Heat Fraction of Power Input`
                Units: dimensionless
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_rated_waste_heat_fraction_of_power_input`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_4_rated_waste_heat_fraction_of_power_input`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_4_rated_waste_heat_fraction_of_power_input`')
        self._data["Speed 4 Rated Waste Heat Fraction of Power Input"] = value

    @property
    def speed_4_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_4_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_4_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 4 Waste Heat Function of Temperature Curve Name"]

    @speed_4_waste_heat_function_of_temperature_curve_name.setter
    def speed_4_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db
        odb = Outdoor air dry-bulb temperature (C)
        db = entering coil dry-bulb temperature (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db', u'odb = Outdoor air dry-bulb temperature (C)', u'db = entering coil dry-bulb temperature (C)'], u'type': u'object-list', u'object-list': u'BiQuadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 4 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_4_evaporative_condenser_effectiveness(self):
        """Get speed_4_evaporative_condenser_effectiveness

        Returns:
            float: the value of `speed_4_evaporative_condenser_effectiveness` or None if not set
        """
        return self._data["Speed 4 Evaporative Condenser Effectiveness"]

    @speed_4_evaporative_condenser_effectiveness.setter
    def speed_4_evaporative_condenser_effectiveness(self, value=0.9 ):
        """  Corresponds to IDD Field `Speed 4 Evaporative Condenser Effectiveness`
        
        {'pytype': 'float', u'default': '0.9', u'maximum': '1.0', u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 4 Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_evaporative_condenser_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_evaporative_condenser_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_4_evaporative_condenser_effectiveness`')
        self._data["Speed 4 Evaporative Condenser Effectiveness"] = value

    @property
    def speed_4_evaporative_condenser_air_flow_rate(self):
        """Get speed_4_evaporative_condenser_air_flow_rate

        Returns:
            float: the value of `speed_4_evaporative_condenser_air_flow_rate` or None if not set
        """
        return self._data["Speed 4 Evaporative Condenser Air Flow Rate"]

    @speed_4_evaporative_condenser_air_flow_rate.setter
    def speed_4_evaporative_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Evaporative Condenser Air Flow Rate`
        Used to calculate evaporative condenser water use
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Used to calculate evaporative condenser water use'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 4 Evaporative Condenser Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_evaporative_condenser_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_4_evaporative_condenser_air_flow_rate`')
        self._data["Speed 4 Evaporative Condenser Air Flow Rate"] = value

    @property
    def speed_4_rated_evaporative_condenser_pump_power_consumption(self):
        """Get speed_4_rated_evaporative_condenser_pump_power_consumption

        Returns:
            float: the value of `speed_4_rated_evaporative_condenser_pump_power_consumption` or None if not set
        """
        return self._data["Speed 4 Rated Evaporative Condenser Pump Power Consumption"]

    @speed_4_rated_evaporative_condenser_pump_power_consumption.setter
    def speed_4_rated_evaporative_condenser_pump_power_consumption(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Rated Evaporative Condenser Pump Power Consumption`
        Rated power consumed by the evaporative condenser's water pump at Speed 4
        
        {'pytype': 'float', u'note': [u"Rated power consumed by the evaporative condenser's water pump at Speed 4"], u'autosizable': u'', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 4 Rated Evaporative Condenser Pump Power Consumption`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_rated_evaporative_condenser_pump_power_consumption`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_rated_evaporative_condenser_pump_power_consumption`')
        self._data["Speed 4 Rated Evaporative Condenser Pump Power Consumption"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilCoolingDxVariableSpeed(object):
    """ Corresponds to IDD object `Coil:Cooling:DX:VariableSpeed`
        Direct expansion (DX) cooling coil and condensing unit (includes electric compressor
        and condenser fan), variable-speed. Optional inputs for moisture evaporation from
        wet coil when compressor cycles off with continuous fan operation. Requires two to
        ten sets of performance data and will interpolate between speeds. Modeled as a
        single coil with variable-speed compressor.
    
    """
    internal_name = "Coil:Cooling:DX:VariableSpeed"
    field_count = 120
    required_fields = ["Name", "Indoor Air Inlet Node Name", "Indoor Air Outlet Node Name", "Number of Speeds", "Nominal Speed Level", "Gross Rated Total Cooling Capacity At Selected Nominal Speed Level", "Rated Air Flow Rate At Selected Nominal Speed Level", "Nominal Time for Condensate to Begin Leaving the Coil", "Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity", "Energy Part Load Fraction Curve Name", "Speed 1 Reference Unit Gross Rated Total Cooling Capacity", "Speed 1 Reference Unit Gross Rated Sensible Heat Ratio", "Speed 1 Reference Unit Gross Rated Cooling COP", "Speed 1 Reference Unit Rated Air Flow Rate", "Speed 1 Total Cooling Capacity Function of Temperature Curve Name", "Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name", "Speed 1 Energy Input Ratio Function of Temperature Curve Name", "Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Cooling:DX:VariableSpeed`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Indoor Air Inlet Node Name"] = None
        self._data["Indoor Air Outlet Node Name"] = None
        self._data["Number of Speeds"] = None
        self._data["Nominal Speed Level"] = None
        self._data["Gross Rated Total Cooling Capacity At Selected Nominal Speed Level"] = None
        self._data["Rated Air Flow Rate At Selected Nominal Speed Level"] = None
        self._data["Nominal Time for Condensate to Begin Leaving the Coil"] = None
        self._data["Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity"] = None
        self._data["Energy Part Load Fraction Curve Name"] = None
        self._data["Condenser Air Inlet Node Name"] = None
        self._data["Condenser Type"] = None
        self._data["Evaporative Condenser Pump Rated Power Consumption"] = None
        self._data["Crankcase Heater Capacity"] = None
        self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = None
        self._data["Supply Water Storage Tank Name"] = None
        self._data["Condensate Collection Water Storage Tank Name"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Operating Schedule Name"] = None
        self._data["Speed 1 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 1 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 1 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 1 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 1 Reference Unit Rated Condenser Air Flow Rate"] = None
        self._data["Speed 1 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = None
        self._data["Speed 1 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 2 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 2 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 2 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 2 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 2 Reference Unit Rated Condenser Air Flow Rate"] = None
        self._data["Speed 2 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = None
        self._data["Speed 2 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 3 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 3 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 3 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 3 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 3 Reference Unit Rated Condenser Air Flow Rate"] = None
        self._data["Speed 3 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = None
        self._data["Speed 3 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 4 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 4 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 4 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 4 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 4 Reference Unit Rated Condenser Air Flow Rate"] = None
        self._data["Speed 4 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = None
        self._data["Speed 4 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 5 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 5 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 5 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 5 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 5 Reference Unit Rated Condenser Air Flow Rate"] = None
        self._data["Speed 5 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = None
        self._data["Speed 5 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 5 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 6 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 6 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 6 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 6 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 6 Reference Unit Condenser Air Flow Rate"] = None
        self._data["Speed 6 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = None
        self._data["Speed 6 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 6 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 7 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 7 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 7 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 7 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 7 Reference Unit Condenser Flow Rate"] = None
        self._data["Speed 7 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = None
        self._data["Speed 7 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 7 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 8 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 8 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 8 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 8 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 8 Reference Unit Condenser Air Flow Rate"] = None
        self._data["Speed 8 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = None
        self._data["Speed 8 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 8 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 9 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 9 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 9 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 9 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 9 Reference Unit Condenser Air Flow Rate"] = None
        self._data["Speed 9 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = None
        self._data["Speed 9 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 9 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 10 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 10 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 10 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 10 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 10 Reference Unit Condenser Air Flow Rate"] = None
        self._data["Speed 10 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = None
        self._data["Speed 10 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 10 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.indoor_air_inlet_node_name = None
        else:
            self.indoor_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.indoor_air_outlet_node_name = None
        else:
            self.indoor_air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_speeds = None
        else:
            self.number_of_speeds = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_speed_level = None
        else:
            self.nominal_speed_level = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_total_cooling_capacity_at_selected_nominal_speed_level = None
        else:
            self.gross_rated_total_cooling_capacity_at_selected_nominal_speed_level = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_air_flow_rate_at_selected_nominal_speed_level = None
        else:
            self.rated_air_flow_rate_at_selected_nominal_speed_level = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_time_for_condensate_to_begin_leaving_the_coil = None
        else:
            self.nominal_time_for_condensate_to_begin_leaving_the_coil = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity = None
        else:
            self.initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.energy_part_load_fraction_curve_name = None
        else:
            self.energy_part_load_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_air_inlet_node_name = None
        else:
            self.condenser_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.evaporative_condenser_pump_rated_power_consumption = None
        else:
            self.evaporative_condenser_pump_rated_power_consumption = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.crankcase_heater_capacity = None
        else:
            self.crankcase_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.supply_water_storage_tank_name = None
        else:
            self.supply_water_storage_tank_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condensate_collection_water_storage_tank_name = None
        else:
            self.condensate_collection_water_storage_tank_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_operating_schedule_name = None
        else:
            self.basin_heater_operating_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_1_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_1_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_1_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_1_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_rated_condenser_air_flow_rate = None
        else:
            self.speed_1_reference_unit_rated_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling = None
        else:
            self.speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_1_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_1_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_2_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_2_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_2_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_2_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_rated_condenser_air_flow_rate = None
        else:
            self.speed_2_reference_unit_rated_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling = None
        else:
            self.speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_2_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_2_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_3_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_3_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_3_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_3_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_rated_condenser_air_flow_rate = None
        else:
            self.speed_3_reference_unit_rated_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling = None
        else:
            self.speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_3_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_3_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_4_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_4_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_4_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_4_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_rated_condenser_air_flow_rate = None
        else:
            self.speed_4_reference_unit_rated_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling = None
        else:
            self.speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_4_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_4_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_5_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_5_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_5_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_5_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_rated_condenser_air_flow_rate = None
        else:
            self.speed_5_reference_unit_rated_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling = None
        else:
            self.speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_5_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_5_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_6_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_6_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_6_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_6_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_condenser_air_flow_rate = None
        else:
            self.speed_6_reference_unit_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling = None
        else:
            self.speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_6_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_6_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_7_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_7_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_7_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_7_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_condenser_flow_rate = None
        else:
            self.speed_7_reference_unit_condenser_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling = None
        else:
            self.speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_7_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_7_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_8_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_8_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_8_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_8_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_condenser_air_flow_rate = None
        else:
            self.speed_8_reference_unit_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling = None
        else:
            self.speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_8_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_8_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_9_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_9_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_9_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_9_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_condenser_air_flow_rate = None
        else:
            self.speed_9_reference_unit_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling = None
        else:
            self.speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_9_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_9_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_10_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_10_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_10_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_10_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_condenser_air_flow_rate = None
        else:
            self.speed_10_reference_unit_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling = None
        else:
            self.speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_10_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_10_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'CoolingCoilsDXVariableSpeed', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def indoor_air_inlet_node_name(self):
        """Get indoor_air_inlet_node_name

        Returns:
            str: the value of `indoor_air_inlet_node_name` or None if not set
        """
        return self._data["Indoor Air Inlet Node Name"]

    @indoor_air_inlet_node_name.setter
    def indoor_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Indoor Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Indoor Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `indoor_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `indoor_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `indoor_air_inlet_node_name`')
        self._data["Indoor Air Inlet Node Name"] = value

    @property
    def indoor_air_outlet_node_name(self):
        """Get indoor_air_outlet_node_name

        Returns:
            str: the value of `indoor_air_outlet_node_name` or None if not set
        """
        return self._data["Indoor Air Outlet Node Name"]

    @indoor_air_outlet_node_name.setter
    def indoor_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Indoor Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Indoor Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `indoor_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `indoor_air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `indoor_air_outlet_node_name`')
        self._data["Indoor Air Outlet Node Name"] = value

    @property
    def number_of_speeds(self):
        """Get number_of_speeds

        Returns:
            int: the value of `number_of_speeds` or None if not set
        """
        return self._data["Number of Speeds"]

    @number_of_speeds.setter
    def number_of_speeds(self, value=2 ):
        """  Corresponds to IDD Field `Number of Speeds`
        
        {'pytype': 'int', u'default': '2', u'maximum': '10', u'required-field': True, u'minimum': '1', u'units': u'dimensionless', u'type': u'integer'}

        Args:
            value (int): value for IDD Field `Number of Speeds`
                Units: dimensionless
                Default value: 2
                value >= 1
                value <= 10
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_speeds`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_speeds`')
            if value > 10:
                raise ValueError('value need to be smaller 10 '
                                 'for field `number_of_speeds`')
        self._data["Number of Speeds"] = value

    @property
    def nominal_speed_level(self):
        """Get nominal_speed_level

        Returns:
            int: the value of `nominal_speed_level` or None if not set
        """
        return self._data["Nominal Speed Level"]

    @nominal_speed_level.setter
    def nominal_speed_level(self, value=2 ):
        """  Corresponds to IDD Field `Nominal Speed Level`
        must be lower than or equal to the highest speed number
        
        {'pytype': 'int', u'default': '2', u'required-field': True, u'note': [u'must be lower than or equal to the highest speed number'], u'units': u'dimensionless', u'type': u'integer'}

        Args:
            value (int): value for IDD Field `Nominal Speed Level`
                Units: dimensionless
                Default value: 2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `nominal_speed_level`'.format(value))
        self._data["Nominal Speed Level"] = value

    @property
    def gross_rated_total_cooling_capacity_at_selected_nominal_speed_level(self):
        """Get gross_rated_total_cooling_capacity_at_selected_nominal_speed_level

        Returns:
            float: the value of `gross_rated_total_cooling_capacity_at_selected_nominal_speed_level` or None if not set
        """
        return self._data["Gross Rated Total Cooling Capacity At Selected Nominal Speed Level"]

    @gross_rated_total_cooling_capacity_at_selected_nominal_speed_level.setter
    def gross_rated_total_cooling_capacity_at_selected_nominal_speed_level(self, value="autosize" ):
        """  Corresponds to IDD Field `Gross Rated Total Cooling Capacity At Selected Nominal Speed Level`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {'pytype': 'float', u'default': '"autosize"', u'required-field': True, u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'autosizable': u'', u'units': u'w', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Total Cooling Capacity At Selected Nominal Speed Level`
                Units: w
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_total_cooling_capacity_at_selected_nominal_speed_level`'.format(value))
        self._data["Gross Rated Total Cooling Capacity At Selected Nominal Speed Level"] = value

    @property
    def rated_air_flow_rate_at_selected_nominal_speed_level(self):
        """Get rated_air_flow_rate_at_selected_nominal_speed_level

        Returns:
            float: the value of `rated_air_flow_rate_at_selected_nominal_speed_level` or None if not set
        """
        return self._data["Rated Air Flow Rate At Selected Nominal Speed Level"]

    @rated_air_flow_rate_at_selected_nominal_speed_level.setter
    def rated_air_flow_rate_at_selected_nominal_speed_level(self, value="autosize" ):
        """  Corresponds to IDD Field `Rated Air Flow Rate At Selected Nominal Speed Level`
        
        {'pytype': 'float', u'default': '"autosize"', u'required-field': True, u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Air Flow Rate At Selected Nominal Speed Level`
                Units: m3/s
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_air_flow_rate_at_selected_nominal_speed_level`'.format(value))
        self._data["Rated Air Flow Rate At Selected Nominal Speed Level"] = value

    @property
    def nominal_time_for_condensate_to_begin_leaving_the_coil(self):
        """Get nominal_time_for_condensate_to_begin_leaving_the_coil

        Returns:
            float: the value of `nominal_time_for_condensate_to_begin_leaving_the_coil` or None if not set
        """
        return self._data["Nominal Time for Condensate to Begin Leaving the Coil"]

    @nominal_time_for_condensate_to_begin_leaving_the_coil.setter
    def nominal_time_for_condensate_to_begin_leaving_the_coil(self, value=0.0 ):
        """  Corresponds to IDD Field `Nominal Time for Condensate to Begin Leaving the Coil`
        
        {'pytype': 'float', u'default': '0.0', u'required-field': True, u'minimum': '0.0', u'units': u's', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Nominal Time for Condensate to Begin Leaving the Coil`
                Units: s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_time_for_condensate_to_begin_leaving_the_coil`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_time_for_condensate_to_begin_leaving_the_coil`')
        self._data["Nominal Time for Condensate to Begin Leaving the Coil"] = value

    @property
    def initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity(self):
        """Get initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity

        Returns:
            float: the value of `initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity` or None if not set
        """
        return self._data["Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity"]

    @initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity.setter
    def initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity`
        
        {'pytype': 'float', u'default': '0.0', u'required-field': True, u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity`')
        self._data["Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity"] = value

    @property
    def energy_part_load_fraction_curve_name(self):
        """Get energy_part_load_fraction_curve_name

        Returns:
            str: the value of `energy_part_load_fraction_curve_name` or None if not set
        """
        return self._data["Energy Part Load Fraction Curve Name"]

    @energy_part_load_fraction_curve_name.setter
    def energy_part_load_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Energy Part Load Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (cooling load/steady state capacity)
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLR = part load ratio (cooling load/steady state capacity)'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Energy Part Load Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `energy_part_load_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `energy_part_load_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `energy_part_load_fraction_curve_name`')
        self._data["Energy Part Load Fraction Curve Name"] = value

    @property
    def condenser_air_inlet_node_name(self):
        """Get condenser_air_inlet_node_name

        Returns:
            str: the value of `condenser_air_inlet_node_name` or None if not set
        """
        return self._data["Condenser Air Inlet Node Name"]

    @condenser_air_inlet_node_name.setter
    def condenser_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Air Inlet Node Name`
        Enter the name of an outdoor air node. This node name is also specified in
        an OutdoorAir:Node or OutdoorAir:NodeList object.
        
        {u'note': [u'Enter the name of an outdoor air node. This node name is also specified in', u'an OutdoorAir:Node or OutdoorAir:NodeList object.'], u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_air_inlet_node_name`')
        self._data["Condenser Air Inlet Node Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """  Corresponds to IDD Field `Condenser Type`
        
        {u'default': u'AirCooled', u'type': u'choice', u'key': [u'AirCooled', u'EvaporativelyCooled'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Type`
                Accepted values are:
                      - AirCooled
                      - EvaporativelyCooled
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_type`')
            vals = {}
            vals["aircooled"] = "AirCooled"
            vals["evaporativelycooled"] = "EvaporativelyCooled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condenser_type`'.format(value))
            value = vals[value_lower]
        self._data["Condenser Type"] = value

    @property
    def evaporative_condenser_pump_rated_power_consumption(self):
        """Get evaporative_condenser_pump_rated_power_consumption

        Returns:
            float: the value of `evaporative_condenser_pump_rated_power_consumption` or None if not set
        """
        return self._data["Evaporative Condenser Pump Rated Power Consumption"]

    @evaporative_condenser_pump_rated_power_consumption.setter
    def evaporative_condenser_pump_rated_power_consumption(self, value=0.0 ):
        """  Corresponds to IDD Field `Evaporative Condenser Pump Rated Power Consumption`
        Rated power consumed by the evaporative condenser's water pump
        
        {'pytype': 'float', u'default': '0.0', u'note': [u"Rated power consumed by the evaporative condenser's water pump"], u'autosizable': u'', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Evaporative Condenser Pump Rated Power Consumption`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporative_condenser_pump_rated_power_consumption`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `evaporative_condenser_pump_rated_power_consumption`')
        self._data["Evaporative Condenser Pump Rated Power Consumption"] = value

    @property
    def crankcase_heater_capacity(self):
        """Get crankcase_heater_capacity

        Returns:
            float: the value of `crankcase_heater_capacity` or None if not set
        """
        return self._data["Crankcase Heater Capacity"]

    @crankcase_heater_capacity.setter
    def crankcase_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Crankcase Heater Capacity`
        
        {'pytype': 'float', u'default': '0.0', u'ip-units': u'W', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Crankcase Heater Capacity`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `crankcase_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `crankcase_heater_capacity`')
        self._data["Crankcase Heater Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(self, value=10.0 ):
        """  Corresponds to IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
        
        {u'default': '10.0', u'units': u'C', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
                Units: C
                Default value: 10.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation`')
        self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = value

    @property
    def supply_water_storage_tank_name(self):
        """Get supply_water_storage_tank_name

        Returns:
            str: the value of `supply_water_storage_tank_name` or None if not set
        """
        return self._data["Supply Water Storage Tank Name"]

    @supply_water_storage_tank_name.setter
    def supply_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `Supply Water Storage Tank Name`
        
        {u'type': u'object-list', u'object-list': u'WaterStorageTankNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Supply Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_water_storage_tank_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `supply_water_storage_tank_name`')
        self._data["Supply Water Storage Tank Name"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set
        """
        return self._data["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `Condensate Collection Water Storage Tank Name`
        
        {u'type': u'object-list', u'object-list': u'WaterStorageTankNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condensate Collection Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condensate_collection_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condensate_collection_water_storage_tank_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condensate_collection_water_storage_tank_name`')
        self._data["Condensate Collection Water Storage Tank Name"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the DX coil is off.
        
        {'pytype': 'float', u'default': '0.0', u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled and for periods', u'when the basin heater is available (field Basin Heater Operating Schedule Name).', u'For this situation, the heater maintains the basin water temperature at the basin heater', u'setpoint temperature when the outdoor air temperature falls below the setpoint temperature.', u'The basin heater only operates when the DX coil is off.'], u'minimum': '0.0', u'units': u'W/K', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')
        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0 ):
        """  Corresponds to IDD Field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.
        
        {'pytype': 'float', u'default': '2.0', u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled.', u'Enter the outdoor dry-bulb temperature when the basin heater turns on.'], u'minimum': '2.0', u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')
        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self._data["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Basin Heater Operating Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.
        
        {u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled.', u'Schedule values greater than 0 allow the basin heater to operate whenever the outdoor', u'air dry-bulb temperature is below the basin heater setpoint temperature.', u'If a schedule name is not entered, the basin heater is allowed to operate', u'throughout the entire simulation.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Basin Heater Operating Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `basin_heater_operating_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_operating_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `basin_heater_operating_schedule_name`')
        self._data["Basin Heater Operating Schedule Name"] = value

    @property
    def speed_1_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_1_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 1 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_1_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_1_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {'pytype': 'float', u'required-field': True, u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'minimum': '0.0', u'units': u'w', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 1 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_1_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_1_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 1 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_1_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_1_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {'pytype': 'float', u'Maximum': u'1.0', u'required-field': True, u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 1 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_1_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_1_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 1 Reference Unit Gross Rated Cooling COP"]

    @speed_1_reference_unit_gross_rated_cooling_cop.setter
    def speed_1_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 1 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_1_reference_unit_rated_air_flow_rate(self):
        """Get speed_1_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_1_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 1 Reference Unit Rated Air Flow Rate"]

    @speed_1_reference_unit_rated_air_flow_rate.setter
    def speed_1_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_rated_air_flow_rate`')
        self._data["Speed 1 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_1_reference_unit_rated_condenser_air_flow_rate(self):
        """Get speed_1_reference_unit_rated_condenser_air_flow_rate

        Returns:
            float: the value of `speed_1_reference_unit_rated_condenser_air_flow_rate` or None if not set
        """
        return self._data["Speed 1 Reference Unit Rated Condenser Air Flow Rate"]

    @speed_1_reference_unit_rated_condenser_air_flow_rate.setter
    def speed_1_reference_unit_rated_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Rated Condenser Air Flow Rate`
        This field is only used for Condenser Type = EvaporativelyCooled
        
        {u'units': u'm3/s', u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled'], u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Rated Condenser Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_rated_condenser_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_rated_condenser_air_flow_rate`')
        self._data["Speed 1 Reference Unit Rated Condenser Air Flow Rate"] = value

    @property
    def speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling(self):
        """Get speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling

        Returns:
            float: the value of `speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set
        """
        return self._data["Speed 1 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Rated Pad Effectiveness of Evap Precooling`
        This field is only used for Condenser Type = EvaporativelyCooled
        
        {'pytype': 'float', u'maximum': '1.0', u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled'], u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
        self._data["Speed 1 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_1_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_1_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_1_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 1 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_1_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_1_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 1 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_1_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_2_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_2_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 2 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_2_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_2_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 2 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_2_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_2_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 2 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_2_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_2_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 2 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_2_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_2_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 2 Reference Unit Gross Rated Cooling COP"]

    @speed_2_reference_unit_gross_rated_cooling_cop.setter
    def speed_2_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 2 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_2_reference_unit_rated_air_flow_rate(self):
        """Get speed_2_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_2_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 2 Reference Unit Rated Air Flow Rate"]

    @speed_2_reference_unit_rated_air_flow_rate.setter
    def speed_2_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_rated_air_flow_rate`')
        self._data["Speed 2 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_2_reference_unit_rated_condenser_air_flow_rate(self):
        """Get speed_2_reference_unit_rated_condenser_air_flow_rate

        Returns:
            float: the value of `speed_2_reference_unit_rated_condenser_air_flow_rate` or None if not set
        """
        return self._data["Speed 2 Reference Unit Rated Condenser Air Flow Rate"]

    @speed_2_reference_unit_rated_condenser_air_flow_rate.setter
    def speed_2_reference_unit_rated_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Rated Condenser Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Rated Condenser Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_rated_condenser_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_rated_condenser_air_flow_rate`')
        self._data["Speed 2 Reference Unit Rated Condenser Air Flow Rate"] = value

    @property
    def speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling(self):
        """Get speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling

        Returns:
            float: the value of `speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set
        """
        return self._data["Speed 2 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Rated Pad Effectiveness of Evap Precooling`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
        self._data["Speed 2 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_2_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_2_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_2_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 2 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_2_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_2_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 2 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_2_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_3_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_3_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 3 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_3_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_3_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 3 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_3_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_3_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 3 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_3_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_3_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 3 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_3_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_3_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 3 Reference Unit Gross Rated Cooling COP"]

    @speed_3_reference_unit_gross_rated_cooling_cop.setter
    def speed_3_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 3 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_3_reference_unit_rated_air_flow_rate(self):
        """Get speed_3_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_3_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 3 Reference Unit Rated Air Flow Rate"]

    @speed_3_reference_unit_rated_air_flow_rate.setter
    def speed_3_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_rated_air_flow_rate`')
        self._data["Speed 3 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_3_reference_unit_rated_condenser_air_flow_rate(self):
        """Get speed_3_reference_unit_rated_condenser_air_flow_rate

        Returns:
            float: the value of `speed_3_reference_unit_rated_condenser_air_flow_rate` or None if not set
        """
        return self._data["Speed 3 Reference Unit Rated Condenser Air Flow Rate"]

    @speed_3_reference_unit_rated_condenser_air_flow_rate.setter
    def speed_3_reference_unit_rated_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Rated Condenser Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Rated Condenser Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_rated_condenser_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_rated_condenser_air_flow_rate`')
        self._data["Speed 3 Reference Unit Rated Condenser Air Flow Rate"] = value

    @property
    def speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling(self):
        """Get speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling

        Returns:
            float: the value of `speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set
        """
        return self._data["Speed 3 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Rated Pad Effectiveness of Evap Precooling`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
        self._data["Speed 3 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_3_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_3_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_3_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 3 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_3_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_3_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 3 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_3_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_4_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_4_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 4 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_4_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_4_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 4 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_4_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_4_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 4 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_4_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_4_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 4 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_4_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_4_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 4 Reference Unit Gross Rated Cooling COP"]

    @speed_4_reference_unit_gross_rated_cooling_cop.setter
    def speed_4_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 4 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_4_reference_unit_rated_air_flow_rate(self):
        """Get speed_4_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_4_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 4 Reference Unit Rated Air Flow Rate"]

    @speed_4_reference_unit_rated_air_flow_rate.setter
    def speed_4_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_rated_air_flow_rate`')
        self._data["Speed 4 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_4_reference_unit_rated_condenser_air_flow_rate(self):
        """Get speed_4_reference_unit_rated_condenser_air_flow_rate

        Returns:
            float: the value of `speed_4_reference_unit_rated_condenser_air_flow_rate` or None if not set
        """
        return self._data["Speed 4 Reference Unit Rated Condenser Air Flow Rate"]

    @speed_4_reference_unit_rated_condenser_air_flow_rate.setter
    def speed_4_reference_unit_rated_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Rated Condenser Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Rated Condenser Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_rated_condenser_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_rated_condenser_air_flow_rate`')
        self._data["Speed 4 Reference Unit Rated Condenser Air Flow Rate"] = value

    @property
    def speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling(self):
        """Get speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling

        Returns:
            float: the value of `speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set
        """
        return self._data["Speed 4 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Rated Pad Effectiveness of Evap Precooling`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
        self._data["Speed 4 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_4_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_4_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_4_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 4 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_4_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_4_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 4 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_4_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_5_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_5_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 5 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_5_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_5_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 5 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_5_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_5_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 5 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_5_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_5_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 5 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_5_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_5_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 5 Reference Unit Gross Rated Cooling COP"]

    @speed_5_reference_unit_gross_rated_cooling_cop.setter
    def speed_5_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 5 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_5_reference_unit_rated_air_flow_rate(self):
        """Get speed_5_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_5_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 5 Reference Unit Rated Air Flow Rate"]

    @speed_5_reference_unit_rated_air_flow_rate.setter
    def speed_5_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_rated_air_flow_rate`')
        self._data["Speed 5 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_5_reference_unit_rated_condenser_air_flow_rate(self):
        """Get speed_5_reference_unit_rated_condenser_air_flow_rate

        Returns:
            float: the value of `speed_5_reference_unit_rated_condenser_air_flow_rate` or None if not set
        """
        return self._data["Speed 5 Reference Unit Rated Condenser Air Flow Rate"]

    @speed_5_reference_unit_rated_condenser_air_flow_rate.setter
    def speed_5_reference_unit_rated_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Rated Condenser Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Rated Condenser Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_rated_condenser_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_rated_condenser_air_flow_rate`')
        self._data["Speed 5 Reference Unit Rated Condenser Air Flow Rate"] = value

    @property
    def speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling(self):
        """Get speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling

        Returns:
            float: the value of `speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set
        """
        return self._data["Speed 5 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Rated Pad Effectiveness of Evap Precooling`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
        self._data["Speed 5 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_5_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_5_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_5_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 5 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_5_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_5_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 5 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_5_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 5 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_5_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_5_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 5 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_6_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_6_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 6 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_6_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_6_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 6 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_6_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_6_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 6 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_6_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_6_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 6 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_6_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_6_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 6 Reference Unit Gross Rated Cooling COP"]

    @speed_6_reference_unit_gross_rated_cooling_cop.setter
    def speed_6_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 6 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_6_reference_unit_rated_air_flow_rate(self):
        """Get speed_6_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_6_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 6 Reference Unit Rated Air Flow Rate"]

    @speed_6_reference_unit_rated_air_flow_rate.setter
    def speed_6_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_rated_air_flow_rate`')
        self._data["Speed 6 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_6_reference_unit_condenser_air_flow_rate(self):
        """Get speed_6_reference_unit_condenser_air_flow_rate

        Returns:
            float: the value of `speed_6_reference_unit_condenser_air_flow_rate` or None if not set
        """
        return self._data["Speed 6 Reference Unit Condenser Air Flow Rate"]

    @speed_6_reference_unit_condenser_air_flow_rate.setter
    def speed_6_reference_unit_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Condenser Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Condenser Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_condenser_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_condenser_air_flow_rate`')
        self._data["Speed 6 Reference Unit Condenser Air Flow Rate"] = value

    @property
    def speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling(self):
        """Get speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling

        Returns:
            float: the value of `speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set
        """
        return self._data["Speed 6 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Rated Pad Effectiveness of Evap Precooling`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
        self._data["Speed 6 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_6_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_6_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_6_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 6 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_6_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_6_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 6 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_6_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 6 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_6_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_6_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 6 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_7_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_7_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 7 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_7_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_7_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 7 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_7_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_7_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 7 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_7_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_7_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 7 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_7_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_7_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 7 Reference Unit Gross Rated Cooling COP"]

    @speed_7_reference_unit_gross_rated_cooling_cop.setter
    def speed_7_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 7 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_7_reference_unit_rated_air_flow_rate(self):
        """Get speed_7_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_7_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 7 Reference Unit Rated Air Flow Rate"]

    @speed_7_reference_unit_rated_air_flow_rate.setter
    def speed_7_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_rated_air_flow_rate`')
        self._data["Speed 7 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_7_reference_unit_condenser_flow_rate(self):
        """Get speed_7_reference_unit_condenser_flow_rate

        Returns:
            float: the value of `speed_7_reference_unit_condenser_flow_rate` or None if not set
        """
        return self._data["Speed 7 Reference Unit Condenser Flow Rate"]

    @speed_7_reference_unit_condenser_flow_rate.setter
    def speed_7_reference_unit_condenser_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Condenser Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Condenser Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_condenser_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_condenser_flow_rate`')
        self._data["Speed 7 Reference Unit Condenser Flow Rate"] = value

    @property
    def speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling(self):
        """Get speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling

        Returns:
            float: the value of `speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set
        """
        return self._data["Speed 7 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Rated Pad Effectiveness of Evap Precooling`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
        self._data["Speed 7 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_7_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_7_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_7_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 7 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_7_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_7_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 7 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_7_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 7 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_7_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_7_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 7 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_8_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_8_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 8 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_8_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_8_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 8 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_8_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_8_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 8 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_8_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_8_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 8 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_8_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_8_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 8 Reference Unit Gross Rated Cooling COP"]

    @speed_8_reference_unit_gross_rated_cooling_cop.setter
    def speed_8_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 8 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_8_reference_unit_rated_air_flow_rate(self):
        """Get speed_8_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_8_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 8 Reference Unit Rated Air Flow Rate"]

    @speed_8_reference_unit_rated_air_flow_rate.setter
    def speed_8_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_rated_air_flow_rate`')
        self._data["Speed 8 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_8_reference_unit_condenser_air_flow_rate(self):
        """Get speed_8_reference_unit_condenser_air_flow_rate

        Returns:
            float: the value of `speed_8_reference_unit_condenser_air_flow_rate` or None if not set
        """
        return self._data["Speed 8 Reference Unit Condenser Air Flow Rate"]

    @speed_8_reference_unit_condenser_air_flow_rate.setter
    def speed_8_reference_unit_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Condenser Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Condenser Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_condenser_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_condenser_air_flow_rate`')
        self._data["Speed 8 Reference Unit Condenser Air Flow Rate"] = value

    @property
    def speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling(self):
        """Get speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling

        Returns:
            float: the value of `speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set
        """
        return self._data["Speed 8 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Rated Pad Effectiveness of Evap Precooling`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
        self._data["Speed 8 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_8_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_8_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_8_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 8 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_8_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_8_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 8 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_8_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 8 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_8_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_8_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 8 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_9_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_9_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 9 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_9_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_9_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 9 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_9_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_9_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 9 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_9_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_9_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 9 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_9_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_9_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 9 Reference Unit Gross Rated Cooling COP"]

    @speed_9_reference_unit_gross_rated_cooling_cop.setter
    def speed_9_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 9 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_9_reference_unit_rated_air_flow_rate(self):
        """Get speed_9_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_9_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 9 Reference Unit Rated Air Flow Rate"]

    @speed_9_reference_unit_rated_air_flow_rate.setter
    def speed_9_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_rated_air_flow_rate`')
        self._data["Speed 9 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_9_reference_unit_condenser_air_flow_rate(self):
        """Get speed_9_reference_unit_condenser_air_flow_rate

        Returns:
            float: the value of `speed_9_reference_unit_condenser_air_flow_rate` or None if not set
        """
        return self._data["Speed 9 Reference Unit Condenser Air Flow Rate"]

    @speed_9_reference_unit_condenser_air_flow_rate.setter
    def speed_9_reference_unit_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Condenser Air Flow Rate`
        optional
        
        {u'units': u'm3/s', u'note': [u'optional'], u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Condenser Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_condenser_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_condenser_air_flow_rate`')
        self._data["Speed 9 Reference Unit Condenser Air Flow Rate"] = value

    @property
    def speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling(self):
        """Get speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling

        Returns:
            float: the value of `speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set
        """
        return self._data["Speed 9 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Rated Pad Effectiveness of Evap Precooling`
        optional
        
        {'pytype': 'float', u'maximum': '1.0', u'note': [u'optional'], u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
        self._data["Speed 9 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_9_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_9_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_9_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 9 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_9_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_9_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 9 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_9_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 9 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_9_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_9_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 9 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_10_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_10_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 10 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_10_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_10_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 10 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_10_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_10_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 10 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_10_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_10_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 10 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_10_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_10_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 10 Reference Unit Gross Rated Cooling COP"]

    @speed_10_reference_unit_gross_rated_cooling_cop.setter
    def speed_10_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 10 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_10_reference_unit_rated_air_flow_rate(self):
        """Get speed_10_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_10_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 10 Reference Unit Rated Air Flow Rate"]

    @speed_10_reference_unit_rated_air_flow_rate.setter
    def speed_10_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_rated_air_flow_rate`')
        self._data["Speed 10 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_10_reference_unit_condenser_air_flow_rate(self):
        """Get speed_10_reference_unit_condenser_air_flow_rate

        Returns:
            float: the value of `speed_10_reference_unit_condenser_air_flow_rate` or None if not set
        """
        return self._data["Speed 10 Reference Unit Condenser Air Flow Rate"]

    @speed_10_reference_unit_condenser_air_flow_rate.setter
    def speed_10_reference_unit_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Condenser Air Flow Rate`
        optional
        
        {u'units': u'm3/s', u'note': [u'optional'], u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Condenser Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_condenser_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_condenser_air_flow_rate`')
        self._data["Speed 10 Reference Unit Condenser Air Flow Rate"] = value

    @property
    def speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling(self):
        """Get speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling

        Returns:
            float: the value of `speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set
        """
        return self._data["Speed 10 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Rated Pad Effectiveness of Evap Precooling`
        optional
        
        {'pytype': 'float', u'maximum': '1.0', u'note': [u'optional'], u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling`')
        self._data["Speed 10 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_10_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_10_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_10_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 10 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_10_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_10_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 10 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_10_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 10 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_10_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_10_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb', u'wb = entering wet-bulb temperature (C)', u'odb = air entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 10 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilCoolingDxTwoStageWithHumidityControlMode(object):
    """ Corresponds to IDD object `Coil:Cooling:DX:TwoStageWithHumidityControlMode`
        Direct expansion (DX) cooling coil and condensing unit (includes electric compressor
        and condenser fan), two-stage with humidity control mode (e.g. sub-cool or hot gas
        reheat). Optional inputs for moisture evaporation from wet coil when compressor
        cycles off with continuous fan operation. Requires two to four sets of performance
        data, see CoilPerformance:DX:Cooling. Stages are modeled as a face-split coil.
    
    """
    internal_name = "Coil:Cooling:DX:TwoStageWithHumidityControlMode"
    field_count = 21
    required_fields = ["Name", "Air Inlet Node Name", "Air Outlet Node Name", "Normal Mode Stage 1 Coil Performance Object Type", "Normal Mode Stage 1 Coil Performance Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Cooling:DX:TwoStageWithHumidityControlMode`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Crankcase Heater Capacity"] = None
        self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = None
        self._data["Number of Capacity Stages"] = None
        self._data["Number of Enhanced Dehumidification Modes"] = None
        self._data["Normal Mode Stage 1 Coil Performance Object Type"] = None
        self._data["Normal Mode Stage 1 Coil Performance Name"] = None
        self._data["Normal Mode Stage 1+2 Coil Performance Object Type"] = None
        self._data["Normal Mode Stage 1+2 Coil Performance Name"] = None
        self._data["Dehumidification Mode 1 Stage 1 Coil Performance Object Type"] = None
        self._data["Dehumidification Mode 1 Stage 1 Coil Performance Name"] = None
        self._data["Dehumidification Mode 1 Stage 1+2 Coil Performance Object Type"] = None
        self._data["Dehumidification Mode 1 Stage 1+2 Coil Performance Name"] = None
        self._data["Supply Water Storage Tank Name"] = None
        self._data["Condensate Collection Water Storage Tank Name"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Operating Schedule Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.crankcase_heater_capacity = None
        else:
            self.crankcase_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_capacity_stages = None
        else:
            self.number_of_capacity_stages = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_enhanced_dehumidification_modes = None
        else:
            self.number_of_enhanced_dehumidification_modes = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.normal_mode_stage_1_coil_performance_object_type = None
        else:
            self.normal_mode_stage_1_coil_performance_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.normal_mode_stage_1_coil_performance_name = None
        else:
            self.normal_mode_stage_1_coil_performance_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.normal_mode_stage_12_coil_performance_object_type = None
        else:
            self.normal_mode_stage_12_coil_performance_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.normal_mode_stage_12_coil_performance_name = None
        else:
            self.normal_mode_stage_12_coil_performance_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.dehumidification_mode_1_stage_1_coil_performance_object_type = None
        else:
            self.dehumidification_mode_1_stage_1_coil_performance_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.dehumidification_mode_1_stage_1_coil_performance_name = None
        else:
            self.dehumidification_mode_1_stage_1_coil_performance_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.dehumidification_mode_1_stage_12_coil_performance_object_type = None
        else:
            self.dehumidification_mode_1_stage_12_coil_performance_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.dehumidification_mode_1_stage_12_coil_performance_name = None
        else:
            self.dehumidification_mode_1_stage_12_coil_performance_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.supply_water_storage_tank_name = None
        else:
            self.supply_water_storage_tank_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condensate_collection_water_storage_tank_name = None
        else:
            self.condensate_collection_water_storage_tank_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_operating_schedule_name = None
        else:
            self.basin_heater_operating_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'AFNCoilNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def crankcase_heater_capacity(self):
        """Get crankcase_heater_capacity

        Returns:
            float: the value of `crankcase_heater_capacity` or None if not set
        """
        return self._data["Crankcase Heater Capacity"]

    @crankcase_heater_capacity.setter
    def crankcase_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Crankcase Heater Capacity`
        
        {'pytype': 'float', u'default': '0.0', u'ip-units': u'W', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Crankcase Heater Capacity`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `crankcase_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `crankcase_heater_capacity`')
        self._data["Crankcase Heater Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(self, value=10.0 ):
        """  Corresponds to IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
        
        {u'default': '10.0', u'units': u'C', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
                Units: C
                Default value: 10.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation`')
        self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = value

    @property
    def number_of_capacity_stages(self):
        """Get number_of_capacity_stages

        Returns:
            int: the value of `number_of_capacity_stages` or None if not set
        """
        return self._data["Number of Capacity Stages"]

    @number_of_capacity_stages.setter
    def number_of_capacity_stages(self, value=1 ):
        """  Corresponds to IDD Field `Number of Capacity Stages`
        
        {u'default': '1', u'minimum': '1', u'type': u'integer', u'maximum': '2', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Number of Capacity Stages`
                Default value: 1
                value >= 1
                value <= 2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_capacity_stages`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_capacity_stages`')
            if value > 2:
                raise ValueError('value need to be smaller 2 '
                                 'for field `number_of_capacity_stages`')
        self._data["Number of Capacity Stages"] = value

    @property
    def number_of_enhanced_dehumidification_modes(self):
        """Get number_of_enhanced_dehumidification_modes

        Returns:
            int: the value of `number_of_enhanced_dehumidification_modes` or None if not set
        """
        return self._data["Number of Enhanced Dehumidification Modes"]

    @number_of_enhanced_dehumidification_modes.setter
    def number_of_enhanced_dehumidification_modes(self, value=0 ):
        """  Corresponds to IDD Field `Number of Enhanced Dehumidification Modes`
        
        {u'default': '0', u'minimum': '0', u'type': u'integer', u'maximum': '1', 'pytype': 'int'}

        Args:
            value (int): value for IDD Field `Number of Enhanced Dehumidification Modes`
                Default value: 0
                value >= 0
                value <= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_enhanced_dehumidification_modes`'.format(value))
            if value < 0:
                raise ValueError('value need to be greater or equal 0 '
                                 'for field `number_of_enhanced_dehumidification_modes`')
            if value > 1:
                raise ValueError('value need to be smaller 1 '
                                 'for field `number_of_enhanced_dehumidification_modes`')
        self._data["Number of Enhanced Dehumidification Modes"] = value

    @property
    def normal_mode_stage_1_coil_performance_object_type(self):
        """Get normal_mode_stage_1_coil_performance_object_type

        Returns:
            str: the value of `normal_mode_stage_1_coil_performance_object_type` or None if not set
        """
        return self._data["Normal Mode Stage 1 Coil Performance Object Type"]

    @normal_mode_stage_1_coil_performance_object_type.setter
    def normal_mode_stage_1_coil_performance_object_type(self, value=None):
        """  Corresponds to IDD Field `Normal Mode Stage 1 Coil Performance Object Type`
        
        {u'type': u'choice', u'key': [u'CoilPerformance:DX:Cooling'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Normal Mode Stage 1 Coil Performance Object Type`
                Accepted values are:
                      - CoilPerformance:DX:Cooling
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `normal_mode_stage_1_coil_performance_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `normal_mode_stage_1_coil_performance_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `normal_mode_stage_1_coil_performance_object_type`')
            vals = {}
            vals["coilperformance:dx:cooling"] = "CoilPerformance:DX:Cooling"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `normal_mode_stage_1_coil_performance_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Normal Mode Stage 1 Coil Performance Object Type"] = value

    @property
    def normal_mode_stage_1_coil_performance_name(self):
        """Get normal_mode_stage_1_coil_performance_name

        Returns:
            str: the value of `normal_mode_stage_1_coil_performance_name` or None if not set
        """
        return self._data["Normal Mode Stage 1 Coil Performance Name"]

    @normal_mode_stage_1_coil_performance_name.setter
    def normal_mode_stage_1_coil_performance_name(self, value=None):
        """  Corresponds to IDD Field `Normal Mode Stage 1 Coil Performance Name`
        
        {u'type': u'object-list', u'object-list': u'CoilPerformanceDX', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Normal Mode Stage 1 Coil Performance Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `normal_mode_stage_1_coil_performance_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `normal_mode_stage_1_coil_performance_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `normal_mode_stage_1_coil_performance_name`')
        self._data["Normal Mode Stage 1 Coil Performance Name"] = value

    @property
    def normal_mode_stage_12_coil_performance_object_type(self):
        """Get normal_mode_stage_12_coil_performance_object_type

        Returns:
            str: the value of `normal_mode_stage_12_coil_performance_object_type` or None if not set
        """
        return self._data["Normal Mode Stage 1+2 Coil Performance Object Type"]

    @normal_mode_stage_12_coil_performance_object_type.setter
    def normal_mode_stage_12_coil_performance_object_type(self, value=None):
        """  Corresponds to IDD Field `Normal Mode Stage 1+2 Coil Performance Object Type`
        
        {u'type': u'choice', u'key': [u'CoilPerformance:DX:Cooling'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Normal Mode Stage 1+2 Coil Performance Object Type`
                Accepted values are:
                      - CoilPerformance:DX:Cooling
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `normal_mode_stage_12_coil_performance_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `normal_mode_stage_12_coil_performance_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `normal_mode_stage_12_coil_performance_object_type`')
            vals = {}
            vals["coilperformance:dx:cooling"] = "CoilPerformance:DX:Cooling"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `normal_mode_stage_12_coil_performance_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Normal Mode Stage 1+2 Coil Performance Object Type"] = value

    @property
    def normal_mode_stage_12_coil_performance_name(self):
        """Get normal_mode_stage_12_coil_performance_name

        Returns:
            str: the value of `normal_mode_stage_12_coil_performance_name` or None if not set
        """
        return self._data["Normal Mode Stage 1+2 Coil Performance Name"]

    @normal_mode_stage_12_coil_performance_name.setter
    def normal_mode_stage_12_coil_performance_name(self, value=None):
        """  Corresponds to IDD Field `Normal Mode Stage 1+2 Coil Performance Name`
        
        {u'type': u'object-list', u'object-list': u'CoilPerformanceDX', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Normal Mode Stage 1+2 Coil Performance Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `normal_mode_stage_12_coil_performance_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `normal_mode_stage_12_coil_performance_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `normal_mode_stage_12_coil_performance_name`')
        self._data["Normal Mode Stage 1+2 Coil Performance Name"] = value

    @property
    def dehumidification_mode_1_stage_1_coil_performance_object_type(self):
        """Get dehumidification_mode_1_stage_1_coil_performance_object_type

        Returns:
            str: the value of `dehumidification_mode_1_stage_1_coil_performance_object_type` or None if not set
        """
        return self._data["Dehumidification Mode 1 Stage 1 Coil Performance Object Type"]

    @dehumidification_mode_1_stage_1_coil_performance_object_type.setter
    def dehumidification_mode_1_stage_1_coil_performance_object_type(self, value=None):
        """  Corresponds to IDD Field `Dehumidification Mode 1 Stage 1 Coil Performance Object Type`
        
        {u'type': u'choice', u'key': [u'CoilPerformance:DX:Cooling'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Dehumidification Mode 1 Stage 1 Coil Performance Object Type`
                Accepted values are:
                      - CoilPerformance:DX:Cooling
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_mode_1_stage_1_coil_performance_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_mode_1_stage_1_coil_performance_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `dehumidification_mode_1_stage_1_coil_performance_object_type`')
            vals = {}
            vals["coilperformance:dx:cooling"] = "CoilPerformance:DX:Cooling"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `dehumidification_mode_1_stage_1_coil_performance_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Dehumidification Mode 1 Stage 1 Coil Performance Object Type"] = value

    @property
    def dehumidification_mode_1_stage_1_coil_performance_name(self):
        """Get dehumidification_mode_1_stage_1_coil_performance_name

        Returns:
            str: the value of `dehumidification_mode_1_stage_1_coil_performance_name` or None if not set
        """
        return self._data["Dehumidification Mode 1 Stage 1 Coil Performance Name"]

    @dehumidification_mode_1_stage_1_coil_performance_name.setter
    def dehumidification_mode_1_stage_1_coil_performance_name(self, value=None):
        """  Corresponds to IDD Field `Dehumidification Mode 1 Stage 1 Coil Performance Name`
        
        {u'type': u'object-list', u'object-list': u'CoilPerformanceDX', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Dehumidification Mode 1 Stage 1 Coil Performance Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_mode_1_stage_1_coil_performance_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_mode_1_stage_1_coil_performance_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `dehumidification_mode_1_stage_1_coil_performance_name`')
        self._data["Dehumidification Mode 1 Stage 1 Coil Performance Name"] = value

    @property
    def dehumidification_mode_1_stage_12_coil_performance_object_type(self):
        """Get dehumidification_mode_1_stage_12_coil_performance_object_type

        Returns:
            str: the value of `dehumidification_mode_1_stage_12_coil_performance_object_type` or None if not set
        """
        return self._data["Dehumidification Mode 1 Stage 1+2 Coil Performance Object Type"]

    @dehumidification_mode_1_stage_12_coil_performance_object_type.setter
    def dehumidification_mode_1_stage_12_coil_performance_object_type(self, value=None):
        """  Corresponds to IDD Field `Dehumidification Mode 1 Stage 1+2 Coil Performance Object Type`
        
        {u'type': u'choice', u'key': [u'CoilPerformance:DX:Cooling'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Dehumidification Mode 1 Stage 1+2 Coil Performance Object Type`
                Accepted values are:
                      - CoilPerformance:DX:Cooling
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_mode_1_stage_12_coil_performance_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_mode_1_stage_12_coil_performance_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `dehumidification_mode_1_stage_12_coil_performance_object_type`')
            vals = {}
            vals["coilperformance:dx:cooling"] = "CoilPerformance:DX:Cooling"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `dehumidification_mode_1_stage_12_coil_performance_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Dehumidification Mode 1 Stage 1+2 Coil Performance Object Type"] = value

    @property
    def dehumidification_mode_1_stage_12_coil_performance_name(self):
        """Get dehumidification_mode_1_stage_12_coil_performance_name

        Returns:
            str: the value of `dehumidification_mode_1_stage_12_coil_performance_name` or None if not set
        """
        return self._data["Dehumidification Mode 1 Stage 1+2 Coil Performance Name"]

    @dehumidification_mode_1_stage_12_coil_performance_name.setter
    def dehumidification_mode_1_stage_12_coil_performance_name(self, value=None):
        """  Corresponds to IDD Field `Dehumidification Mode 1 Stage 1+2 Coil Performance Name`
        
        {u'type': u'object-list', u'object-list': u'CoilPerformanceDX', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Dehumidification Mode 1 Stage 1+2 Coil Performance Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_mode_1_stage_12_coil_performance_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_mode_1_stage_12_coil_performance_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `dehumidification_mode_1_stage_12_coil_performance_name`')
        self._data["Dehumidification Mode 1 Stage 1+2 Coil Performance Name"] = value

    @property
    def supply_water_storage_tank_name(self):
        """Get supply_water_storage_tank_name

        Returns:
            str: the value of `supply_water_storage_tank_name` or None if not set
        """
        return self._data["Supply Water Storage Tank Name"]

    @supply_water_storage_tank_name.setter
    def supply_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `Supply Water Storage Tank Name`
        
        {u'type': u'object-list', u'object-list': u'WaterStorageTankNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Supply Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_water_storage_tank_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `supply_water_storage_tank_name`')
        self._data["Supply Water Storage Tank Name"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set
        """
        return self._data["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `Condensate Collection Water Storage Tank Name`
        
        {u'type': u'object-list', u'object-list': u'WaterStorageTankNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condensate Collection Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condensate_collection_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condensate_collection_water_storage_tank_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condensate_collection_water_storage_tank_name`')
        self._data["Condensate Collection Water Storage Tank Name"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the DX coil is off.
        
        {'pytype': 'float', u'default': '0.0', u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled and for periods', u'when the basin heater is available (field Basin Heater Operating Schedule Name).', u'For this situation, the heater maintains the basin water temperature at the basin heater', u'setpoint temperature when the outdoor air temperature falls below the setpoint temperature.', u'The basin heater only operates when the DX coil is off.'], u'minimum': '0.0', u'units': u'W/K', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')
        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0 ):
        """  Corresponds to IDD Field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.
        
        {'pytype': 'float', u'default': '2.0', u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled.', u'Enter the outdoor dry-bulb temperature when the basin heater turns on.'], u'minimum': '2.0', u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')
        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self._data["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Basin Heater Operating Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.
        
        {u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled.', u'Schedule values greater than 0 allow the basin heater to operate whenever the outdoor', u'air dry-bulb temperature is below the basin heater setpoint temperature.', u'If a schedule name is not entered, the basin heater is allowed to operate', u'throughout the entire simulation.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Basin Heater Operating Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `basin_heater_operating_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_operating_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `basin_heater_operating_schedule_name`')
        self._data["Basin Heater Operating Schedule Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilPerformanceDxCooling(object):
    """ Corresponds to IDD object `CoilPerformance:DX:Cooling`
        Used to specify DX cooling coil performance for one mode of operation for a
        Coil:Cooling:DX:TwoStageWithHumidityControlMode object which may reference one to four
        CoilPerformance:DX:Cooling objects depending on the specified number of stages and
        dehumidification modes. In nearly all cases, the Rated Air Flow Rate will be the same
        for all performance objects associated with a given coil. If bypass is specified,
        the Rated Air Flow Rate includes both the bypassed flow and the flow through the
        active part of the coil.
    
    """
    internal_name = "CoilPerformance:DX:Cooling"
    field_count = 22
    required_fields = ["Name", "Gross Rated Total Cooling Capacity", "Gross Rated Sensible Heat Ratio", "Rated Air Flow Rate", "Total Cooling Capacity Function of Temperature Curve Name", "Total Cooling Capacity Function of Flow Fraction Curve Name", "Energy Input Ratio Function of Temperature Curve Name", "Energy Input Ratio Function of Flow Fraction Curve Name", "Part Load Fraction Correlation Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `CoilPerformance:DX:Cooling`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Gross Rated Total Cooling Capacity"] = None
        self._data["Gross Rated Sensible Heat Ratio"] = None
        self._data["Gross Rated Cooling COP"] = None
        self._data["Rated Air Flow Rate"] = None
        self._data["Fraction of Air Flow Bypassed Around Coil"] = None
        self._data["Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Total Cooling Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Part Load Fraction Correlation Curve Name"] = None
        self._data["Nominal Time for Condensate Removal to Begin"] = None
        self._data["Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"] = None
        self._data["Maximum Cycling Rate"] = None
        self._data["Latent Capacity Time Constant"] = None
        self._data["Condenser Air Inlet Node Name"] = None
        self._data["Condenser Type"] = None
        self._data["Evaporative Condenser Effectiveness"] = None
        self._data["Evaporative Condenser Air Flow Rate"] = None
        self._data["Evaporative Condenser Pump Rated Power Consumption"] = None
        self._data["Sensible Heat Ratio Function of Temperature Curve Name"] = None
        self._data["Sensible Heat Ratio Function of Flow Fraction Curve Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_total_cooling_capacity = None
        else:
            self.gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_sensible_heat_ratio = None
        else:
            self.gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_cooling_cop = None
        else:
            self.gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_air_flow_rate = None
        else:
            self.rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_air_flow_bypassed_around_coil = None
        else:
            self.fraction_of_air_flow_bypassed_around_coil = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_cooling_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.total_cooling_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.part_load_fraction_correlation_curve_name = None
        else:
            self.part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_time_for_condensate_removal_to_begin = None
        else:
            self.nominal_time_for_condensate_removal_to_begin = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity = None
        else:
            self.ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_cycling_rate = None
        else:
            self.maximum_cycling_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.latent_capacity_time_constant = None
        else:
            self.latent_capacity_time_constant = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_air_inlet_node_name = None
        else:
            self.condenser_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.evaporative_condenser_effectiveness = None
        else:
            self.evaporative_condenser_effectiveness = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.evaporative_condenser_air_flow_rate = None
        else:
            self.evaporative_condenser_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.evaporative_condenser_pump_rated_power_consumption = None
        else:
            self.evaporative_condenser_pump_rated_power_consumption = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensible_heat_ratio_function_of_temperature_curve_name = None
        else:
            self.sensible_heat_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensible_heat_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.sensible_heat_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'CoilPerformanceDX', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def gross_rated_total_cooling_capacity(self):
        """Get gross_rated_total_cooling_capacity

        Returns:
            float: the value of `gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Gross Rated Total Cooling Capacity"]

    @gross_rated_total_cooling_capacity.setter
    def gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        gross capacity excluding supply air fan heat
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat', u'gross capacity excluding supply air fan heat', u'rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and', u'air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Total Cooling Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_total_cooling_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_total_cooling_capacity`')
        self._data["Gross Rated Total Cooling Capacity"] = value

    @property
    def gross_rated_sensible_heat_ratio(self):
        """Get gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Gross Rated Sensible Heat Ratio"]

    @gross_rated_sensible_heat_ratio.setter
    def gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Gross Rated Sensible Heat Ratio`
        Rated sensible heat ratio (gross sensible capacity/gross total capacity)
        sensible and total capacities do not include supply fan heat
        
        {'pytype': 'float', u'maximum': '1.0', u'required-field': True, u'note': [u'Rated sensible heat ratio (gross sensible capacity/gross total capacity)', u'sensible and total capacities do not include supply fan heat'], u'autosizable': u'', u'minimum': '0.5', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Sensible Heat Ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `gross_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `gross_rated_sensible_heat_ratio`')
        self._data["Gross Rated Sensible Heat Ratio"] = value

    @property
    def gross_rated_cooling_cop(self):
        """Get gross_rated_cooling_cop

        Returns:
            float: the value of `gross_rated_cooling_cop` or None if not set
        """
        return self._data["Gross Rated Cooling COP"]

    @gross_rated_cooling_cop.setter
    def gross_rated_cooling_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `Gross Rated Cooling COP`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply fan heat or supply fan electrical energy input
        
        {'pytype': 'float', u'default': '3.0', u'minimum>': '0.0', u'note': [u'Gross cooling capacity divided by power input to the compressor and outdoor fan,', u'does not include supply fan heat or supply fan electrical energy input'], u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_cooling_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_cooling_cop`')
        self._data["Gross Rated Cooling COP"] = value

    @property
    def rated_air_flow_rate(self):
        """Get rated_air_flow_rate

        Returns:
            float: the value of `rated_air_flow_rate` or None if not set
        """
        return self._data["Rated Air Flow Rate"]

    @rated_air_flow_rate.setter
    def rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Air Flow Rate`
        Flow rate corresponding to Rated total Cooling capacity, Rated SHR and Rated COP
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Flow rate corresponding to Rated total Cooling capacity, Rated SHR and Rated COP'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_air_flow_rate`')
        self._data["Rated Air Flow Rate"] = value

    @property
    def fraction_of_air_flow_bypassed_around_coil(self):
        """Get fraction_of_air_flow_bypassed_around_coil

        Returns:
            float: the value of `fraction_of_air_flow_bypassed_around_coil` or None if not set
        """
        return self._data["Fraction of Air Flow Bypassed Around Coil"]

    @fraction_of_air_flow_bypassed_around_coil.setter
    def fraction_of_air_flow_bypassed_around_coil(self, value=0.0 ):
        """  Corresponds to IDD Field `Fraction of Air Flow Bypassed Around Coil`
        Fraction of Rated Air Flow Rate which bypasses the cooling coil
        in this performance mode.  The remaining portion of the flow
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity.
        This is used to model face-split coils on multi-stage units or bypass dampers.
        If total flow rate varies during simulation, the same fraction is bypassed.
        
        {'pytype': 'float', u'default': '0.0', u'maximum<': '1.0', u'note': [u'Fraction of Rated Air Flow Rate which bypasses the cooling coil', u'in this performance mode.  The remaining portion of the flow', u'should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity.', u'This is used to model face-split coils on multi-stage units or bypass dampers.', u'If total flow rate varies during simulation, the same fraction is bypassed.'], u'minimum': '0.0', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Fraction of Air Flow Bypassed Around Coil`
                Default value: 0.0
                value >= 0.0
                value < 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_air_flow_bypassed_around_coil`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_air_flow_bypassed_around_coil`')
            if value >= 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_air_flow_bypassed_around_coil`')
        self._data["Fraction of Air Flow Bypassed Around Coil"] = value

    @property
    def total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Total Cooling Capacity Function of Temperature Curve Name"]

    @total_cooling_capacity_function_of_temperature_curve_name.setter
    def total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb', u'wb = entering wet-bulb temperature (C)', u'edb = dry-bulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def total_cooling_capacity_function_of_flow_fraction_curve_name(self):
        """Get total_cooling_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `total_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Total Cooling Capacity Function of Flow Fraction Curve Name"]

    @total_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def total_cooling_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Total Cooling Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Total Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `total_cooling_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `total_cooling_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `total_cooling_capacity_function_of_flow_fraction_curve_name`')
        self._data["Total Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def energy_input_ratio_function_of_temperature_curve_name(self):
        """Get energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Energy Input Ratio Function of Temperature Curve Name"]

    @energy_input_ratio_function_of_temperature_curve_name.setter
    def energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb', u'wb = entering wet-bulb temperature (C)', u'edb = dry-bulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Energy Input Ratio Function of Flow Fraction Curve Name"]

    @energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def part_load_fraction_correlation_curve_name(self):
        """Get part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Part Load Fraction Correlation Curve Name"]

    @part_load_fraction_correlation_curve_name.setter
    def part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (cooling load/steady state capacity)
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLR = part load ratio (cooling load/steady state capacity)'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `part_load_fraction_correlation_curve_name`')
        self._data["Part Load Fraction Correlation Curve Name"] = value

    @property
    def nominal_time_for_condensate_removal_to_begin(self):
        """Get nominal_time_for_condensate_removal_to_begin

        Returns:
            float: the value of `nominal_time_for_condensate_removal_to_begin` or None if not set
        """
        return self._data["Nominal Time for Condensate Removal to Begin"]

    @nominal_time_for_condensate_removal_to_begin.setter
    def nominal_time_for_condensate_removal_to_begin(self, value=0.0 ):
        """  Corresponds to IDD Field `Nominal Time for Condensate Removal to Begin`
        The nominal time for condensate to begin leaving the coil's condensate
        drain line at the coil's rated air flow rate and temperature conditions.
        Nominal time is equal to the ratio of the energy of the coil's maximum
        condensate holding capacity (J) to the coil's steady state latent capacity (W).
        Suggested value is 1000; zero value means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '3000.0', u'note': [u"The nominal time for condensate to begin leaving the coil's condensate", u"drain line at the coil's rated air flow rate and temperature conditions.", u"Nominal time is equal to the ratio of the energy of the coil's maximum", u"condensate holding capacity (J) to the coil's steady state latent capacity (W).", u'Suggested value is 1000; zero value means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u's', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Nominal Time for Condensate Removal to Begin`
                Units: s
                Default value: 0.0
                value >= 0.0
                value <= 3000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_time_for_condensate_removal_to_begin`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_time_for_condensate_removal_to_begin`')
            if value > 3000.0:
                raise ValueError('value need to be smaller 3000.0 '
                                 'for field `nominal_time_for_condensate_removal_to_begin`')
        self._data["Nominal Time for Condensate Removal to Begin"] = value

    @property
    def ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(self):
        """Get ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity

        Returns:
            float: the value of `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity` or None if not set
        """
        return self._data["Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"]

    @ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity.setter
    def ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
        Ratio of the initial moisture evaporation rate from the cooling coil (when
        the compressor first turns off) and the coil's steady state latent capacity
        at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value
        means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '5.0', u'note': [u'Ratio of the initial moisture evaporation rate from the cooling coil (when', u"the compressor first turns off) and the coil's steady state latent capacity", u'at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value', u'means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`')
        self._data["Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"] = value

    @property
    def maximum_cycling_rate(self):
        """Get maximum_cycling_rate

        Returns:
            float: the value of `maximum_cycling_rate` or None if not set
        """
        return self._data["Maximum Cycling Rate"]

    @maximum_cycling_rate.setter
    def maximum_cycling_rate(self, value=0.0 ):
        """  Corresponds to IDD Field `Maximum Cycling Rate`
        The maximum on-off cycling rate for the compressor, which occurs at 50% run time
        fraction. Suggested value is 3; zero value means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '5.0', u'note': [u'The maximum on-off cycling rate for the compressor, which occurs at 50% run time', u'fraction. Suggested value is 3; zero value means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u'cycles/hr', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Cycling Rate`
                Units: cycles/hr
                Default value: 0.0
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_cycling_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_cycling_rate`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `maximum_cycling_rate`')
        self._data["Maximum Cycling Rate"] = value

    @property
    def latent_capacity_time_constant(self):
        """Get latent_capacity_time_constant

        Returns:
            float: the value of `latent_capacity_time_constant` or None if not set
        """
        return self._data["Latent Capacity Time Constant"]

    @latent_capacity_time_constant.setter
    def latent_capacity_time_constant(self, value=0.0 ):
        """  Corresponds to IDD Field `Latent Capacity Time Constant`
        Time constant for the cooling coil's latent capacity to reach steady state after
        startup. Suggested value is 45; zero value means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '500.0', u'note': [u"Time constant for the cooling coil's latent capacity to reach steady state after", u'startup. Suggested value is 45; zero value means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u's', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Latent Capacity Time Constant`
                Units: s
                Default value: 0.0
                value >= 0.0
                value <= 500.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `latent_capacity_time_constant`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `latent_capacity_time_constant`')
            if value > 500.0:
                raise ValueError('value need to be smaller 500.0 '
                                 'for field `latent_capacity_time_constant`')
        self._data["Latent Capacity Time Constant"] = value

    @property
    def condenser_air_inlet_node_name(self):
        """Get condenser_air_inlet_node_name

        Returns:
            str: the value of `condenser_air_inlet_node_name` or None if not set
        """
        return self._data["Condenser Air Inlet Node Name"]

    @condenser_air_inlet_node_name.setter
    def condenser_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Air Inlet Node Name`
        Enter the name of an outdoor air node. This node name is also specified in
        an OutdoorAir:Node or OutdoorAir:NodeList object.
        
        {u'note': [u'Enter the name of an outdoor air node. This node name is also specified in', u'an OutdoorAir:Node or OutdoorAir:NodeList object.'], u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_air_inlet_node_name`')
        self._data["Condenser Air Inlet Node Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """  Corresponds to IDD Field `Condenser Type`
        
        {u'default': u'AirCooled', u'type': u'choice', u'key': [u'AirCooled', u'EvaporativelyCooled'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Type`
                Accepted values are:
                      - AirCooled
                      - EvaporativelyCooled
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_type`')
            vals = {}
            vals["aircooled"] = "AirCooled"
            vals["evaporativelycooled"] = "EvaporativelyCooled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condenser_type`'.format(value))
            value = vals[value_lower]
        self._data["Condenser Type"] = value

    @property
    def evaporative_condenser_effectiveness(self):
        """Get evaporative_condenser_effectiveness

        Returns:
            float: the value of `evaporative_condenser_effectiveness` or None if not set
        """
        return self._data["Evaporative Condenser Effectiveness"]

    @evaporative_condenser_effectiveness.setter
    def evaporative_condenser_effectiveness(self, value=0.9 ):
        """  Corresponds to IDD Field `Evaporative Condenser Effectiveness`
        
        {'pytype': 'float', u'default': '0.9', u'maximum': '1.0', u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporative_condenser_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `evaporative_condenser_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `evaporative_condenser_effectiveness`')
        self._data["Evaporative Condenser Effectiveness"] = value

    @property
    def evaporative_condenser_air_flow_rate(self):
        """Get evaporative_condenser_air_flow_rate

        Returns:
            float: the value of `evaporative_condenser_air_flow_rate` or None if not set
        """
        return self._data["Evaporative Condenser Air Flow Rate"]

    @evaporative_condenser_air_flow_rate.setter
    def evaporative_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Evaporative Condenser Air Flow Rate`
        Used to calculate evaporative condenser water use
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Used to calculate evaporative condenser water use'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Evaporative Condenser Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporative_condenser_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `evaporative_condenser_air_flow_rate`')
        self._data["Evaporative Condenser Air Flow Rate"] = value

    @property
    def evaporative_condenser_pump_rated_power_consumption(self):
        """Get evaporative_condenser_pump_rated_power_consumption

        Returns:
            float: the value of `evaporative_condenser_pump_rated_power_consumption` or None if not set
        """
        return self._data["Evaporative Condenser Pump Rated Power Consumption"]

    @evaporative_condenser_pump_rated_power_consumption.setter
    def evaporative_condenser_pump_rated_power_consumption(self, value=0.0 ):
        """  Corresponds to IDD Field `Evaporative Condenser Pump Rated Power Consumption`
        Rated power consumed by the evaporative condenser's water pump
        
        {'pytype': 'float', u'default': '0.0', u'note': [u"Rated power consumed by the evaporative condenser's water pump"], u'autosizable': u'', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Evaporative Condenser Pump Rated Power Consumption`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporative_condenser_pump_rated_power_consumption`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `evaporative_condenser_pump_rated_power_consumption`')
        self._data["Evaporative Condenser Pump Rated Power Consumption"] = value

    @property
    def sensible_heat_ratio_function_of_temperature_curve_name(self):
        """Get sensible_heat_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `sensible_heat_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Sensible Heat Ratio Function of Temperature Curve Name"]

    @sensible_heat_ratio_function_of_temperature_curve_name.setter
    def sensible_heat_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Sensible Heat Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db
        wb = entering wet-bulb temperature seen by the DX cooling coil (C)
        db = entering dry-bulb temperature seen by the DX cooling coil (C)
        entering temperature can be outside air or pretreated air.
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db', u'wb = entering wet-bulb temperature seen by the DX cooling coil (C)', u'db = entering dry-bulb temperature seen by the DX cooling coil (C)', u'entering temperature can be outside air or pretreated air.'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Sensible Heat Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `sensible_heat_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sensible_heat_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `sensible_heat_ratio_function_of_temperature_curve_name`')
        self._data["Sensible Heat Ratio Function of Temperature Curve Name"] = value

    @property
    def sensible_heat_ratio_function_of_flow_fraction_curve_name(self):
        """Get sensible_heat_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `sensible_heat_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Sensible Heat Ratio Function of Flow Fraction Curve Name"]

    @sensible_heat_ratio_function_of_flow_fraction_curve_name.setter
    def sensible_heat_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Sensible Heat Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Sensible Heat Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `sensible_heat_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sensible_heat_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `sensible_heat_ratio_function_of_flow_fraction_curve_name`')
        self._data["Sensible Heat Ratio Function of Flow Fraction Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilCoolingDxVariableRefrigerantFlow(object):
    """ Corresponds to IDD object `Coil:Cooling:DX:VariableRefrigerantFlow`
        Variable refrigerant flow (VRF) direct expansion (DX) cooling coil. Used with
        ZoneHVAC:TerminalUnit:VariableRefrigerantFlow. Condensing unit is modeled separately,
        see AirConditioner:VariableRefrigerantFlow.
    
    """
    internal_name = "Coil:Cooling:DX:VariableRefrigerantFlow"
    field_count = 10
    required_fields = ["Name", "Gross Rated Total Cooling Capacity", "Gross Rated Sensible Heat Ratio", "Rated Air Flow Rate", "Cooling Capacity Ratio Modifier Function of Temperature Curve Name", "Cooling Capacity Modifier Curve Function of Flow Fraction Name", "Coil Air Inlet Node", "Coil Air Outlet Node"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Cooling:DX:VariableRefrigerantFlow`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Gross Rated Total Cooling Capacity"] = None
        self._data["Gross Rated Sensible Heat Ratio"] = None
        self._data["Rated Air Flow Rate"] = None
        self._data["Cooling Capacity Ratio Modifier Function of Temperature Curve Name"] = None
        self._data["Cooling Capacity Modifier Curve Function of Flow Fraction Name"] = None
        self._data["Coil Air Inlet Node"] = None
        self._data["Coil Air Outlet Node"] = None
        self._data["Name of Water Storage Tank for Condensate Collection"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_total_cooling_capacity = None
        else:
            self.gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_sensible_heat_ratio = None
        else:
            self.gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_air_flow_rate = None
        else:
            self.rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_capacity_ratio_modifier_function_of_temperature_curve_name = None
        else:
            self.cooling_capacity_ratio_modifier_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_capacity_modifier_curve_function_of_flow_fraction_name = None
        else:
            self.cooling_capacity_modifier_curve_function_of_flow_fraction_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coil_air_inlet_node = None
        else:
            self.coil_air_inlet_node = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coil_air_outlet_node = None
        else:
            self.coil_air_outlet_node = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.name_of_water_storage_tank_for_condensate_collection = None
        else:
            self.name_of_water_storage_tank_for_condensate_collection = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'CoolingCoilsDXVarRefrigFlow', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def gross_rated_total_cooling_capacity(self):
        """Get gross_rated_total_cooling_capacity

        Returns:
            float: the value of `gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Gross Rated Total Cooling Capacity"]

    @gross_rated_total_cooling_capacity.setter
    def gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Cooling capacity excluding supply air fan heat
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat', u'Cooling capacity excluding supply air fan heat'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Total Cooling Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_total_cooling_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_total_cooling_capacity`')
        self._data["Gross Rated Total Cooling Capacity"] = value

    @property
    def gross_rated_sensible_heat_ratio(self):
        """Get gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Gross Rated Sensible Heat Ratio"]

    @gross_rated_sensible_heat_ratio.setter
    def gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Gross Rated Sensible Heat Ratio`
        Sensible heat ratio excluding supply air fan heat
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Sensible heat ratio excluding supply air fan heat'], u'autosizable': u'', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Sensible Heat Ratio`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_sensible_heat_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_sensible_heat_ratio`')
        self._data["Gross Rated Sensible Heat Ratio"] = value

    @property
    def rated_air_flow_rate(self):
        """Get rated_air_flow_rate

        Returns:
            float: the value of `rated_air_flow_rate` or None if not set
        """
        return self._data["Rated Air Flow Rate"]

    @rated_air_flow_rate.setter
    def rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Air Flow Rate`
        Volume flow rate corresponding to rated total cooling capacity
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Volume flow rate corresponding to rated total cooling capacity', u'should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_air_flow_rate`')
        self._data["Rated Air Flow Rate"] = value

    @property
    def cooling_capacity_ratio_modifier_function_of_temperature_curve_name(self):
        """Get cooling_capacity_ratio_modifier_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_capacity_ratio_modifier_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling Capacity Ratio Modifier Function of Temperature Curve Name"]

    @cooling_capacity_ratio_modifier_function_of_temperature_curve_name.setter
    def cooling_capacity_ratio_modifier_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Capacity Ratio Modifier Function of Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        Table:TwoIndependentVariables object can also be used
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'Table:TwoIndependentVariables object can also be used'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling Capacity Ratio Modifier Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_capacity_ratio_modifier_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_capacity_ratio_modifier_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_capacity_ratio_modifier_function_of_temperature_curve_name`')
        self._data["Cooling Capacity Ratio Modifier Function of Temperature Curve Name"] = value

    @property
    def cooling_capacity_modifier_curve_function_of_flow_fraction_name(self):
        """Get cooling_capacity_modifier_curve_function_of_flow_fraction_name

        Returns:
            str: the value of `cooling_capacity_modifier_curve_function_of_flow_fraction_name` or None if not set
        """
        return self._data["Cooling Capacity Modifier Curve Function of Flow Fraction Name"]

    @cooling_capacity_modifier_curve_function_of_flow_fraction_name.setter
    def cooling_capacity_modifier_curve_function_of_flow_fraction_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Capacity Modifier Curve Function of Flow Fraction Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling Capacity Modifier Curve Function of Flow Fraction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_capacity_modifier_curve_function_of_flow_fraction_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_capacity_modifier_curve_function_of_flow_fraction_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_capacity_modifier_curve_function_of_flow_fraction_name`')
        self._data["Cooling Capacity Modifier Curve Function of Flow Fraction Name"] = value

    @property
    def coil_air_inlet_node(self):
        """Get coil_air_inlet_node

        Returns:
            str: the value of `coil_air_inlet_node` or None if not set
        """
        return self._data["Coil Air Inlet Node"]

    @coil_air_inlet_node.setter
    def coil_air_inlet_node(self, value=None):
        """  Corresponds to IDD Field `Coil Air Inlet Node`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Coil Air Inlet Node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `coil_air_inlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `coil_air_inlet_node`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `coil_air_inlet_node`')
        self._data["Coil Air Inlet Node"] = value

    @property
    def coil_air_outlet_node(self):
        """Get coil_air_outlet_node

        Returns:
            str: the value of `coil_air_outlet_node` or None if not set
        """
        return self._data["Coil Air Outlet Node"]

    @coil_air_outlet_node.setter
    def coil_air_outlet_node(self, value=None):
        """  Corresponds to IDD Field `Coil Air Outlet Node`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Coil Air Outlet Node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `coil_air_outlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `coil_air_outlet_node`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `coil_air_outlet_node`')
        self._data["Coil Air Outlet Node"] = value

    @property
    def name_of_water_storage_tank_for_condensate_collection(self):
        """Get name_of_water_storage_tank_for_condensate_collection

        Returns:
            str: the value of `name_of_water_storage_tank_for_condensate_collection` or None if not set
        """
        return self._data["Name of Water Storage Tank for Condensate Collection"]

    @name_of_water_storage_tank_for_condensate_collection.setter
    def name_of_water_storage_tank_for_condensate_collection(self, value=None):
        """  Corresponds to IDD Field `Name of Water Storage Tank for Condensate Collection`
        
        {u'type': u'object-list', u'object-list': u'WaterStorageTankNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name of Water Storage Tank for Condensate Collection`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name_of_water_storage_tank_for_condensate_collection`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name_of_water_storage_tank_for_condensate_collection`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name_of_water_storage_tank_for_condensate_collection`')
        self._data["Name of Water Storage Tank for Condensate Collection"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilHeatingDxVariableRefrigerantFlow(object):
    """ Corresponds to IDD object `Coil:Heating:DX:VariableRefrigerantFlow`
        Variable refrigerant flow (VRF) direct expansion (DX) heating coil (air-to-air heat
        pump). Used with ZoneHVAC:TerminalUnit:VariableRefrigerantFlow. Condensing unit is
        modeled separately, see AirConditioner:VariableRefrigerantFlow.
    
    """
    internal_name = "Coil:Heating:DX:VariableRefrigerantFlow"
    field_count = 8
    required_fields = ["Name", "Gross Rated Heating Capacity", "Rated Air Flow Rate", "Coil Air Inlet Node", "Coil Air Outlet Node", "Heating Capacity Ratio Modifier Function of Temperature Curve Name", "Heating Capacity Modifier Function of Flow Fraction Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Heating:DX:VariableRefrigerantFlow`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule"] = None
        self._data["Gross Rated Heating Capacity"] = None
        self._data["Rated Air Flow Rate"] = None
        self._data["Coil Air Inlet Node"] = None
        self._data["Coil Air Outlet Node"] = None
        self._data["Heating Capacity Ratio Modifier Function of Temperature Curve Name"] = None
        self._data["Heating Capacity Modifier Function of Flow Fraction Curve Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule = None
        else:
            self.availability_schedule = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_heating_capacity = None
        else:
            self.gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_air_flow_rate = None
        else:
            self.rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coil_air_inlet_node = None
        else:
            self.coil_air_inlet_node = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coil_air_outlet_node = None
        else:
            self.coil_air_outlet_node = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_ratio_modifier_function_of_temperature_curve_name = None
        else:
            self.heating_capacity_ratio_modifier_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_modifier_function_of_flow_fraction_curve_name = None
        else:
            self.heating_capacity_modifier_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'HeatingCoilsDXVarRefrigFlow', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule(self):
        """Get availability_schedule

        Returns:
            str: the value of `availability_schedule` or None if not set
        """
        return self._data["Availability Schedule"]

    @availability_schedule.setter
    def availability_schedule(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule`')
        self._data["Availability Schedule"] = value

    @property
    def gross_rated_heating_capacity(self):
        """Get gross_rated_heating_capacity

        Returns:
            float: the value of `gross_rated_heating_capacity` or None if not set
        """
        return self._data["Gross Rated Heating Capacity"]

    @gross_rated_heating_capacity.setter
    def gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        capacity excluding supply air fan heat
        rating point outside dry-bulb temp 8.33 C, outside wet-bulb temp 6.11 C
        rating point heating coil entering air dry-bulb 21.11 C, coil entering wetbulb 15.55 C
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Heating capacity not accounting for the effect of supply air fan heat', u'capacity excluding supply air fan heat', u'rating point outside dry-bulb temp 8.33 C, outside wet-bulb temp 6.11 C', u'rating point heating coil entering air dry-bulb 21.11 C, coil entering wetbulb 15.55 C'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Heating Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_heating_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_heating_capacity`')
        self._data["Gross Rated Heating Capacity"] = value

    @property
    def rated_air_flow_rate(self):
        """Get rated_air_flow_rate

        Returns:
            float: the value of `rated_air_flow_rate` or None if not set
        """
        return self._data["Rated Air Flow Rate"]

    @rated_air_flow_rate.setter
    def rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Air Flow Rate`
        volume flow rate corresponding to rated total capacity
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated heating capacity
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'volume flow rate corresponding to rated total capacity', u'should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated heating capacity'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_air_flow_rate`')
        self._data["Rated Air Flow Rate"] = value

    @property
    def coil_air_inlet_node(self):
        """Get coil_air_inlet_node

        Returns:
            str: the value of `coil_air_inlet_node` or None if not set
        """
        return self._data["Coil Air Inlet Node"]

    @coil_air_inlet_node.setter
    def coil_air_inlet_node(self, value=None):
        """  Corresponds to IDD Field `Coil Air Inlet Node`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Coil Air Inlet Node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `coil_air_inlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `coil_air_inlet_node`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `coil_air_inlet_node`')
        self._data["Coil Air Inlet Node"] = value

    @property
    def coil_air_outlet_node(self):
        """Get coil_air_outlet_node

        Returns:
            str: the value of `coil_air_outlet_node` or None if not set
        """
        return self._data["Coil Air Outlet Node"]

    @coil_air_outlet_node.setter
    def coil_air_outlet_node(self, value=None):
        """  Corresponds to IDD Field `Coil Air Outlet Node`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Coil Air Outlet Node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `coil_air_outlet_node`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `coil_air_outlet_node`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `coil_air_outlet_node`')
        self._data["Coil Air Outlet Node"] = value

    @property
    def heating_capacity_ratio_modifier_function_of_temperature_curve_name(self):
        """Get heating_capacity_ratio_modifier_function_of_temperature_curve_name

        Returns:
            str: the value of `heating_capacity_ratio_modifier_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Heating Capacity Ratio Modifier Function of Temperature Curve Name"]

    @heating_capacity_ratio_modifier_function_of_temperature_curve_name.setter
    def heating_capacity_ratio_modifier_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Ratio Modifier Function of Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        Table:TwoIndependentVariables object can also be used
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'Table:TwoIndependentVariables object can also be used'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heating Capacity Ratio Modifier Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_capacity_ratio_modifier_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_capacity_ratio_modifier_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_capacity_ratio_modifier_function_of_temperature_curve_name`')
        self._data["Heating Capacity Ratio Modifier Function of Temperature Curve Name"] = value

    @property
    def heating_capacity_modifier_function_of_flow_fraction_curve_name(self):
        """Get heating_capacity_modifier_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `heating_capacity_modifier_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Heating Capacity Modifier Function of Flow Fraction Curve Name"]

    @heating_capacity_modifier_function_of_flow_fraction_curve_name.setter
    def heating_capacity_modifier_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Modifier Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heating Capacity Modifier Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_capacity_modifier_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_capacity_modifier_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_capacity_modifier_function_of_flow_fraction_curve_name`')
        self._data["Heating Capacity Modifier Function of Flow Fraction Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilHeatingWater(object):
    """ Corresponds to IDD object `Coil:Heating:Water`
        Hot water heating coil, NTU-effectiveness model, assumes a cross-flow heat exchanger.
        Two options for capacity inputs: UA and water flow rate or capacity and design
        temperatures.
    
    """
    internal_name = "Coil:Heating:Water"
    field_count = 15
    required_fields = ["Name", "Water Inlet Node Name", "Water Outlet Node Name", "Air Inlet Node Name", "Air Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Heating:Water`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["U-Factor Times Area Value"] = None
        self._data["Maximum Water Flow Rate"] = None
        self._data["Water Inlet Node Name"] = None
        self._data["Water Outlet Node Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Performance Input Method"] = None
        self._data["Rated Capacity"] = None
        self._data["Rated Inlet Water Temperature"] = None
        self._data["Rated Inlet Air Temperature"] = None
        self._data["Rated Outlet Water Temperature"] = None
        self._data["Rated Outlet Air Temperature"] = None
        self._data["Rated Ratio for Air and Water Convection"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ufactor_times_area_value = None
        else:
            self.ufactor_times_area_value = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_water_flow_rate = None
        else:
            self.maximum_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_inlet_node_name = None
        else:
            self.water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_outlet_node_name = None
        else:
            self.water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.performance_input_method = None
        else:
            self.performance_input_method = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_capacity = None
        else:
            self.rated_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_inlet_water_temperature = None
        else:
            self.rated_inlet_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_inlet_air_temperature = None
        else:
            self.rated_inlet_air_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_outlet_water_temperature = None
        else:
            self.rated_outlet_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_outlet_air_temperature = None
        else:
            self.rated_outlet_air_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_ratio_for_air_and_water_convection = None
        else:
            self.rated_ratio_for_air_and_water_convection = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'SimpleCoils', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def ufactor_times_area_value(self):
        """Get ufactor_times_area_value

        Returns:
            float: the value of `ufactor_times_area_value` or None if not set
        """
        return self._data["U-Factor Times Area Value"]

    @ufactor_times_area_value.setter
    def ufactor_times_area_value(self, value="autosize" ):
        """  Corresponds to IDD Field `U-Factor Times Area Value`
        UA value under rating conditions
        
        {'pytype': 'float', u'default': '"autosize"', u'note': [u'UA value under rating conditions'], u'autosizable': u'', u'units': u'W/K', 'type': 'real'}

        Args:
            value (float): value for IDD Field `U-Factor Times Area Value`
                Units: W/K
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `ufactor_times_area_value`'.format(value))
        self._data["U-Factor Times Area Value"] = value

    @property
    def maximum_water_flow_rate(self):
        """Get maximum_water_flow_rate

        Returns:
            float: the value of `maximum_water_flow_rate` or None if not set
        """
        return self._data["Maximum Water Flow Rate"]

    @maximum_water_flow_rate.setter
    def maximum_water_flow_rate(self, value="autosize" ):
        """  Corresponds to IDD Field `Maximum Water Flow Rate`
        
        {'pytype': 'float', u'default': '"autosize"', u'ip-units': u'gal/min', u'autosizable': u'', u'units': u'm3/s', 'type': 'real'}

        Args:
            value (float): value for IDD Field `Maximum Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_water_flow_rate`'.format(value))
        self._data["Maximum Water Flow Rate"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name

        Returns:
            str: the value of `water_inlet_node_name` or None if not set
        """
        return self._data["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_inlet_node_name`')
        self._data["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name

        Returns:
            str: the value of `water_outlet_node_name` or None if not set
        """
        return self._data["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_outlet_node_name`')
        self._data["Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def performance_input_method(self):
        """Get performance_input_method

        Returns:
            str: the value of `performance_input_method` or None if not set
        """
        return self._data["Performance Input Method"]

    @performance_input_method.setter
    def performance_input_method(self, value="UFactorTimesAreaAndDesignWaterFlowRate"):
        """  Corresponds to IDD Field `Performance Input Method`
        
        {u'default': u'UFactorTimesAreaAndDesignWaterFlowRate', u'type': u'Choice', u'key': [u'UFactorTimesAreaAndDesignWaterFlowRate', u'NominalCapacity'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Performance Input Method`
                Default value: UFactorTimesAreaAndDesignWaterFlowRate
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `performance_input_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `performance_input_method`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `performance_input_method`')
        self._data["Performance Input Method"] = value

    @property
    def rated_capacity(self):
        """Get rated_capacity

        Returns:
            float: the value of `rated_capacity` or None if not set
        """
        return self._data["Rated Capacity"]

    @rated_capacity.setter
    def rated_capacity(self, value="autosize" ):
        """  Corresponds to IDD Field `Rated Capacity`
        
        {'pytype': 'float', u'default': '"autosize"', u'autosizable': u'', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Capacity`
                Units: W
                Default value: "autosize"
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_capacity`')
        self._data["Rated Capacity"] = value

    @property
    def rated_inlet_water_temperature(self):
        """Get rated_inlet_water_temperature

        Returns:
            float: the value of `rated_inlet_water_temperature` or None if not set
        """
        return self._data["Rated Inlet Water Temperature"]

    @rated_inlet_water_temperature.setter
    def rated_inlet_water_temperature(self, value=82.2 ):
        """  Corresponds to IDD Field `Rated Inlet Water Temperature`
        
        {u'units': u'C', u'default': '82.2', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Rated Inlet Water Temperature`
                Units: C
                Default value: 82.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_inlet_water_temperature`'.format(value))
        self._data["Rated Inlet Water Temperature"] = value

    @property
    def rated_inlet_air_temperature(self):
        """Get rated_inlet_air_temperature

        Returns:
            float: the value of `rated_inlet_air_temperature` or None if not set
        """
        return self._data["Rated Inlet Air Temperature"]

    @rated_inlet_air_temperature.setter
    def rated_inlet_air_temperature(self, value=16.6 ):
        """  Corresponds to IDD Field `Rated Inlet Air Temperature`
        
        {u'units': u'C', u'default': '16.6', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Rated Inlet Air Temperature`
                Units: C
                Default value: 16.6
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_inlet_air_temperature`'.format(value))
        self._data["Rated Inlet Air Temperature"] = value

    @property
    def rated_outlet_water_temperature(self):
        """Get rated_outlet_water_temperature

        Returns:
            float: the value of `rated_outlet_water_temperature` or None if not set
        """
        return self._data["Rated Outlet Water Temperature"]

    @rated_outlet_water_temperature.setter
    def rated_outlet_water_temperature(self, value=71.1 ):
        """  Corresponds to IDD Field `Rated Outlet Water Temperature`
        
        {u'units': u'C', u'default': '71.1', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Rated Outlet Water Temperature`
                Units: C
                Default value: 71.1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_outlet_water_temperature`'.format(value))
        self._data["Rated Outlet Water Temperature"] = value

    @property
    def rated_outlet_air_temperature(self):
        """Get rated_outlet_air_temperature

        Returns:
            float: the value of `rated_outlet_air_temperature` or None if not set
        """
        return self._data["Rated Outlet Air Temperature"]

    @rated_outlet_air_temperature.setter
    def rated_outlet_air_temperature(self, value=32.2 ):
        """  Corresponds to IDD Field `Rated Outlet Air Temperature`
        
        {u'units': u'C', u'default': '32.2', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Rated Outlet Air Temperature`
                Units: C
                Default value: 32.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_outlet_air_temperature`'.format(value))
        self._data["Rated Outlet Air Temperature"] = value

    @property
    def rated_ratio_for_air_and_water_convection(self):
        """Get rated_ratio_for_air_and_water_convection

        Returns:
            float: the value of `rated_ratio_for_air_and_water_convection` or None if not set
        """
        return self._data["Rated Ratio for Air and Water Convection"]

    @rated_ratio_for_air_and_water_convection.setter
    def rated_ratio_for_air_and_water_convection(self, value=0.5 ):
        """  Corresponds to IDD Field `Rated Ratio for Air and Water Convection`
        
        {u'default': '0.5', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Rated Ratio for Air and Water Convection`
                Default value: 0.5
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_ratio_for_air_and_water_convection`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_ratio_for_air_and_water_convection`')
        self._data["Rated Ratio for Air and Water Convection"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilHeatingSteam(object):
    """ Corresponds to IDD object `Coil:Heating:Steam`
        Steam heating coil. Condenses and sub-cools steam at loop pressure and discharges
        condensate through steam traps to low pressure condensate line.
    
    """
    internal_name = "Coil:Heating:Steam"
    field_count = 11
    required_fields = ["Name", "Water Inlet Node Name", "Water Outlet Node Name", "Air Inlet Node Name", "Air Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Heating:Steam`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Maximum Steam Flow Rate"] = None
        self._data["Degree of SubCooling"] = None
        self._data["Degree of Loop SubCooling"] = None
        self._data["Water Inlet Node Name"] = None
        self._data["Water Outlet Node Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Coil Control Type"] = None
        self._data["Temperature Setpoint Node Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_steam_flow_rate = None
        else:
            self.maximum_steam_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.degree_of_subcooling = None
        else:
            self.degree_of_subcooling = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.degree_of_loop_subcooling = None
        else:
            self.degree_of_loop_subcooling = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_inlet_node_name = None
        else:
            self.water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_outlet_node_name = None
        else:
            self.water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.coil_control_type = None
        else:
            self.coil_control_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_setpoint_node_name = None
        else:
            self.temperature_setpoint_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'HeatingCoilName', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def maximum_steam_flow_rate(self):
        """Get maximum_steam_flow_rate

        Returns:
            float: the value of `maximum_steam_flow_rate` or None if not set
        """
        return self._data["Maximum Steam Flow Rate"]

    @maximum_steam_flow_rate.setter
    def maximum_steam_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Maximum Steam Flow Rate`
        
        {u'units': u'm3/s', u'minimum>': '0.0', 'type': 'real', u'autosizable': u'', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Steam Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_steam_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_steam_flow_rate`')
        self._data["Maximum Steam Flow Rate"] = value

    @property
    def degree_of_subcooling(self):
        """Get degree_of_subcooling

        Returns:
            float: the value of `degree_of_subcooling` or None if not set
        """
        return self._data["Degree of SubCooling"]

    @degree_of_subcooling.setter
    def degree_of_subcooling(self, value=None):
        """  Corresponds to IDD Field `Degree of SubCooling`
        
        {u'units': u'C', u'minimum': '1.0', 'type': 'real', u'maximum': '5.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Degree of SubCooling`
                Units: C
                value >= 1.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `degree_of_subcooling`'.format(value))
            if value < 1.0:
                raise ValueError('value need to be greater or equal 1.0 '
                                 'for field `degree_of_subcooling`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `degree_of_subcooling`')
        self._data["Degree of SubCooling"] = value

    @property
    def degree_of_loop_subcooling(self):
        """Get degree_of_loop_subcooling

        Returns:
            float: the value of `degree_of_loop_subcooling` or None if not set
        """
        return self._data["Degree of Loop SubCooling"]

    @degree_of_loop_subcooling.setter
    def degree_of_loop_subcooling(self, value=20.0 ):
        """  Corresponds to IDD Field `Degree of Loop SubCooling`
        
        {u'units': u'C', u'default': '20.0', u'minimum': '10.0', 'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Degree of Loop SubCooling`
                Units: C
                Default value: 20.0
                value >= 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `degree_of_loop_subcooling`'.format(value))
            if value < 10.0:
                raise ValueError('value need to be greater or equal 10.0 '
                                 'for field `degree_of_loop_subcooling`')
        self._data["Degree of Loop SubCooling"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name

        Returns:
            str: the value of `water_inlet_node_name` or None if not set
        """
        return self._data["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_inlet_node_name`')
        self._data["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name

        Returns:
            str: the value of `water_outlet_node_name` or None if not set
        """
        return self._data["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_outlet_node_name`')
        self._data["Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def coil_control_type(self):
        """Get coil_control_type

        Returns:
            str: the value of `coil_control_type` or None if not set
        """
        return self._data["Coil Control Type"]

    @coil_control_type.setter
    def coil_control_type(self, value=None):
        """  Corresponds to IDD Field `Coil Control Type`
        Use ZoneLoadControl if the coil is contained within another component such as an air
        terminal unit, zone HVAC equipment, or unitary system. Use TemperatureSetpointControl
        if the coil is located directly in an air loop branch or outdoor air equipment list.
        
        {u'note': [u'Use ZoneLoadControl if the coil is contained within another component such as an air', u'terminal unit, zone HVAC equipment, or unitary system. Use TemperatureSetpointControl', u'if the coil is located directly in an air loop branch or outdoor air equipment list.'], u'type': u'choice', u'key': [u'TemperatureSetpointControl', u'ZoneLoadControl'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Coil Control Type`
                Accepted values are:
                      - TemperatureSetpointControl
                      - ZoneLoadControl
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `coil_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `coil_control_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `coil_control_type`')
            vals = {}
            vals["temperaturesetpointcontrol"] = "TemperatureSetpointControl"
            vals["zoneloadcontrol"] = "ZoneLoadControl"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `coil_control_type`'.format(value))
            value = vals[value_lower]
        self._data["Coil Control Type"] = value

    @property
    def temperature_setpoint_node_name(self):
        """Get temperature_setpoint_node_name

        Returns:
            str: the value of `temperature_setpoint_node_name` or None if not set
        """
        return self._data["Temperature Setpoint Node Name"]

    @temperature_setpoint_node_name.setter
    def temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD Field `Temperature Setpoint Node Name`
        Required if Coil Control Type is TemperatureSetpointControl
        
        {u'note': [u'Required if Coil Control Type is TemperatureSetpointControl'], u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Temperature Setpoint Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_setpoint_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_setpoint_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `temperature_setpoint_node_name`')
        self._data["Temperature Setpoint Node Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilHeatingElectric(object):
    """ Corresponds to IDD object `Coil:Heating:Electric`
        Electric heating coil. If the coil is located directly in an air loop branch or
        outdoor air equipment list, then it is controlled on leaving air temperature and
        the Temperature Setpoint Node Name must be specified. If the coil is contained within
        another component such as an air terminal unit, zone HVAC equipment, or unitary
        system, then the coil is controlled by the parent component and the setpoint node name
        is not entered.
    
    """
    internal_name = "Coil:Heating:Electric"
    field_count = 7
    required_fields = ["Name", "Air Inlet Node Name", "Air Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Heating:Electric`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Efficiency"] = None
        self._data["Nominal Capacity"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Temperature Setpoint Node Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.efficiency = None
        else:
            self.efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_setpoint_node_name = None
        else:
            self.temperature_setpoint_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'AFNCoilNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def efficiency(self):
        """Get efficiency

        Returns:
            float: the value of `efficiency` or None if not set
        """
        return self._data["Efficiency"]

    @efficiency.setter
    def efficiency(self, value=1.0 ):
        """  Corresponds to IDD Field `Efficiency`
        
        {u'default': '1.0', u'minimum>': '0.0', 'type': 'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Efficiency`
                Default value: 1.0
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `efficiency`')
        self._data["Efficiency"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Nominal Capacity`
        
        {u'units': u'W', u'autosizable': u'', 'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Nominal Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_capacity`'.format(value))
        self._data["Nominal Capacity"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def temperature_setpoint_node_name(self):
        """Get temperature_setpoint_node_name

        Returns:
            str: the value of `temperature_setpoint_node_name` or None if not set
        """
        return self._data["Temperature Setpoint Node Name"]

    @temperature_setpoint_node_name.setter
    def temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD Field `Temperature Setpoint Node Name`
        Required if coil is temperature controlled.
        
        {u'note': [u'Required if coil is temperature controlled.'], u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Temperature Setpoint Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_setpoint_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_setpoint_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `temperature_setpoint_node_name`')
        self._data["Temperature Setpoint Node Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilHeatingElectricMultiStage(object):
    """ Corresponds to IDD object `Coil:Heating:Electric:MultiStage`
        Electric heating coil, multi-stage. If the coil is located directly in an air loop
        branch or outdoor air equipment list, then it is controlled on leaving air temperature
        and the Temperature Setpoint Node Name must be specified. If the coil is contained
        within another component such as an air terminal unit, zone HVAC equipment, or unitary
        system, then the coil is controlled by the parent component and the setpoint node name
        is not entered.
    
    """
    internal_name = "Coil:Heating:Electric:MultiStage"
    field_count = 14
    required_fields = ["Name", "Air Inlet Node Name", "Air Outlet Node Name", "Number of Stages", "Stage 1 Efficiency", "Stage 1 Nominal Capacity"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Heating:Electric:MultiStage`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Temperature Setpoint Node Name"] = None
        self._data["Number of Stages"] = None
        self._data["Stage 1 Efficiency"] = None
        self._data["Stage 1 Nominal Capacity"] = None
        self._data["Stage 2 Efficiency"] = None
        self._data["Stage 2 Nominal Capacity"] = None
        self._data["Stage 3 Efficiency"] = None
        self._data["Stage 3 Nominal Capacity"] = None
        self._data["Stage 4 Efficiency"] = None
        self._data["Stage 4 Nominal Capacity"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_setpoint_node_name = None
        else:
            self.temperature_setpoint_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_stages = None
        else:
            self.number_of_stages = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_1_efficiency = None
        else:
            self.stage_1_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_1_nominal_capacity = None
        else:
            self.stage_1_nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_2_efficiency = None
        else:
            self.stage_2_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_2_nominal_capacity = None
        else:
            self.stage_2_nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_3_efficiency = None
        else:
            self.stage_3_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_3_nominal_capacity = None
        else:
            self.stage_3_nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_4_efficiency = None
        else:
            self.stage_4_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_4_nominal_capacity = None
        else:
            self.stage_4_nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'HeatingCoilsElectricMultiStage', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def temperature_setpoint_node_name(self):
        """Get temperature_setpoint_node_name

        Returns:
            str: the value of `temperature_setpoint_node_name` or None if not set
        """
        return self._data["Temperature Setpoint Node Name"]

    @temperature_setpoint_node_name.setter
    def temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD Field `Temperature Setpoint Node Name`
        Required if coil is temperature controlled.
        controlled
        
        {u'note': [u'Required if coil is temperature controlled.', u'controlled'], u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Temperature Setpoint Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_setpoint_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_setpoint_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `temperature_setpoint_node_name`')
        self._data["Temperature Setpoint Node Name"] = value

    @property
    def number_of_stages(self):
        """Get number_of_stages

        Returns:
            int: the value of `number_of_stages` or None if not set
        """
        return self._data["Number of Stages"]

    @number_of_stages.setter
    def number_of_stages(self, value=None):
        """  Corresponds to IDD Field `Number of Stages`
        Enter the number of the following sets of data for coil
        capacity and Efficiency.
        
        {'pytype': 'int', u'maximum': '4', u'required-field': True, u'note': [u'Enter the number of the following sets of data for coil', u'capacity and Efficiency.'], u'minimum': '1', u'type': u'integer'}

        Args:
            value (int): value for IDD Field `Number of Stages`
                value >= 1
                value <= 4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_stages`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_stages`')
            if value > 4:
                raise ValueError('value need to be smaller 4 '
                                 'for field `number_of_stages`')
        self._data["Number of Stages"] = value

    @property
    def stage_1_efficiency(self):
        """Get stage_1_efficiency

        Returns:
            float: the value of `stage_1_efficiency` or None if not set
        """
        return self._data["Stage 1 Efficiency"]

    @stage_1_efficiency.setter
    def stage_1_efficiency(self, value=None):
        """  Corresponds to IDD Field `Stage 1 Efficiency`
        
        {u'units': u'W/W', u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Stage 1 Efficiency`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_1_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stage_1_efficiency`')
        self._data["Stage 1 Efficiency"] = value

    @property
    def stage_1_nominal_capacity(self):
        """Get stage_1_nominal_capacity

        Returns:
            float: the value of `stage_1_nominal_capacity` or None if not set
        """
        return self._data["Stage 1 Nominal Capacity"]

    @stage_1_nominal_capacity.setter
    def stage_1_nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Stage 1 Nominal Capacity`
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Stage 1 Nominal Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_1_nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stage_1_nominal_capacity`')
        self._data["Stage 1 Nominal Capacity"] = value

    @property
    def stage_2_efficiency(self):
        """Get stage_2_efficiency

        Returns:
            float: the value of `stage_2_efficiency` or None if not set
        """
        return self._data["Stage 2 Efficiency"]

    @stage_2_efficiency.setter
    def stage_2_efficiency(self, value=None):
        """  Corresponds to IDD Field `Stage 2 Efficiency`
        
        {u'units': u'W/W', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Stage 2 Efficiency`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_2_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stage_2_efficiency`')
        self._data["Stage 2 Efficiency"] = value

    @property
    def stage_2_nominal_capacity(self):
        """Get stage_2_nominal_capacity

        Returns:
            float: the value of `stage_2_nominal_capacity` or None if not set
        """
        return self._data["Stage 2 Nominal Capacity"]

    @stage_2_nominal_capacity.setter
    def stage_2_nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Stage 2 Nominal Capacity`
        
        {u'units': u'W', u'minimum>': '0.0', u'type': u'real', u'autosizable': u'', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Stage 2 Nominal Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_2_nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stage_2_nominal_capacity`')
        self._data["Stage 2 Nominal Capacity"] = value

    @property
    def stage_3_efficiency(self):
        """Get stage_3_efficiency

        Returns:
            float: the value of `stage_3_efficiency` or None if not set
        """
        return self._data["Stage 3 Efficiency"]

    @stage_3_efficiency.setter
    def stage_3_efficiency(self, value=None):
        """  Corresponds to IDD Field `Stage 3 Efficiency`
        
        {u'units': u'W/W', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Stage 3 Efficiency`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_3_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stage_3_efficiency`')
        self._data["Stage 3 Efficiency"] = value

    @property
    def stage_3_nominal_capacity(self):
        """Get stage_3_nominal_capacity

        Returns:
            float: the value of `stage_3_nominal_capacity` or None if not set
        """
        return self._data["Stage 3 Nominal Capacity"]

    @stage_3_nominal_capacity.setter
    def stage_3_nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Stage 3 Nominal Capacity`
        
        {u'units': u'W', u'minimum>': '0.0', u'type': u'real', u'autosizable': u'', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Stage 3 Nominal Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_3_nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stage_3_nominal_capacity`')
        self._data["Stage 3 Nominal Capacity"] = value

    @property
    def stage_4_efficiency(self):
        """Get stage_4_efficiency

        Returns:
            float: the value of `stage_4_efficiency` or None if not set
        """
        return self._data["Stage 4 Efficiency"]

    @stage_4_efficiency.setter
    def stage_4_efficiency(self, value=None):
        """  Corresponds to IDD Field `Stage 4 Efficiency`
        
        {u'units': u'W/W', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Stage 4 Efficiency`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_4_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stage_4_efficiency`')
        self._data["Stage 4 Efficiency"] = value

    @property
    def stage_4_nominal_capacity(self):
        """Get stage_4_nominal_capacity

        Returns:
            float: the value of `stage_4_nominal_capacity` or None if not set
        """
        return self._data["Stage 4 Nominal Capacity"]

    @stage_4_nominal_capacity.setter
    def stage_4_nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Stage 4 Nominal Capacity`
        
        {u'units': u'W', u'minimum>': '0.0', u'type': u'real', u'autosizable': u'', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Stage 4 Nominal Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_4_nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stage_4_nominal_capacity`')
        self._data["Stage 4 Nominal Capacity"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilHeatingGas(object):
    """ Corresponds to IDD object `Coil:Heating:Gas`
        Gas heating coil. If the coil is located directly in an air loop branch or
        outdoor air equipment list, then it is controlled on leaving air temperature and
        the Temperature Setpoint Node Name must be specified. If the coil is contained within
        another component such as an air terminal unit, zone HVAC equipment, or unitary
        system, then the coil is controlled by the parent component and the setpoint node name
        is not entered.
    
    """
    internal_name = "Coil:Heating:Gas"
    field_count = 10
    required_fields = ["Name", "Air Inlet Node Name", "Air Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Heating:Gas`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Gas Burner Efficiency"] = None
        self._data["Nominal Capacity"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Temperature Setpoint Node Name"] = None
        self._data["Parasitic Electric Load"] = None
        self._data["Part Load Fraction Correlation Curve Name"] = None
        self._data["Parasitic Gas Load"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gas_burner_efficiency = None
        else:
            self.gas_burner_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_capacity = None
        else:
            self.nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_setpoint_node_name = None
        else:
            self.temperature_setpoint_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.parasitic_electric_load = None
        else:
            self.parasitic_electric_load = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.part_load_fraction_correlation_curve_name = None
        else:
            self.part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.parasitic_gas_load = None
        else:
            self.parasitic_gas_load = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'AFNCoilNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def gas_burner_efficiency(self):
        """Get gas_burner_efficiency

        Returns:
            float: the value of `gas_burner_efficiency` or None if not set
        """
        return self._data["Gas Burner Efficiency"]

    @gas_burner_efficiency.setter
    def gas_burner_efficiency(self, value=0.8 ):
        """  Corresponds to IDD Field `Gas Burner Efficiency`
        
        {u'default': '0.8', u'minimum': '0.0', 'type': 'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Gas Burner Efficiency`
                Default value: 0.8
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gas_burner_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `gas_burner_efficiency`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `gas_burner_efficiency`')
        self._data["Gas Burner Efficiency"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity

        Returns:
            float: the value of `nominal_capacity` or None if not set
        """
        return self._data["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Nominal Capacity`
        
        {u'units': u'W', u'autosizable': u'', 'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Nominal Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_capacity`'.format(value))
        self._data["Nominal Capacity"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def temperature_setpoint_node_name(self):
        """Get temperature_setpoint_node_name

        Returns:
            str: the value of `temperature_setpoint_node_name` or None if not set
        """
        return self._data["Temperature Setpoint Node Name"]

    @temperature_setpoint_node_name.setter
    def temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD Field `Temperature Setpoint Node Name`
        optional, used if coil is temperature control and not load-base controlled
        
        {u'note': [u'optional, used if coil is temperature control and not load-base controlled'], u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Temperature Setpoint Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_setpoint_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_setpoint_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `temperature_setpoint_node_name`')
        self._data["Temperature Setpoint Node Name"] = value

    @property
    def parasitic_electric_load(self):
        """Get parasitic_electric_load

        Returns:
            float: the value of `parasitic_electric_load` or None if not set
        """
        return self._data["Parasitic Electric Load"]

    @parasitic_electric_load.setter
    def parasitic_electric_load(self, value=None):
        """  Corresponds to IDD Field `Parasitic Electric Load`
        parasitic electric load associated with the gas coil operation
        such as an inducer fan, etc..  This will be modified by the part load ratio to reflect
        the time of operation in a timestep.
        
        {u'units': u'W', u'note': [u'parasitic electric load associated with the gas coil operation', u'such as an inducer fan, etc..  This will be modified by the part load ratio to reflect', u'the time of operation in a timestep.'], 'pytype': 'float', 'type': 'real', u'ip-units': u'W'}

        Args:
            value (float): value for IDD Field `Parasitic Electric Load`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `parasitic_electric_load`'.format(value))
        self._data["Parasitic Electric Load"] = value

    @property
    def part_load_fraction_correlation_curve_name(self):
        """Get part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Part Load Fraction Correlation Curve Name"]

    @part_load_fraction_correlation_curve_name.setter
    def part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve, PLF = a + b*PLR + c*PLR**2
        cubic curve, PLF = a + b*PLR + c*PLR**2 + d*PLR**3
        PLF = part load fraction
        PLR = part load ratio (sensible heating load/steady state heating capacity)
        Coil runtime fraction = Part Load Ratio / PLF
        This part load degradation is for coil performance & will
        increase the gas consumption of the coil due to transient coil operation.
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve, PLF = a + b*PLR + c*PLR**2', u'cubic curve, PLF = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLF = part load fraction', u'PLR = part load ratio (sensible heating load/steady state heating capacity)', u'Coil runtime fraction = Part Load Ratio / PLF', u'This part load degradation is for coil performance & will', u'increase the gas consumption of the coil due to transient coil operation.'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `part_load_fraction_correlation_curve_name`')
        self._data["Part Load Fraction Correlation Curve Name"] = value

    @property
    def parasitic_gas_load(self):
        """Get parasitic_gas_load

        Returns:
            float: the value of `parasitic_gas_load` or None if not set
        """
        return self._data["Parasitic Gas Load"]

    @parasitic_gas_load.setter
    def parasitic_gas_load(self, value=None):
        """  Corresponds to IDD Field `Parasitic Gas Load`
        parasitic gas load associated with the gas coil operation (i.e., standing pilot)
        
        {u'units': u'W', u'note': [u'parasitic gas load associated with the gas coil operation (i.e., standing pilot)'], 'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Parasitic Gas Load`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `parasitic_gas_load`'.format(value))
        self._data["Parasitic Gas Load"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilHeatingGasMultiStage(object):
    """ Corresponds to IDD object `Coil:Heating:Gas:MultiStage`
        Gas heating coil, multi-stage. If the coil is located directly in an air loop
        branch or outdoor air equipment list, then it is controlled on leaving air temperature
        and the Temperature Setpoint Node Name must be specified. If the coil is contained
        within another component such as an air terminal unit, zone HVAC equipment, or unitary
        system, then the coil is controlled by the parent component and the setpoint node name
        is not entered.
    
    """
    internal_name = "Coil:Heating:Gas:MultiStage"
    field_count = 20
    required_fields = ["Name", "Air Inlet Node Name", "Air Outlet Node Name", "Number of Stages", "Stage 1 Gas Burner Efficiency", "Stage 1 Nominal Capacity"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Heating:Gas:MultiStage`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Temperature Setpoint Node Name"] = None
        self._data["Part Load Fraction Correlation Curve Name"] = None
        self._data["Parasitic Gas Load"] = None
        self._data["Number of Stages"] = None
        self._data["Stage 1 Gas Burner Efficiency"] = None
        self._data["Stage 1 Nominal Capacity"] = None
        self._data["Stage 1 Parasitic Electric Load"] = None
        self._data["Stage 2 Gas Burner Efficiency"] = None
        self._data["Stage 2 Nominal Capacity"] = None
        self._data["Stage 2 Parasitic Electric Load"] = None
        self._data["Stage 3 Gas Burner Efficiency"] = None
        self._data["Stage 3 Nominal Capacity"] = None
        self._data["Stage 3 Parasitic Electric Load"] = None
        self._data["Stage 4 Gas Burner Efficiency"] = None
        self._data["Stage 4 Nominal Capacity"] = None
        self._data["Stage 4 Parasitic Electric Load"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_setpoint_node_name = None
        else:
            self.temperature_setpoint_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.part_load_fraction_correlation_curve_name = None
        else:
            self.part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.parasitic_gas_load = None
        else:
            self.parasitic_gas_load = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_stages = None
        else:
            self.number_of_stages = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_1_gas_burner_efficiency = None
        else:
            self.stage_1_gas_burner_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_1_nominal_capacity = None
        else:
            self.stage_1_nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_1_parasitic_electric_load = None
        else:
            self.stage_1_parasitic_electric_load = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_2_gas_burner_efficiency = None
        else:
            self.stage_2_gas_burner_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_2_nominal_capacity = None
        else:
            self.stage_2_nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_2_parasitic_electric_load = None
        else:
            self.stage_2_parasitic_electric_load = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_3_gas_burner_efficiency = None
        else:
            self.stage_3_gas_burner_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_3_nominal_capacity = None
        else:
            self.stage_3_nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_3_parasitic_electric_load = None
        else:
            self.stage_3_parasitic_electric_load = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_4_gas_burner_efficiency = None
        else:
            self.stage_4_gas_burner_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_4_nominal_capacity = None
        else:
            self.stage_4_nominal_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.stage_4_parasitic_electric_load = None
        else:
            self.stage_4_parasitic_electric_load = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'HeatingCoilsGasMultiStage', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def temperature_setpoint_node_name(self):
        """Get temperature_setpoint_node_name

        Returns:
            str: the value of `temperature_setpoint_node_name` or None if not set
        """
        return self._data["Temperature Setpoint Node Name"]

    @temperature_setpoint_node_name.setter
    def temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD Field `Temperature Setpoint Node Name`
        optional, used if coil is temperature control and not load-base
        controlled.
        
        {u'note': [u'optional, used if coil is temperature control and not load-base', u'controlled.'], u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Temperature Setpoint Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_setpoint_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_setpoint_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `temperature_setpoint_node_name`')
        self._data["Temperature Setpoint Node Name"] = value

    @property
    def part_load_fraction_correlation_curve_name(self):
        """Get part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Part Load Fraction Correlation Curve Name"]

    @part_load_fraction_correlation_curve_name.setter
    def part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve, PLF = a + b*PLR + c*PLR**2
        cubic curve, PLF = a + b*PLR + c*PLR**2 + d*PLR**3
        PLF = part load fraction
        PLR = part load ratio (sensible heating load/steady state
        heating capacity)
        Coil runtime fraction = Part Load Ratio / PLF
        This part load degradation is for coil performance & will
        increase the gas consumption of the coil due to transient coil
        operation.
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve, PLF = a + b*PLR + c*PLR**2', u'cubic curve, PLF = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLF = part load fraction', u'PLR = part load ratio (sensible heating load/steady state', u'heating capacity)', u'Coil runtime fraction = Part Load Ratio / PLF', u'This part load degradation is for coil performance & will', u'increase the gas consumption of the coil due to transient coil', u'operation.'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `part_load_fraction_correlation_curve_name`')
        self._data["Part Load Fraction Correlation Curve Name"] = value

    @property
    def parasitic_gas_load(self):
        """Get parasitic_gas_load

        Returns:
            float: the value of `parasitic_gas_load` or None if not set
        """
        return self._data["Parasitic Gas Load"]

    @parasitic_gas_load.setter
    def parasitic_gas_load(self, value=None):
        """  Corresponds to IDD Field `Parasitic Gas Load`
        parasitic gas load associated with the gas coil operation (i.e.,
        standing pilot)
        
        {u'units': u'W', u'note': [u'parasitic gas load associated with the gas coil operation (i.e.,', u'standing pilot)'], 'type': 'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Parasitic Gas Load`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `parasitic_gas_load`'.format(value))
        self._data["Parasitic Gas Load"] = value

    @property
    def number_of_stages(self):
        """Get number_of_stages

        Returns:
            int: the value of `number_of_stages` or None if not set
        """
        return self._data["Number of Stages"]

    @number_of_stages.setter
    def number_of_stages(self, value=None):
        """  Corresponds to IDD Field `Number of Stages`
        Enter the number of the following sets of data for coil
        capacity and Gas Burner Efficiency.
        
        {'pytype': 'int', u'maximum': '4', u'required-field': True, u'note': [u'Enter the number of the following sets of data for coil', u'capacity and Gas Burner Efficiency.'], u'minimum': '1', u'type': u'integer'}

        Args:
            value (int): value for IDD Field `Number of Stages`
                value >= 1
                value <= 4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_stages`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_stages`')
            if value > 4:
                raise ValueError('value need to be smaller 4 '
                                 'for field `number_of_stages`')
        self._data["Number of Stages"] = value

    @property
    def stage_1_gas_burner_efficiency(self):
        """Get stage_1_gas_burner_efficiency

        Returns:
            float: the value of `stage_1_gas_burner_efficiency` or None if not set
        """
        return self._data["Stage 1 Gas Burner Efficiency"]

    @stage_1_gas_burner_efficiency.setter
    def stage_1_gas_burner_efficiency(self, value=None):
        """  Corresponds to IDD Field `Stage 1 Gas Burner Efficiency`
        
        {u'units': u'W/W', u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Stage 1 Gas Burner Efficiency`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_1_gas_burner_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stage_1_gas_burner_efficiency`')
        self._data["Stage 1 Gas Burner Efficiency"] = value

    @property
    def stage_1_nominal_capacity(self):
        """Get stage_1_nominal_capacity

        Returns:
            float: the value of `stage_1_nominal_capacity` or None if not set
        """
        return self._data["Stage 1 Nominal Capacity"]

    @stage_1_nominal_capacity.setter
    def stage_1_nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Stage 1 Nominal Capacity`
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Stage 1 Nominal Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_1_nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stage_1_nominal_capacity`')
        self._data["Stage 1 Nominal Capacity"] = value

    @property
    def stage_1_parasitic_electric_load(self):
        """Get stage_1_parasitic_electric_load

        Returns:
            float: the value of `stage_1_parasitic_electric_load` or None if not set
        """
        return self._data["Stage 1 Parasitic Electric Load"]

    @stage_1_parasitic_electric_load.setter
    def stage_1_parasitic_electric_load(self, value=None):
        """  Corresponds to IDD Field `Stage 1 Parasitic Electric Load`
        Stage 1 parasitic electric load associated with the gas coil operation
        such as an inducer fan, etc.  This will be modified by the part
        load ratio to reflect the time of operation in a timestep.
        
        {u'units': u'W', u'note': [u'Stage 1 parasitic electric load associated with the gas coil operation', u'such as an inducer fan, etc.  This will be modified by the part', u'load ratio to reflect the time of operation in a timestep.'], 'pytype': 'float', 'type': 'real', u'ip-units': u'W'}

        Args:
            value (float): value for IDD Field `Stage 1 Parasitic Electric Load`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_1_parasitic_electric_load`'.format(value))
        self._data["Stage 1 Parasitic Electric Load"] = value

    @property
    def stage_2_gas_burner_efficiency(self):
        """Get stage_2_gas_burner_efficiency

        Returns:
            float: the value of `stage_2_gas_burner_efficiency` or None if not set
        """
        return self._data["Stage 2 Gas Burner Efficiency"]

    @stage_2_gas_burner_efficiency.setter
    def stage_2_gas_burner_efficiency(self, value=None):
        """  Corresponds to IDD Field `Stage 2 Gas Burner Efficiency`
        
        {u'units': u'W/W', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Stage 2 Gas Burner Efficiency`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_2_gas_burner_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stage_2_gas_burner_efficiency`')
        self._data["Stage 2 Gas Burner Efficiency"] = value

    @property
    def stage_2_nominal_capacity(self):
        """Get stage_2_nominal_capacity

        Returns:
            float: the value of `stage_2_nominal_capacity` or None if not set
        """
        return self._data["Stage 2 Nominal Capacity"]

    @stage_2_nominal_capacity.setter
    def stage_2_nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Stage 2 Nominal Capacity`
        
        {u'units': u'W', u'minimum>': '0.0', u'type': u'real', u'autosizable': u'', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Stage 2 Nominal Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_2_nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stage_2_nominal_capacity`')
        self._data["Stage 2 Nominal Capacity"] = value

    @property
    def stage_2_parasitic_electric_load(self):
        """Get stage_2_parasitic_electric_load

        Returns:
            float: the value of `stage_2_parasitic_electric_load` or None if not set
        """
        return self._data["Stage 2 Parasitic Electric Load"]

    @stage_2_parasitic_electric_load.setter
    def stage_2_parasitic_electric_load(self, value=None):
        """  Corresponds to IDD Field `Stage 2 Parasitic Electric Load`
        Stage 2 parasitic electric load associated with the gas coil operation
        such as an inducer fan, etc.  This will be modified by the part
        load ratio to reflect the time of operation in a timestep.
        
        {u'units': u'W', u'note': [u'Stage 2 parasitic electric load associated with the gas coil operation', u'such as an inducer fan, etc.  This will be modified by the part', u'load ratio to reflect the time of operation in a timestep.'], 'pytype': 'float', 'type': 'real', u'ip-units': u'W'}

        Args:
            value (float): value for IDD Field `Stage 2 Parasitic Electric Load`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_2_parasitic_electric_load`'.format(value))
        self._data["Stage 2 Parasitic Electric Load"] = value

    @property
    def stage_3_gas_burner_efficiency(self):
        """Get stage_3_gas_burner_efficiency

        Returns:
            float: the value of `stage_3_gas_burner_efficiency` or None if not set
        """
        return self._data["Stage 3 Gas Burner Efficiency"]

    @stage_3_gas_burner_efficiency.setter
    def stage_3_gas_burner_efficiency(self, value=None):
        """  Corresponds to IDD Field `Stage 3 Gas Burner Efficiency`
        
        {u'units': u'W/W', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Stage 3 Gas Burner Efficiency`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_3_gas_burner_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stage_3_gas_burner_efficiency`')
        self._data["Stage 3 Gas Burner Efficiency"] = value

    @property
    def stage_3_nominal_capacity(self):
        """Get stage_3_nominal_capacity

        Returns:
            float: the value of `stage_3_nominal_capacity` or None if not set
        """
        return self._data["Stage 3 Nominal Capacity"]

    @stage_3_nominal_capacity.setter
    def stage_3_nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Stage 3 Nominal Capacity`
        
        {u'units': u'W', u'minimum>': '0.0', u'type': u'real', u'autosizable': u'', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Stage 3 Nominal Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_3_nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stage_3_nominal_capacity`')
        self._data["Stage 3 Nominal Capacity"] = value

    @property
    def stage_3_parasitic_electric_load(self):
        """Get stage_3_parasitic_electric_load

        Returns:
            float: the value of `stage_3_parasitic_electric_load` or None if not set
        """
        return self._data["Stage 3 Parasitic Electric Load"]

    @stage_3_parasitic_electric_load.setter
    def stage_3_parasitic_electric_load(self, value=None):
        """  Corresponds to IDD Field `Stage 3 Parasitic Electric Load`
        Stage 3 parasitic electric load associated with the gas coil operation
        such as an inducer fan, etc.  This will be modified by the part
        load ratio to reflect the time of operation in a timestep.
        
        {u'units': u'W', u'note': [u'Stage 3 parasitic electric load associated with the gas coil operation', u'such as an inducer fan, etc.  This will be modified by the part', u'load ratio to reflect the time of operation in a timestep.'], 'pytype': 'float', 'type': 'real', u'ip-units': u'W'}

        Args:
            value (float): value for IDD Field `Stage 3 Parasitic Electric Load`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_3_parasitic_electric_load`'.format(value))
        self._data["Stage 3 Parasitic Electric Load"] = value

    @property
    def stage_4_gas_burner_efficiency(self):
        """Get stage_4_gas_burner_efficiency

        Returns:
            float: the value of `stage_4_gas_burner_efficiency` or None if not set
        """
        return self._data["Stage 4 Gas Burner Efficiency"]

    @stage_4_gas_burner_efficiency.setter
    def stage_4_gas_burner_efficiency(self, value=None):
        """  Corresponds to IDD Field `Stage 4 Gas Burner Efficiency`
        
        {u'units': u'W/W', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Stage 4 Gas Burner Efficiency`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_4_gas_burner_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stage_4_gas_burner_efficiency`')
        self._data["Stage 4 Gas Burner Efficiency"] = value

    @property
    def stage_4_nominal_capacity(self):
        """Get stage_4_nominal_capacity

        Returns:
            float: the value of `stage_4_nominal_capacity` or None if not set
        """
        return self._data["Stage 4 Nominal Capacity"]

    @stage_4_nominal_capacity.setter
    def stage_4_nominal_capacity(self, value=None):
        """  Corresponds to IDD Field `Stage 4 Nominal Capacity`
        
        {u'units': u'W', u'minimum>': '0.0', u'type': u'real', u'autosizable': u'', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Stage 4 Nominal Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_4_nominal_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `stage_4_nominal_capacity`')
        self._data["Stage 4 Nominal Capacity"] = value

    @property
    def stage_4_parasitic_electric_load(self):
        """Get stage_4_parasitic_electric_load

        Returns:
            float: the value of `stage_4_parasitic_electric_load` or None if not set
        """
        return self._data["Stage 4 Parasitic Electric Load"]

    @stage_4_parasitic_electric_load.setter
    def stage_4_parasitic_electric_load(self, value=None):
        """  Corresponds to IDD Field `Stage 4 Parasitic Electric Load`
        Stage 4 parasitic electric load associated with the gas coil operation
        such as an inducer fan, etc.  This will be modified by the part
        load ratio to reflect the time of operation in a timestep.
        
        {u'units': u'W', u'note': [u'Stage 4 parasitic electric load associated with the gas coil operation', u'such as an inducer fan, etc.  This will be modified by the part', u'load ratio to reflect the time of operation in a timestep.'], 'pytype': 'float', 'type': 'real', u'ip-units': u'W'}

        Args:
            value (float): value for IDD Field `Stage 4 Parasitic Electric Load`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `stage_4_parasitic_electric_load`'.format(value))
        self._data["Stage 4 Parasitic Electric Load"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilHeatingDesuperheater(object):
    """ Corresponds to IDD object `Coil:Heating:Desuperheater`
        Desuperheater air heating coil. The heating energy provided by this coil is reclaimed
        from the superheated refrigerant gas leaving a compressor and does not impact the
        performance of the compressor. If the coil is located directly in an air loop
        branch or outdoor air equipment list, then it is controlled on leaving air temperature
        and the Temperature Setpoint Node Name must be specified. If the coil is contained
        within another component such as a unitary system, then the coil is controlled by the
        parent component and the setpoint node name is not entered.
    
    """
    internal_name = "Coil:Heating:Desuperheater"
    field_count = 9
    required_fields = ["Name", "Air Inlet Node Name", "Air Outlet Node Name", "Heating Source Object Type", "Heating Source Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Heating:Desuperheater`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Heat Reclaim Recovery Efficiency"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Heating Source Object Type"] = None
        self._data["Heating Source Name"] = None
        self._data["Temperature Setpoint Node Name"] = None
        self._data["Parasitic Electric Load"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_reclaim_recovery_efficiency = None
        else:
            self.heat_reclaim_recovery_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_source_object_type = None
        else:
            self.heating_source_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_source_name = None
        else:
            self.heating_source_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_setpoint_node_name = None
        else:
            self.temperature_setpoint_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.parasitic_electric_load = None
        else:
            self.parasitic_electric_load = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'AFNCoilNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def heat_reclaim_recovery_efficiency(self):
        """Get heat_reclaim_recovery_efficiency

        Returns:
            float: the value of `heat_reclaim_recovery_efficiency` or None if not set
        """
        return self._data["Heat Reclaim Recovery Efficiency"]

    @heat_reclaim_recovery_efficiency.setter
    def heat_reclaim_recovery_efficiency(self, value=None):
        """  Corresponds to IDD Field `Heat Reclaim Recovery Efficiency`
        
        {u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Heat Reclaim Recovery Efficiency`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `heat_reclaim_recovery_efficiency`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `heat_reclaim_recovery_efficiency`')
        self._data["Heat Reclaim Recovery Efficiency"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def heating_source_object_type(self):
        """Get heating_source_object_type

        Returns:
            str: the value of `heating_source_object_type` or None if not set
        """
        return self._data["Heating Source Object Type"]

    @heating_source_object_type.setter
    def heating_source_object_type(self, value=None):
        """  Corresponds to IDD Field `Heating Source Object Type`
        
        {u'type': u'choice', u'key': [u'Coil:Cooling:DX:SingleSpeed', u'Coil:Cooling:DX:TwoSpeed', u'Coil:Cooling:DX:TwoStageWithHumidityControlMode', u'Refrigeration:CompressorRack', u'Refrigeration:Condenser:AirCooled', u'Refrigeration:Condenser:EvaporativeCooled', u'Refrigeration:Condenser:WaterCooled'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heating Source Object Type`
                Accepted values are:
                      - Coil:Cooling:DX:SingleSpeed
                      - Coil:Cooling:DX:TwoSpeed
                      - Coil:Cooling:DX:TwoStageWithHumidityControlMode
                      - Refrigeration:CompressorRack
                      - Refrigeration:Condenser:AirCooled
                      - Refrigeration:Condenser:EvaporativeCooled
                      - Refrigeration:Condenser:WaterCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_source_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_source_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_source_object_type`')
            vals = {}
            vals["coil:cooling:dx:singlespeed"] = "Coil:Cooling:DX:SingleSpeed"
            vals["coil:cooling:dx:twospeed"] = "Coil:Cooling:DX:TwoSpeed"
            vals["coil:cooling:dx:twostagewithhumiditycontrolmode"] = "Coil:Cooling:DX:TwoStageWithHumidityControlMode"
            vals["refrigeration:compressorrack"] = "Refrigeration:CompressorRack"
            vals["refrigeration:condenser:aircooled"] = "Refrigeration:Condenser:AirCooled"
            vals["refrigeration:condenser:evaporativecooled"] = "Refrigeration:Condenser:EvaporativeCooled"
            vals["refrigeration:condenser:watercooled"] = "Refrigeration:Condenser:WaterCooled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heating_source_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Heating Source Object Type"] = value

    @property
    def heating_source_name(self):
        """Get heating_source_name

        Returns:
            str: the value of `heating_source_name` or None if not set
        """
        return self._data["Heating Source Name"]

    @heating_source_name.setter
    def heating_source_name(self, value=None):
        """  Corresponds to IDD Field `Heating Source Name`
        
        {u'type': u'object-list', u'object-list': u'DesuperHeatingCoilSources', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heating Source Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_source_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_source_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_source_name`')
        self._data["Heating Source Name"] = value

    @property
    def temperature_setpoint_node_name(self):
        """Get temperature_setpoint_node_name

        Returns:
            str: the value of `temperature_setpoint_node_name` or None if not set
        """
        return self._data["Temperature Setpoint Node Name"]

    @temperature_setpoint_node_name.setter
    def temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD Field `Temperature Setpoint Node Name`
        Required if coil is temperature controlled.
        Temperature-based control requires the use of a SetpointManager object
        
        {u'note': [u'Required if coil is temperature controlled.', u'Temperature-based control requires the use of a SetpointManager object'], u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Temperature Setpoint Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `temperature_setpoint_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `temperature_setpoint_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `temperature_setpoint_node_name`')
        self._data["Temperature Setpoint Node Name"] = value

    @property
    def parasitic_electric_load(self):
        """Get parasitic_electric_load

        Returns:
            float: the value of `parasitic_electric_load` or None if not set
        """
        return self._data["Parasitic Electric Load"]

    @parasitic_electric_load.setter
    def parasitic_electric_load(self, value=None):
        """  Corresponds to IDD Field `Parasitic Electric Load`
        parasitic electric load associated with the desuperheater coil operation
        such as solenoid valves, etc.
        
        {'pytype': 'float', u'note': [u'parasitic electric load associated with the desuperheater coil operation', u'such as solenoid valves, etc.'], u'ip-units': u'W', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Parasitic Electric Load`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `parasitic_electric_load`')
        self._data["Parasitic Electric Load"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilHeatingDxSingleSpeed(object):
    """ Corresponds to IDD object `Coil:Heating:DX:SingleSpeed`
        Direct expansion (DX) heating coil (air-to-air heat pump) and compressor unit
        (includes electric compressor and outdoor fan), single-speed, with defrost controls.
    
    """
    internal_name = "Coil:Heating:DX:SingleSpeed"
    field_count = 25
    required_fields = ["Name", "Gross Rated Heating Capacity", "Gross Rated Heating COP", "Rated Air Flow Rate", "Air Inlet Node Name", "Air Outlet Node Name", "Heating Capacity Function of Temperature Curve Name", "Heating Capacity Function of Flow Fraction Curve Name", "Energy Input Ratio Function of Temperature Curve Name", "Energy Input Ratio Function of Flow Fraction Curve Name", "Part Load Fraction Correlation Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Heating:DX:SingleSpeed`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Gross Rated Heating Capacity"] = None
        self._data["Gross Rated Heating COP"] = None
        self._data["Rated Air Flow Rate"] = None
        self._data["Rated Supply Fan Power Per Volume Flow Rate"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Heating Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Part Load Fraction Correlation Curve Name"] = None
        self._data["Defrost Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"] = None
        self._data["Outdoor Dry-Bulb Temperature to Turn On Compressor"] = None
        self._data["Maximum Outdoor Dry-Bulb Temperature for Defrost Operation"] = None
        self._data["Crankcase Heater Capacity"] = None
        self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = None
        self._data["Defrost Strategy"] = None
        self._data["Defrost Control"] = None
        self._data["Defrost Time Period Fraction"] = None
        self._data["Resistive Defrost Heater Capacity"] = None
        self._data["Region number for calculating HSPF"] = None
        self._data["Evaporator Air Inlet Node Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_heating_capacity = None
        else:
            self.gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_heating_cop = None
        else:
            self.gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_air_flow_rate = None
        else:
            self.rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_supply_fan_power_per_volume_flow_rate = None
        else:
            self.rated_supply_fan_power_per_volume_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_function_of_temperature_curve_name = None
        else:
            self.heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.heating_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.part_load_fraction_correlation_curve_name = None
        else:
            self.part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.defrost_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.defrost_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_outdoor_drybulb_temperature_for_compressor_operation = None
        else:
            self.minimum_outdoor_drybulb_temperature_for_compressor_operation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outdoor_drybulb_temperature_to_turn_on_compressor = None
        else:
            self.outdoor_drybulb_temperature_to_turn_on_compressor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_defrost_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_defrost_operation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.crankcase_heater_capacity = None
        else:
            self.crankcase_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.defrost_strategy = None
        else:
            self.defrost_strategy = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.defrost_control = None
        else:
            self.defrost_control = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.defrost_time_period_fraction = None
        else:
            self.defrost_time_period_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.resistive_defrost_heater_capacity = None
        else:
            self.resistive_defrost_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.region_number_for_calculating_hspf = None
        else:
            self.region_number_for_calculating_hspf = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.evaporator_air_inlet_node_name = None
        else:
            self.evaporator_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'AFNCoilNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def gross_rated_heating_capacity(self):
        """Get gross_rated_heating_capacity

        Returns:
            float: the value of `gross_rated_heating_capacity` or None if not set
        """
        return self._data["Gross Rated Heating Capacity"]

    @gross_rated_heating_capacity.setter
    def gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        capacity excluding supply air fan heat
        rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Heating capacity not accounting for the effect of supply air fan heat', u'capacity excluding supply air fan heat', u'rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C', u'rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Heating Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_heating_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_heating_capacity`')
        self._data["Gross Rated Heating Capacity"] = value

    @property
    def gross_rated_heating_cop(self):
        """Get gross_rated_heating_cop

        Returns:
            float: the value of `gross_rated_heating_cop` or None if not set
        """
        return self._data["Gross Rated Heating COP"]

    @gross_rated_heating_cop.setter
    def gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Gross Rated Heating COP`
        Rated heating capacity divided by power input to the compressor and outdoor fan,
        does not include supply air fan heat or supply air fan electrical energy
        does not include supply air fan heat or supply air fan electrical energy
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Rated heating capacity divided by power input to the compressor and outdoor fan,', u'does not include supply air fan heat or supply air fan electrical energy', u'does not include supply air fan heat or supply air fan electrical energy'], u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Heating COP`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_heating_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_heating_cop`')
        self._data["Gross Rated Heating COP"] = value

    @property
    def rated_air_flow_rate(self):
        """Get rated_air_flow_rate

        Returns:
            float: the value of `rated_air_flow_rate` or None if not set
        """
        return self._data["Rated Air Flow Rate"]

    @rated_air_flow_rate.setter
    def rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Air Flow Rate`
        Flow rate corresponding to rated total capacity
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated heating capacity
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Flow rate corresponding to rated total capacity', u'should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated heating capacity'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_air_flow_rate`')
        self._data["Rated Air Flow Rate"] = value

    @property
    def rated_supply_fan_power_per_volume_flow_rate(self):
        """Get rated_supply_fan_power_per_volume_flow_rate

        Returns:
            float: the value of `rated_supply_fan_power_per_volume_flow_rate` or None if not set
        """
        return self._data["Rated Supply Fan Power Per Volume Flow Rate"]

    @rated_supply_fan_power_per_volume_flow_rate.setter
    def rated_supply_fan_power_per_volume_flow_rate(self, value=773.3 ):
        """  Corresponds to IDD Field `Rated Supply Fan Power Per Volume Flow Rate`
        Enter the supply fan power per air volume flow rate at the rated test conditions.
        The test conditions vary external static pressure based on heating capacity.
        This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not
        used for modeling the supply (condenser) fan during simulations.
        
        {'pytype': 'float', u'default': '773.3', u'maximum': '1250.0', u'note': [u'Enter the supply fan power per air volume flow rate at the rated test conditions.', u'The test conditions vary external static pressure based on heating capacity.', u'This value is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not', u'used for modeling the supply (condenser) fan during simulations.'], u'minimum': '0.0', u'units': u'W/(m3/s)', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Supply Fan Power Per Volume Flow Rate`
                Units: W/(m3/s)
                Default value: 773.3
                value >= 0.0
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_supply_fan_power_per_volume_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_supply_fan_power_per_volume_flow_rate`')
            if value > 1250.0:
                raise ValueError('value need to be smaller 1250.0 '
                                 'for field `rated_supply_fan_power_per_volume_flow_rate`')
        self._data["Rated Supply Fan Power Per Volume Flow Rate"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def heating_capacity_function_of_temperature_curve_name(self):
        """Get heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Heating Capacity Function of Temperature Curve Name"]

    @heating_capacity_function_of_temperature_curve_name.setter
    def heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        Biquadratic curve is recommended if sufficient manufacturer data is
        available for the heating capacity to be sensitive to both iat and oat.
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'quadratic curve = a + b*oat + c*oat**2', u'cubic curve = a + b*oat + c*oat**2 + d*oat**3', u'biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat', u'oat = outdoor air dry-bulb temperature (C)', u'iat = indoor air dry-bulb temperature (C)', u'Biquadratic curve is recommended if sufficient manufacturer data is', u'available for the heating capacity to be sensitive to both iat and oat.'], u'type': u'object-list', u'object-list': u'BiquadraticQuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_capacity_function_of_temperature_curve_name`')
        self._data["Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def heating_capacity_function_of_flow_fraction_curve_name(self):
        """Get heating_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `heating_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Heating Capacity Function of Flow Fraction Curve Name"]

    @heating_capacity_function_of_flow_fraction_curve_name.setter
    def heating_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heating Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_capacity_function_of_flow_fraction_curve_name`')
        self._data["Heating Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def energy_input_ratio_function_of_temperature_curve_name(self):
        """Get energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Energy Input Ratio Function of Temperature Curve Name"]

    @energy_input_ratio_function_of_temperature_curve_name.setter
    def energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the energy input ratio to be sensitive to both iat and oat.
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'quadratic curve = a + b*oat + c*oat**2', u'cubic curve = a + b*oat + c*oat**2 + d*oat**3', u'biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat', u'oat = outdoor air dry-bulb temperature (C)', u'iat = indoor air dry-bulb temperature (C)', u'biquadratic curve is recommended if sufficient manufacturer data is', u'available for the energy input ratio to be sensitive to both iat and oat.'], u'type': u'object-list', u'object-list': u'BiquadraticQuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Energy Input Ratio Function of Flow Fraction Curve Name"]

    @energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def part_load_fraction_correlation_curve_name(self):
        """Get part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Part Load Fraction Correlation Curve Name"]

    @part_load_fraction_correlation_curve_name.setter
    def part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (sensible heating load/steady state heating capacity)
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLR = part load ratio (sensible heating load/steady state heating capacity)'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `part_load_fraction_correlation_curve_name`')
        self._data["Part Load Fraction Correlation Curve Name"] = value

    @property
    def defrost_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get defrost_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `defrost_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Defrost Energy Input Ratio Function of Temperature Curve Name"]

    @defrost_energy_input_ratio_function_of_temperature_curve_name.setter
    def defrost_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Defrost Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat
        wb = wet-bulb temperature (C) of air entering the indoor coil
        oat = outdoor air dry-bulb temperature (C)
        only required if ReverseCycle defrost strategy is specified
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat', u'wb = wet-bulb temperature (C) of air entering the indoor coil', u'oat = outdoor air dry-bulb temperature (C)', u'only required if ReverseCycle defrost strategy is specified'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Defrost Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `defrost_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Defrost Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def minimum_outdoor_drybulb_temperature_for_compressor_operation(self):
        """Get minimum_outdoor_drybulb_temperature_for_compressor_operation

        Returns:
            float: the value of `minimum_outdoor_drybulb_temperature_for_compressor_operation` or None if not set
        """
        return self._data["Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"]

    @minimum_outdoor_drybulb_temperature_for_compressor_operation.setter
    def minimum_outdoor_drybulb_temperature_for_compressor_operation(self, value=-8.0 ):
        """  Corresponds to IDD Field `Minimum Outdoor Dry-Bulb Temperature for Compressor Operation`
        
        {u'default': '-8.0', u'units': u'C', u'minimum': '-20.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Minimum Outdoor Dry-Bulb Temperature for Compressor Operation`
                Units: C
                Default value: -8.0
                value >= -20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_drybulb_temperature_for_compressor_operation`'.format(value))
            if value < -20.0:
                raise ValueError('value need to be greater or equal -20.0 '
                                 'for field `minimum_outdoor_drybulb_temperature_for_compressor_operation`')
        self._data["Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"] = value

    @property
    def outdoor_drybulb_temperature_to_turn_on_compressor(self):
        """Get outdoor_drybulb_temperature_to_turn_on_compressor

        Returns:
            float: the value of `outdoor_drybulb_temperature_to_turn_on_compressor` or None if not set
        """
        return self._data["Outdoor Dry-Bulb Temperature to Turn On Compressor"]

    @outdoor_drybulb_temperature_to_turn_on_compressor.setter
    def outdoor_drybulb_temperature_to_turn_on_compressor(self, value=None):
        """  Corresponds to IDD Field `Outdoor Dry-Bulb Temperature to Turn On Compressor`
        The outdoor temperature when the compressor is automatically turned back on following an
        automatic shut off because of low outdoor dry-bulb temperature. This field is only used
        for the calculation of HSPF. If this field is not provided, then outdoor bin temperature
        used in the HSPF calculation is always considered to be greater than this temperature and
        'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above.
        This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error
        in the final value of HSPF.
        
        {u'units': u'C', u'note': [u'The outdoor temperature when the compressor is automatically turned back on following an', u'automatic shut off because of low outdoor dry-bulb temperature. This field is only used', u'for the calculation of HSPF. If this field is not provided, then outdoor bin temperature', u'used in the HSPF calculation is always considered to be greater than this temperature and', u"'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above.", u'This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error', u'in the final value of HSPF.'], u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Outdoor Dry-Bulb Temperature to Turn On Compressor`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_drybulb_temperature_to_turn_on_compressor`'.format(value))
        self._data["Outdoor Dry-Bulb Temperature to Turn On Compressor"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_defrost_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_defrost_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_defrost_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-Bulb Temperature for Defrost Operation"]

    @maximum_outdoor_drybulb_temperature_for_defrost_operation.setter
    def maximum_outdoor_drybulb_temperature_for_defrost_operation(self, value=5.0 ):
        """  Corresponds to IDD Field `Maximum Outdoor Dry-Bulb Temperature for Defrost Operation`
        
        {'pytype': 'float', u'default': '5.0', u'maximum': '7.22', u'minimum': '0.0', u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Defrost Operation`
                Units: C
                Default value: 5.0
                value >= 0.0
                value <= 7.22
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_defrost_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_defrost_operation`')
            if value > 7.22:
                raise ValueError('value need to be smaller 7.22 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_defrost_operation`')
        self._data["Maximum Outdoor Dry-Bulb Temperature for Defrost Operation"] = value

    @property
    def crankcase_heater_capacity(self):
        """Get crankcase_heater_capacity

        Returns:
            float: the value of `crankcase_heater_capacity` or None if not set
        """
        return self._data["Crankcase Heater Capacity"]

    @crankcase_heater_capacity.setter
    def crankcase_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Crankcase Heater Capacity`
        
        {'pytype': 'float', u'default': '0.0', u'ip-units': u'W', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Crankcase Heater Capacity`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `crankcase_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `crankcase_heater_capacity`')
        self._data["Crankcase Heater Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(self, value=10.0 ):
        """  Corresponds to IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
        
        {u'default': '10.0', u'units': u'C', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
                Units: C
                Default value: 10.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation`')
        self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = value

    @property
    def defrost_strategy(self):
        """Get defrost_strategy

        Returns:
            str: the value of `defrost_strategy` or None if not set
        """
        return self._data["Defrost Strategy"]

    @defrost_strategy.setter
    def defrost_strategy(self, value="ReverseCycle"):
        """  Corresponds to IDD Field `Defrost Strategy`
        
        {u'default': u'ReverseCycle', u'type': u'choice', u'key': [u'ReverseCycle', u'Resistive'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Defrost Strategy`
                Accepted values are:
                      - ReverseCycle
                      - Resistive
                Default value: ReverseCycle
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_strategy`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_strategy`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `defrost_strategy`')
            vals = {}
            vals["reversecycle"] = "ReverseCycle"
            vals["resistive"] = "Resistive"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `defrost_strategy`'.format(value))
            value = vals[value_lower]
        self._data["Defrost Strategy"] = value

    @property
    def defrost_control(self):
        """Get defrost_control

        Returns:
            str: the value of `defrost_control` or None if not set
        """
        return self._data["Defrost Control"]

    @defrost_control.setter
    def defrost_control(self, value="Timed"):
        """  Corresponds to IDD Field `Defrost Control`
        
        {u'default': u'Timed', u'type': u'choice', u'key': [u'Timed', u'OnDemand'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Defrost Control`
                Accepted values are:
                      - Timed
                      - OnDemand
                Default value: Timed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_control`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `defrost_control`')
            vals = {}
            vals["timed"] = "Timed"
            vals["ondemand"] = "OnDemand"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `defrost_control`'.format(value))
            value = vals[value_lower]
        self._data["Defrost Control"] = value

    @property
    def defrost_time_period_fraction(self):
        """Get defrost_time_period_fraction

        Returns:
            float: the value of `defrost_time_period_fraction` or None if not set
        """
        return self._data["Defrost Time Period Fraction"]

    @defrost_time_period_fraction.setter
    def defrost_time_period_fraction(self, value=0.058333 ):
        """  Corresponds to IDD Field `Defrost Time Period Fraction`
        Fraction of time in defrost mode
        only applicable if timed defrost control is specified
        
        {u'default': '0.058333', u'note': [u'Fraction of time in defrost mode', u'only applicable if timed defrost control is specified'], u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Defrost Time Period Fraction`
                Default value: 0.058333
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `defrost_time_period_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `defrost_time_period_fraction`')
        self._data["Defrost Time Period Fraction"] = value

    @property
    def resistive_defrost_heater_capacity(self):
        """Get resistive_defrost_heater_capacity

        Returns:
            float: the value of `resistive_defrost_heater_capacity` or None if not set
        """
        return self._data["Resistive Defrost Heater Capacity"]

    @resistive_defrost_heater_capacity.setter
    def resistive_defrost_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Resistive Defrost Heater Capacity`
        only applicable if resistive defrost strategy is specified
        
        {'pytype': 'float', u'default': '0.0', u'note': [u'only applicable if resistive defrost strategy is specified'], u'ip-units': u'W', u'autosizable': u'', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Resistive Defrost Heater Capacity`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `resistive_defrost_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `resistive_defrost_heater_capacity`')
        self._data["Resistive Defrost Heater Capacity"] = value

    @property
    def region_number_for_calculating_hspf(self):
        """Get region_number_for_calculating_hspf

        Returns:
            int: the value of `region_number_for_calculating_hspf` or None if not set
        """
        return self._data["Region number for calculating HSPF"]

    @region_number_for_calculating_hspf.setter
    def region_number_for_calculating_hspf(self, value=4 ):
        """  Corresponds to IDD Field `Region number for calculating HSPF`
        Standard Region number for which HSPF and other standard ratings are calculated
        
        {'pytype': 'int', u'default': '4', u'maximum': '6', u'note': [u'Standard Region number for which HSPF and other standard ratings are calculated'], u'minimum': '1', u'type': u'integer'}

        Args:
            value (int): value for IDD Field `Region number for calculating HSPF`
                Default value: 4
                value >= 1
                value <= 6
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `region_number_for_calculating_hspf`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `region_number_for_calculating_hspf`')
            if value > 6:
                raise ValueError('value need to be smaller 6 '
                                 'for field `region_number_for_calculating_hspf`')
        self._data["Region number for calculating HSPF"] = value

    @property
    def evaporator_air_inlet_node_name(self):
        """Get evaporator_air_inlet_node_name

        Returns:
            str: the value of `evaporator_air_inlet_node_name` or None if not set
        """
        return self._data["Evaporator Air Inlet Node Name"]

    @evaporator_air_inlet_node_name.setter
    def evaporator_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Evaporator Air Inlet Node Name`
        Enter the name of an outdoor air node. This node name is also specified in
        an OutdoorAir:Node or OutdoorAir:NodeList object.
        
        {u'note': [u'Enter the name of an outdoor air node. This node name is also specified in', u'an OutdoorAir:Node or OutdoorAir:NodeList object.'], u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Evaporator Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `evaporator_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `evaporator_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `evaporator_air_inlet_node_name`')
        self._data["Evaporator Air Inlet Node Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilHeatingDxMultiSpeed(object):
    """ Corresponds to IDD object `Coil:Heating:DX:MultiSpeed`
        Direct expansion (DX) heating coil (air-to-air heat pump) and compressor unit
        (includes electric or engine-driven compressor and outdoor fan), multi-speed
        (or variable-speed), with defrost controls. Requires two to four sets
        of performance data and will interpolate between speeds.
    
    """
    internal_name = "Coil:Heating:DX:MultiSpeed"
    field_count = 62
    required_fields = ["Name", "Air Inlet Node Name", "Air Outlet Node Name", "Number of Speeds", "Speed 1 Gross Rated Heating Capacity", "Speed 1 Gross Rated Heating COP", "Speed 1 Rated Air Flow Rate", "Speed 1 Heating Capacity Function of Temperature Curve Name", "Speed 1 Heating Capacity Function of Flow Fraction Curve Name", "Speed 1 Energy Input Ratio Function of Temperature Curve Name", "Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name", "Speed 1 Part Load Fraction Correlation Curve Name", "Speed 1 Rated Waste Heat Fraction of Power Input", "Speed 1 Waste Heat Function of Temperature Curve Name", "Speed 2 Gross Rated Heating Capacity", "Speed 2 Gross Rated Heating COP", "Speed 2 Rated Air Flow Rate", "Speed 2 Heating Capacity Function of Temperature Curve Name", "Speed 2 Heating Capacity Function of Flow Fraction Curve Name", "Speed 2 Energy Input Ratio Function of Temperature Curve Name", "Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name", "Speed 2 Part Load Fraction Correlation Curve Name", "Speed 2 Rated Waste Heat Fraction of Power Input", "Speed 2 Waste Heat Function of Temperature Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Heating:DX:MultiSpeed`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"] = None
        self._data["Outdoor Dry-Bulb Temperature to Turn On Compressor"] = None
        self._data["Crankcase Heater Capacity"] = None
        self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = None
        self._data["Defrost Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Maximum Outdoor Dry-Bulb Temperature for Defrost Operation"] = None
        self._data["Defrost Strategy"] = None
        self._data["Defrost Control"] = None
        self._data["Defrost Time Period Fraction"] = None
        self._data["Resistive Defrost Heater Capacity"] = None
        self._data["Apply Part Load Fraction to Speeds Greater than 1"] = None
        self._data["Fuel Type"] = None
        self._data["Region number for Calculating HSPF"] = None
        self._data["Number of Speeds"] = None
        self._data["Speed 1 Gross Rated Heating Capacity"] = None
        self._data["Speed 1 Gross Rated Heating COP"] = None
        self._data["Speed 1 Rated Air Flow Rate"] = None
        self._data["Speed 1 Rated Supply Air Fan Power Per Volume Flow Rate"] = None
        self._data["Speed 1 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 1 Heating Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Speed 1 Part Load Fraction Correlation Curve Name"] = None
        self._data["Speed 1 Rated Waste Heat Fraction of Power Input"] = None
        self._data["Speed 1 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 2 Gross Rated Heating Capacity"] = None
        self._data["Speed 2 Gross Rated Heating COP"] = None
        self._data["Speed 2 Rated Air Flow Rate"] = None
        self._data["Speed 2 Rated Supply Air Fan Power Per Volume Flow Rate"] = None
        self._data["Speed 2 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 2 Heating Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Speed 2 Part Load Fraction Correlation Curve Name"] = None
        self._data["Speed 2 Rated Waste Heat Fraction of Power Input"] = None
        self._data["Speed 2 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 3 Gross Rated Heating Capacity"] = None
        self._data["Speed 3 Gross Rated Heating COP"] = None
        self._data["Speed 3 Rated Air Flow Rate"] = None
        self._data["Speed 3 Rated Supply Air Fan Power Per Volume Flow Rate"] = None
        self._data["Speed 3 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 3 Heating Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Speed 3 Part Load Fraction Correlation Curve Name"] = None
        self._data["Speed 3 Rated Waste Heat Fraction of Power Input"] = None
        self._data["Speed 3 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 4 Gross Rated Heating Capacity"] = None
        self._data["Speed 4 Gross Rated Heating COP"] = None
        self._data["Speed 4 Rated Air Flow Rate"] = None
        self._data["Speed 4 Rated Supply Air Fan Power Per Volume Flow Rate"] = None
        self._data["Speed 4 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 4 Heating Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Speed 4 Part Load Fraction Correlation Curve Name"] = None
        self._data["Speed 4 Rated Waste Heat Fraction of Power Input"] = None
        self._data["Speed 4 Waste Heat Function of Temperature Curve Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_outdoor_drybulb_temperature_for_compressor_operation = None
        else:
            self.minimum_outdoor_drybulb_temperature_for_compressor_operation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outdoor_drybulb_temperature_to_turn_on_compressor = None
        else:
            self.outdoor_drybulb_temperature_to_turn_on_compressor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.crankcase_heater_capacity = None
        else:
            self.crankcase_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.defrost_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.defrost_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_defrost_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_defrost_operation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.defrost_strategy = None
        else:
            self.defrost_strategy = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.defrost_control = None
        else:
            self.defrost_control = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.defrost_time_period_fraction = None
        else:
            self.defrost_time_period_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.resistive_defrost_heater_capacity = None
        else:
            self.resistive_defrost_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.apply_part_load_fraction_to_speeds_greater_than_1 = None
        else:
            self.apply_part_load_fraction_to_speeds_greater_than_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fuel_type = None
        else:
            self.fuel_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.region_number_for_calculating_hspf = None
        else:
            self.region_number_for_calculating_hspf = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_speeds = None
        else:
            self.number_of_speeds = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_gross_rated_heating_capacity = None
        else:
            self.speed_1_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_gross_rated_heating_cop = None
        else:
            self.speed_1_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_rated_air_flow_rate = None
        else:
            self.speed_1_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_rated_supply_air_fan_power_per_volume_flow_rate = None
        else:
            self.speed_1_rated_supply_air_fan_power_per_volume_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_1_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_heating_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.speed_1_heating_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_1_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.speed_1_energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_part_load_fraction_correlation_curve_name = None
        else:
            self.speed_1_part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_rated_waste_heat_fraction_of_power_input = None
        else:
            self.speed_1_rated_waste_heat_fraction_of_power_input = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_1_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_gross_rated_heating_capacity = None
        else:
            self.speed_2_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_gross_rated_heating_cop = None
        else:
            self.speed_2_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_rated_air_flow_rate = None
        else:
            self.speed_2_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_rated_supply_air_fan_power_per_volume_flow_rate = None
        else:
            self.speed_2_rated_supply_air_fan_power_per_volume_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_2_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_heating_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.speed_2_heating_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_2_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.speed_2_energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_part_load_fraction_correlation_curve_name = None
        else:
            self.speed_2_part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_rated_waste_heat_fraction_of_power_input = None
        else:
            self.speed_2_rated_waste_heat_fraction_of_power_input = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_2_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_gross_rated_heating_capacity = None
        else:
            self.speed_3_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_gross_rated_heating_cop = None
        else:
            self.speed_3_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_rated_air_flow_rate = None
        else:
            self.speed_3_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_rated_supply_air_fan_power_per_volume_flow_rate = None
        else:
            self.speed_3_rated_supply_air_fan_power_per_volume_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_3_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_heating_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.speed_3_heating_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_3_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.speed_3_energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_part_load_fraction_correlation_curve_name = None
        else:
            self.speed_3_part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_rated_waste_heat_fraction_of_power_input = None
        else:
            self.speed_3_rated_waste_heat_fraction_of_power_input = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_3_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_gross_rated_heating_capacity = None
        else:
            self.speed_4_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_gross_rated_heating_cop = None
        else:
            self.speed_4_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_rated_air_flow_rate = None
        else:
            self.speed_4_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_rated_supply_air_fan_power_per_volume_flow_rate = None
        else:
            self.speed_4_rated_supply_air_fan_power_per_volume_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_4_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_heating_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.speed_4_heating_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_4_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.speed_4_energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_part_load_fraction_correlation_curve_name = None
        else:
            self.speed_4_part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_rated_waste_heat_fraction_of_power_input = None
        else:
            self.speed_4_rated_waste_heat_fraction_of_power_input = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_4_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'AFNCoilNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def minimum_outdoor_drybulb_temperature_for_compressor_operation(self):
        """Get minimum_outdoor_drybulb_temperature_for_compressor_operation

        Returns:
            float: the value of `minimum_outdoor_drybulb_temperature_for_compressor_operation` or None if not set
        """
        return self._data["Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"]

    @minimum_outdoor_drybulb_temperature_for_compressor_operation.setter
    def minimum_outdoor_drybulb_temperature_for_compressor_operation(self, value=-8.0 ):
        """  Corresponds to IDD Field `Minimum Outdoor Dry-Bulb Temperature for Compressor Operation`
        
        {u'default': '-8.0', u'units': u'C', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Minimum Outdoor Dry-Bulb Temperature for Compressor Operation`
                Units: C
                Default value: -8.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_drybulb_temperature_for_compressor_operation`'.format(value))
        self._data["Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"] = value

    @property
    def outdoor_drybulb_temperature_to_turn_on_compressor(self):
        """Get outdoor_drybulb_temperature_to_turn_on_compressor

        Returns:
            float: the value of `outdoor_drybulb_temperature_to_turn_on_compressor` or None if not set
        """
        return self._data["Outdoor Dry-Bulb Temperature to Turn On Compressor"]

    @outdoor_drybulb_temperature_to_turn_on_compressor.setter
    def outdoor_drybulb_temperature_to_turn_on_compressor(self, value=None):
        """  Corresponds to IDD Field `Outdoor Dry-Bulb Temperature to Turn On Compressor`
        The outdoor temperature when the compressor is automatically turned back on following an
        automatic shut off because of low outdoor dry-bulb temperature. This field is only used
        for the calculation of HSPF. If this field is not provided, then outdoor bin temperature
        used in the HSPF calculation is always considered to be greater than this temperature and
        'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above.
        This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error
        in the final value of HSPF.
        
        {u'units': u'C', u'note': [u'The outdoor temperature when the compressor is automatically turned back on following an', u'automatic shut off because of low outdoor dry-bulb temperature. This field is only used', u'for the calculation of HSPF. If this field is not provided, then outdoor bin temperature', u'used in the HSPF calculation is always considered to be greater than this temperature and', u"'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above.", u'This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error', u'in the final value of HSPF.'], u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Outdoor Dry-Bulb Temperature to Turn On Compressor`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_drybulb_temperature_to_turn_on_compressor`'.format(value))
        self._data["Outdoor Dry-Bulb Temperature to Turn On Compressor"] = value

    @property
    def crankcase_heater_capacity(self):
        """Get crankcase_heater_capacity

        Returns:
            float: the value of `crankcase_heater_capacity` or None if not set
        """
        return self._data["Crankcase Heater Capacity"]

    @crankcase_heater_capacity.setter
    def crankcase_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Crankcase Heater Capacity`
        
        {'pytype': 'float', u'default': '0.0', u'ip-units': u'W', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Crankcase Heater Capacity`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `crankcase_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `crankcase_heater_capacity`')
        self._data["Crankcase Heater Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(self, value=10.0 ):
        """  Corresponds to IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
        
        {u'default': '10.0', u'units': u'C', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
                Units: C
                Default value: 10.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation`')
        self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = value

    @property
    def defrost_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get defrost_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `defrost_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Defrost Energy Input Ratio Function of Temperature Curve Name"]

    @defrost_energy_input_ratio_function_of_temperature_curve_name.setter
    def defrost_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Defrost Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat
        wb = wet-bulb temperature (C) of air entering the indoor coil
        oat = outdoor air dry-bulb temperature (C)
        only required if ReverseCycle defrost strategy is specified
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat', u'wb = wet-bulb temperature (C) of air entering the indoor coil', u'oat = outdoor air dry-bulb temperature (C)', u'only required if ReverseCycle defrost strategy is specified'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Defrost Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `defrost_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Defrost Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_defrost_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_defrost_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_defrost_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-Bulb Temperature for Defrost Operation"]

    @maximum_outdoor_drybulb_temperature_for_defrost_operation.setter
    def maximum_outdoor_drybulb_temperature_for_defrost_operation(self, value=5.0 ):
        """  Corresponds to IDD Field `Maximum Outdoor Dry-Bulb Temperature for Defrost Operation`
        
        {'pytype': 'float', u'default': '5.0', u'maximum': '7.22', u'minimum': '0.0', u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Defrost Operation`
                Units: C
                Default value: 5.0
                value >= 0.0
                value <= 7.22
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_defrost_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_defrost_operation`')
            if value > 7.22:
                raise ValueError('value need to be smaller 7.22 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_defrost_operation`')
        self._data["Maximum Outdoor Dry-Bulb Temperature for Defrost Operation"] = value

    @property
    def defrost_strategy(self):
        """Get defrost_strategy

        Returns:
            str: the value of `defrost_strategy` or None if not set
        """
        return self._data["Defrost Strategy"]

    @defrost_strategy.setter
    def defrost_strategy(self, value="ReverseCycle"):
        """  Corresponds to IDD Field `Defrost Strategy`
        
        {u'default': u'ReverseCycle', u'type': u'choice', u'key': [u'ReverseCycle', u'Resistive'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Defrost Strategy`
                Accepted values are:
                      - ReverseCycle
                      - Resistive
                Default value: ReverseCycle
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_strategy`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_strategy`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `defrost_strategy`')
            vals = {}
            vals["reversecycle"] = "ReverseCycle"
            vals["resistive"] = "Resistive"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `defrost_strategy`'.format(value))
            value = vals[value_lower]
        self._data["Defrost Strategy"] = value

    @property
    def defrost_control(self):
        """Get defrost_control

        Returns:
            str: the value of `defrost_control` or None if not set
        """
        return self._data["Defrost Control"]

    @defrost_control.setter
    def defrost_control(self, value="Timed"):
        """  Corresponds to IDD Field `Defrost Control`
        
        {u'default': u'Timed', u'type': u'choice', u'key': [u'Timed', u'OnDemand'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Defrost Control`
                Accepted values are:
                      - Timed
                      - OnDemand
                Default value: Timed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_control`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `defrost_control`')
            vals = {}
            vals["timed"] = "Timed"
            vals["ondemand"] = "OnDemand"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `defrost_control`'.format(value))
            value = vals[value_lower]
        self._data["Defrost Control"] = value

    @property
    def defrost_time_period_fraction(self):
        """Get defrost_time_period_fraction

        Returns:
            float: the value of `defrost_time_period_fraction` or None if not set
        """
        return self._data["Defrost Time Period Fraction"]

    @defrost_time_period_fraction.setter
    def defrost_time_period_fraction(self, value=0.058333 ):
        """  Corresponds to IDD Field `Defrost Time Period Fraction`
        Fraction of time in defrost mode
        only applicable if timed defrost control is specified
        
        {u'default': '0.058333', u'note': [u'Fraction of time in defrost mode', u'only applicable if timed defrost control is specified'], u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Defrost Time Period Fraction`
                Default value: 0.058333
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `defrost_time_period_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `defrost_time_period_fraction`')
        self._data["Defrost Time Period Fraction"] = value

    @property
    def resistive_defrost_heater_capacity(self):
        """Get resistive_defrost_heater_capacity

        Returns:
            float: the value of `resistive_defrost_heater_capacity` or None if not set
        """
        return self._data["Resistive Defrost Heater Capacity"]

    @resistive_defrost_heater_capacity.setter
    def resistive_defrost_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Resistive Defrost Heater Capacity`
        only applicable if resistive defrost strategy is specified
        
        {'pytype': 'float', u'default': '0.0', u'note': [u'only applicable if resistive defrost strategy is specified'], u'ip-units': u'W', u'autosizable': u'', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Resistive Defrost Heater Capacity`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `resistive_defrost_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `resistive_defrost_heater_capacity`')
        self._data["Resistive Defrost Heater Capacity"] = value

    @property
    def apply_part_load_fraction_to_speeds_greater_than_1(self):
        """Get apply_part_load_fraction_to_speeds_greater_than_1

        Returns:
            str: the value of `apply_part_load_fraction_to_speeds_greater_than_1` or None if not set
        """
        return self._data["Apply Part Load Fraction to Speeds Greater than 1"]

    @apply_part_load_fraction_to_speeds_greater_than_1.setter
    def apply_part_load_fraction_to_speeds_greater_than_1(self, value="No"):
        """  Corresponds to IDD Field `Apply Part Load Fraction to Speeds Greater than 1`
        
        {u'default': u'No', u'type': u'choice', u'key': [u'Yes', u'No'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Apply Part Load Fraction to Speeds Greater than 1`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `apply_part_load_fraction_to_speeds_greater_than_1`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `apply_part_load_fraction_to_speeds_greater_than_1`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `apply_part_load_fraction_to_speeds_greater_than_1`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `apply_part_load_fraction_to_speeds_greater_than_1`'.format(value))
            value = vals[value_lower]
        self._data["Apply Part Load Fraction to Speeds Greater than 1"] = value

    @property
    def fuel_type(self):
        """Get fuel_type

        Returns:
            str: the value of `fuel_type` or None if not set
        """
        return self._data["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="NaturalGas"):
        """  Corresponds to IDD Field `Fuel Type`
        
        {u'default': u'NaturalGas', u'type': u'choice', u'key': [u'Electricity', u'NaturalGas', u'PropaneGas', u'Diesel', u'Gasoline', u'FuelOil#1', u'FuelOil#2', u'OtherFuel1', u'OtherFuel2'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Fuel Type`
                Accepted values are:
                      - Electricity
                      - NaturalGas
                      - PropaneGas
                      - Diesel
                      - Gasoline
                      - FuelOil#1
                      - FuelOil#2
                      - OtherFuel1
                      - OtherFuel2
                Default value: NaturalGas
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `fuel_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `fuel_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `fuel_type`')
            vals = {}
            vals["electricity"] = "Electricity"
            vals["naturalgas"] = "NaturalGas"
            vals["propanegas"] = "PropaneGas"
            vals["diesel"] = "Diesel"
            vals["gasoline"] = "Gasoline"
            vals["fueloil#1"] = "FuelOil#1"
            vals["fueloil#2"] = "FuelOil#2"
            vals["otherfuel1"] = "OtherFuel1"
            vals["otherfuel2"] = "OtherFuel2"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `fuel_type`'.format(value))
            value = vals[value_lower]
        self._data["Fuel Type"] = value

    @property
    def region_number_for_calculating_hspf(self):
        """Get region_number_for_calculating_hspf

        Returns:
            int: the value of `region_number_for_calculating_hspf` or None if not set
        """
        return self._data["Region number for Calculating HSPF"]

    @region_number_for_calculating_hspf.setter
    def region_number_for_calculating_hspf(self, value=4 ):
        """  Corresponds to IDD Field `Region number for Calculating HSPF`
        Standard Region number for which HSPF and other standard ratings are calculated
        
        {'pytype': 'int', u'default': '4', u'maximum': '6', u'note': [u'Standard Region number for which HSPF and other standard ratings are calculated'], u'minimum': '1', u'type': u'integer'}

        Args:
            value (int): value for IDD Field `Region number for Calculating HSPF`
                Default value: 4
                value >= 1
                value <= 6
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `region_number_for_calculating_hspf`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `region_number_for_calculating_hspf`')
            if value > 6:
                raise ValueError('value need to be smaller 6 '
                                 'for field `region_number_for_calculating_hspf`')
        self._data["Region number for Calculating HSPF"] = value

    @property
    def number_of_speeds(self):
        """Get number_of_speeds

        Returns:
            int: the value of `number_of_speeds` or None if not set
        """
        return self._data["Number of Speeds"]

    @number_of_speeds.setter
    def number_of_speeds(self, value=None):
        """  Corresponds to IDD Field `Number of Speeds`
        Enter the number of the following sets of data for coil capacity, COP,
        flow rate, and associated curves.
        
        {'pytype': 'int', u'maximum': '4', u'required-field': True, u'note': [u'Enter the number of the following sets of data for coil capacity, COP,', u'flow rate, and associated curves.'], u'minimum': '2', u'type': u'integer'}

        Args:
            value (int): value for IDD Field `Number of Speeds`
                value >= 2
                value <= 4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_speeds`'.format(value))
            if value < 2:
                raise ValueError('value need to be greater or equal 2 '
                                 'for field `number_of_speeds`')
            if value > 4:
                raise ValueError('value need to be smaller 4 '
                                 'for field `number_of_speeds`')
        self._data["Number of Speeds"] = value

    @property
    def speed_1_gross_rated_heating_capacity(self):
        """Get speed_1_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_1_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 1 Gross Rated Heating Capacity"]

    @speed_1_gross_rated_heating_capacity.setter
    def speed_1_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        capacity excluding supply air fan heat
        rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        rating point heating coil entering air dry-bulb 21.11 C, coil entering
        wet-bulb 15.55 C
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Heating capacity not accounting for the effect of supply air fan heat', u'capacity excluding supply air fan heat', u'rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C', u'rating point heating coil entering air dry-bulb 21.11 C, coil entering', u'wet-bulb 15.55 C'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Gross Rated Heating Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_gross_rated_heating_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_1_gross_rated_heating_capacity`')
        self._data["Speed 1 Gross Rated Heating Capacity"] = value

    @property
    def speed_1_gross_rated_heating_cop(self):
        """Get speed_1_gross_rated_heating_cop

        Returns:
            float: the value of `speed_1_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 1 Gross Rated Heating COP"]

    @speed_1_gross_rated_heating_cop.setter
    def speed_1_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Gross Rated Heating COP`
        Rated heating capacity divided by power input to the compressor and outdoor fan,
        does not include supply air fan heat or supply air fan electrical energy
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Rated heating capacity divided by power input to the compressor and outdoor fan,', u'does not include supply air fan heat or supply air fan electrical energy'], u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Gross Rated Heating COP`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_gross_rated_heating_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_1_gross_rated_heating_cop`')
        self._data["Speed 1 Gross Rated Heating COP"] = value

    @property
    def speed_1_rated_air_flow_rate(self):
        """Get speed_1_rated_air_flow_rate

        Returns:
            float: the value of `speed_1_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 1 Rated Air Flow Rate"]

    @speed_1_rated_air_flow_rate.setter
    def speed_1_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Rated Air Flow Rate`
        Flow rate corresponding to rated total capacity
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total
        heating capacity
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Flow rate corresponding to rated total capacity', u'should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total', u'heating capacity'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_1_rated_air_flow_rate`')
        self._data["Speed 1 Rated Air Flow Rate"] = value

    @property
    def speed_1_rated_supply_air_fan_power_per_volume_flow_rate(self):
        """Get speed_1_rated_supply_air_fan_power_per_volume_flow_rate

        Returns:
            float: the value of `speed_1_rated_supply_air_fan_power_per_volume_flow_rate` or None if not set
        """
        return self._data["Speed 1 Rated Supply Air Fan Power Per Volume Flow Rate"]

    @speed_1_rated_supply_air_fan_power_per_volume_flow_rate.setter
    def speed_1_rated_supply_air_fan_power_per_volume_flow_rate(self, value=773.3 ):
        """  Corresponds to IDD Field `Speed 1 Rated Supply Air Fan Power Per Volume Flow Rate`
        Enter the supply air fan power per air volume flow rate at the rated speed 1 test conditions.
        The test conditions vary external static pressure based on heating capacity. This value
        is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not
        used for modeling the supply air fan during simulations.
        
        {'pytype': 'float', u'default': '773.3', u'maximum': '1250.0', u'note': [u'Enter the supply air fan power per air volume flow rate at the rated speed 1 test conditions.', u'The test conditions vary external static pressure based on heating capacity. This value', u'is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not', u'used for modeling the supply air fan during simulations.'], u'minimum': '0.0', u'units': u'W/(m3/s)', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Rated Supply Air Fan Power Per Volume Flow Rate`
                Units: W/(m3/s)
                Default value: 773.3
                value >= 0.0
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_rated_supply_air_fan_power_per_volume_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_rated_supply_air_fan_power_per_volume_flow_rate`')
            if value > 1250.0:
                raise ValueError('value need to be smaller 1250.0 '
                                 'for field `speed_1_rated_supply_air_fan_power_per_volume_flow_rate`')
        self._data["Speed 1 Rated Supply Air Fan Power Per Volume Flow Rate"] = value

    @property
    def speed_1_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_1_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_1_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 1 Heating Capacity Function of Temperature Curve Name"]

    @speed_1_heating_capacity_function_of_temperature_curve_name.setter
    def speed_1_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the heating capacity to be sensitive to both iat and oat.
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'quadratic curve = a + b*oat + c*oat**2', u'cubic curve = a + b*oat + c*oat**2 + d*oat**3', u'biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat', u'oat = outdoor air dry-bulb temperature (C)', u'iat = indoor air dry-bulb temperature (C)', u'biquadratic curve is recommended if sufficient manufacturer data is', u'available for the heating capacity to be sensitive to both iat and oat.'], u'type': u'object-list', u'object-list': u'BiquadraticQuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 1 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_1_heating_capacity_function_of_flow_fraction_curve_name(self):
        """Get speed_1_heating_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `speed_1_heating_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 1 Heating Capacity Function of Flow Fraction Curve Name"]

    @speed_1_heating_capacity_function_of_flow_fraction_curve_name.setter
    def speed_1_heating_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Heating Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Heating Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_heating_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_heating_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_heating_capacity_function_of_flow_fraction_curve_name`')
        self._data["Speed 1 Heating Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_1_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the energy input ratio to be sensitive to both iat and oat.
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'quadratic curve = a + b*oat + c*oat**2', u'cubic curve = a + b*oat + c*oat**2 + d*oat**3', u'biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat', u'oat = outdoor air dry-bulb temperature (C)', u'iat = indoor air dry-bulb temperature (C)', u'biquadratic curve is recommended if sufficient manufacturer data is', u'available for the energy input ratio to be sensitive to both iat and oat.'], u'type': u'object-list', u'object-list': u'BiquadraticQuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name"]

    @speed_1_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def speed_1_energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def speed_1_part_load_fraction_correlation_curve_name(self):
        """Get speed_1_part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `speed_1_part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Speed 1 Part Load Fraction Correlation Curve Name"]

    @speed_1_part_load_fraction_correlation_curve_name.setter
    def speed_1_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (sensible heating load/steady state heating capacity)
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLR = part load ratio (sensible heating load/steady state heating capacity)'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_part_load_fraction_correlation_curve_name`')
        self._data["Speed 1 Part Load Fraction Correlation Curve Name"] = value

    @property
    def speed_1_rated_waste_heat_fraction_of_power_input(self):
        """Get speed_1_rated_waste_heat_fraction_of_power_input

        Returns:
            float: the value of `speed_1_rated_waste_heat_fraction_of_power_input` or None if not set
        """
        return self._data["Speed 1 Rated Waste Heat Fraction of Power Input"]

    @speed_1_rated_waste_heat_fraction_of_power_input.setter
    def speed_1_rated_waste_heat_fraction_of_power_input(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Rated Waste Heat Fraction of Power Input`
        recoverable waste heat at full load and rated conditions
        
        {'pytype': 'float', u'minimum>': '0.0', u'maximum': '1.0', u'required-field': True, u'note': [u'recoverable waste heat at full load and rated conditions'], u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Rated Waste Heat Fraction of Power Input`
                Units: dimensionless
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_rated_waste_heat_fraction_of_power_input`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_1_rated_waste_heat_fraction_of_power_input`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_1_rated_waste_heat_fraction_of_power_input`')
        self._data["Speed 1 Rated Waste Heat Fraction of Power Input"] = value

    @property
    def speed_1_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_1_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_1_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 1 Waste Heat Function of Temperature Curve Name"]

    @speed_1_waste_heat_function_of_temperature_curve_name.setter
    def speed_1_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db
        odb = Outdoor air dry-bulb temperature (C)
        db = entering coil dry-bulb temperature (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db', u'odb = Outdoor air dry-bulb temperature (C)', u'db = entering coil dry-bulb temperature (C)'], u'type': u'object-list', u'object-list': u'BiQuadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 1 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_2_gross_rated_heating_capacity(self):
        """Get speed_2_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_2_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 2 Gross Rated Heating Capacity"]

    @speed_2_gross_rated_heating_capacity.setter
    def speed_2_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        capacity excluding supply air fan heat
        rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        rating point heating coil entering air dry-bulb 21.11 C, coil entering
        wet-bulb 15.55 C
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Heating capacity not accounting for the effect of supply air fan heat', u'capacity excluding supply air fan heat', u'rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C', u'rating point heating coil entering air dry-bulb 21.11 C, coil entering', u'wet-bulb 15.55 C'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Gross Rated Heating Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_gross_rated_heating_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_2_gross_rated_heating_capacity`')
        self._data["Speed 2 Gross Rated Heating Capacity"] = value

    @property
    def speed_2_gross_rated_heating_cop(self):
        """Get speed_2_gross_rated_heating_cop

        Returns:
            float: the value of `speed_2_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 2 Gross Rated Heating COP"]

    @speed_2_gross_rated_heating_cop.setter
    def speed_2_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Gross Rated Heating COP`
        Rated heating capacity divided by power input to the compressor and outdoor fan,
        does not include supply air fan heat or supply air fan electrical energy
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Rated heating capacity divided by power input to the compressor and outdoor fan,', u'does not include supply air fan heat or supply air fan electrical energy'], u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Gross Rated Heating COP`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_gross_rated_heating_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_2_gross_rated_heating_cop`')
        self._data["Speed 2 Gross Rated Heating COP"] = value

    @property
    def speed_2_rated_air_flow_rate(self):
        """Get speed_2_rated_air_flow_rate

        Returns:
            float: the value of `speed_2_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 2 Rated Air Flow Rate"]

    @speed_2_rated_air_flow_rate.setter
    def speed_2_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Rated Air Flow Rate`
        Flow rate corresponding to rated total capacity
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total
        heating capacity
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Flow rate corresponding to rated total capacity', u'should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total', u'heating capacity'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_2_rated_air_flow_rate`')
        self._data["Speed 2 Rated Air Flow Rate"] = value

    @property
    def speed_2_rated_supply_air_fan_power_per_volume_flow_rate(self):
        """Get speed_2_rated_supply_air_fan_power_per_volume_flow_rate

        Returns:
            float: the value of `speed_2_rated_supply_air_fan_power_per_volume_flow_rate` or None if not set
        """
        return self._data["Speed 2 Rated Supply Air Fan Power Per Volume Flow Rate"]

    @speed_2_rated_supply_air_fan_power_per_volume_flow_rate.setter
    def speed_2_rated_supply_air_fan_power_per_volume_flow_rate(self, value=773.3 ):
        """  Corresponds to IDD Field `Speed 2 Rated Supply Air Fan Power Per Volume Flow Rate`
        Enter the supply air fan power per air volume flow rate at the rated speed 2 test conditions.
        The test conditions vary external static pressure based on heating capacity. This value
        is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not
        used for modeling the supply air fan during simulations.
        
        {'pytype': 'float', u'default': '773.3', u'maximum': '1250.0', u'note': [u'Enter the supply air fan power per air volume flow rate at the rated speed 2 test conditions.', u'The test conditions vary external static pressure based on heating capacity. This value', u'is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not', u'used for modeling the supply air fan during simulations.'], u'minimum': '0.0', u'units': u'W/(m3/s)', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Rated Supply Air Fan Power Per Volume Flow Rate`
                Units: W/(m3/s)
                Default value: 773.3
                value >= 0.0
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_rated_supply_air_fan_power_per_volume_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_rated_supply_air_fan_power_per_volume_flow_rate`')
            if value > 1250.0:
                raise ValueError('value need to be smaller 1250.0 '
                                 'for field `speed_2_rated_supply_air_fan_power_per_volume_flow_rate`')
        self._data["Speed 2 Rated Supply Air Fan Power Per Volume Flow Rate"] = value

    @property
    def speed_2_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_2_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_2_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 2 Heating Capacity Function of Temperature Curve Name"]

    @speed_2_heating_capacity_function_of_temperature_curve_name.setter
    def speed_2_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the heating capacity to be sensitive to both iat and oat.
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'quadratic curve = a + b*oat + c*oat**2', u'cubic curve = a + b*oat + c*oat**2 + d*oat**3', u'biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat', u'oat = outdoor air dry-bulb temperature (C)', u'iat = indoor air dry-bulb temperature (C)', u'biquadratic curve is recommended if sufficient manufacturer data is', u'available for the heating capacity to be sensitive to both iat and oat.'], u'type': u'object-list', u'object-list': u'BiquadraticQuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 2 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_2_heating_capacity_function_of_flow_fraction_curve_name(self):
        """Get speed_2_heating_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `speed_2_heating_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 2 Heating Capacity Function of Flow Fraction Curve Name"]

    @speed_2_heating_capacity_function_of_flow_fraction_curve_name.setter
    def speed_2_heating_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Heating Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Heating Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_heating_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_heating_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_heating_capacity_function_of_flow_fraction_curve_name`')
        self._data["Speed 2 Heating Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_2_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the energy input ratio to be sensitive to both iat and oat.
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'quadratic curve = a + b*oat + c*oat**2', u'cubic curve = a + b*oat + c*oat**2 + d*oat**3', u'biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat', u'oat = outdoor air dry-bulb temperature (C)', u'iat = indoor air dry-bulb temperature (C)', u'biquadratic curve is recommended if sufficient manufacturer data is', u'available for the energy input ratio to be sensitive to both iat and oat.'], u'type': u'object-list', u'object-list': u'BiquadraticQuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name"]

    @speed_2_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def speed_2_energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def speed_2_part_load_fraction_correlation_curve_name(self):
        """Get speed_2_part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `speed_2_part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Speed 2 Part Load Fraction Correlation Curve Name"]

    @speed_2_part_load_fraction_correlation_curve_name.setter
    def speed_2_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (sensible heating load/steady state heating capacity)
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLR = part load ratio (sensible heating load/steady state heating capacity)'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_part_load_fraction_correlation_curve_name`')
        self._data["Speed 2 Part Load Fraction Correlation Curve Name"] = value

    @property
    def speed_2_rated_waste_heat_fraction_of_power_input(self):
        """Get speed_2_rated_waste_heat_fraction_of_power_input

        Returns:
            float: the value of `speed_2_rated_waste_heat_fraction_of_power_input` or None if not set
        """
        return self._data["Speed 2 Rated Waste Heat Fraction of Power Input"]

    @speed_2_rated_waste_heat_fraction_of_power_input.setter
    def speed_2_rated_waste_heat_fraction_of_power_input(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Rated Waste Heat Fraction of Power Input`
        recoverable waste heat at full load and rated conditions
        
        {'pytype': 'float', u'minimum>': '0.0', u'maximum': '1.0', u'required-field': True, u'note': [u'recoverable waste heat at full load and rated conditions'], u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 2 Rated Waste Heat Fraction of Power Input`
                Units: dimensionless
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_rated_waste_heat_fraction_of_power_input`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_2_rated_waste_heat_fraction_of_power_input`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_2_rated_waste_heat_fraction_of_power_input`')
        self._data["Speed 2 Rated Waste Heat Fraction of Power Input"] = value

    @property
    def speed_2_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_2_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_2_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 2 Waste Heat Function of Temperature Curve Name"]

    @speed_2_waste_heat_function_of_temperature_curve_name.setter
    def speed_2_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db
        odb = Outdoor air dry-bulb temperature (C)
        db = entering coil dry-bulb temperature (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db', u'odb = Outdoor air dry-bulb temperature (C)', u'db = entering coil dry-bulb temperature (C)'], u'type': u'object-list', u'object-list': u'BiQuadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 2 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_3_gross_rated_heating_capacity(self):
        """Get speed_3_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_3_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 3 Gross Rated Heating Capacity"]

    @speed_3_gross_rated_heating_capacity.setter
    def speed_3_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        capacity excluding supply air fan heat
        rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        rating point heating coil entering air dry-bulb 21.11 C, coil entering
        wet-bulb 15.55 C
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Heating capacity not accounting for the effect of supply air fan heat', u'capacity excluding supply air fan heat', u'rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C', u'rating point heating coil entering air dry-bulb 21.11 C, coil entering', u'wet-bulb 15.55 C'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 3 Gross Rated Heating Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_gross_rated_heating_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_3_gross_rated_heating_capacity`')
        self._data["Speed 3 Gross Rated Heating Capacity"] = value

    @property
    def speed_3_gross_rated_heating_cop(self):
        """Get speed_3_gross_rated_heating_cop

        Returns:
            float: the value of `speed_3_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 3 Gross Rated Heating COP"]

    @speed_3_gross_rated_heating_cop.setter
    def speed_3_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Gross Rated Heating COP`
        Rated heating capacity divided by power input to the compressor and outdoor fan,
        does not include supply air fan heat or supply air fan electrical energy
        
        {u'note': [u'Rated heating capacity divided by power input to the compressor and outdoor fan,', u'does not include supply air fan heat or supply air fan electrical energy'], u'units': u'W/W', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Gross Rated Heating COP`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_gross_rated_heating_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_3_gross_rated_heating_cop`')
        self._data["Speed 3 Gross Rated Heating COP"] = value

    @property
    def speed_3_rated_air_flow_rate(self):
        """Get speed_3_rated_air_flow_rate

        Returns:
            float: the value of `speed_3_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 3 Rated Air Flow Rate"]

    @speed_3_rated_air_flow_rate.setter
    def speed_3_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Rated Air Flow Rate`
        Flow rate corresponding to rated total capacity
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total
        heating capacity
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Flow rate corresponding to rated total capacity', u'should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total', u'heating capacity'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 3 Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_3_rated_air_flow_rate`')
        self._data["Speed 3 Rated Air Flow Rate"] = value

    @property
    def speed_3_rated_supply_air_fan_power_per_volume_flow_rate(self):
        """Get speed_3_rated_supply_air_fan_power_per_volume_flow_rate

        Returns:
            float: the value of `speed_3_rated_supply_air_fan_power_per_volume_flow_rate` or None if not set
        """
        return self._data["Speed 3 Rated Supply Air Fan Power Per Volume Flow Rate"]

    @speed_3_rated_supply_air_fan_power_per_volume_flow_rate.setter
    def speed_3_rated_supply_air_fan_power_per_volume_flow_rate(self, value=773.3 ):
        """  Corresponds to IDD Field `Speed 3 Rated Supply Air Fan Power Per Volume Flow Rate`
        Enter the supply air fan power per air volume flow rate at the rated speed 3 test conditions.
        The test conditions vary external static pressure based on heating capacity. This value
        is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not
        used for modeling the supply air fan during simulations.
        
        {'pytype': 'float', u'default': '773.3', u'maximum': '1250.0', u'note': [u'Enter the supply air fan power per air volume flow rate at the rated speed 3 test conditions.', u'The test conditions vary external static pressure based on heating capacity. This value', u'is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not', u'used for modeling the supply air fan during simulations.'], u'minimum': '0.0', u'units': u'W/(m3/s)', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 3 Rated Supply Air Fan Power Per Volume Flow Rate`
                Units: W/(m3/s)
                Default value: 773.3
                value >= 0.0
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_rated_supply_air_fan_power_per_volume_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_rated_supply_air_fan_power_per_volume_flow_rate`')
            if value > 1250.0:
                raise ValueError('value need to be smaller 1250.0 '
                                 'for field `speed_3_rated_supply_air_fan_power_per_volume_flow_rate`')
        self._data["Speed 3 Rated Supply Air Fan Power Per Volume Flow Rate"] = value

    @property
    def speed_3_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_3_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_3_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 3 Heating Capacity Function of Temperature Curve Name"]

    @speed_3_heating_capacity_function_of_temperature_curve_name.setter
    def speed_3_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the heating capacity to be sensitive to both iat and oat.
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'quadratic curve = a + b*oat + c*oat**2', u'cubic curve = a + b*oat + c*oat**2 + d*oat**3', u'biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat', u'oat = outdoor air dry-bulb temperature (C)', u'iat = indoor air dry-bulb temperature (C)', u'biquadratic curve is recommended if sufficient manufacturer data is', u'available for the heating capacity to be sensitive to both iat and oat.'], u'type': u'object-list', u'object-list': u'BiquadraticQuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 3 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_3_heating_capacity_function_of_flow_fraction_curve_name(self):
        """Get speed_3_heating_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `speed_3_heating_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 3 Heating Capacity Function of Flow Fraction Curve Name"]

    @speed_3_heating_capacity_function_of_flow_fraction_curve_name.setter
    def speed_3_heating_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Heating Capacity Function of Flow Fraction Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Heating Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_heating_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_heating_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_heating_capacity_function_of_flow_fraction_curve_name`')
        self._data["Speed 3 Heating Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_3_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the energy input ratio to be sensitive to both iat and oat.
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'quadratic curve = a + b*oat + c*oat**2', u'cubic curve = a + b*oat + c*oat**2 + d*oat**3', u'biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat', u'oat = outdoor air dry-bulb temperature (C)', u'iat = indoor air dry-bulb temperature (C)', u'biquadratic curve is recommended if sufficient manufacturer data is', u'available for the energy input ratio to be sensitive to both iat and oat.'], u'type': u'object-list', u'object-list': u'BiquadraticQuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name"]

    @speed_3_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def speed_3_energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def speed_3_part_load_fraction_correlation_curve_name(self):
        """Get speed_3_part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `speed_3_part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Speed 3 Part Load Fraction Correlation Curve Name"]

    @speed_3_part_load_fraction_correlation_curve_name.setter
    def speed_3_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Part Load Fraction Correlation Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (sensible heating load/steady state heating capacity)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLR = part load ratio (sensible heating load/steady state heating capacity)'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_part_load_fraction_correlation_curve_name`')
        self._data["Speed 3 Part Load Fraction Correlation Curve Name"] = value

    @property
    def speed_3_rated_waste_heat_fraction_of_power_input(self):
        """Get speed_3_rated_waste_heat_fraction_of_power_input

        Returns:
            float: the value of `speed_3_rated_waste_heat_fraction_of_power_input` or None if not set
        """
        return self._data["Speed 3 Rated Waste Heat Fraction of Power Input"]

    @speed_3_rated_waste_heat_fraction_of_power_input.setter
    def speed_3_rated_waste_heat_fraction_of_power_input(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Rated Waste Heat Fraction of Power Input`
        recoverable waste heat at full load and rated conditions
        
        {'pytype': 'float', u'minimum>': '0.0', u'maximum': '1.0', u'note': [u'recoverable waste heat at full load and rated conditions'], u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 3 Rated Waste Heat Fraction of Power Input`
                Units: dimensionless
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_rated_waste_heat_fraction_of_power_input`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_3_rated_waste_heat_fraction_of_power_input`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_3_rated_waste_heat_fraction_of_power_input`')
        self._data["Speed 3 Rated Waste Heat Fraction of Power Input"] = value

    @property
    def speed_3_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_3_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_3_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 3 Waste Heat Function of Temperature Curve Name"]

    @speed_3_waste_heat_function_of_temperature_curve_name.setter
    def speed_3_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db
        odb = Outdoor air dry-bulb temperature (C)
        db = entering coil dry-bulb temperature (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db', u'odb = Outdoor air dry-bulb temperature (C)', u'db = entering coil dry-bulb temperature (C)'], u'type': u'object-list', u'object-list': u'BiQuadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 3 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_4_gross_rated_heating_capacity(self):
        """Get speed_4_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_4_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 4 Gross Rated Heating Capacity"]

    @speed_4_gross_rated_heating_capacity.setter
    def speed_4_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        capacity excluding supply air fan heat
        rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        rating point heating coil entering air dry-bulb 21.11 C, coil entering
        wet-bulb 15.55 C
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Heating capacity not accounting for the effect of supply air fan heat', u'capacity excluding supply air fan heat', u'rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C', u'rating point heating coil entering air dry-bulb 21.11 C, coil entering', u'wet-bulb 15.55 C'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 4 Gross Rated Heating Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_gross_rated_heating_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_4_gross_rated_heating_capacity`')
        self._data["Speed 4 Gross Rated Heating Capacity"] = value

    @property
    def speed_4_gross_rated_heating_cop(self):
        """Get speed_4_gross_rated_heating_cop

        Returns:
            float: the value of `speed_4_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 4 Gross Rated Heating COP"]

    @speed_4_gross_rated_heating_cop.setter
    def speed_4_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Gross Rated Heating COP`
        Rated heating capacity divided by power input to the compressor and outdoor fan,
        does not include supply air fan heat or supply air fan electrical energy
        
        {u'note': [u'Rated heating capacity divided by power input to the compressor and outdoor fan,', u'does not include supply air fan heat or supply air fan electrical energy'], u'units': u'W/W', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Gross Rated Heating COP`
                Units: W/W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_gross_rated_heating_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_4_gross_rated_heating_cop`')
        self._data["Speed 4 Gross Rated Heating COP"] = value

    @property
    def speed_4_rated_air_flow_rate(self):
        """Get speed_4_rated_air_flow_rate

        Returns:
            float: the value of `speed_4_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 4 Rated Air Flow Rate"]

    @speed_4_rated_air_flow_rate.setter
    def speed_4_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Rated Air Flow Rate`
        Flow rate corresponding to rated total capacity
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total
        heating capacity
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Flow rate corresponding to rated total capacity', u'should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total', u'heating capacity'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 4 Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_4_rated_air_flow_rate`')
        self._data["Speed 4 Rated Air Flow Rate"] = value

    @property
    def speed_4_rated_supply_air_fan_power_per_volume_flow_rate(self):
        """Get speed_4_rated_supply_air_fan_power_per_volume_flow_rate

        Returns:
            float: the value of `speed_4_rated_supply_air_fan_power_per_volume_flow_rate` or None if not set
        """
        return self._data["Speed 4 Rated Supply Air Fan Power Per Volume Flow Rate"]

    @speed_4_rated_supply_air_fan_power_per_volume_flow_rate.setter
    def speed_4_rated_supply_air_fan_power_per_volume_flow_rate(self, value=773.3 ):
        """  Corresponds to IDD Field `Speed 4 Rated Supply Air Fan Power Per Volume Flow Rate`
        Enter the supply air fan power per air volume flow rate at the rated speed 4 test conditions.
        The test conditions vary external static pressure based on heating capacity. This value
        is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not
        used for modeling the supply air fan during simulations.
        
        {'pytype': 'float', u'default': '773.3', u'maximum': '1250.0', u'note': [u'Enter the supply air fan power per air volume flow rate at the rated speed 4 test conditions.', u'The test conditions vary external static pressure based on heating capacity. This value', u'is only used to calculate Heating Seasonal Performance Factor(HSPF). This value is not', u'used for modeling the supply air fan during simulations.'], u'minimum': '0.0', u'units': u'W/(m3/s)', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 4 Rated Supply Air Fan Power Per Volume Flow Rate`
                Units: W/(m3/s)
                Default value: 773.3
                value >= 0.0
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_rated_supply_air_fan_power_per_volume_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_rated_supply_air_fan_power_per_volume_flow_rate`')
            if value > 1250.0:
                raise ValueError('value need to be smaller 1250.0 '
                                 'for field `speed_4_rated_supply_air_fan_power_per_volume_flow_rate`')
        self._data["Speed 4 Rated Supply Air Fan Power Per Volume Flow Rate"] = value

    @property
    def speed_4_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_4_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_4_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 4 Heating Capacity Function of Temperature Curve Name"]

    @speed_4_heating_capacity_function_of_temperature_curve_name.setter
    def speed_4_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the heating capacity to be sensitive to both iat and oat.
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'quadratic curve = a + b*oat + c*oat**2', u'cubic curve = a + b*oat + c*oat**2 + d*oat**3', u'biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat', u'oat = outdoor air dry-bulb temperature (C)', u'iat = indoor air dry-bulb temperature (C)', u'biquadratic curve is recommended if sufficient manufacturer data is', u'available for the heating capacity to be sensitive to both iat and oat.'], u'type': u'object-list', u'object-list': u'BiquadraticQuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 4 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_4_heating_capacity_function_of_flow_fraction_curve_name(self):
        """Get speed_4_heating_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `speed_4_heating_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 4 Heating Capacity Function of Flow Fraction Curve Name"]

    @speed_4_heating_capacity_function_of_flow_fraction_curve_name.setter
    def speed_4_heating_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Heating Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Heating Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_heating_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_heating_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_heating_capacity_function_of_flow_fraction_curve_name`')
        self._data["Speed 4 Heating Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_4_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the energy input ratio to be sensitive to both iat and oat.
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'quadratic curve = a + b*oat + c*oat**2', u'cubic curve = a + b*oat + c*oat**2 + d*oat**3', u'biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat', u'oat = outdoor air dry-bulb temperature (C)', u'iat = indoor air dry-bulb temperature (C)', u'biquadratic curve is recommended if sufficient manufacturer data is', u'available for the energy input ratio to be sensitive to both iat and oat.'], u'type': u'object-list', u'object-list': u'BiquadraticQuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name"]

    @speed_4_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def speed_4_energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = fraction of the full load flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def speed_4_part_load_fraction_correlation_curve_name(self):
        """Get speed_4_part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `speed_4_part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Speed 4 Part Load Fraction Correlation Curve Name"]

    @speed_4_part_load_fraction_correlation_curve_name.setter
    def speed_4_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (sensible heating load/steady state heating capacity)
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLR = part load ratio (sensible heating load/steady state heating capacity)'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_part_load_fraction_correlation_curve_name`')
        self._data["Speed 4 Part Load Fraction Correlation Curve Name"] = value

    @property
    def speed_4_rated_waste_heat_fraction_of_power_input(self):
        """Get speed_4_rated_waste_heat_fraction_of_power_input

        Returns:
            float: the value of `speed_4_rated_waste_heat_fraction_of_power_input` or None if not set
        """
        return self._data["Speed 4 Rated Waste Heat Fraction of Power Input"]

    @speed_4_rated_waste_heat_fraction_of_power_input.setter
    def speed_4_rated_waste_heat_fraction_of_power_input(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Rated Waste Heat Fraction of Power Input`
        recoverable waste heat at full load and rated conditions
        
        {'pytype': 'float', u'minimum>': '0.0', u'maximum': '1.0', u'note': [u'recoverable waste heat at full load and rated conditions'], u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 4 Rated Waste Heat Fraction of Power Input`
                Units: dimensionless
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_rated_waste_heat_fraction_of_power_input`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `speed_4_rated_waste_heat_fraction_of_power_input`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `speed_4_rated_waste_heat_fraction_of_power_input`')
        self._data["Speed 4 Rated Waste Heat Fraction of Power Input"] = value

    @property
    def speed_4_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_4_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_4_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 4 Waste Heat Function of Temperature Curve Name"]

    @speed_4_waste_heat_function_of_temperature_curve_name.setter
    def speed_4_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db
        odb = Outdoor air dry-bulb temperature (C)
        db = entering coil dry-bulb temperature (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db', u'odb = Outdoor air dry-bulb temperature (C)', u'db = entering coil dry-bulb temperature (C)'], u'type': u'object-list', u'object-list': u'BiQuadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 4 Waste Heat Function of Temperature Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilHeatingDxVariableSpeed(object):
    """ Corresponds to IDD object `Coil:Heating:DX:VariableSpeed`
        Direct expansion (DX) heating coil (air-to-air heat pump) and compressor unit
        (includes electric compressor and outdoor fan), variable-speed, with defrost
        controls. Requires two to ten sets of performance data and will interpolate between
        speeds.
    
    """
    internal_name = "Coil:Heating:DX:VariableSpeed"
    field_count = 88
    required_fields = ["Name", "Indoor Air Inlet Node Name", "Indoor Air Outlet Node Name", "Number of Speeds", "Nominal Speed Level", "Rated Heating Capacity At Selected Nominal Speed Level", "Rated Air Flow Rate At Selected Nominal Speed Level", "Energy Part Load Fraction Curve Name", "Speed 1 Reference Unit Gross Rated Heating Capacity", "Speed 1 Reference Unit Gross Rated Heating COP", "Speed 1 Reference Unit Rated Air Flow Rate", "Speed 1 Heating Capacity Function of Temperature Curve Name", "Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name", "Speed 1 Energy Input Ratio Function of Temperature Curve Name", "Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Heating:DX:VariableSpeed`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Indoor Air Inlet Node Name"] = None
        self._data["Indoor Air Outlet Node Name"] = None
        self._data["Number of Speeds"] = None
        self._data["Nominal Speed Level"] = None
        self._data["Rated Heating Capacity At Selected Nominal Speed Level"] = None
        self._data["Rated Air Flow Rate At Selected Nominal Speed Level"] = None
        self._data["Energy Part Load Fraction Curve Name"] = None
        self._data["Defrost Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"] = None
        self._data["Outdoor Dry-Bulb Temperature to Turn On Compressor"] = None
        self._data["Maximum Outdoor Dry-Bulb Temperature for Defrost Operation"] = None
        self._data["Crankcase Heater Capacity"] = None
        self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = None
        self._data["Defrost Strategy"] = None
        self._data["Defrost Control"] = None
        self._data["Defrost Time Period Fraction"] = None
        self._data["Resistive Defrost Heater Capacity"] = None
        self._data["Speed 1 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 1 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 1 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 1 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 2 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 2 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 2 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 2 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 3 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 3 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 3 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 3 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 4 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 4 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 4 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 4 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 4 Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 5 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 5 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 5 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 5 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 5 Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 5 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 6 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 6 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 6 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 6 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 6 Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 6 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 7 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 7 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 7 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 7 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 7 Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 7 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 8 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 8 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 8 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 8 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 8 Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 8 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 9 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 9 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 9 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 9 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 9 Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 9 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 10 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 10 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 10 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 10 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 10 Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 10 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.indoor_air_inlet_node_name = None
        else:
            self.indoor_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.indoor_air_outlet_node_name = None
        else:
            self.indoor_air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_speeds = None
        else:
            self.number_of_speeds = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_speed_level = None
        else:
            self.nominal_speed_level = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_heating_capacity_at_selected_nominal_speed_level = None
        else:
            self.rated_heating_capacity_at_selected_nominal_speed_level = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_air_flow_rate_at_selected_nominal_speed_level = None
        else:
            self.rated_air_flow_rate_at_selected_nominal_speed_level = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.energy_part_load_fraction_curve_name = None
        else:
            self.energy_part_load_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.defrost_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.defrost_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_outdoor_drybulb_temperature_for_compressor_operation = None
        else:
            self.minimum_outdoor_drybulb_temperature_for_compressor_operation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outdoor_drybulb_temperature_to_turn_on_compressor = None
        else:
            self.outdoor_drybulb_temperature_to_turn_on_compressor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_defrost_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_defrost_operation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.crankcase_heater_capacity = None
        else:
            self.crankcase_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation = None
        else:
            self.maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.defrost_strategy = None
        else:
            self.defrost_strategy = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.defrost_control = None
        else:
            self.defrost_control = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.defrost_time_period_fraction = None
        else:
            self.defrost_time_period_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.resistive_defrost_heater_capacity = None
        else:
            self.resistive_defrost_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_1_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_1_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_1_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_1_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_1_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_2_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_2_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_2_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_2_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_2_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_3_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_3_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_3_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_3_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_3_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_4_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_4_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_4_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_4_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_4_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_4_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_5_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_5_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_5_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_5_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_5_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_5_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_6_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_6_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_6_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_6_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_6_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_6_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_7_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_7_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_7_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_7_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_7_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_7_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_8_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_8_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_8_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_8_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_8_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_8_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_9_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_9_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_9_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_9_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_9_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_9_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_10_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_10_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_10_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_10_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_10_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_10_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'HeatingCoilsDXVariableSpeed', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def indoor_air_inlet_node_name(self):
        """Get indoor_air_inlet_node_name

        Returns:
            str: the value of `indoor_air_inlet_node_name` or None if not set
        """
        return self._data["Indoor Air Inlet Node Name"]

    @indoor_air_inlet_node_name.setter
    def indoor_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Indoor Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Indoor Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `indoor_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `indoor_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `indoor_air_inlet_node_name`')
        self._data["Indoor Air Inlet Node Name"] = value

    @property
    def indoor_air_outlet_node_name(self):
        """Get indoor_air_outlet_node_name

        Returns:
            str: the value of `indoor_air_outlet_node_name` or None if not set
        """
        return self._data["Indoor Air Outlet Node Name"]

    @indoor_air_outlet_node_name.setter
    def indoor_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Indoor Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Indoor Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `indoor_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `indoor_air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `indoor_air_outlet_node_name`')
        self._data["Indoor Air Outlet Node Name"] = value

    @property
    def number_of_speeds(self):
        """Get number_of_speeds

        Returns:
            int: the value of `number_of_speeds` or None if not set
        """
        return self._data["Number of Speeds"]

    @number_of_speeds.setter
    def number_of_speeds(self, value=2 ):
        """  Corresponds to IDD Field `Number of Speeds`
        
        {'pytype': 'int', u'default': '2', u'maximum': '10', u'required-field': True, u'minimum': '1', u'units': u'dimensionless', u'type': u'integer'}

        Args:
            value (int): value for IDD Field `Number of Speeds`
                Units: dimensionless
                Default value: 2
                value >= 1
                value <= 10
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_speeds`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_speeds`')
            if value > 10:
                raise ValueError('value need to be smaller 10 '
                                 'for field `number_of_speeds`')
        self._data["Number of Speeds"] = value

    @property
    def nominal_speed_level(self):
        """Get nominal_speed_level

        Returns:
            int: the value of `nominal_speed_level` or None if not set
        """
        return self._data["Nominal Speed Level"]

    @nominal_speed_level.setter
    def nominal_speed_level(self, value=2 ):
        """  Corresponds to IDD Field `Nominal Speed Level`
        must be lower than or equal to the highest speed number
        
        {'pytype': 'int', u'default': '2', u'required-field': True, u'note': [u'must be lower than or equal to the highest speed number'], u'units': u'dimensionless', u'type': u'integer'}

        Args:
            value (int): value for IDD Field `Nominal Speed Level`
                Units: dimensionless
                Default value: 2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `nominal_speed_level`'.format(value))
        self._data["Nominal Speed Level"] = value

    @property
    def rated_heating_capacity_at_selected_nominal_speed_level(self):
        """Get rated_heating_capacity_at_selected_nominal_speed_level

        Returns:
            float: the value of `rated_heating_capacity_at_selected_nominal_speed_level` or None if not set
        """
        return self._data["Rated Heating Capacity At Selected Nominal Speed Level"]

    @rated_heating_capacity_at_selected_nominal_speed_level.setter
    def rated_heating_capacity_at_selected_nominal_speed_level(self, value="autosize" ):
        """  Corresponds to IDD Field `Rated Heating Capacity At Selected Nominal Speed Level`
        
        {'pytype': 'float', u'default': '"autosize"', u'required-field': True, u'autosizable': u'', u'units': u'w', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Heating Capacity At Selected Nominal Speed Level`
                Units: w
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_heating_capacity_at_selected_nominal_speed_level`'.format(value))
        self._data["Rated Heating Capacity At Selected Nominal Speed Level"] = value

    @property
    def rated_air_flow_rate_at_selected_nominal_speed_level(self):
        """Get rated_air_flow_rate_at_selected_nominal_speed_level

        Returns:
            float: the value of `rated_air_flow_rate_at_selected_nominal_speed_level` or None if not set
        """
        return self._data["Rated Air Flow Rate At Selected Nominal Speed Level"]

    @rated_air_flow_rate_at_selected_nominal_speed_level.setter
    def rated_air_flow_rate_at_selected_nominal_speed_level(self, value="autosize" ):
        """  Corresponds to IDD Field `Rated Air Flow Rate At Selected Nominal Speed Level`
        
        {'pytype': 'float', u'default': '"autosize"', u'required-field': True, u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Air Flow Rate At Selected Nominal Speed Level`
                Units: m3/s
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_air_flow_rate_at_selected_nominal_speed_level`'.format(value))
        self._data["Rated Air Flow Rate At Selected Nominal Speed Level"] = value

    @property
    def energy_part_load_fraction_curve_name(self):
        """Get energy_part_load_fraction_curve_name

        Returns:
            str: the value of `energy_part_load_fraction_curve_name` or None if not set
        """
        return self._data["Energy Part Load Fraction Curve Name"]

    @energy_part_load_fraction_curve_name.setter
    def energy_part_load_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Energy Part Load Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (heating load/steady state capacity)
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLR = part load ratio (heating load/steady state capacity)'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Energy Part Load Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `energy_part_load_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `energy_part_load_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `energy_part_load_fraction_curve_name`')
        self._data["Energy Part Load Fraction Curve Name"] = value

    @property
    def defrost_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get defrost_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `defrost_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Defrost Energy Input Ratio Function of Temperature Curve Name"]

    @defrost_energy_input_ratio_function_of_temperature_curve_name.setter
    def defrost_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Defrost Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat
        wb = wet-bulb temperature (C) of air entering the indoor coil
        oat = outdoor air dry-bulb temperature (C)
        only required if ReverseCycle defrost strategy is specified
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat', u'wb = wet-bulb temperature (C) of air entering the indoor coil', u'oat = outdoor air dry-bulb temperature (C)', u'only required if ReverseCycle defrost strategy is specified'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Defrost Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `defrost_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Defrost Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def minimum_outdoor_drybulb_temperature_for_compressor_operation(self):
        """Get minimum_outdoor_drybulb_temperature_for_compressor_operation

        Returns:
            float: the value of `minimum_outdoor_drybulb_temperature_for_compressor_operation` or None if not set
        """
        return self._data["Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"]

    @minimum_outdoor_drybulb_temperature_for_compressor_operation.setter
    def minimum_outdoor_drybulb_temperature_for_compressor_operation(self, value=-8.0 ):
        """  Corresponds to IDD Field `Minimum Outdoor Dry-Bulb Temperature for Compressor Operation`
        
        {u'default': '-8.0', u'units': u'C', u'minimum': '-50.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Minimum Outdoor Dry-Bulb Temperature for Compressor Operation`
                Units: C
                Default value: -8.0
                value >= -50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_outdoor_drybulb_temperature_for_compressor_operation`'.format(value))
            if value < -50.0:
                raise ValueError('value need to be greater or equal -50.0 '
                                 'for field `minimum_outdoor_drybulb_temperature_for_compressor_operation`')
        self._data["Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"] = value

    @property
    def outdoor_drybulb_temperature_to_turn_on_compressor(self):
        """Get outdoor_drybulb_temperature_to_turn_on_compressor

        Returns:
            float: the value of `outdoor_drybulb_temperature_to_turn_on_compressor` or None if not set
        """
        return self._data["Outdoor Dry-Bulb Temperature to Turn On Compressor"]

    @outdoor_drybulb_temperature_to_turn_on_compressor.setter
    def outdoor_drybulb_temperature_to_turn_on_compressor(self, value=None):
        """  Corresponds to IDD Field `Outdoor Dry-Bulb Temperature to Turn On Compressor`
        The outdoor tempearture when the compressor is automatically turned back on following an
        automatic shut off because of low outdoor dry-bulb temperature. This field is only used
        for the calculation of HSPF. If this field is not provided, then outdoor bin temperature
        used in the HSPF calculation is always considered to be greater than this temperature and
        'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above.
        This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error
        in the final value of HSPF.
        
        {u'units': u'C', u'note': [u'The outdoor tempearture when the compressor is automatically turned back on following an', u'automatic shut off because of low outdoor dry-bulb temperature. This field is only used', u'for the calculation of HSPF. If this field is not provided, then outdoor bin temperature', u'used in the HSPF calculation is always considered to be greater than this temperature and', u"'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above.", u'This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error', u'in the final value of HSPF.'], u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Outdoor Dry-Bulb Temperature to Turn On Compressor`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_drybulb_temperature_to_turn_on_compressor`'.format(value))
        self._data["Outdoor Dry-Bulb Temperature to Turn On Compressor"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_defrost_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_defrost_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_defrost_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-Bulb Temperature for Defrost Operation"]

    @maximum_outdoor_drybulb_temperature_for_defrost_operation.setter
    def maximum_outdoor_drybulb_temperature_for_defrost_operation(self, value=5.0 ):
        """  Corresponds to IDD Field `Maximum Outdoor Dry-Bulb Temperature for Defrost Operation`
        
        {'pytype': 'float', u'default': '5.0', u'maximum': '7.22', u'minimum': '0.0', u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Defrost Operation`
                Units: C
                Default value: 5.0
                value >= 0.0
                value <= 7.22
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_defrost_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_defrost_operation`')
            if value > 7.22:
                raise ValueError('value need to be smaller 7.22 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_defrost_operation`')
        self._data["Maximum Outdoor Dry-Bulb Temperature for Defrost Operation"] = value

    @property
    def crankcase_heater_capacity(self):
        """Get crankcase_heater_capacity

        Returns:
            float: the value of `crankcase_heater_capacity` or None if not set
        """
        return self._data["Crankcase Heater Capacity"]

    @crankcase_heater_capacity.setter
    def crankcase_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Crankcase Heater Capacity`
        
        {'pytype': 'float', u'default': '0.0', u'ip-units': u'W', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Crankcase Heater Capacity`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `crankcase_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `crankcase_heater_capacity`')
        self._data["Crankcase Heater Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation` or None if not set
        """
        return self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(self, value=10.0 ):
        """  Corresponds to IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
        
        {u'default': '10.0', u'units': u'C', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
                Units: C
                Default value: 10.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation`')
        self._data["Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = value

    @property
    def defrost_strategy(self):
        """Get defrost_strategy

        Returns:
            str: the value of `defrost_strategy` or None if not set
        """
        return self._data["Defrost Strategy"]

    @defrost_strategy.setter
    def defrost_strategy(self, value="ReverseCycle"):
        """  Corresponds to IDD Field `Defrost Strategy`
        
        {u'default': u'ReverseCycle', u'type': u'choice', u'key': [u'ReverseCycle', u'Resistive'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Defrost Strategy`
                Accepted values are:
                      - ReverseCycle
                      - Resistive
                Default value: ReverseCycle
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_strategy`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_strategy`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `defrost_strategy`')
            vals = {}
            vals["reversecycle"] = "ReverseCycle"
            vals["resistive"] = "Resistive"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `defrost_strategy`'.format(value))
            value = vals[value_lower]
        self._data["Defrost Strategy"] = value

    @property
    def defrost_control(self):
        """Get defrost_control

        Returns:
            str: the value of `defrost_control` or None if not set
        """
        return self._data["Defrost Control"]

    @defrost_control.setter
    def defrost_control(self, value="Timed"):
        """  Corresponds to IDD Field `Defrost Control`
        
        {u'default': u'Timed', u'type': u'choice', u'key': [u'Timed', u'OnDemand'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Defrost Control`
                Accepted values are:
                      - Timed
                      - OnDemand
                Default value: Timed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `defrost_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `defrost_control`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `defrost_control`')
            vals = {}
            vals["timed"] = "Timed"
            vals["ondemand"] = "OnDemand"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `defrost_control`'.format(value))
            value = vals[value_lower]
        self._data["Defrost Control"] = value

    @property
    def defrost_time_period_fraction(self):
        """Get defrost_time_period_fraction

        Returns:
            float: the value of `defrost_time_period_fraction` or None if not set
        """
        return self._data["Defrost Time Period Fraction"]

    @defrost_time_period_fraction.setter
    def defrost_time_period_fraction(self, value=0.058333 ):
        """  Corresponds to IDD Field `Defrost Time Period Fraction`
        Fraction of time in defrost mode
        only applicable if timed defrost control is specified
        
        {u'default': '0.058333', u'note': [u'Fraction of time in defrost mode', u'only applicable if timed defrost control is specified'], u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Defrost Time Period Fraction`
                Default value: 0.058333
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `defrost_time_period_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `defrost_time_period_fraction`')
        self._data["Defrost Time Period Fraction"] = value

    @property
    def resistive_defrost_heater_capacity(self):
        """Get resistive_defrost_heater_capacity

        Returns:
            float: the value of `resistive_defrost_heater_capacity` or None if not set
        """
        return self._data["Resistive Defrost Heater Capacity"]

    @resistive_defrost_heater_capacity.setter
    def resistive_defrost_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Resistive Defrost Heater Capacity`
        only applicable if resistive defrost strategy is specified
        
        {'pytype': 'float', u'default': '0.0', u'note': [u'only applicable if resistive defrost strategy is specified'], u'ip-units': u'W', u'autosizable': u'', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Resistive Defrost Heater Capacity`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `resistive_defrost_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `resistive_defrost_heater_capacity`')
        self._data["Resistive Defrost Heater Capacity"] = value

    @property
    def speed_1_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_1_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 1 Reference Unit Gross Rated Heating Capacity"]

    @speed_1_reference_unit_gross_rated_heating_capacity.setter
    def speed_1_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {'pytype': 'float', u'required-field': True, u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'minimum': '0.0', u'units': u'w', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 1 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_1_reference_unit_gross_rated_heating_cop(self):
        """Get speed_1_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 1 Reference Unit Gross Rated Heating COP"]

    @speed_1_reference_unit_gross_rated_heating_cop.setter
    def speed_1_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 1 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_1_reference_unit_rated_air_flow_rate(self):
        """Get speed_1_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_1_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 1 Reference Unit Rated Air Flow Rate"]

    @speed_1_reference_unit_rated_air_flow_rate.setter
    def speed_1_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_rated_air_flow_rate`')
        self._data["Speed 1 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_1_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_1_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_1_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 1 Heating Capacity Function of Temperature Curve Name"]

    @speed_1_heating_capacity_function_of_temperature_curve_name.setter
    def speed_1_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 1 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_1_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_2_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_2_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 2 Reference Unit Gross Rated Heating Capacity"]

    @speed_2_reference_unit_gross_rated_heating_capacity.setter
    def speed_2_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 2 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_2_reference_unit_gross_rated_heating_cop(self):
        """Get speed_2_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 2 Reference Unit Gross Rated Heating COP"]

    @speed_2_reference_unit_gross_rated_heating_cop.setter
    def speed_2_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 2 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_2_reference_unit_rated_air_flow_rate(self):
        """Get speed_2_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_2_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 2 Reference Unit Rated Air Flow Rate"]

    @speed_2_reference_unit_rated_air_flow_rate.setter
    def speed_2_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_rated_air_flow_rate`')
        self._data["Speed 2 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_2_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_2_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_2_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 2 Heating Capacity Function of Temperature Curve Name"]

    @speed_2_heating_capacity_function_of_temperature_curve_name.setter
    def speed_2_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 2 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_2_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_3_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_3_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 3 Reference Unit Gross Rated Heating Capacity"]

    @speed_3_reference_unit_gross_rated_heating_capacity.setter
    def speed_3_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 3 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_3_reference_unit_gross_rated_heating_cop(self):
        """Get speed_3_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 3 Reference Unit Gross Rated Heating COP"]

    @speed_3_reference_unit_gross_rated_heating_cop.setter
    def speed_3_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 3 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_3_reference_unit_rated_air_flow_rate(self):
        """Get speed_3_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_3_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 3 Reference Unit Rated Air Flow Rate"]

    @speed_3_reference_unit_rated_air_flow_rate.setter
    def speed_3_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_rated_air_flow_rate`')
        self._data["Speed 3 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_3_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_3_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_3_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 3 Heating Capacity Function of Temperature Curve Name"]

    @speed_3_heating_capacity_function_of_temperature_curve_name.setter
    def speed_3_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 3 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_3_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_4_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_4_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 4 Reference Unit Gross Rated Heating Capacity"]

    @speed_4_reference_unit_gross_rated_heating_capacity.setter
    def speed_4_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 4 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_4_reference_unit_gross_rated_heating_cop(self):
        """Get speed_4_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 4 Reference Unit Gross Rated Heating COP"]

    @speed_4_reference_unit_gross_rated_heating_cop.setter
    def speed_4_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 4 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_4_reference_unit_rated_air_flow_rate(self):
        """Get speed_4_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_4_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 4 Reference Unit Rated Air Flow Rate"]

    @speed_4_reference_unit_rated_air_flow_rate.setter
    def speed_4_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_rated_air_flow_rate`')
        self._data["Speed 4 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_4_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_4_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_4_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 4 Heating Capacity Function of Temperature Curve Name"]

    @speed_4_heating_capacity_function_of_temperature_curve_name.setter
    def speed_4_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 4 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_4_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_4_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_4_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 4 Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_4_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_4_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 4 Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_4_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_5_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_5_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 5 Reference Unit Gross Rated Heating Capacity"]

    @speed_5_reference_unit_gross_rated_heating_capacity.setter
    def speed_5_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 5 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_5_reference_unit_gross_rated_heating_cop(self):
        """Get speed_5_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 5 Reference Unit Gross Rated Heating COP"]

    @speed_5_reference_unit_gross_rated_heating_cop.setter
    def speed_5_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 5 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_5_reference_unit_rated_air_flow_rate(self):
        """Get speed_5_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_5_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 5 Reference Unit Rated Air Flow Rate"]

    @speed_5_reference_unit_rated_air_flow_rate.setter
    def speed_5_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_rated_air_flow_rate`')
        self._data["Speed 5 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_5_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_5_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_5_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 5 Heating Capacity Function of Temperature Curve Name"]

    @speed_5_heating_capacity_function_of_temperature_curve_name.setter
    def speed_5_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 5 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_5_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_5_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_5_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 5 Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_5_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_5_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 5 Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_5_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 5 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_5_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_5_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 5 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_6_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_6_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 6 Reference Unit Gross Rated Heating Capacity"]

    @speed_6_reference_unit_gross_rated_heating_capacity.setter
    def speed_6_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 6 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_6_reference_unit_gross_rated_heating_cop(self):
        """Get speed_6_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 6 Reference Unit Gross Rated Heating COP"]

    @speed_6_reference_unit_gross_rated_heating_cop.setter
    def speed_6_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 6 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_6_reference_unit_rated_air_flow_rate(self):
        """Get speed_6_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_6_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 6 Reference Unit Rated Air Flow Rate"]

    @speed_6_reference_unit_rated_air_flow_rate.setter
    def speed_6_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_rated_air_flow_rate`')
        self._data["Speed 6 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_6_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_6_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_6_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 6 Heating Capacity Function of Temperature Curve Name"]

    @speed_6_heating_capacity_function_of_temperature_curve_name.setter
    def speed_6_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 6 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_6_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_6_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_6_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 6 Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_6_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_6_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 6 Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_6_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 6 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_6_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_6_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 6 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_7_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_7_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 7 Reference Unit Gross Rated Heating Capacity"]

    @speed_7_reference_unit_gross_rated_heating_capacity.setter
    def speed_7_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 7 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_7_reference_unit_gross_rated_heating_cop(self):
        """Get speed_7_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 7 Reference Unit Gross Rated Heating COP"]

    @speed_7_reference_unit_gross_rated_heating_cop.setter
    def speed_7_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 7 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_7_reference_unit_rated_air_flow_rate(self):
        """Get speed_7_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_7_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 7 Reference Unit Rated Air Flow Rate"]

    @speed_7_reference_unit_rated_air_flow_rate.setter
    def speed_7_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_rated_air_flow_rate`')
        self._data["Speed 7 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_7_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_7_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_7_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 7 Heating Capacity Function of Temperature Curve Name"]

    @speed_7_heating_capacity_function_of_temperature_curve_name.setter
    def speed_7_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 7 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_7_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_7_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_7_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 7 Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_7_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_7_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 7 Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_7_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 7 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_7_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_7_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 7 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_8_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_8_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 8 Reference Unit Gross Rated Heating Capacity"]

    @speed_8_reference_unit_gross_rated_heating_capacity.setter
    def speed_8_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 8 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_8_reference_unit_gross_rated_heating_cop(self):
        """Get speed_8_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 8 Reference Unit Gross Rated Heating COP"]

    @speed_8_reference_unit_gross_rated_heating_cop.setter
    def speed_8_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 8 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_8_reference_unit_rated_air_flow_rate(self):
        """Get speed_8_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_8_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 8 Reference Unit Rated Air Flow Rate"]

    @speed_8_reference_unit_rated_air_flow_rate.setter
    def speed_8_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_rated_air_flow_rate`')
        self._data["Speed 8 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_8_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_8_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_8_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 8 Heating Capacity Function of Temperature Curve Name"]

    @speed_8_heating_capacity_function_of_temperature_curve_name.setter
    def speed_8_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 8 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_8_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_8_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_8_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 8 Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_8_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_8_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 8 Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_8_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 8 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_8_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_8_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 8 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_9_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_9_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 9 Reference Unit Gross Rated Heating Capacity"]

    @speed_9_reference_unit_gross_rated_heating_capacity.setter
    def speed_9_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 9 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_9_reference_unit_gross_rated_heating_cop(self):
        """Get speed_9_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 9 Reference Unit Gross Rated Heating COP"]

    @speed_9_reference_unit_gross_rated_heating_cop.setter
    def speed_9_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 9 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_9_reference_unit_rated_air_flow_rate(self):
        """Get speed_9_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_9_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 9 Reference Unit Rated Air Flow Rate"]

    @speed_9_reference_unit_rated_air_flow_rate.setter
    def speed_9_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_rated_air_flow_rate`')
        self._data["Speed 9 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_9_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_9_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_9_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 9 Heating Capacity Function of Temperature Curve Name"]

    @speed_9_heating_capacity_function_of_temperature_curve_name.setter
    def speed_9_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 9 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_9_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_9_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_9_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 9 Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_9_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_9_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 9 Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_9_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 9 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_9_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_9_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 9 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_10_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_10_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 10 Reference Unit Gross Rated Heating Capacity"]

    @speed_10_reference_unit_gross_rated_heating_capacity.setter
    def speed_10_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 10 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_10_reference_unit_gross_rated_heating_cop(self):
        """Get speed_10_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 10 Reference Unit Gross Rated Heating COP"]

    @speed_10_reference_unit_gross_rated_heating_cop.setter
    def speed_10_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 10 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_10_reference_unit_rated_air_flow_rate(self):
        """Get speed_10_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_10_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 10 Reference Unit Rated Air Flow Rate"]

    @speed_10_reference_unit_rated_air_flow_rate.setter
    def speed_10_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_rated_air_flow_rate`')
        self._data["Speed 10 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_10_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_10_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_10_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 10 Heating Capacity Function of Temperature Curve Name"]

    @speed_10_heating_capacity_function_of_temperature_curve_name.setter
    def speed_10_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 10 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_10_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_10_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_10_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 10 Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_10_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_10_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 10 Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_10_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 10 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_10_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_10_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat', u'db = entering air dry bulb temperature (C)', u'oat = air entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 10 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilCoolingWaterToAirHeatPumpParameterEstimation(object):
    """ Corresponds to IDD object `Coil:Cooling:WaterToAirHeatPump:ParameterEstimation`
        Direct expansion (DX) cooling coil for water-to-air heat pump (includes electric
        compressor), single-speed, parameter estimation model. Optional inputs for moisture
        evaporation from wet coil when compressor cycles off with continuous fan operation.
        Parameter estimation model is a deterministic model that requires a consistent set of
        parameters to describe the operating conditions of the heat pump components.
    
    """
    internal_name = "Coil:Cooling:WaterToAirHeatPump:ParameterEstimation"
    field_count = 27
    required_fields = ["Name", "Compressor Type", "Refrigerant Type", "Design Source Side Flow Rate", "Nominal Cooling Coil Capacity", "High Pressure Cutoff", "Low Pressure Cutoff", "Water Inlet Node Name", "Water Outlet Node Name", "Air Inlet Node Name", "Air Outlet Node Name", "Load Side Total Heat Transfer Coefficient", "Load Side Outside Surface Heat Transfer Coefficient", "Superheat Temperature at the Evaporator Outlet", "Compressor Power Losses", "Compressor Efficiency"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Cooling:WaterToAirHeatPump:ParameterEstimation`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Compressor Type"] = None
        self._data["Refrigerant Type"] = None
        self._data["Design Source Side Flow Rate"] = None
        self._data["Nominal Cooling Coil Capacity"] = None
        self._data["Nominal Time for Condensate Removal to Begin"] = None
        self._data["Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"] = None
        self._data["High Pressure Cutoff"] = None
        self._data["Low Pressure Cutoff"] = None
        self._data["Water Inlet Node Name"] = None
        self._data["Water Outlet Node Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Load Side Total Heat Transfer Coefficient"] = None
        self._data["Load Side Outside Surface Heat Transfer Coefficient"] = None
        self._data["Superheat Temperature at the Evaporator Outlet"] = None
        self._data["Compressor Power Losses"] = None
        self._data["Compressor Efficiency"] = None
        self._data["Compressor Piston Displacement"] = None
        self._data["Compressor Suction/Discharge Pressure Drop"] = None
        self._data["Compressor Clearance Factor"] = None
        self._data["Refrigerant Volume Flow Rate"] = None
        self._data["Volume Ratio"] = None
        self._data["Leak Rate Coefficient"] = None
        self._data["Source Side Heat Transfer Coefficient"] = None
        self._data["Source Side Heat Transfer Resistance1"] = None
        self._data["Source Side Heat Transfer Resistance2"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_type = None
        else:
            self.compressor_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.refrigerant_type = None
        else:
            self.refrigerant_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_source_side_flow_rate = None
        else:
            self.design_source_side_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_cooling_coil_capacity = None
        else:
            self.nominal_cooling_coil_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_time_for_condensate_removal_to_begin = None
        else:
            self.nominal_time_for_condensate_removal_to_begin = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity = None
        else:
            self.ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.high_pressure_cutoff = None
        else:
            self.high_pressure_cutoff = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.low_pressure_cutoff = None
        else:
            self.low_pressure_cutoff = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_inlet_node_name = None
        else:
            self.water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_outlet_node_name = None
        else:
            self.water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.load_side_total_heat_transfer_coefficient = None
        else:
            self.load_side_total_heat_transfer_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.load_side_outside_surface_heat_transfer_coefficient = None
        else:
            self.load_side_outside_surface_heat_transfer_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.superheat_temperature_at_the_evaporator_outlet = None
        else:
            self.superheat_temperature_at_the_evaporator_outlet = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_power_losses = None
        else:
            self.compressor_power_losses = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_efficiency = None
        else:
            self.compressor_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_piston_displacement = None
        else:
            self.compressor_piston_displacement = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_suction_or_discharge_pressure_drop = None
        else:
            self.compressor_suction_or_discharge_pressure_drop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_clearance_factor = None
        else:
            self.compressor_clearance_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.refrigerant_volume_flow_rate = None
        else:
            self.refrigerant_volume_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.volume_ratio = None
        else:
            self.volume_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.leak_rate_coefficient = None
        else:
            self.leak_rate_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_heat_transfer_coefficient = None
        else:
            self.source_side_heat_transfer_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_heat_transfer_resistance1 = None
        else:
            self.source_side_heat_transfer_resistance1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_heat_transfer_resistance2 = None
        else:
            self.source_side_heat_transfer_resistance2 = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'CoolingCoilsWaterToAirHP', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def compressor_type(self):
        """Get compressor_type

        Returns:
            str: the value of `compressor_type` or None if not set
        """
        return self._data["Compressor Type"]

    @compressor_type.setter
    def compressor_type(self, value=None):
        """  Corresponds to IDD Field `Compressor Type`
        Parameters 1-5 are as named below.
        Parameters 6-10 depend on the type of compressor and fluid.
        Refer to the InputOutputReference on the parameters required
        
        {u'note': [u'Parameters 1-5 are as named below.', u'Parameters 6-10 depend on the type of compressor and fluid.', u'Refer to the InputOutputReference on the parameters required'], u'type': u'choice', u'key': [u'Reciprocating', u'Rotary', u'Scroll'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Compressor Type`
                Accepted values are:
                      - Reciprocating
                      - Rotary
                      - Scroll
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `compressor_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compressor_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `compressor_type`')
            vals = {}
            vals["reciprocating"] = "Reciprocating"
            vals["rotary"] = "Rotary"
            vals["scroll"] = "Scroll"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `compressor_type`'.format(value))
            value = vals[value_lower]
        self._data["Compressor Type"] = value

    @property
    def refrigerant_type(self):
        """Get refrigerant_type

        Returns:
            str: the value of `refrigerant_type` or None if not set
        """
        return self._data["Refrigerant Type"]

    @refrigerant_type.setter
    def refrigerant_type(self, value="R22"):
        """  Corresponds to IDD Field `Refrigerant Type`
        
        {u'default': u'R22', u'type': u'object-list', u'object-list': u'FluidNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Refrigerant Type`
                Default value: R22
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigerant_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigerant_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `refrigerant_type`')
        self._data["Refrigerant Type"] = value

    @property
    def design_source_side_flow_rate(self):
        """Get design_source_side_flow_rate

        Returns:
            float: the value of `design_source_side_flow_rate` or None if not set
        """
        return self._data["Design Source Side Flow Rate"]

    @design_source_side_flow_rate.setter
    def design_source_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Source Side Flow Rate`
        
        {u'units': u'm3/s', u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Design Source Side Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_source_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_source_side_flow_rate`')
        self._data["Design Source Side Flow Rate"] = value

    @property
    def nominal_cooling_coil_capacity(self):
        """Get nominal_cooling_coil_capacity

        Returns:
            float: the value of `nominal_cooling_coil_capacity` or None if not set
        """
        return self._data["Nominal Cooling Coil Capacity"]

    @nominal_cooling_coil_capacity.setter
    def nominal_cooling_coil_capacity(self, value=None):
        """  Corresponds to IDD Field `Nominal Cooling Coil Capacity`
        
        {u'units': u'W', u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Nominal Cooling Coil Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_cooling_coil_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_cooling_coil_capacity`')
        self._data["Nominal Cooling Coil Capacity"] = value

    @property
    def nominal_time_for_condensate_removal_to_begin(self):
        """Get nominal_time_for_condensate_removal_to_begin

        Returns:
            float: the value of `nominal_time_for_condensate_removal_to_begin` or None if not set
        """
        return self._data["Nominal Time for Condensate Removal to Begin"]

    @nominal_time_for_condensate_removal_to_begin.setter
    def nominal_time_for_condensate_removal_to_begin(self, value=0.0 ):
        """  Corresponds to IDD Field `Nominal Time for Condensate Removal to Begin`
        The nominal time for condensate to begin leaving the coil's condensate
        drain line at the coil's rated air flow rate and temperature conditions.
        Nominal time is equal to the ratio of the energy of the coil's maximum
        condensate holding capacity (J) to the coil's steady state latent capacity (W).
        Suggested value is 1000; zero value means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '3000.0', u'note': [u"The nominal time for condensate to begin leaving the coil's condensate", u"drain line at the coil's rated air flow rate and temperature conditions.", u"Nominal time is equal to the ratio of the energy of the coil's maximum", u"condensate holding capacity (J) to the coil's steady state latent capacity (W).", u'Suggested value is 1000; zero value means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u's', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Nominal Time for Condensate Removal to Begin`
                Units: s
                Default value: 0.0
                value >= 0.0
                value <= 3000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_time_for_condensate_removal_to_begin`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_time_for_condensate_removal_to_begin`')
            if value > 3000.0:
                raise ValueError('value need to be smaller 3000.0 '
                                 'for field `nominal_time_for_condensate_removal_to_begin`')
        self._data["Nominal Time for Condensate Removal to Begin"] = value

    @property
    def ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(self):
        """Get ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity

        Returns:
            float: the value of `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity` or None if not set
        """
        return self._data["Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"]

    @ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity.setter
    def ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
        Ratio of the initial moisture evaporation rate from the cooling coil (when
        the compressor first turns off) and the coil's steady state latent capacity
        at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value
        means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '5.0', u'note': [u'Ratio of the initial moisture evaporation rate from the cooling coil (when', u"the compressor first turns off) and the coil's steady state latent capacity", u'at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value', u'means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`')
        self._data["Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"] = value

    @property
    def high_pressure_cutoff(self):
        """Get high_pressure_cutoff

        Returns:
            float: the value of `high_pressure_cutoff` or None if not set
        """
        return self._data["High Pressure Cutoff"]

    @high_pressure_cutoff.setter
    def high_pressure_cutoff(self, value=None):
        """  Corresponds to IDD Field `High Pressure Cutoff`
        
        {u'units': u'Pa', u'minimum>': '0.0', 'type': 'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `High Pressure Cutoff`
                Units: Pa
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `high_pressure_cutoff`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `high_pressure_cutoff`')
        self._data["High Pressure Cutoff"] = value

    @property
    def low_pressure_cutoff(self):
        """Get low_pressure_cutoff

        Returns:
            float: the value of `low_pressure_cutoff` or None if not set
        """
        return self._data["Low Pressure Cutoff"]

    @low_pressure_cutoff.setter
    def low_pressure_cutoff(self, value=None):
        """  Corresponds to IDD Field `Low Pressure Cutoff`
        
        {u'units': u'Pa', u'minimum': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Low Pressure Cutoff`
                Units: Pa
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `low_pressure_cutoff`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `low_pressure_cutoff`')
        self._data["Low Pressure Cutoff"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name

        Returns:
            str: the value of `water_inlet_node_name` or None if not set
        """
        return self._data["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_inlet_node_name`')
        self._data["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name

        Returns:
            str: the value of `water_outlet_node_name` or None if not set
        """
        return self._data["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_outlet_node_name`')
        self._data["Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def load_side_total_heat_transfer_coefficient(self):
        """Get load_side_total_heat_transfer_coefficient

        Returns:
            float: the value of `load_side_total_heat_transfer_coefficient` or None if not set
        """
        return self._data["Load Side Total Heat Transfer Coefficient"]

    @load_side_total_heat_transfer_coefficient.setter
    def load_side_total_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `Load Side Total Heat Transfer Coefficient`
        Previously called Parameter 1
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Previously called Parameter 1'], u'units': u'W/K', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Load Side Total Heat Transfer Coefficient`
                Units: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_side_total_heat_transfer_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `load_side_total_heat_transfer_coefficient`')
        self._data["Load Side Total Heat Transfer Coefficient"] = value

    @property
    def load_side_outside_surface_heat_transfer_coefficient(self):
        """Get load_side_outside_surface_heat_transfer_coefficient

        Returns:
            float: the value of `load_side_outside_surface_heat_transfer_coefficient` or None if not set
        """
        return self._data["Load Side Outside Surface Heat Transfer Coefficient"]

    @load_side_outside_surface_heat_transfer_coefficient.setter
    def load_side_outside_surface_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `Load Side Outside Surface Heat Transfer Coefficient`
        Previously called Parameter 2
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Previously called Parameter 2'], u'units': u'W/K', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Load Side Outside Surface Heat Transfer Coefficient`
                Units: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_side_outside_surface_heat_transfer_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `load_side_outside_surface_heat_transfer_coefficient`')
        self._data["Load Side Outside Surface Heat Transfer Coefficient"] = value

    @property
    def superheat_temperature_at_the_evaporator_outlet(self):
        """Get superheat_temperature_at_the_evaporator_outlet

        Returns:
            float: the value of `superheat_temperature_at_the_evaporator_outlet` or None if not set
        """
        return self._data["Superheat Temperature at the Evaporator Outlet"]

    @superheat_temperature_at_the_evaporator_outlet.setter
    def superheat_temperature_at_the_evaporator_outlet(self, value=None):
        """  Corresponds to IDD Field `Superheat Temperature at the Evaporator Outlet`
        Previously called Parameter 3
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Previously called Parameter 3'], u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Superheat Temperature at the Evaporator Outlet`
                Units: C
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `superheat_temperature_at_the_evaporator_outlet`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `superheat_temperature_at_the_evaporator_outlet`')
        self._data["Superheat Temperature at the Evaporator Outlet"] = value

    @property
    def compressor_power_losses(self):
        """Get compressor_power_losses

        Returns:
            float: the value of `compressor_power_losses` or None if not set
        """
        return self._data["Compressor Power Losses"]

    @compressor_power_losses.setter
    def compressor_power_losses(self, value=None):
        """  Corresponds to IDD Field `Compressor Power Losses`
        Accounts for the loss of work due to mechanical and electrical losses in the compressor.
        Previously called Parameter 4
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Accounts for the loss of work due to mechanical and electrical losses in the compressor.', u'Previously called Parameter 4'], u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Compressor Power Losses`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_power_losses`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_power_losses`')
        self._data["Compressor Power Losses"] = value

    @property
    def compressor_efficiency(self):
        """Get compressor_efficiency

        Returns:
            float: the value of `compressor_efficiency` or None if not set
        """
        return self._data["Compressor Efficiency"]

    @compressor_efficiency.setter
    def compressor_efficiency(self, value=None):
        """  Corresponds to IDD Field `Compressor Efficiency`
        Previously called Parameter 5
        
        {u'note': [u'Previously called Parameter 5'], u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Compressor Efficiency`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_efficiency`')
        self._data["Compressor Efficiency"] = value

    @property
    def compressor_piston_displacement(self):
        """Get compressor_piston_displacement

        Returns:
            float: the value of `compressor_piston_displacement` or None if not set
        """
        return self._data["Compressor Piston Displacement"]

    @compressor_piston_displacement.setter
    def compressor_piston_displacement(self, value=None):
        """  Corresponds to IDD Field `Compressor Piston Displacement`
        Use when Compressor Type is Reciprocating or Rotary
        Leave this field blank for Compressor Type is Scroll.
        Previously part of Parameter 6
        
        {u'note': [u'Use when Compressor Type is Reciprocating or Rotary', u'Leave this field blank for Compressor Type is Scroll.', u'Previously part of Parameter 6'], u'units': u'm3/s', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Compressor Piston Displacement`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_piston_displacement`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_piston_displacement`')
        self._data["Compressor Piston Displacement"] = value

    @property
    def compressor_suction_or_discharge_pressure_drop(self):
        """Get compressor_suction_or_discharge_pressure_drop

        Returns:
            float: the value of `compressor_suction_or_discharge_pressure_drop` or None if not set
        """
        return self._data["Compressor Suction/Discharge Pressure Drop"]

    @compressor_suction_or_discharge_pressure_drop.setter
    def compressor_suction_or_discharge_pressure_drop(self, value=None):
        """  Corresponds to IDD Field `Compressor Suction/Discharge Pressure Drop`
        Used when Compressor Type is Rotary or Reciprocating
        Leave this field blank for Compressor Type is Scroll.
        Previously part of Parameter 7
        
        {u'note': [u'Used when Compressor Type is Rotary or Reciprocating', u'Leave this field blank for Compressor Type is Scroll.', u'Previously part of Parameter 7'], u'units': u'Pa', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Compressor Suction/Discharge Pressure Drop`
                Units: Pa
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_suction_or_discharge_pressure_drop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_suction_or_discharge_pressure_drop`')
        self._data["Compressor Suction/Discharge Pressure Drop"] = value

    @property
    def compressor_clearance_factor(self):
        """Get compressor_clearance_factor

        Returns:
            float: the value of `compressor_clearance_factor` or None if not set
        """
        return self._data["Compressor Clearance Factor"]

    @compressor_clearance_factor.setter
    def compressor_clearance_factor(self, value=None):
        """  Corresponds to IDD Field `Compressor Clearance Factor`
        Used when Compressor Type is Reciprocating.
        Leave this field blank for Compressor Type is Rotary or Scroll.
        Previously part of Parameter 8
        
        {u'note': [u'Used when Compressor Type is Reciprocating.', u'Leave this field blank for Compressor Type is Rotary or Scroll.', u'Previously part of Parameter 8'], u'units': u'dimensionless', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Compressor Clearance Factor`
                Units: dimensionless
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_clearance_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_clearance_factor`')
        self._data["Compressor Clearance Factor"] = value

    @property
    def refrigerant_volume_flow_rate(self):
        """Get refrigerant_volume_flow_rate

        Returns:
            float: the value of `refrigerant_volume_flow_rate` or None if not set
        """
        return self._data["Refrigerant Volume Flow Rate"]

    @refrigerant_volume_flow_rate.setter
    def refrigerant_volume_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Refrigerant Volume Flow Rate`
        Use when Compressor Type is Scroll
        Leave this field blank for Compressor Type is Rotary or Reciprocating.
        Previously part of Parameter 6
        
        {u'note': [u'Use when Compressor Type is Scroll', u'Leave this field blank for Compressor Type is Rotary or Reciprocating.', u'Previously part of Parameter 6'], u'units': u'm3/s', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Refrigerant Volume Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `refrigerant_volume_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `refrigerant_volume_flow_rate`')
        self._data["Refrigerant Volume Flow Rate"] = value

    @property
    def volume_ratio(self):
        """Get volume_ratio

        Returns:
            float: the value of `volume_ratio` or None if not set
        """
        return self._data["Volume Ratio"]

    @volume_ratio.setter
    def volume_ratio(self, value=None):
        """  Corresponds to IDD Field `Volume Ratio`
        Use when Compressor Type is Scroll.
        Leave this field blank for Compressor Type is Rotary or Reciprocating.
        Previously part of Parameter 7
        
        {u'note': [u'Use when Compressor Type is Scroll.', u'Leave this field blank for Compressor Type is Rotary or Reciprocating.', u'Previously part of Parameter 7'], u'units': u'dimensionless', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Volume Ratio`
                Units: dimensionless
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `volume_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `volume_ratio`')
        self._data["Volume Ratio"] = value

    @property
    def leak_rate_coefficient(self):
        """Get leak_rate_coefficient

        Returns:
            float: the value of `leak_rate_coefficient` or None if not set
        """
        return self._data["Leak Rate Coefficient"]

    @leak_rate_coefficient.setter
    def leak_rate_coefficient(self, value=None):
        """  Corresponds to IDD Field `Leak Rate Coefficient`
        Use when Compressor Type is Scroll.
        Leave this field blank for Compressor Type is Rotary or Reciprocating.
        Previously part of Parameter 8
        
        {u'note': [u'Use when Compressor Type is Scroll.', u'Leave this field blank for Compressor Type is Rotary or Reciprocating.', u'Previously part of Parameter 8'], u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Leak Rate Coefficient`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `leak_rate_coefficient`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `leak_rate_coefficient`')
        self._data["Leak Rate Coefficient"] = value

    @property
    def source_side_heat_transfer_coefficient(self):
        """Get source_side_heat_transfer_coefficient

        Returns:
            float: the value of `source_side_heat_transfer_coefficient` or None if not set
        """
        return self._data["Source Side Heat Transfer Coefficient"]

    @source_side_heat_transfer_coefficient.setter
    def source_side_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `Source Side Heat Transfer Coefficient`
        Use when Source Side Fluid Name is Water
        Leave this field blank when Source Side Fluid Name is an antifreeze
        Previously part of Parameter 9
        
        {u'note': [u'Use when Source Side Fluid Name is Water', u'Leave this field blank when Source Side Fluid Name is an antifreeze', u'Previously part of Parameter 9'], u'units': u'W/K', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Source Side Heat Transfer Coefficient`
                Units: W/K
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `source_side_heat_transfer_coefficient`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `source_side_heat_transfer_coefficient`')
        self._data["Source Side Heat Transfer Coefficient"] = value

    @property
    def source_side_heat_transfer_resistance1(self):
        """Get source_side_heat_transfer_resistance1

        Returns:
            float: the value of `source_side_heat_transfer_resistance1` or None if not set
        """
        return self._data["Source Side Heat Transfer Resistance1"]

    @source_side_heat_transfer_resistance1.setter
    def source_side_heat_transfer_resistance1(self, value=None):
        """  Corresponds to IDD Field `Source Side Heat Transfer Resistance1`
        Use when Source Side Fluid Name is an antifreeze
        Leave this field blank for Source Side Fluid is Water
        Previously part of Parameter 9
        
        {u'note': [u'Use when Source Side Fluid Name is an antifreeze', u'Leave this field blank for Source Side Fluid is Water', u'Previously part of Parameter 9'], u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Source Side Heat Transfer Resistance1`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `source_side_heat_transfer_resistance1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `source_side_heat_transfer_resistance1`')
        self._data["Source Side Heat Transfer Resistance1"] = value

    @property
    def source_side_heat_transfer_resistance2(self):
        """Get source_side_heat_transfer_resistance2

        Returns:
            float: the value of `source_side_heat_transfer_resistance2` or None if not set
        """
        return self._data["Source Side Heat Transfer Resistance2"]

    @source_side_heat_transfer_resistance2.setter
    def source_side_heat_transfer_resistance2(self, value=None):
        """  Corresponds to IDD Field `Source Side Heat Transfer Resistance2`
        Use when Source Side Fluid Name is an antifreeze
        Leave this field blank for Source Side Fluid is Water
        Previously part of Parameter 10
        
        {u'note': [u'Use when Source Side Fluid Name is an antifreeze', u'Leave this field blank for Source Side Fluid is Water', u'Previously part of Parameter 10'], u'units': u'W/K', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Source Side Heat Transfer Resistance2`
                Units: W/K
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `source_side_heat_transfer_resistance2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `source_side_heat_transfer_resistance2`')
        self._data["Source Side Heat Transfer Resistance2"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilHeatingWaterToAirHeatPumpParameterEstimation(object):
    """ Corresponds to IDD object `Coil:Heating:WaterToAirHeatPump:ParameterEstimation`
        Direct expansion (DX) heating coil for water-to-air heat pump (includes electric
        compressor), single-speed, parameter estimation model. Parameter estimation model is
        a deterministic model that requires a consistent set of parameters to describe
        the operating conditions of the heat pump components.
    
    """
    internal_name = "Coil:Heating:WaterToAirHeatPump:ParameterEstimation"
    field_count = 24
    required_fields = ["Name", "Compressor Type", "Refrigerant Type", "Design Source Side Flow Rate", "Gross Rated Heating Capacity", "High Pressure Cutoff", "Low Pressure Cutoff", "Water Inlet Node Name", "Water Outlet Node Name", "Air Inlet Node Name", "Air Outlet Node Name", "Load Side Total Heat Transfer Coefficient", "Superheat Temperature at the Evaporator Outlet", "Compressor Power Losses", "Compressor Efficiency"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Heating:WaterToAirHeatPump:ParameterEstimation`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Compressor Type"] = None
        self._data["Refrigerant Type"] = None
        self._data["Design Source Side Flow Rate"] = None
        self._data["Gross Rated Heating Capacity"] = None
        self._data["High Pressure Cutoff"] = None
        self._data["Low Pressure Cutoff"] = None
        self._data["Water Inlet Node Name"] = None
        self._data["Water Outlet Node Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Load Side Total Heat Transfer Coefficient"] = None
        self._data["Superheat Temperature at the Evaporator Outlet"] = None
        self._data["Compressor Power Losses"] = None
        self._data["Compressor Efficiency"] = None
        self._data["Compressor Piston Displacement"] = None
        self._data["Compressor Suction/Discharge Pressure Drop"] = None
        self._data["Compressor Clearance Factor"] = None
        self._data["Refrigerant Volume Flow Rate"] = None
        self._data["Volume Ratio"] = None
        self._data["Leak Rate Coefficient"] = None
        self._data["Source Side Heat Transfer Coefficient"] = None
        self._data["Source Side Heat Transfer Resistance1"] = None
        self._data["Source Side Heat Transfer Resistance2"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_type = None
        else:
            self.compressor_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.refrigerant_type = None
        else:
            self.refrigerant_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.design_source_side_flow_rate = None
        else:
            self.design_source_side_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_heating_capacity = None
        else:
            self.gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.high_pressure_cutoff = None
        else:
            self.high_pressure_cutoff = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.low_pressure_cutoff = None
        else:
            self.low_pressure_cutoff = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_inlet_node_name = None
        else:
            self.water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_outlet_node_name = None
        else:
            self.water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.load_side_total_heat_transfer_coefficient = None
        else:
            self.load_side_total_heat_transfer_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.superheat_temperature_at_the_evaporator_outlet = None
        else:
            self.superheat_temperature_at_the_evaporator_outlet = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_power_losses = None
        else:
            self.compressor_power_losses = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_efficiency = None
        else:
            self.compressor_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_piston_displacement = None
        else:
            self.compressor_piston_displacement = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_suction_or_discharge_pressure_drop = None
        else:
            self.compressor_suction_or_discharge_pressure_drop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.compressor_clearance_factor = None
        else:
            self.compressor_clearance_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.refrigerant_volume_flow_rate = None
        else:
            self.refrigerant_volume_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.volume_ratio = None
        else:
            self.volume_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.leak_rate_coefficient = None
        else:
            self.leak_rate_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_heat_transfer_coefficient = None
        else:
            self.source_side_heat_transfer_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_heat_transfer_resistance1 = None
        else:
            self.source_side_heat_transfer_resistance1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.source_side_heat_transfer_resistance2 = None
        else:
            self.source_side_heat_transfer_resistance2 = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'HeatingCoilsWaterToAirHP', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def compressor_type(self):
        """Get compressor_type

        Returns:
            str: the value of `compressor_type` or None if not set
        """
        return self._data["Compressor Type"]

    @compressor_type.setter
    def compressor_type(self, value=None):
        """  Corresponds to IDD Field `Compressor Type`
        Parameters 1-4 are as named below.
        Parameters 5-9 depend on the type of compressor.
        Refer to the InputOutputReference on the parameters required
        
        {u'note': [u'Parameters 1-4 are as named below.', u'Parameters 5-9 depend on the type of compressor.', u'Refer to the InputOutputReference on the parameters required'], u'type': u'choice', u'key': [u'Reciprocating', u'Rotary', u'Scroll'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Compressor Type`
                Accepted values are:
                      - Reciprocating
                      - Rotary
                      - Scroll
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `compressor_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `compressor_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `compressor_type`')
            vals = {}
            vals["reciprocating"] = "Reciprocating"
            vals["rotary"] = "Rotary"
            vals["scroll"] = "Scroll"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `compressor_type`'.format(value))
            value = vals[value_lower]
        self._data["Compressor Type"] = value

    @property
    def refrigerant_type(self):
        """Get refrigerant_type

        Returns:
            str: the value of `refrigerant_type` or None if not set
        """
        return self._data["Refrigerant Type"]

    @refrigerant_type.setter
    def refrigerant_type(self, value="R22"):
        """  Corresponds to IDD Field `Refrigerant Type`
        
        {u'default': u'R22', u'type': u'object-list', u'object-list': u'FluidNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Refrigerant Type`
                Default value: R22
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `refrigerant_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `refrigerant_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `refrigerant_type`')
        self._data["Refrigerant Type"] = value

    @property
    def design_source_side_flow_rate(self):
        """Get design_source_side_flow_rate

        Returns:
            float: the value of `design_source_side_flow_rate` or None if not set
        """
        return self._data["Design Source Side Flow Rate"]

    @design_source_side_flow_rate.setter
    def design_source_side_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Design Source Side Flow Rate`
        
        {u'units': u'm3/s', u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Design Source Side Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `design_source_side_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `design_source_side_flow_rate`')
        self._data["Design Source Side Flow Rate"] = value

    @property
    def gross_rated_heating_capacity(self):
        """Get gross_rated_heating_capacity

        Returns:
            float: the value of `gross_rated_heating_capacity` or None if not set
        """
        return self._data["Gross Rated Heating Capacity"]

    @gross_rated_heating_capacity.setter
    def gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Heating Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_heating_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_heating_capacity`')
        self._data["Gross Rated Heating Capacity"] = value

    @property
    def high_pressure_cutoff(self):
        """Get high_pressure_cutoff

        Returns:
            float: the value of `high_pressure_cutoff` or None if not set
        """
        return self._data["High Pressure Cutoff"]

    @high_pressure_cutoff.setter
    def high_pressure_cutoff(self, value=None):
        """  Corresponds to IDD Field `High Pressure Cutoff`
        
        {u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `High Pressure Cutoff`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `high_pressure_cutoff`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `high_pressure_cutoff`')
        self._data["High Pressure Cutoff"] = value

    @property
    def low_pressure_cutoff(self):
        """Get low_pressure_cutoff

        Returns:
            float: the value of `low_pressure_cutoff` or None if not set
        """
        return self._data["Low Pressure Cutoff"]

    @low_pressure_cutoff.setter
    def low_pressure_cutoff(self, value=None):
        """  Corresponds to IDD Field `Low Pressure Cutoff`
        
        {u'units': u'Pa', u'minimum': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Low Pressure Cutoff`
                Units: Pa
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `low_pressure_cutoff`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `low_pressure_cutoff`')
        self._data["Low Pressure Cutoff"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name

        Returns:
            str: the value of `water_inlet_node_name` or None if not set
        """
        return self._data["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_inlet_node_name`')
        self._data["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name

        Returns:
            str: the value of `water_outlet_node_name` or None if not set
        """
        return self._data["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_outlet_node_name`')
        self._data["Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def load_side_total_heat_transfer_coefficient(self):
        """Get load_side_total_heat_transfer_coefficient

        Returns:
            float: the value of `load_side_total_heat_transfer_coefficient` or None if not set
        """
        return self._data["Load Side Total Heat Transfer Coefficient"]

    @load_side_total_heat_transfer_coefficient.setter
    def load_side_total_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `Load Side Total Heat Transfer Coefficient`
        Previously called Parameter 1
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Previously called Parameter 1'], u'units': u'W/K', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Load Side Total Heat Transfer Coefficient`
                Units: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `load_side_total_heat_transfer_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `load_side_total_heat_transfer_coefficient`')
        self._data["Load Side Total Heat Transfer Coefficient"] = value

    @property
    def superheat_temperature_at_the_evaporator_outlet(self):
        """Get superheat_temperature_at_the_evaporator_outlet

        Returns:
            float: the value of `superheat_temperature_at_the_evaporator_outlet` or None if not set
        """
        return self._data["Superheat Temperature at the Evaporator Outlet"]

    @superheat_temperature_at_the_evaporator_outlet.setter
    def superheat_temperature_at_the_evaporator_outlet(self, value=None):
        """  Corresponds to IDD Field `Superheat Temperature at the Evaporator Outlet`
        Previously called Parameter 2
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Previously called Parameter 2'], u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Superheat Temperature at the Evaporator Outlet`
                Units: C
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `superheat_temperature_at_the_evaporator_outlet`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `superheat_temperature_at_the_evaporator_outlet`')
        self._data["Superheat Temperature at the Evaporator Outlet"] = value

    @property
    def compressor_power_losses(self):
        """Get compressor_power_losses

        Returns:
            float: the value of `compressor_power_losses` or None if not set
        """
        return self._data["Compressor Power Losses"]

    @compressor_power_losses.setter
    def compressor_power_losses(self, value=None):
        """  Corresponds to IDD Field `Compressor Power Losses`
        Accounts for the loss of work due to mechanical and electrical losses in the compressor.
        Previously called Parameter 3
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Accounts for the loss of work due to mechanical and electrical losses in the compressor.', u'Previously called Parameter 3'], u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Compressor Power Losses`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_power_losses`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_power_losses`')
        self._data["Compressor Power Losses"] = value

    @property
    def compressor_efficiency(self):
        """Get compressor_efficiency

        Returns:
            float: the value of `compressor_efficiency` or None if not set
        """
        return self._data["Compressor Efficiency"]

    @compressor_efficiency.setter
    def compressor_efficiency(self, value=None):
        """  Corresponds to IDD Field `Compressor Efficiency`
        Previously called Parameter 4
        
        {u'note': [u'Previously called Parameter 4'], u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Compressor Efficiency`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_efficiency`')
        self._data["Compressor Efficiency"] = value

    @property
    def compressor_piston_displacement(self):
        """Get compressor_piston_displacement

        Returns:
            float: the value of `compressor_piston_displacement` or None if not set
        """
        return self._data["Compressor Piston Displacement"]

    @compressor_piston_displacement.setter
    def compressor_piston_displacement(self, value=None):
        """  Corresponds to IDD Field `Compressor Piston Displacement`
        Use when Compressor Type is Reciprocating or Rotary
        Leave this field blank for Compressor Type is Scroll.
        Previously part of Parameter 5
        
        {u'note': [u'Use when Compressor Type is Reciprocating or Rotary', u'Leave this field blank for Compressor Type is Scroll.', u'Previously part of Parameter 5'], u'units': u'm3/s', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Compressor Piston Displacement`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_piston_displacement`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_piston_displacement`')
        self._data["Compressor Piston Displacement"] = value

    @property
    def compressor_suction_or_discharge_pressure_drop(self):
        """Get compressor_suction_or_discharge_pressure_drop

        Returns:
            float: the value of `compressor_suction_or_discharge_pressure_drop` or None if not set
        """
        return self._data["Compressor Suction/Discharge Pressure Drop"]

    @compressor_suction_or_discharge_pressure_drop.setter
    def compressor_suction_or_discharge_pressure_drop(self, value=None):
        """  Corresponds to IDD Field `Compressor Suction/Discharge Pressure Drop`
        Used when Compressor Type is Rotary or Reciprocating
        Leave this field blank for Compressor Type is Scroll.
        Previously part of Parameter 6
        
        {u'note': [u'Used when Compressor Type is Rotary or Reciprocating', u'Leave this field blank for Compressor Type is Scroll.', u'Previously part of Parameter 6'], u'units': u'Pa', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Compressor Suction/Discharge Pressure Drop`
                Units: Pa
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_suction_or_discharge_pressure_drop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_suction_or_discharge_pressure_drop`')
        self._data["Compressor Suction/Discharge Pressure Drop"] = value

    @property
    def compressor_clearance_factor(self):
        """Get compressor_clearance_factor

        Returns:
            float: the value of `compressor_clearance_factor` or None if not set
        """
        return self._data["Compressor Clearance Factor"]

    @compressor_clearance_factor.setter
    def compressor_clearance_factor(self, value=None):
        """  Corresponds to IDD Field `Compressor Clearance Factor`
        Used when Compressor Type is Reciprocating.
        Leave this field blank for Compressor Type is Rotary or Scroll.
        Previously part of Parameter 7
        
        {u'note': [u'Used when Compressor Type is Reciprocating.', u'Leave this field blank for Compressor Type is Rotary or Scroll.', u'Previously part of Parameter 7'], u'units': u'dimensionless', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Compressor Clearance Factor`
                Units: dimensionless
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `compressor_clearance_factor`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `compressor_clearance_factor`')
        self._data["Compressor Clearance Factor"] = value

    @property
    def refrigerant_volume_flow_rate(self):
        """Get refrigerant_volume_flow_rate

        Returns:
            float: the value of `refrigerant_volume_flow_rate` or None if not set
        """
        return self._data["Refrigerant Volume Flow Rate"]

    @refrigerant_volume_flow_rate.setter
    def refrigerant_volume_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Refrigerant Volume Flow Rate`
        Use when Compressor Type is Scroll
        Leave this field blank for Compressor Type is Rotary or Reciprocating.
        Previously part of Parameter 5
        
        {u'note': [u'Use when Compressor Type is Scroll', u'Leave this field blank for Compressor Type is Rotary or Reciprocating.', u'Previously part of Parameter 5'], u'units': u'm3/s', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Refrigerant Volume Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `refrigerant_volume_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `refrigerant_volume_flow_rate`')
        self._data["Refrigerant Volume Flow Rate"] = value

    @property
    def volume_ratio(self):
        """Get volume_ratio

        Returns:
            float: the value of `volume_ratio` or None if not set
        """
        return self._data["Volume Ratio"]

    @volume_ratio.setter
    def volume_ratio(self, value=None):
        """  Corresponds to IDD Field `Volume Ratio`
        Use when Compressor Type is Scroll.
        Leave this field blank for Compressor Type is Rotary or Reciprocating.
        Previously part of Parameter 6
        
        {u'note': [u'Use when Compressor Type is Scroll.', u'Leave this field blank for Compressor Type is Rotary or Reciprocating.', u'Previously part of Parameter 6'], u'units': u'dimensionless', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Volume Ratio`
                Units: dimensionless
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `volume_ratio`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `volume_ratio`')
        self._data["Volume Ratio"] = value

    @property
    def leak_rate_coefficient(self):
        """Get leak_rate_coefficient

        Returns:
            float: the value of `leak_rate_coefficient` or None if not set
        """
        return self._data["Leak Rate Coefficient"]

    @leak_rate_coefficient.setter
    def leak_rate_coefficient(self, value=None):
        """  Corresponds to IDD Field `Leak Rate Coefficient`
        Use when Compressor Type is Scroll.
        Leave this field blank for Compressor Type is Rotary or Reciprocating.
        Previously part of Parameter 7
        
        {u'note': [u'Use when Compressor Type is Scroll.', u'Leave this field blank for Compressor Type is Rotary or Reciprocating.', u'Previously part of Parameter 7'], u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Leak Rate Coefficient`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `leak_rate_coefficient`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `leak_rate_coefficient`')
        self._data["Leak Rate Coefficient"] = value

    @property
    def source_side_heat_transfer_coefficient(self):
        """Get source_side_heat_transfer_coefficient

        Returns:
            float: the value of `source_side_heat_transfer_coefficient` or None if not set
        """
        return self._data["Source Side Heat Transfer Coefficient"]

    @source_side_heat_transfer_coefficient.setter
    def source_side_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `Source Side Heat Transfer Coefficient`
        Use when Source Side Fluid Name is Water
        Leave this field blank when Source Side Fluid is an antifreeze
        Previously part of Parameter 8
        
        {u'note': [u'Use when Source Side Fluid Name is Water', u'Leave this field blank when Source Side Fluid is an antifreeze', u'Previously part of Parameter 8'], u'units': u'W/K', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Source Side Heat Transfer Coefficient`
                Units: W/K
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `source_side_heat_transfer_coefficient`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `source_side_heat_transfer_coefficient`')
        self._data["Source Side Heat Transfer Coefficient"] = value

    @property
    def source_side_heat_transfer_resistance1(self):
        """Get source_side_heat_transfer_resistance1

        Returns:
            float: the value of `source_side_heat_transfer_resistance1` or None if not set
        """
        return self._data["Source Side Heat Transfer Resistance1"]

    @source_side_heat_transfer_resistance1.setter
    def source_side_heat_transfer_resistance1(self, value=None):
        """  Corresponds to IDD Field `Source Side Heat Transfer Resistance1`
        Use when Source Side Fluid Name is an antifreeze
        Leave this field blank for Source Side Fluid is Water
        Previously part of Parameter 8
        
        {u'note': [u'Use when Source Side Fluid Name is an antifreeze', u'Leave this field blank for Source Side Fluid is Water', u'Previously part of Parameter 8'], u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Source Side Heat Transfer Resistance1`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `source_side_heat_transfer_resistance1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `source_side_heat_transfer_resistance1`')
        self._data["Source Side Heat Transfer Resistance1"] = value

    @property
    def source_side_heat_transfer_resistance2(self):
        """Get source_side_heat_transfer_resistance2

        Returns:
            float: the value of `source_side_heat_transfer_resistance2` or None if not set
        """
        return self._data["Source Side Heat Transfer Resistance2"]

    @source_side_heat_transfer_resistance2.setter
    def source_side_heat_transfer_resistance2(self, value=None):
        """  Corresponds to IDD Field `Source Side Heat Transfer Resistance2`
        Use when Source Side Fluid Name is an antifreeze
        Leave this field blank for Source Side Fluid is Water
        Previously part of Parameter 9
        
        {u'note': [u'Use when Source Side Fluid Name is an antifreeze', u'Leave this field blank for Source Side Fluid is Water', u'Previously part of Parameter 9'], u'units': u'W/K', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Source Side Heat Transfer Resistance2`
                Units: W/K
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `source_side_heat_transfer_resistance2`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `source_side_heat_transfer_resistance2`')
        self._data["Source Side Heat Transfer Resistance2"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilCoolingWaterToAirHeatPumpEquationFit(object):
    """ Corresponds to IDD object `Coil:Cooling:WaterToAirHeatPump:EquationFit`
        Direct expansion (DX) cooling coil for water-to-air heat pump (includes electric
        compressor), single-speed, equation-fit model. Optional inputs for moisture
        evaporation from wet coil when compressor cycles off with continuous fan operation.
        Equation-fit model uses normalized curves to describe the heat pump performance.
    
    """
    internal_name = "Coil:Cooling:WaterToAirHeatPump:EquationFit"
    field_count = 28
    required_fields = ["Name", "Water Inlet Node Name", "Water Outlet Node Name", "Air Inlet Node Name", "Air Outlet Node Name", "Rated Air Flow Rate", "Rated Water Flow Rate", "Gross Rated Total Cooling Capacity", "Gross Rated Sensible Cooling Capacity", "Gross Rated Cooling COP", "Total Cooling Capacity Coefficient 1", "Total Cooling Capacity Coefficient 2", "Total Cooling Capacity Coefficient 3", "Total Cooling Capacity Coefficient 4", "Total Cooling Capacity Coefficient 5", "Sensible Cooling Capacity Coefficient 1", "Sensible Cooling Capacity Coefficient 2", "Sensible Cooling Capacity Coefficient 3", "Sensible Cooling Capacity Coefficient 4", "Sensible Cooling Capacity Coefficient 5", "Sensible Cooling Capacity Coefficient 6", "Cooling Power Consumption Coefficient 1", "Cooling Power Consumption Coefficient 2", "Cooling Power Consumption Coefficient 3", "Cooling Power Consumption Coefficient 4", "Cooling Power Consumption Coefficient 5"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Cooling:WaterToAirHeatPump:EquationFit`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Water Inlet Node Name"] = None
        self._data["Water Outlet Node Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Rated Air Flow Rate"] = None
        self._data["Rated Water Flow Rate"] = None
        self._data["Gross Rated Total Cooling Capacity"] = None
        self._data["Gross Rated Sensible Cooling Capacity"] = None
        self._data["Gross Rated Cooling COP"] = None
        self._data["Total Cooling Capacity Coefficient 1"] = None
        self._data["Total Cooling Capacity Coefficient 2"] = None
        self._data["Total Cooling Capacity Coefficient 3"] = None
        self._data["Total Cooling Capacity Coefficient 4"] = None
        self._data["Total Cooling Capacity Coefficient 5"] = None
        self._data["Sensible Cooling Capacity Coefficient 1"] = None
        self._data["Sensible Cooling Capacity Coefficient 2"] = None
        self._data["Sensible Cooling Capacity Coefficient 3"] = None
        self._data["Sensible Cooling Capacity Coefficient 4"] = None
        self._data["Sensible Cooling Capacity Coefficient 5"] = None
        self._data["Sensible Cooling Capacity Coefficient 6"] = None
        self._data["Cooling Power Consumption Coefficient 1"] = None
        self._data["Cooling Power Consumption Coefficient 2"] = None
        self._data["Cooling Power Consumption Coefficient 3"] = None
        self._data["Cooling Power Consumption Coefficient 4"] = None
        self._data["Cooling Power Consumption Coefficient 5"] = None
        self._data["Nominal Time for Condensate Removal to Begin"] = None
        self._data["Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_inlet_node_name = None
        else:
            self.water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_outlet_node_name = None
        else:
            self.water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_air_flow_rate = None
        else:
            self.rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_water_flow_rate = None
        else:
            self.rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_total_cooling_capacity = None
        else:
            self.gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_sensible_cooling_capacity = None
        else:
            self.gross_rated_sensible_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_cooling_cop = None
        else:
            self.gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_cooling_capacity_coefficient_1 = None
        else:
            self.total_cooling_capacity_coefficient_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_cooling_capacity_coefficient_2 = None
        else:
            self.total_cooling_capacity_coefficient_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_cooling_capacity_coefficient_3 = None
        else:
            self.total_cooling_capacity_coefficient_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_cooling_capacity_coefficient_4 = None
        else:
            self.total_cooling_capacity_coefficient_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.total_cooling_capacity_coefficient_5 = None
        else:
            self.total_cooling_capacity_coefficient_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensible_cooling_capacity_coefficient_1 = None
        else:
            self.sensible_cooling_capacity_coefficient_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensible_cooling_capacity_coefficient_2 = None
        else:
            self.sensible_cooling_capacity_coefficient_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensible_cooling_capacity_coefficient_3 = None
        else:
            self.sensible_cooling_capacity_coefficient_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensible_cooling_capacity_coefficient_4 = None
        else:
            self.sensible_cooling_capacity_coefficient_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensible_cooling_capacity_coefficient_5 = None
        else:
            self.sensible_cooling_capacity_coefficient_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensible_cooling_capacity_coefficient_6 = None
        else:
            self.sensible_cooling_capacity_coefficient_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_power_consumption_coefficient_1 = None
        else:
            self.cooling_power_consumption_coefficient_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_power_consumption_coefficient_2 = None
        else:
            self.cooling_power_consumption_coefficient_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_power_consumption_coefficient_3 = None
        else:
            self.cooling_power_consumption_coefficient_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_power_consumption_coefficient_4 = None
        else:
            self.cooling_power_consumption_coefficient_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_power_consumption_coefficient_5 = None
        else:
            self.cooling_power_consumption_coefficient_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_time_for_condensate_removal_to_begin = None
        else:
            self.nominal_time_for_condensate_removal_to_begin = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity = None
        else:
            self.ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'CoolingCoilsWaterToAirHP', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name

        Returns:
            str: the value of `water_inlet_node_name` or None if not set
        """
        return self._data["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_inlet_node_name`')
        self._data["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name

        Returns:
            str: the value of `water_outlet_node_name` or None if not set
        """
        return self._data["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_outlet_node_name`')
        self._data["Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def rated_air_flow_rate(self):
        """Get rated_air_flow_rate

        Returns:
            float: the value of `rated_air_flow_rate` or None if not set
        """
        return self._data["Rated Air Flow Rate"]

    @rated_air_flow_rate.setter
    def rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Air Flow Rate`
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_air_flow_rate`')
        self._data["Rated Air Flow Rate"] = value

    @property
    def rated_water_flow_rate(self):
        """Get rated_water_flow_rate

        Returns:
            float: the value of `rated_water_flow_rate` or None if not set
        """
        return self._data["Rated Water Flow Rate"]

    @rated_water_flow_rate.setter
    def rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Water Flow Rate`
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Water Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_water_flow_rate`')
        self._data["Rated Water Flow Rate"] = value

    @property
    def gross_rated_total_cooling_capacity(self):
        """Get gross_rated_total_cooling_capacity

        Returns:
            float: the value of `gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Gross Rated Total Cooling Capacity"]

    @gross_rated_total_cooling_capacity.setter
    def gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Total Cooling Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_total_cooling_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_total_cooling_capacity`')
        self._data["Gross Rated Total Cooling Capacity"] = value

    @property
    def gross_rated_sensible_cooling_capacity(self):
        """Get gross_rated_sensible_cooling_capacity

        Returns:
            float: the value of `gross_rated_sensible_cooling_capacity` or None if not set
        """
        return self._data["Gross Rated Sensible Cooling Capacity"]

    @gross_rated_sensible_cooling_capacity.setter
    def gross_rated_sensible_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Gross Rated Sensible Cooling Capacity`
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Sensible Cooling Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_sensible_cooling_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_sensible_cooling_capacity`')
        self._data["Gross Rated Sensible Cooling Capacity"] = value

    @property
    def gross_rated_cooling_cop(self):
        """Get gross_rated_cooling_cop

        Returns:
            float: the value of `gross_rated_cooling_cop` or None if not set
        """
        return self._data["Gross Rated Cooling COP"]

    @gross_rated_cooling_cop.setter
    def gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Gross Rated Cooling COP`
        
        {u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Gross Rated Cooling COP`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_cooling_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_cooling_cop`')
        self._data["Gross Rated Cooling COP"] = value

    @property
    def total_cooling_capacity_coefficient_1(self):
        """Get total_cooling_capacity_coefficient_1

        Returns:
            float: the value of `total_cooling_capacity_coefficient_1` or None if not set
        """
        return self._data["Total Cooling Capacity Coefficient 1"]

    @total_cooling_capacity_coefficient_1.setter
    def total_cooling_capacity_coefficient_1(self, value=None):
        """  Corresponds to IDD Field `Total Cooling Capacity Coefficient 1`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Total Cooling Capacity Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_cooling_capacity_coefficient_1`'.format(value))
        self._data["Total Cooling Capacity Coefficient 1"] = value

    @property
    def total_cooling_capacity_coefficient_2(self):
        """Get total_cooling_capacity_coefficient_2

        Returns:
            float: the value of `total_cooling_capacity_coefficient_2` or None if not set
        """
        return self._data["Total Cooling Capacity Coefficient 2"]

    @total_cooling_capacity_coefficient_2.setter
    def total_cooling_capacity_coefficient_2(self, value=None):
        """  Corresponds to IDD Field `Total Cooling Capacity Coefficient 2`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Total Cooling Capacity Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_cooling_capacity_coefficient_2`'.format(value))
        self._data["Total Cooling Capacity Coefficient 2"] = value

    @property
    def total_cooling_capacity_coefficient_3(self):
        """Get total_cooling_capacity_coefficient_3

        Returns:
            float: the value of `total_cooling_capacity_coefficient_3` or None if not set
        """
        return self._data["Total Cooling Capacity Coefficient 3"]

    @total_cooling_capacity_coefficient_3.setter
    def total_cooling_capacity_coefficient_3(self, value=None):
        """  Corresponds to IDD Field `Total Cooling Capacity Coefficient 3`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Total Cooling Capacity Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_cooling_capacity_coefficient_3`'.format(value))
        self._data["Total Cooling Capacity Coefficient 3"] = value

    @property
    def total_cooling_capacity_coefficient_4(self):
        """Get total_cooling_capacity_coefficient_4

        Returns:
            float: the value of `total_cooling_capacity_coefficient_4` or None if not set
        """
        return self._data["Total Cooling Capacity Coefficient 4"]

    @total_cooling_capacity_coefficient_4.setter
    def total_cooling_capacity_coefficient_4(self, value=None):
        """  Corresponds to IDD Field `Total Cooling Capacity Coefficient 4`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Total Cooling Capacity Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_cooling_capacity_coefficient_4`'.format(value))
        self._data["Total Cooling Capacity Coefficient 4"] = value

    @property
    def total_cooling_capacity_coefficient_5(self):
        """Get total_cooling_capacity_coefficient_5

        Returns:
            float: the value of `total_cooling_capacity_coefficient_5` or None if not set
        """
        return self._data["Total Cooling Capacity Coefficient 5"]

    @total_cooling_capacity_coefficient_5.setter
    def total_cooling_capacity_coefficient_5(self, value=None):
        """  Corresponds to IDD Field `Total Cooling Capacity Coefficient 5`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Total Cooling Capacity Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `total_cooling_capacity_coefficient_5`'.format(value))
        self._data["Total Cooling Capacity Coefficient 5"] = value

    @property
    def sensible_cooling_capacity_coefficient_1(self):
        """Get sensible_cooling_capacity_coefficient_1

        Returns:
            float: the value of `sensible_cooling_capacity_coefficient_1` or None if not set
        """
        return self._data["Sensible Cooling Capacity Coefficient 1"]

    @sensible_cooling_capacity_coefficient_1.setter
    def sensible_cooling_capacity_coefficient_1(self, value=None):
        """  Corresponds to IDD Field `Sensible Cooling Capacity Coefficient 1`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Sensible Cooling Capacity Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_cooling_capacity_coefficient_1`'.format(value))
        self._data["Sensible Cooling Capacity Coefficient 1"] = value

    @property
    def sensible_cooling_capacity_coefficient_2(self):
        """Get sensible_cooling_capacity_coefficient_2

        Returns:
            float: the value of `sensible_cooling_capacity_coefficient_2` or None if not set
        """
        return self._data["Sensible Cooling Capacity Coefficient 2"]

    @sensible_cooling_capacity_coefficient_2.setter
    def sensible_cooling_capacity_coefficient_2(self, value=None):
        """  Corresponds to IDD Field `Sensible Cooling Capacity Coefficient 2`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Sensible Cooling Capacity Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_cooling_capacity_coefficient_2`'.format(value))
        self._data["Sensible Cooling Capacity Coefficient 2"] = value

    @property
    def sensible_cooling_capacity_coefficient_3(self):
        """Get sensible_cooling_capacity_coefficient_3

        Returns:
            float: the value of `sensible_cooling_capacity_coefficient_3` or None if not set
        """
        return self._data["Sensible Cooling Capacity Coefficient 3"]

    @sensible_cooling_capacity_coefficient_3.setter
    def sensible_cooling_capacity_coefficient_3(self, value=None):
        """  Corresponds to IDD Field `Sensible Cooling Capacity Coefficient 3`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Sensible Cooling Capacity Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_cooling_capacity_coefficient_3`'.format(value))
        self._data["Sensible Cooling Capacity Coefficient 3"] = value

    @property
    def sensible_cooling_capacity_coefficient_4(self):
        """Get sensible_cooling_capacity_coefficient_4

        Returns:
            float: the value of `sensible_cooling_capacity_coefficient_4` or None if not set
        """
        return self._data["Sensible Cooling Capacity Coefficient 4"]

    @sensible_cooling_capacity_coefficient_4.setter
    def sensible_cooling_capacity_coefficient_4(self, value=None):
        """  Corresponds to IDD Field `Sensible Cooling Capacity Coefficient 4`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Sensible Cooling Capacity Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_cooling_capacity_coefficient_4`'.format(value))
        self._data["Sensible Cooling Capacity Coefficient 4"] = value

    @property
    def sensible_cooling_capacity_coefficient_5(self):
        """Get sensible_cooling_capacity_coefficient_5

        Returns:
            float: the value of `sensible_cooling_capacity_coefficient_5` or None if not set
        """
        return self._data["Sensible Cooling Capacity Coefficient 5"]

    @sensible_cooling_capacity_coefficient_5.setter
    def sensible_cooling_capacity_coefficient_5(self, value=None):
        """  Corresponds to IDD Field `Sensible Cooling Capacity Coefficient 5`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Sensible Cooling Capacity Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_cooling_capacity_coefficient_5`'.format(value))
        self._data["Sensible Cooling Capacity Coefficient 5"] = value

    @property
    def sensible_cooling_capacity_coefficient_6(self):
        """Get sensible_cooling_capacity_coefficient_6

        Returns:
            float: the value of `sensible_cooling_capacity_coefficient_6` or None if not set
        """
        return self._data["Sensible Cooling Capacity Coefficient 6"]

    @sensible_cooling_capacity_coefficient_6.setter
    def sensible_cooling_capacity_coefficient_6(self, value=None):
        """  Corresponds to IDD Field `Sensible Cooling Capacity Coefficient 6`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Sensible Cooling Capacity Coefficient 6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_cooling_capacity_coefficient_6`'.format(value))
        self._data["Sensible Cooling Capacity Coefficient 6"] = value

    @property
    def cooling_power_consumption_coefficient_1(self):
        """Get cooling_power_consumption_coefficient_1

        Returns:
            float: the value of `cooling_power_consumption_coefficient_1` or None if not set
        """
        return self._data["Cooling Power Consumption Coefficient 1"]

    @cooling_power_consumption_coefficient_1.setter
    def cooling_power_consumption_coefficient_1(self, value=None):
        """  Corresponds to IDD Field `Cooling Power Consumption Coefficient 1`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Cooling Power Consumption Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_power_consumption_coefficient_1`'.format(value))
        self._data["Cooling Power Consumption Coefficient 1"] = value

    @property
    def cooling_power_consumption_coefficient_2(self):
        """Get cooling_power_consumption_coefficient_2

        Returns:
            float: the value of `cooling_power_consumption_coefficient_2` or None if not set
        """
        return self._data["Cooling Power Consumption Coefficient 2"]

    @cooling_power_consumption_coefficient_2.setter
    def cooling_power_consumption_coefficient_2(self, value=None):
        """  Corresponds to IDD Field `Cooling Power Consumption Coefficient 2`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Cooling Power Consumption Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_power_consumption_coefficient_2`'.format(value))
        self._data["Cooling Power Consumption Coefficient 2"] = value

    @property
    def cooling_power_consumption_coefficient_3(self):
        """Get cooling_power_consumption_coefficient_3

        Returns:
            float: the value of `cooling_power_consumption_coefficient_3` or None if not set
        """
        return self._data["Cooling Power Consumption Coefficient 3"]

    @cooling_power_consumption_coefficient_3.setter
    def cooling_power_consumption_coefficient_3(self, value=None):
        """  Corresponds to IDD Field `Cooling Power Consumption Coefficient 3`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Cooling Power Consumption Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_power_consumption_coefficient_3`'.format(value))
        self._data["Cooling Power Consumption Coefficient 3"] = value

    @property
    def cooling_power_consumption_coefficient_4(self):
        """Get cooling_power_consumption_coefficient_4

        Returns:
            float: the value of `cooling_power_consumption_coefficient_4` or None if not set
        """
        return self._data["Cooling Power Consumption Coefficient 4"]

    @cooling_power_consumption_coefficient_4.setter
    def cooling_power_consumption_coefficient_4(self, value=None):
        """  Corresponds to IDD Field `Cooling Power Consumption Coefficient 4`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Cooling Power Consumption Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_power_consumption_coefficient_4`'.format(value))
        self._data["Cooling Power Consumption Coefficient 4"] = value

    @property
    def cooling_power_consumption_coefficient_5(self):
        """Get cooling_power_consumption_coefficient_5

        Returns:
            float: the value of `cooling_power_consumption_coefficient_5` or None if not set
        """
        return self._data["Cooling Power Consumption Coefficient 5"]

    @cooling_power_consumption_coefficient_5.setter
    def cooling_power_consumption_coefficient_5(self, value=None):
        """  Corresponds to IDD Field `Cooling Power Consumption Coefficient 5`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Cooling Power Consumption Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_power_consumption_coefficient_5`'.format(value))
        self._data["Cooling Power Consumption Coefficient 5"] = value

    @property
    def nominal_time_for_condensate_removal_to_begin(self):
        """Get nominal_time_for_condensate_removal_to_begin

        Returns:
            float: the value of `nominal_time_for_condensate_removal_to_begin` or None if not set
        """
        return self._data["Nominal Time for Condensate Removal to Begin"]

    @nominal_time_for_condensate_removal_to_begin.setter
    def nominal_time_for_condensate_removal_to_begin(self, value=0.0 ):
        """  Corresponds to IDD Field `Nominal Time for Condensate Removal to Begin`
        The nominal time for condensate to begin leaving the coil's condensate
        drain line at the coil's rated air flow and temperature conditions.
        Nominal time is equal to the ratio of the energy of the coil's maximum
        condensate holding capacity (J) to the coil's steady state latent capacity (W).
        Suggested value is 1000; zero value means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '3000.0', u'note': [u"The nominal time for condensate to begin leaving the coil's condensate", u"drain line at the coil's rated air flow and temperature conditions.", u"Nominal time is equal to the ratio of the energy of the coil's maximum", u"condensate holding capacity (J) to the coil's steady state latent capacity (W).", u'Suggested value is 1000; zero value means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u's', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Nominal Time for Condensate Removal to Begin`
                Units: s
                Default value: 0.0
                value >= 0.0
                value <= 3000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_time_for_condensate_removal_to_begin`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_time_for_condensate_removal_to_begin`')
            if value > 3000.0:
                raise ValueError('value need to be smaller 3000.0 '
                                 'for field `nominal_time_for_condensate_removal_to_begin`')
        self._data["Nominal Time for Condensate Removal to Begin"] = value

    @property
    def ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(self):
        """Get ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity

        Returns:
            float: the value of `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity` or None if not set
        """
        return self._data["Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"]

    @ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity.setter
    def ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
        Ratio of the initial moisture evaporation rate from the cooling coil (when
        the compressor first turns off) and the coil's steady state latent capacity
        at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value
        means latent degradation model is disabled.
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '5.0', u'note': [u'Ratio of the initial moisture evaporation rate from the cooling coil (when', u"the compressor first turns off) and the coil's steady state latent capacity", u'at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value', u'means latent degradation model is disabled.'], u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`')
            if value > 5.0:
                raise ValueError('value need to be smaller 5.0 '
                                 'for field `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity`')
        self._data["Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(object):
    """ Corresponds to IDD object `Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit`
        Direct expansion (DX) cooling coil for water-to-air heat pump (includes electric
        compressor), variable-speed, equation-fit model. Optional inputs for moisture
        evaporation from wet coil when compressor cycles off with continuous fan operation.
        Equation-fit model uses normalized curves to describe the heat pump performance.
        Requires two to ten sets of performance data and will interpolate between speeds.
        Modeled as a single coil with variable-speed compressor.
    
    """
    internal_name = "Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit"
    field_count = 144
    required_fields = ["Name", "Water-to-Refrigerant HX Water Inlet Node Name", "Water-to-Refrigerant HX Water Outlet Node Name", "Indoor Air Inlet Node Name", "Indoor Air Outlet Node Name", "Number of Speeds", "Nominal Speed Level", "Gross Rated Total Cooling Capacity At Selected Nominal Speed Level", "Rated Air Flow Rate At Selected Nominal Speed Level", "Rated Water Flow Rate At Selected Nominal Speed Level", "Nominal Time for Condensate to Begin Leaving the Coil", "Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity", "Flag for Using Hot Gas Reheat, 0 or 1", "Energy Part Load Fraction Curve Name", "Speed 1 Reference Unit Gross Rated Total Cooling Capacity", "Speed 1 Reference Unit Gross Rated Sensible Heat Ratio", "Speed 1 Reference Unit Gross Rated Cooling COP", "Speed 1 Reference Unit Rated Air Flow Rate", "Speed 1 Reference Unit Rated Water Flow Rate", "Speed 1 Total Cooling Capacity Function of Temperature Curve Name", "Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name", "Speed 1 Total Cooling Capacity Function of Water Flow Fraction Curve Name", "Speed 1 Energy Input Ratio Function of Temperature Curve Name", "Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name", "Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name", "Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions", "Speed 1 Waste Heat Function of Temperature Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Water-to-Refrigerant HX Water Inlet Node Name"] = None
        self._data["Water-to-Refrigerant HX Water Outlet Node Name"] = None
        self._data["Indoor Air Inlet Node Name"] = None
        self._data["Indoor Air Outlet Node Name"] = None
        self._data["Number of Speeds"] = None
        self._data["Nominal Speed Level"] = None
        self._data["Gross Rated Total Cooling Capacity At Selected Nominal Speed Level"] = None
        self._data["Rated Air Flow Rate At Selected Nominal Speed Level"] = None
        self._data["Rated Water Flow Rate At Selected Nominal Speed Level"] = None
        self._data["Nominal Time for Condensate to Begin Leaving the Coil"] = None
        self._data["Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity"] = None
        self._data["Flag for Using Hot Gas Reheat, 0 or 1"] = None
        self._data["Energy Part Load Fraction Curve Name"] = None
        self._data["Speed 1 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 1 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 1 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 1 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 1 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 1 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 1 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 1 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 2 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 2 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 2 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 2 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 2 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 2 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 2 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 2 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 3 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 3 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 3 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 3 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 3 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 3 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 3 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 3 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 4 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 4 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 4 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 4 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 4 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 4 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 4 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 4 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 5 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 5 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 5 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 5 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 5 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 5 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 5 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 5 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 5 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 6 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 6 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 6 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 6 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 6 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 6 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 6 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 6 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 6 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 7 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 7 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 7 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 7 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 7 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 7 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 7 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 7 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 7 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 8 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 8 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 8 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 8 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 8 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 8 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 8 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 8 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 8 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 9 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 9 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 9 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 9 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 9 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 9 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 9 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 9 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 9 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 10 Reference Unit Gross Rated Total Cooling Capacity"] = None
        self._data["Speed 10 Reference Unit Gross Rated Sensible Heat Ratio"] = None
        self._data["Speed 10 Reference Unit Gross Rated Cooling COP"] = None
        self._data["Speed 10 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 10 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 10 Total Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 10 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 10 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 10 Waste Heat Function of Temperature Curve Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.watertorefrigerant_hx_water_inlet_node_name = None
        else:
            self.watertorefrigerant_hx_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.watertorefrigerant_hx_water_outlet_node_name = None
        else:
            self.watertorefrigerant_hx_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.indoor_air_inlet_node_name = None
        else:
            self.indoor_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.indoor_air_outlet_node_name = None
        else:
            self.indoor_air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_speeds = None
        else:
            self.number_of_speeds = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_speed_level = None
        else:
            self.nominal_speed_level = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_total_cooling_capacity_at_selected_nominal_speed_level = None
        else:
            self.gross_rated_total_cooling_capacity_at_selected_nominal_speed_level = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_air_flow_rate_at_selected_nominal_speed_level = None
        else:
            self.rated_air_flow_rate_at_selected_nominal_speed_level = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_water_flow_rate_at_selected_nominal_speed_level = None
        else:
            self.rated_water_flow_rate_at_selected_nominal_speed_level = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_time_for_condensate_to_begin_leaving_the_coil = None
        else:
            self.nominal_time_for_condensate_to_begin_leaving_the_coil = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity = None
        else:
            self.initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flag_for_using_hot_gas_reheat_0_or_1 = None
        else:
            self.flag_for_using_hot_gas_reheat_0_or_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.energy_part_load_fraction_curve_name = None
        else:
            self.energy_part_load_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_1_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_1_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_1_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_1_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_1_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_1_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_1_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_1_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_2_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_2_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_2_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_2_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_2_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_2_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_2_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_2_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_3_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_3_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_3_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_3_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_3_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_3_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_3_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_3_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_4_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_4_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_4_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_4_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_4_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_4_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_4_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_4_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_5_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_5_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_5_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_5_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_5_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_5_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_5_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_5_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_6_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_6_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_6_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_6_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_6_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_6_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_6_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_6_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_7_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_7_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_7_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_7_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_7_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_7_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_7_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_7_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_8_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_8_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_8_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_8_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_8_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_8_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_8_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_8_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_9_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_9_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_9_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_9_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_9_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_9_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_9_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_9_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_gross_rated_total_cooling_capacity = None
        else:
            self.speed_10_reference_unit_gross_rated_total_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_gross_rated_sensible_heat_ratio = None
        else:
            self.speed_10_reference_unit_gross_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_gross_rated_cooling_cop = None
        else:
            self.speed_10_reference_unit_gross_rated_cooling_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_10_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_10_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_total_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_10_total_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_10_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_10_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'CoolingCoilsWaterToAirVSHP', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def watertorefrigerant_hx_water_inlet_node_name(self):
        """Get watertorefrigerant_hx_water_inlet_node_name

        Returns:
            str: the value of `watertorefrigerant_hx_water_inlet_node_name` or None if not set
        """
        return self._data["Water-to-Refrigerant HX Water Inlet Node Name"]

    @watertorefrigerant_hx_water_inlet_node_name.setter
    def watertorefrigerant_hx_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water-to-Refrigerant HX Water Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water-to-Refrigerant HX Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `watertorefrigerant_hx_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `watertorefrigerant_hx_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `watertorefrigerant_hx_water_inlet_node_name`')
        self._data["Water-to-Refrigerant HX Water Inlet Node Name"] = value

    @property
    def watertorefrigerant_hx_water_outlet_node_name(self):
        """Get watertorefrigerant_hx_water_outlet_node_name

        Returns:
            str: the value of `watertorefrigerant_hx_water_outlet_node_name` or None if not set
        """
        return self._data["Water-to-Refrigerant HX Water Outlet Node Name"]

    @watertorefrigerant_hx_water_outlet_node_name.setter
    def watertorefrigerant_hx_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water-to-Refrigerant HX Water Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water-to-Refrigerant HX Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `watertorefrigerant_hx_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `watertorefrigerant_hx_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `watertorefrigerant_hx_water_outlet_node_name`')
        self._data["Water-to-Refrigerant HX Water Outlet Node Name"] = value

    @property
    def indoor_air_inlet_node_name(self):
        """Get indoor_air_inlet_node_name

        Returns:
            str: the value of `indoor_air_inlet_node_name` or None if not set
        """
        return self._data["Indoor Air Inlet Node Name"]

    @indoor_air_inlet_node_name.setter
    def indoor_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Indoor Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Indoor Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `indoor_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `indoor_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `indoor_air_inlet_node_name`')
        self._data["Indoor Air Inlet Node Name"] = value

    @property
    def indoor_air_outlet_node_name(self):
        """Get indoor_air_outlet_node_name

        Returns:
            str: the value of `indoor_air_outlet_node_name` or None if not set
        """
        return self._data["Indoor Air Outlet Node Name"]

    @indoor_air_outlet_node_name.setter
    def indoor_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Indoor Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Indoor Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `indoor_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `indoor_air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `indoor_air_outlet_node_name`')
        self._data["Indoor Air Outlet Node Name"] = value

    @property
    def number_of_speeds(self):
        """Get number_of_speeds

        Returns:
            int: the value of `number_of_speeds` or None if not set
        """
        return self._data["Number of Speeds"]

    @number_of_speeds.setter
    def number_of_speeds(self, value=2 ):
        """  Corresponds to IDD Field `Number of Speeds`
        
        {'pytype': 'int', u'default': '2', u'maximum': '10', u'required-field': True, u'minimum': '1', u'units': u'dimensionless', u'type': u'integer'}

        Args:
            value (int): value for IDD Field `Number of Speeds`
                Units: dimensionless
                Default value: 2
                value >= 1
                value <= 10
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_speeds`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_speeds`')
            if value > 10:
                raise ValueError('value need to be smaller 10 '
                                 'for field `number_of_speeds`')
        self._data["Number of Speeds"] = value

    @property
    def nominal_speed_level(self):
        """Get nominal_speed_level

        Returns:
            int: the value of `nominal_speed_level` or None if not set
        """
        return self._data["Nominal Speed Level"]

    @nominal_speed_level.setter
    def nominal_speed_level(self, value=2 ):
        """  Corresponds to IDD Field `Nominal Speed Level`
        must be lower than or equal to the highest speed number
        
        {'pytype': 'int', u'default': '2', u'required-field': True, u'note': [u'must be lower than or equal to the highest speed number'], u'units': u'dimensionless', u'type': u'integer'}

        Args:
            value (int): value for IDD Field `Nominal Speed Level`
                Units: dimensionless
                Default value: 2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `nominal_speed_level`'.format(value))
        self._data["Nominal Speed Level"] = value

    @property
    def gross_rated_total_cooling_capacity_at_selected_nominal_speed_level(self):
        """Get gross_rated_total_cooling_capacity_at_selected_nominal_speed_level

        Returns:
            float: the value of `gross_rated_total_cooling_capacity_at_selected_nominal_speed_level` or None if not set
        """
        return self._data["Gross Rated Total Cooling Capacity At Selected Nominal Speed Level"]

    @gross_rated_total_cooling_capacity_at_selected_nominal_speed_level.setter
    def gross_rated_total_cooling_capacity_at_selected_nominal_speed_level(self, value="autosize" ):
        """  Corresponds to IDD Field `Gross Rated Total Cooling Capacity At Selected Nominal Speed Level`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {'pytype': 'float', u'default': '"autosize"', u'required-field': True, u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'autosizable': u'', u'units': u'w', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Total Cooling Capacity At Selected Nominal Speed Level`
                Units: w
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_total_cooling_capacity_at_selected_nominal_speed_level`'.format(value))
        self._data["Gross Rated Total Cooling Capacity At Selected Nominal Speed Level"] = value

    @property
    def rated_air_flow_rate_at_selected_nominal_speed_level(self):
        """Get rated_air_flow_rate_at_selected_nominal_speed_level

        Returns:
            float: the value of `rated_air_flow_rate_at_selected_nominal_speed_level` or None if not set
        """
        return self._data["Rated Air Flow Rate At Selected Nominal Speed Level"]

    @rated_air_flow_rate_at_selected_nominal_speed_level.setter
    def rated_air_flow_rate_at_selected_nominal_speed_level(self, value="autosize" ):
        """  Corresponds to IDD Field `Rated Air Flow Rate At Selected Nominal Speed Level`
        
        {'pytype': 'float', u'default': '"autosize"', u'required-field': True, u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Air Flow Rate At Selected Nominal Speed Level`
                Units: m3/s
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_air_flow_rate_at_selected_nominal_speed_level`'.format(value))
        self._data["Rated Air Flow Rate At Selected Nominal Speed Level"] = value

    @property
    def rated_water_flow_rate_at_selected_nominal_speed_level(self):
        """Get rated_water_flow_rate_at_selected_nominal_speed_level

        Returns:
            float: the value of `rated_water_flow_rate_at_selected_nominal_speed_level` or None if not set
        """
        return self._data["Rated Water Flow Rate At Selected Nominal Speed Level"]

    @rated_water_flow_rate_at_selected_nominal_speed_level.setter
    def rated_water_flow_rate_at_selected_nominal_speed_level(self, value="autosize" ):
        """  Corresponds to IDD Field `Rated Water Flow Rate At Selected Nominal Speed Level`
        
        {'pytype': 'float', u'default': '"autosize"', u'required-field': True, u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Water Flow Rate At Selected Nominal Speed Level`
                Units: m3/s
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_water_flow_rate_at_selected_nominal_speed_level`'.format(value))
        self._data["Rated Water Flow Rate At Selected Nominal Speed Level"] = value

    @property
    def nominal_time_for_condensate_to_begin_leaving_the_coil(self):
        """Get nominal_time_for_condensate_to_begin_leaving_the_coil

        Returns:
            float: the value of `nominal_time_for_condensate_to_begin_leaving_the_coil` or None if not set
        """
        return self._data["Nominal Time for Condensate to Begin Leaving the Coil"]

    @nominal_time_for_condensate_to_begin_leaving_the_coil.setter
    def nominal_time_for_condensate_to_begin_leaving_the_coil(self, value=0.0 ):
        """  Corresponds to IDD Field `Nominal Time for Condensate to Begin Leaving the Coil`
        
        {'pytype': 'float', u'default': '0.0', u'required-field': True, u'minimum': '0.0', u'units': u's', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Nominal Time for Condensate to Begin Leaving the Coil`
                Units: s
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_time_for_condensate_to_begin_leaving_the_coil`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_time_for_condensate_to_begin_leaving_the_coil`')
        self._data["Nominal Time for Condensate to Begin Leaving the Coil"] = value

    @property
    def initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity(self):
        """Get initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity

        Returns:
            float: the value of `initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity` or None if not set
        """
        return self._data["Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity"]

    @initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity.setter
    def initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity`
        
        {'pytype': 'float', u'default': '0.0', u'required-field': True, u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity`')
        self._data["Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity"] = value

    @property
    def flag_for_using_hot_gas_reheat_0_or_1(self):
        """Get flag_for_using_hot_gas_reheat_0_or_1

        Returns:
            float: the value of `flag_for_using_hot_gas_reheat_0_or_1` or None if not set
        """
        return self._data["Flag for Using Hot Gas Reheat, 0 or 1"]

    @flag_for_using_hot_gas_reheat_0_or_1.setter
    def flag_for_using_hot_gas_reheat_0_or_1(self, value=0.0 ):
        """  Corresponds to IDD Field `Flag for Using Hot Gas Reheat, 0 or 1`
        Flag for using hot gas reheat, 0 - not used, 1 - used
        
        {'pytype': 'float', u'default': '0.0', u'required-field': True, u'note': [u'Flag for using hot gas reheat, 0 - not used, 1 - used'], u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Flag for Using Hot Gas Reheat, 0 or 1`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `flag_for_using_hot_gas_reheat_0_or_1`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `flag_for_using_hot_gas_reheat_0_or_1`')
        self._data["Flag for Using Hot Gas Reheat, 0 or 1"] = value

    @property
    def energy_part_load_fraction_curve_name(self):
        """Get energy_part_load_fraction_curve_name

        Returns:
            str: the value of `energy_part_load_fraction_curve_name` or None if not set
        """
        return self._data["Energy Part Load Fraction Curve Name"]

    @energy_part_load_fraction_curve_name.setter
    def energy_part_load_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Energy Part Load Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (cooling load/steady state capacity)
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLR = part load ratio (cooling load/steady state capacity)'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Energy Part Load Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `energy_part_load_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `energy_part_load_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `energy_part_load_fraction_curve_name`')
        self._data["Energy Part Load Fraction Curve Name"] = value

    @property
    def speed_1_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_1_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 1 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_1_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_1_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {'pytype': 'float', u'required-field': True, u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'minimum': '0.0', u'units': u'w', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 1 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_1_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_1_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 1 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_1_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_1_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {'pytype': 'float', u'Maximum': u'1.0', u'required-field': True, u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 1 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_1_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_1_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 1 Reference Unit Gross Rated Cooling COP"]

    @speed_1_reference_unit_gross_rated_cooling_cop.setter
    def speed_1_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 1 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_1_reference_unit_rated_air_flow_rate(self):
        """Get speed_1_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_1_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 1 Reference Unit Rated Air Flow Rate"]

    @speed_1_reference_unit_rated_air_flow_rate.setter
    def speed_1_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_rated_air_flow_rate`')
        self._data["Speed 1 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_1_reference_unit_rated_water_flow_rate(self):
        """Get speed_1_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_1_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 1 Reference Unit Rated Water Flow Rate"]

    @speed_1_reference_unit_rated_water_flow_rate.setter
    def speed_1_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_rated_water_flow_rate`')
        self._data["Speed 1 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_1_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_1_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_1_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 1 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_1_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_1_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 1 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 1 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 1 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_1_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_1_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_1_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_1_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 1 Waste Heat Function of Temperature Curve Name"]

    @speed_1_waste_heat_function_of_temperature_curve_name.setter
    def speed_1_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 1 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_2_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_2_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 2 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_2_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_2_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 2 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_2_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_2_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 2 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_2_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_2_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 2 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_2_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_2_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 2 Reference Unit Gross Rated Cooling COP"]

    @speed_2_reference_unit_gross_rated_cooling_cop.setter
    def speed_2_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 2 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_2_reference_unit_rated_air_flow_rate(self):
        """Get speed_2_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_2_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 2 Reference Unit Rated Air Flow Rate"]

    @speed_2_reference_unit_rated_air_flow_rate.setter
    def speed_2_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_rated_air_flow_rate`')
        self._data["Speed 2 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_2_reference_unit_rated_water_flow_rate(self):
        """Get speed_2_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_2_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 2 Reference Unit Rated Water Flow Rate"]

    @speed_2_reference_unit_rated_water_flow_rate.setter
    def speed_2_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_rated_water_flow_rate`')
        self._data["Speed 2 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_2_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_2_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_2_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 2 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_2_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_2_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 2 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 2 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 2 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_2_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewet + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewet + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_2_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_2_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_2_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 2 Waste Heat Function of Temperature Curve Name"]

    @speed_2_waste_heat_function_of_temperature_curve_name.setter
    def speed_2_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 2 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_3_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_3_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 3 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_3_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_3_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 3 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_3_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_3_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 3 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_3_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_3_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 3 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_3_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_3_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 3 Reference Unit Gross Rated Cooling COP"]

    @speed_3_reference_unit_gross_rated_cooling_cop.setter
    def speed_3_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 3 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_3_reference_unit_rated_air_flow_rate(self):
        """Get speed_3_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_3_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 3 Reference Unit Rated Air Flow Rate"]

    @speed_3_reference_unit_rated_air_flow_rate.setter
    def speed_3_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_rated_air_flow_rate`')
        self._data["Speed 3 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_3_reference_unit_rated_water_flow_rate(self):
        """Get speed_3_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_3_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 3 Reference Unit Rated Water Flow Rate"]

    @speed_3_reference_unit_rated_water_flow_rate.setter
    def speed_3_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_rated_water_flow_rate`')
        self._data["Speed 3 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_3_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_3_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_3_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 3 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_3_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_3_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Total Cooling Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 3 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 3 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 3 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_3_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_3_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_3_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_3_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 3 Waste Heat Function of Temperature Curve Name"]

    @speed_3_waste_heat_function_of_temperature_curve_name.setter
    def speed_3_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 3 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_4_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_4_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 4 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_4_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_4_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 4 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_4_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_4_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 4 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_4_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_4_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 4 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_4_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_4_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 4 Reference Unit Gross Rated Cooling COP"]

    @speed_4_reference_unit_gross_rated_cooling_cop.setter
    def speed_4_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 4 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_4_reference_unit_rated_air_flow_rate(self):
        """Get speed_4_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_4_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 4 Reference Unit Rated Air Flow Rate"]

    @speed_4_reference_unit_rated_air_flow_rate.setter
    def speed_4_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_rated_air_flow_rate`')
        self._data["Speed 4 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_4_reference_unit_rated_water_flow_rate(self):
        """Get speed_4_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_4_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 4 Reference Unit Rated Water Flow Rate"]

    @speed_4_reference_unit_rated_water_flow_rate.setter
    def speed_4_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_rated_water_flow_rate`')
        self._data["Speed 4 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_4_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_4_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_4_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 4 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_4_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_4_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Total Cooling Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 4 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 4 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 4 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_4_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_4_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_4_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_4_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 4 Waste Heat Function of Temperature Curve Name"]

    @speed_4_waste_heat_function_of_temperature_curve_name.setter
    def speed_4_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 4 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_5_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_5_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 5 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_5_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_5_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 5 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_5_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_5_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 5 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_5_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_5_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 5 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_5_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_5_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 5 Reference Unit Gross Rated Cooling COP"]

    @speed_5_reference_unit_gross_rated_cooling_cop.setter
    def speed_5_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 5 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_5_reference_unit_rated_air_flow_rate(self):
        """Get speed_5_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_5_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 5 Reference Unit Rated Air Flow Rate"]

    @speed_5_reference_unit_rated_air_flow_rate.setter
    def speed_5_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_rated_air_flow_rate`')
        self._data["Speed 5 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_5_reference_unit_rated_water_flow_rate(self):
        """Get speed_5_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_5_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 5 Reference Unit Rated Water Flow Rate"]

    @speed_5_reference_unit_rated_water_flow_rate.setter
    def speed_5_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_rated_water_flow_rate`')
        self._data["Speed 5 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_5_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_5_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_5_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 5 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_5_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_5_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Total Cooling Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 5 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 5 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 5 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_5_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 5 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_5_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_5_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 5 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_5_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_5_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_5_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 5 Waste Heat Function of Temperature Curve Name"]

    @speed_5_waste_heat_function_of_temperature_curve_name.setter
    def speed_5_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 5 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_6_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_6_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 6 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_6_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_6_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 6 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_6_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_6_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 6 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_6_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_6_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 6 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_6_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_6_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 6 Reference Unit Gross Rated Cooling COP"]

    @speed_6_reference_unit_gross_rated_cooling_cop.setter
    def speed_6_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 6 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_6_reference_unit_rated_air_flow_rate(self):
        """Get speed_6_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_6_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 6 Reference Unit Rated Air Flow Rate"]

    @speed_6_reference_unit_rated_air_flow_rate.setter
    def speed_6_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_rated_air_flow_rate`')
        self._data["Speed 6 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_6_reference_unit_rated_water_flow_rate(self):
        """Get speed_6_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_6_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 6 Reference Unit Rated Water Flow Rate"]

    @speed_6_reference_unit_rated_water_flow_rate.setter
    def speed_6_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_rated_water_flow_rate`')
        self._data["Speed 6 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_6_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_6_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_6_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 6 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_6_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_6_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Total Cooling Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 6 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 6 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 6 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_6_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 6 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_6_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_6_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 6 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_6_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_6_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_6_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 6 Waste Heat Function of Temperature Curve Name"]

    @speed_6_waste_heat_function_of_temperature_curve_name.setter
    def speed_6_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 6 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_7_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_7_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 7 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_7_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_7_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 7 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_7_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_7_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 7 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_7_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_7_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 7 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_7_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_7_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 7 Reference Unit Gross Rated Cooling COP"]

    @speed_7_reference_unit_gross_rated_cooling_cop.setter
    def speed_7_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 7 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_7_reference_unit_rated_air_flow_rate(self):
        """Get speed_7_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_7_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 7 Reference Unit Rated Air Flow Rate"]

    @speed_7_reference_unit_rated_air_flow_rate.setter
    def speed_7_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_rated_air_flow_rate`')
        self._data["Speed 7 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_7_reference_unit_rated_water_flow_rate(self):
        """Get speed_7_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_7_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 7 Reference Unit Rated Water Flow Rate"]

    @speed_7_reference_unit_rated_water_flow_rate.setter
    def speed_7_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_rated_water_flow_rate`')
        self._data["Speed 7 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_7_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_7_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_7_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 7 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_7_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_7_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Total Cooling Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 7 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 7 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 7 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_7_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 7 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_7_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_7_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 7 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_7_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_7_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_7_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 7 Waste Heat Function of Temperature Curve Name"]

    @speed_7_waste_heat_function_of_temperature_curve_name.setter
    def speed_7_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 7 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_8_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_8_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 8 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_8_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_8_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 8 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_8_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_8_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 8 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_8_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_8_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 8 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_8_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_8_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 8 Reference Unit Gross Rated Cooling COP"]

    @speed_8_reference_unit_gross_rated_cooling_cop.setter
    def speed_8_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 8 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_8_reference_unit_rated_air_flow_rate(self):
        """Get speed_8_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_8_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 8 Reference Unit Rated Air Flow Rate"]

    @speed_8_reference_unit_rated_air_flow_rate.setter
    def speed_8_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_rated_air_flow_rate`')
        self._data["Speed 8 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_8_reference_unit_rated_water_flow_rate(self):
        """Get speed_8_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_8_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 8 Reference Unit Rated Water Flow Rate"]

    @speed_8_reference_unit_rated_water_flow_rate.setter
    def speed_8_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_rated_water_flow_rate`')
        self._data["Speed 8 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_8_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_8_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_8_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 8 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_8_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_8_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Total Cooling Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 8 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 8 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 8 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_8_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 8 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_8_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_8_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 8 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_8_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_8_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_8_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 8 Waste Heat Function of Temperature Curve Name"]

    @speed_8_waste_heat_function_of_temperature_curve_name.setter
    def speed_8_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 8 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_9_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_9_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 9 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_9_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_9_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 9 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_9_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_9_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 9 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_9_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_9_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 9 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_9_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_9_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 9 Reference Unit Gross Rated Cooling COP"]

    @speed_9_reference_unit_gross_rated_cooling_cop.setter
    def speed_9_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 9 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_9_reference_unit_rated_air_flow_rate(self):
        """Get speed_9_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_9_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 9 Reference Unit Rated Air Flow Rate"]

    @speed_9_reference_unit_rated_air_flow_rate.setter
    def speed_9_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_rated_air_flow_rate`')
        self._data["Speed 9 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_9_reference_unit_rated_water_flow_rate(self):
        """Get speed_9_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_9_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 9 Reference Unit Rated Water Flow Rate"]

    @speed_9_reference_unit_rated_water_flow_rate.setter
    def speed_9_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_rated_water_flow_rate`')
        self._data["Speed 9 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_9_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_9_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_9_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 9 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_9_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_9_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Total Cooling Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 9 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 9 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 9 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_9_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 9 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_9_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_9_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 9 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_9_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_9_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_9_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 9 Waste Heat Function of Temperature Curve Name"]

    @speed_9_waste_heat_function_of_temperature_curve_name.setter
    def speed_9_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 9 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_10_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_10_reference_unit_gross_rated_total_cooling_capacity

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_total_cooling_capacity` or None if not set
        """
        return self._data["Speed 10 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_10_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_10_reference_unit_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Total cooling capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_gross_rated_total_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_gross_rated_total_cooling_capacity`')
        self._data["Speed 10 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_10_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_10_reference_unit_gross_rated_sensible_heat_ratio

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Speed 10 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_10_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_10_reference_unit_gross_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Gross Rated Sensible Heat Ratio`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'Maximum': u'1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_gross_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_gross_rated_sensible_heat_ratio`')
        self._data["Speed 10 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_10_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_10_reference_unit_gross_rated_cooling_cop

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_cooling_cop` or None if not set
        """
        return self._data["Speed 10 Reference Unit Gross Rated Cooling COP"]

    @speed_10_reference_unit_gross_rated_cooling_cop.setter
    def speed_10_reference_unit_gross_rated_cooling_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Gross Rated Cooling COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_gross_rated_cooling_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_gross_rated_cooling_cop`')
        self._data["Speed 10 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_10_reference_unit_rated_air_flow_rate(self):
        """Get speed_10_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_10_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 10 Reference Unit Rated Air Flow Rate"]

    @speed_10_reference_unit_rated_air_flow_rate.setter
    def speed_10_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_rated_air_flow_rate`')
        self._data["Speed 10 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_10_reference_unit_rated_water_flow_rate(self):
        """Get speed_10_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_10_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 10 Reference Unit Rated Water Flow Rate"]

    @speed_10_reference_unit_rated_water_flow_rate.setter
    def speed_10_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_rated_water_flow_rate`')
        self._data["Speed 10 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_10_total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get speed_10_total_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_10_total_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 10 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_10_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_10_total_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Total Cooling Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_total_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_total_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_total_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Speed 10 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 10 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 10 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_10_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 10 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_10_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_10_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 10 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_10_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_10_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_10_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 10 Waste Heat Function of Temperature Curve Name"]

    @speed_10_waste_heat_function_of_temperature_curve_name.setter
    def speed_10_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt', u'wb = entering wet-bulb temperature (C)', u'ewt = water entering temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 10 Waste Heat Function of Temperature Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilHeatingWaterToAirHeatPumpEquationFit(object):
    """ Corresponds to IDD object `Coil:Heating:WaterToAirHeatPump:EquationFit`
        Direct expansion (DX) heating coil for water-to-air heat pump (includes electric
        compressor), single-speed, equation-fit model. Equation-fit model uses normalized
        curves to describe the heat pump performance.
    
    """
    internal_name = "Coil:Heating:WaterToAirHeatPump:EquationFit"
    field_count = 19
    required_fields = ["Name", "Water Inlet Node Name", "Water Outlet Node Name", "Air Inlet Node Name", "Air Outlet Node Name", "Rated Air Flow Rate", "Rated Water Flow Rate", "Gross Rated Heating Capacity", "Gross Rated Heating COP", "Heating Capacity Coefficient 1", "Heating Capacity Coefficient 2", "Heating Capacity Coefficient 3", "Heating Capacity Coefficient 4", "Heating Capacity Coefficient 5", "Heating Power Consumption Coefficient 1", "Heating Power Consumption Coefficient 2", "Heating Power Consumption Coefficient 3", "Heating Power Consumption Coefficient 4", "Heating Power Consumption Coefficient 5"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Heating:WaterToAirHeatPump:EquationFit`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Water Inlet Node Name"] = None
        self._data["Water Outlet Node Name"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Rated Air Flow Rate"] = None
        self._data["Rated Water Flow Rate"] = None
        self._data["Gross Rated Heating Capacity"] = None
        self._data["Gross Rated Heating COP"] = None
        self._data["Heating Capacity Coefficient 1"] = None
        self._data["Heating Capacity Coefficient 2"] = None
        self._data["Heating Capacity Coefficient 3"] = None
        self._data["Heating Capacity Coefficient 4"] = None
        self._data["Heating Capacity Coefficient 5"] = None
        self._data["Heating Power Consumption Coefficient 1"] = None
        self._data["Heating Power Consumption Coefficient 2"] = None
        self._data["Heating Power Consumption Coefficient 3"] = None
        self._data["Heating Power Consumption Coefficient 4"] = None
        self._data["Heating Power Consumption Coefficient 5"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_inlet_node_name = None
        else:
            self.water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_outlet_node_name = None
        else:
            self.water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_air_flow_rate = None
        else:
            self.rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_water_flow_rate = None
        else:
            self.rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_heating_capacity = None
        else:
            self.gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.gross_rated_heating_cop = None
        else:
            self.gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_coefficient_1 = None
        else:
            self.heating_capacity_coefficient_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_coefficient_2 = None
        else:
            self.heating_capacity_coefficient_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_coefficient_3 = None
        else:
            self.heating_capacity_coefficient_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_coefficient_4 = None
        else:
            self.heating_capacity_coefficient_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_coefficient_5 = None
        else:
            self.heating_capacity_coefficient_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_power_consumption_coefficient_1 = None
        else:
            self.heating_power_consumption_coefficient_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_power_consumption_coefficient_2 = None
        else:
            self.heating_power_consumption_coefficient_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_power_consumption_coefficient_3 = None
        else:
            self.heating_power_consumption_coefficient_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_power_consumption_coefficient_4 = None
        else:
            self.heating_power_consumption_coefficient_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_power_consumption_coefficient_5 = None
        else:
            self.heating_power_consumption_coefficient_5 = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'HeatingCoilsWaterToAirHP', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name

        Returns:
            str: the value of `water_inlet_node_name` or None if not set
        """
        return self._data["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_inlet_node_name`')
        self._data["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name

        Returns:
            str: the value of `water_outlet_node_name` or None if not set
        """
        return self._data["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_outlet_node_name`')
        self._data["Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def rated_air_flow_rate(self):
        """Get rated_air_flow_rate

        Returns:
            float: the value of `rated_air_flow_rate` or None if not set
        """
        return self._data["Rated Air Flow Rate"]

    @rated_air_flow_rate.setter
    def rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Air Flow Rate`
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_air_flow_rate`')
        self._data["Rated Air Flow Rate"] = value

    @property
    def rated_water_flow_rate(self):
        """Get rated_water_flow_rate

        Returns:
            float: the value of `rated_water_flow_rate` or None if not set
        """
        return self._data["Rated Water Flow Rate"]

    @rated_water_flow_rate.setter
    def rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Water Flow Rate`
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Water Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_water_flow_rate`')
        self._data["Rated Water Flow Rate"] = value

    @property
    def gross_rated_heating_capacity(self):
        """Get gross_rated_heating_capacity

        Returns:
            float: the value of `gross_rated_heating_capacity` or None if not set
        """
        return self._data["Gross Rated Heating Capacity"]

    @gross_rated_heating_capacity.setter
    def gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'autosizable': u'', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Gross Rated Heating Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_heating_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_heating_capacity`')
        self._data["Gross Rated Heating Capacity"] = value

    @property
    def gross_rated_heating_cop(self):
        """Get gross_rated_heating_cop

        Returns:
            float: the value of `gross_rated_heating_cop` or None if not set
        """
        return self._data["Gross Rated Heating COP"]

    @gross_rated_heating_cop.setter
    def gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Gross Rated Heating COP`
        
        {u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Gross Rated Heating COP`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `gross_rated_heating_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `gross_rated_heating_cop`')
        self._data["Gross Rated Heating COP"] = value

    @property
    def heating_capacity_coefficient_1(self):
        """Get heating_capacity_coefficient_1

        Returns:
            float: the value of `heating_capacity_coefficient_1` or None if not set
        """
        return self._data["Heating Capacity Coefficient 1"]

    @heating_capacity_coefficient_1.setter
    def heating_capacity_coefficient_1(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Coefficient 1`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Heating Capacity Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_capacity_coefficient_1`'.format(value))
        self._data["Heating Capacity Coefficient 1"] = value

    @property
    def heating_capacity_coefficient_2(self):
        """Get heating_capacity_coefficient_2

        Returns:
            float: the value of `heating_capacity_coefficient_2` or None if not set
        """
        return self._data["Heating Capacity Coefficient 2"]

    @heating_capacity_coefficient_2.setter
    def heating_capacity_coefficient_2(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Coefficient 2`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Heating Capacity Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_capacity_coefficient_2`'.format(value))
        self._data["Heating Capacity Coefficient 2"] = value

    @property
    def heating_capacity_coefficient_3(self):
        """Get heating_capacity_coefficient_3

        Returns:
            float: the value of `heating_capacity_coefficient_3` or None if not set
        """
        return self._data["Heating Capacity Coefficient 3"]

    @heating_capacity_coefficient_3.setter
    def heating_capacity_coefficient_3(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Coefficient 3`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Heating Capacity Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_capacity_coefficient_3`'.format(value))
        self._data["Heating Capacity Coefficient 3"] = value

    @property
    def heating_capacity_coefficient_4(self):
        """Get heating_capacity_coefficient_4

        Returns:
            float: the value of `heating_capacity_coefficient_4` or None if not set
        """
        return self._data["Heating Capacity Coefficient 4"]

    @heating_capacity_coefficient_4.setter
    def heating_capacity_coefficient_4(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Coefficient 4`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Heating Capacity Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_capacity_coefficient_4`'.format(value))
        self._data["Heating Capacity Coefficient 4"] = value

    @property
    def heating_capacity_coefficient_5(self):
        """Get heating_capacity_coefficient_5

        Returns:
            float: the value of `heating_capacity_coefficient_5` or None if not set
        """
        return self._data["Heating Capacity Coefficient 5"]

    @heating_capacity_coefficient_5.setter
    def heating_capacity_coefficient_5(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Coefficient 5`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Heating Capacity Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_capacity_coefficient_5`'.format(value))
        self._data["Heating Capacity Coefficient 5"] = value

    @property
    def heating_power_consumption_coefficient_1(self):
        """Get heating_power_consumption_coefficient_1

        Returns:
            float: the value of `heating_power_consumption_coefficient_1` or None if not set
        """
        return self._data["Heating Power Consumption Coefficient 1"]

    @heating_power_consumption_coefficient_1.setter
    def heating_power_consumption_coefficient_1(self, value=None):
        """  Corresponds to IDD Field `Heating Power Consumption Coefficient 1`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Heating Power Consumption Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_power_consumption_coefficient_1`'.format(value))
        self._data["Heating Power Consumption Coefficient 1"] = value

    @property
    def heating_power_consumption_coefficient_2(self):
        """Get heating_power_consumption_coefficient_2

        Returns:
            float: the value of `heating_power_consumption_coefficient_2` or None if not set
        """
        return self._data["Heating Power Consumption Coefficient 2"]

    @heating_power_consumption_coefficient_2.setter
    def heating_power_consumption_coefficient_2(self, value=None):
        """  Corresponds to IDD Field `Heating Power Consumption Coefficient 2`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Heating Power Consumption Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_power_consumption_coefficient_2`'.format(value))
        self._data["Heating Power Consumption Coefficient 2"] = value

    @property
    def heating_power_consumption_coefficient_3(self):
        """Get heating_power_consumption_coefficient_3

        Returns:
            float: the value of `heating_power_consumption_coefficient_3` or None if not set
        """
        return self._data["Heating Power Consumption Coefficient 3"]

    @heating_power_consumption_coefficient_3.setter
    def heating_power_consumption_coefficient_3(self, value=None):
        """  Corresponds to IDD Field `Heating Power Consumption Coefficient 3`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Heating Power Consumption Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_power_consumption_coefficient_3`'.format(value))
        self._data["Heating Power Consumption Coefficient 3"] = value

    @property
    def heating_power_consumption_coefficient_4(self):
        """Get heating_power_consumption_coefficient_4

        Returns:
            float: the value of `heating_power_consumption_coefficient_4` or None if not set
        """
        return self._data["Heating Power Consumption Coefficient 4"]

    @heating_power_consumption_coefficient_4.setter
    def heating_power_consumption_coefficient_4(self, value=None):
        """  Corresponds to IDD Field `Heating Power Consumption Coefficient 4`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Heating Power Consumption Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_power_consumption_coefficient_4`'.format(value))
        self._data["Heating Power Consumption Coefficient 4"] = value

    @property
    def heating_power_consumption_coefficient_5(self):
        """Get heating_power_consumption_coefficient_5

        Returns:
            float: the value of `heating_power_consumption_coefficient_5` or None if not set
        """
        return self._data["Heating Power Consumption Coefficient 5"]

    @heating_power_consumption_coefficient_5.setter
    def heating_power_consumption_coefficient_5(self, value=None):
        """  Corresponds to IDD Field `Heating Power Consumption Coefficient 5`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Heating Power Consumption Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `heating_power_consumption_coefficient_5`'.format(value))
        self._data["Heating Power Consumption Coefficient 5"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(object):
    """ Corresponds to IDD object `Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit`
        Direct expansion (DX) heating coil for water-to-air heat pump (includes electric
        compressor), variable-speed, equation-fit model. Equation-fit model uses normalized
        curves to describe the heat pump performance. Requires two to ten sets of performance
        data and will interpolate between speeds.
    
    """
    internal_name = "Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit"
    field_count = 131
    required_fields = ["Name", "Water-to-Refrigerant HX Water Inlet Node Name", "Water-to-Refrigerant HX Water Outlet Node Name", "Indoor Air Inlet Node Name", "Indoor Air Outlet Node Name", "Number of Speeds", "Nominal Speed Level", "Rated Heating Capacity At Selected Nominal Speed Level", "Rated Air Flow Rate At Selected Nominal Speed Level", "Rated Water Flow Rate At Selected Nominal Speed Level", "Energy Part Load Fraction Curve Name", "Speed 1 Reference Unit Gross Rated Heating Capacity", "Speed 1 Reference Unit Gross Rated Heating COP", "Speed 1 Reference Unit Rated Air Flow", "Speed 1 Reference Unit Rated Water Flow Rate", "Speed 1 Heating Capacity Function of Temperature Curve Name", "Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name", "Speed 1 Heating Capacity Function of Water Flow Fraction Curve Name", "Speed 1 Energy Input Ratio Function of Temperature Curve Name", "Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name", "Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name", "Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions", "Speed 1 Waste Heat Function of Temperature Curve Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Water-to-Refrigerant HX Water Inlet Node Name"] = None
        self._data["Water-to-Refrigerant HX Water Outlet Node Name"] = None
        self._data["Indoor Air Inlet Node Name"] = None
        self._data["Indoor Air Outlet Node Name"] = None
        self._data["Number of Speeds"] = None
        self._data["Nominal Speed Level"] = None
        self._data["Rated Heating Capacity At Selected Nominal Speed Level"] = None
        self._data["Rated Air Flow Rate At Selected Nominal Speed Level"] = None
        self._data["Rated Water Flow Rate At Selected Nominal Speed Level"] = None
        self._data["Energy Part Load Fraction Curve Name"] = None
        self._data["Speed 1 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 1 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 1 Reference Unit Rated Air Flow"] = None
        self._data["Speed 1 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 1 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 1 Heating Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 1 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 2 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 2 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 2 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 2 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 2 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 2 Heating Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 2 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 3 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 3 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 3 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 3 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 3 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 3 Heating Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 3 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 4 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 4 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 4 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 4 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 4 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 4 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 4 Heating Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 4 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 5 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 5 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 5 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 5 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 5 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 5 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 5 Heating Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 5 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 5 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 6 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 6 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 6 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 6 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 6 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 6 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 6 Heating Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 6 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 6 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 7 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 7 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 7 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 7 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 7 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 7 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 7 Heating Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 7 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 7 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 8 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 8 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 8 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 8 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 8 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 8 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 8 Heating Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 8 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 8 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 9 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 9 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 9 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 9 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 9 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 9 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 9 Heating Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 9 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 9 Waste Heat Function of Temperature Curve Name"] = None
        self._data["Speed 10 Reference Unit Gross Rated Heating Capacity"] = None
        self._data["Speed 10 Reference Unit Gross Rated Heating COP"] = None
        self._data["Speed 10 Reference Unit Rated Air Flow Rate"] = None
        self._data["Speed 10 Reference Unit Rated Water Flow Rate"] = None
        self._data["Speed 10 Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Speed 10 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 10 Heating Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 10 Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = None
        self._data["Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = None
        self._data["Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = None
        self._data["Speed 10 Waste Heat Function of Temperature Curve Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.watertorefrigerant_hx_water_inlet_node_name = None
        else:
            self.watertorefrigerant_hx_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.watertorefrigerant_hx_water_outlet_node_name = None
        else:
            self.watertorefrigerant_hx_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.indoor_air_inlet_node_name = None
        else:
            self.indoor_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.indoor_air_outlet_node_name = None
        else:
            self.indoor_air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.number_of_speeds = None
        else:
            self.number_of_speeds = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_speed_level = None
        else:
            self.nominal_speed_level = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_heating_capacity_at_selected_nominal_speed_level = None
        else:
            self.rated_heating_capacity_at_selected_nominal_speed_level = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_air_flow_rate_at_selected_nominal_speed_level = None
        else:
            self.rated_air_flow_rate_at_selected_nominal_speed_level = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_water_flow_rate_at_selected_nominal_speed_level = None
        else:
            self.rated_water_flow_rate_at_selected_nominal_speed_level = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.energy_part_load_fraction_curve_name = None
        else:
            self.energy_part_load_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_1_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_1_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_rated_air_flow = None
        else:
            self.speed_1_reference_unit_rated_air_flow = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_1_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_1_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_heating_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_1_heating_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_1_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_1_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_1_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_2_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_2_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_2_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_2_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_2_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_heating_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_2_heating_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_2_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_2_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_2_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_3_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_3_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_3_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_3_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_3_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_heating_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_3_heating_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_3_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_3_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_3_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_4_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_4_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_4_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_4_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_4_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_heating_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_4_heating_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_4_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_4_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_4_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_5_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_5_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_5_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_5_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_5_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_heating_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_5_heating_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_5_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_5_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_5_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_6_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_6_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_6_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_6_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_6_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_heating_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_6_heating_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_6_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_6_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_6_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_7_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_7_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_7_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_7_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_7_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_heating_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_7_heating_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_7_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_7_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_7_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_8_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_8_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_8_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_8_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_8_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_heating_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_8_heating_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_8_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_8_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_8_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_9_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_9_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_9_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_9_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_9_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_heating_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_9_heating_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_9_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_9_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_9_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_gross_rated_heating_capacity = None
        else:
            self.speed_10_reference_unit_gross_rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_gross_rated_heating_cop = None
        else:
            self.speed_10_reference_unit_gross_rated_heating_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_rated_air_flow_rate = None
        else:
            self.speed_10_reference_unit_rated_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_rated_water_flow_rate = None
        else:
            self.speed_10_reference_unit_rated_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_heating_capacity_function_of_temperature_curve_name = None
        else:
            self.speed_10_heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_heating_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_10_heating_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.speed_10_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name = None
        else:
            self.speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name = None
        else:
            self.speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = None
        else:
            self.speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.speed_10_waste_heat_function_of_temperature_curve_name = None
        else:
            self.speed_10_waste_heat_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'HeatingCoilsWaterToAirVSHP', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def watertorefrigerant_hx_water_inlet_node_name(self):
        """Get watertorefrigerant_hx_water_inlet_node_name

        Returns:
            str: the value of `watertorefrigerant_hx_water_inlet_node_name` or None if not set
        """
        return self._data["Water-to-Refrigerant HX Water Inlet Node Name"]

    @watertorefrigerant_hx_water_inlet_node_name.setter
    def watertorefrigerant_hx_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water-to-Refrigerant HX Water Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water-to-Refrigerant HX Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `watertorefrigerant_hx_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `watertorefrigerant_hx_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `watertorefrigerant_hx_water_inlet_node_name`')
        self._data["Water-to-Refrigerant HX Water Inlet Node Name"] = value

    @property
    def watertorefrigerant_hx_water_outlet_node_name(self):
        """Get watertorefrigerant_hx_water_outlet_node_name

        Returns:
            str: the value of `watertorefrigerant_hx_water_outlet_node_name` or None if not set
        """
        return self._data["Water-to-Refrigerant HX Water Outlet Node Name"]

    @watertorefrigerant_hx_water_outlet_node_name.setter
    def watertorefrigerant_hx_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water-to-Refrigerant HX Water Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water-to-Refrigerant HX Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `watertorefrigerant_hx_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `watertorefrigerant_hx_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `watertorefrigerant_hx_water_outlet_node_name`')
        self._data["Water-to-Refrigerant HX Water Outlet Node Name"] = value

    @property
    def indoor_air_inlet_node_name(self):
        """Get indoor_air_inlet_node_name

        Returns:
            str: the value of `indoor_air_inlet_node_name` or None if not set
        """
        return self._data["Indoor Air Inlet Node Name"]

    @indoor_air_inlet_node_name.setter
    def indoor_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Indoor Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Indoor Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `indoor_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `indoor_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `indoor_air_inlet_node_name`')
        self._data["Indoor Air Inlet Node Name"] = value

    @property
    def indoor_air_outlet_node_name(self):
        """Get indoor_air_outlet_node_name

        Returns:
            str: the value of `indoor_air_outlet_node_name` or None if not set
        """
        return self._data["Indoor Air Outlet Node Name"]

    @indoor_air_outlet_node_name.setter
    def indoor_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Indoor Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Indoor Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `indoor_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `indoor_air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `indoor_air_outlet_node_name`')
        self._data["Indoor Air Outlet Node Name"] = value

    @property
    def number_of_speeds(self):
        """Get number_of_speeds

        Returns:
            int: the value of `number_of_speeds` or None if not set
        """
        return self._data["Number of Speeds"]

    @number_of_speeds.setter
    def number_of_speeds(self, value=2 ):
        """  Corresponds to IDD Field `Number of Speeds`
        
        {'pytype': 'int', u'default': '2', u'maximum': '10', u'required-field': True, u'minimum': '1', u'units': u'dimensionless', u'type': u'integer'}

        Args:
            value (int): value for IDD Field `Number of Speeds`
                Units: dimensionless
                Default value: 2
                value >= 1
                value <= 10
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `number_of_speeds`'.format(value))
            if value < 1:
                raise ValueError('value need to be greater or equal 1 '
                                 'for field `number_of_speeds`')
            if value > 10:
                raise ValueError('value need to be smaller 10 '
                                 'for field `number_of_speeds`')
        self._data["Number of Speeds"] = value

    @property
    def nominal_speed_level(self):
        """Get nominal_speed_level

        Returns:
            int: the value of `nominal_speed_level` or None if not set
        """
        return self._data["Nominal Speed Level"]

    @nominal_speed_level.setter
    def nominal_speed_level(self, value=2 ):
        """  Corresponds to IDD Field `Nominal Speed Level`
        must be lower than or equal to the highest speed number
        
        {'pytype': 'int', u'default': '2', u'required-field': True, u'note': [u'must be lower than or equal to the highest speed number'], u'units': u'dimensionless', u'type': u'integer'}

        Args:
            value (int): value for IDD Field `Nominal Speed Level`
                Units: dimensionless
                Default value: 2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = int(value)
            except ValueError:
                raise ValueError('value {} need to be of type int '
                                 'for field `nominal_speed_level`'.format(value))
        self._data["Nominal Speed Level"] = value

    @property
    def rated_heating_capacity_at_selected_nominal_speed_level(self):
        """Get rated_heating_capacity_at_selected_nominal_speed_level

        Returns:
            float: the value of `rated_heating_capacity_at_selected_nominal_speed_level` or None if not set
        """
        return self._data["Rated Heating Capacity At Selected Nominal Speed Level"]

    @rated_heating_capacity_at_selected_nominal_speed_level.setter
    def rated_heating_capacity_at_selected_nominal_speed_level(self, value="autosize" ):
        """  Corresponds to IDD Field `Rated Heating Capacity At Selected Nominal Speed Level`
        
        {'pytype': 'float', u'default': '"autosize"', u'required-field': True, u'autosizable': u'', u'units': u'w', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Heating Capacity At Selected Nominal Speed Level`
                Units: w
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_heating_capacity_at_selected_nominal_speed_level`'.format(value))
        self._data["Rated Heating Capacity At Selected Nominal Speed Level"] = value

    @property
    def rated_air_flow_rate_at_selected_nominal_speed_level(self):
        """Get rated_air_flow_rate_at_selected_nominal_speed_level

        Returns:
            float: the value of `rated_air_flow_rate_at_selected_nominal_speed_level` or None if not set
        """
        return self._data["Rated Air Flow Rate At Selected Nominal Speed Level"]

    @rated_air_flow_rate_at_selected_nominal_speed_level.setter
    def rated_air_flow_rate_at_selected_nominal_speed_level(self, value="autosize" ):
        """  Corresponds to IDD Field `Rated Air Flow Rate At Selected Nominal Speed Level`
        
        {'pytype': 'float', u'default': '"autosize"', u'required-field': True, u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Air Flow Rate At Selected Nominal Speed Level`
                Units: m3/s
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_air_flow_rate_at_selected_nominal_speed_level`'.format(value))
        self._data["Rated Air Flow Rate At Selected Nominal Speed Level"] = value

    @property
    def rated_water_flow_rate_at_selected_nominal_speed_level(self):
        """Get rated_water_flow_rate_at_selected_nominal_speed_level

        Returns:
            float: the value of `rated_water_flow_rate_at_selected_nominal_speed_level` or None if not set
        """
        return self._data["Rated Water Flow Rate At Selected Nominal Speed Level"]

    @rated_water_flow_rate_at_selected_nominal_speed_level.setter
    def rated_water_flow_rate_at_selected_nominal_speed_level(self, value="autosize" ):
        """  Corresponds to IDD Field `Rated Water Flow Rate At Selected Nominal Speed Level`
        
        {'pytype': 'float', u'default': '"autosize"', u'required-field': True, u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Water Flow Rate At Selected Nominal Speed Level`
                Units: m3/s
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_water_flow_rate_at_selected_nominal_speed_level`'.format(value))
        self._data["Rated Water Flow Rate At Selected Nominal Speed Level"] = value

    @property
    def energy_part_load_fraction_curve_name(self):
        """Get energy_part_load_fraction_curve_name

        Returns:
            str: the value of `energy_part_load_fraction_curve_name` or None if not set
        """
        return self._data["Energy Part Load Fraction Curve Name"]

    @energy_part_load_fraction_curve_name.setter
    def energy_part_load_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Energy Part Load Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (heating load/steady state capacity)
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'PLR = part load ratio (heating load/steady state capacity)'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Energy Part Load Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `energy_part_load_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `energy_part_load_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `energy_part_load_fraction_curve_name`')
        self._data["Energy Part Load Fraction Curve Name"] = value

    @property
    def speed_1_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_1_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 1 Reference Unit Gross Rated Heating Capacity"]

    @speed_1_reference_unit_gross_rated_heating_capacity.setter
    def speed_1_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {'pytype': 'float', u'required-field': True, u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'minimum': '0.0', u'units': u'w', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 1 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_1_reference_unit_gross_rated_heating_cop(self):
        """Get speed_1_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 1 Reference Unit Gross Rated Heating COP"]

    @speed_1_reference_unit_gross_rated_heating_cop.setter
    def speed_1_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 1 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_1_reference_unit_rated_air_flow(self):
        """Get speed_1_reference_unit_rated_air_flow

        Returns:
            float: the value of `speed_1_reference_unit_rated_air_flow` or None if not set
        """
        return self._data["Speed 1 Reference Unit Rated Air Flow"]

    @speed_1_reference_unit_rated_air_flow.setter
    def speed_1_reference_unit_rated_air_flow(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Rated Air Flow`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Rated Air Flow`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_rated_air_flow`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_rated_air_flow`')
        self._data["Speed 1 Reference Unit Rated Air Flow"] = value

    @property
    def speed_1_reference_unit_rated_water_flow_rate(self):
        """Get speed_1_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_1_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 1 Reference Unit Rated Water Flow Rate"]

    @speed_1_reference_unit_rated_water_flow_rate.setter
    def speed_1_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_rated_water_flow_rate`')
        self._data["Speed 1 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_1_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_1_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_1_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 1 Heating Capacity Function of Temperature Curve Name"]

    @speed_1_heating_capacity_function_of_temperature_curve_name.setter
    def speed_1_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 1 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_1_heating_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_1_heating_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_1_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 1 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_1_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_1_heating_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Heating Capacity Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_heating_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_heating_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_heating_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 1 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_1_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_1_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_1_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_1_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 1 Waste Heat Function of Temperature Curve Name"]

    @speed_1_waste_heat_function_of_temperature_curve_name.setter
    def speed_1_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 1 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 1 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_1_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_1_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_1_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 1 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_2_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_2_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 2 Reference Unit Gross Rated Heating Capacity"]

    @speed_2_reference_unit_gross_rated_heating_capacity.setter
    def speed_2_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 2 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_2_reference_unit_gross_rated_heating_cop(self):
        """Get speed_2_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 2 Reference Unit Gross Rated Heating COP"]

    @speed_2_reference_unit_gross_rated_heating_cop.setter
    def speed_2_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 2 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_2_reference_unit_rated_air_flow_rate(self):
        """Get speed_2_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_2_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 2 Reference Unit Rated Air Flow Rate"]

    @speed_2_reference_unit_rated_air_flow_rate.setter
    def speed_2_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_rated_air_flow_rate`')
        self._data["Speed 2 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_2_reference_unit_rated_water_flow_rate(self):
        """Get speed_2_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_2_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 2 Reference Unit Rated Water Flow Rate"]

    @speed_2_reference_unit_rated_water_flow_rate.setter
    def speed_2_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_rated_water_flow_rate`')
        self._data["Speed 2 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_2_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_2_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_2_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 2 Heating Capacity Function of Temperature Curve Name"]

    @speed_2_heating_capacity_function_of_temperature_curve_name.setter
    def speed_2_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 2 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_2_heating_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_2_heating_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_2_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 2 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_2_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_2_heating_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Heating Capacity Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_heating_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_heating_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_heating_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 2 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_2_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_2_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_2_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_2_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 2 Waste Heat Function of Temperature Curve Name"]

    @speed_2_waste_heat_function_of_temperature_curve_name.setter
    def speed_2_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 2 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 2 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_2_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_2_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_2_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 2 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_3_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_3_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 3 Reference Unit Gross Rated Heating Capacity"]

    @speed_3_reference_unit_gross_rated_heating_capacity.setter
    def speed_3_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 3 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_3_reference_unit_gross_rated_heating_cop(self):
        """Get speed_3_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 3 Reference Unit Gross Rated Heating COP"]

    @speed_3_reference_unit_gross_rated_heating_cop.setter
    def speed_3_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 3 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_3_reference_unit_rated_air_flow_rate(self):
        """Get speed_3_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_3_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 3 Reference Unit Rated Air Flow Rate"]

    @speed_3_reference_unit_rated_air_flow_rate.setter
    def speed_3_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_rated_air_flow_rate`')
        self._data["Speed 3 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_3_reference_unit_rated_water_flow_rate(self):
        """Get speed_3_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_3_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 3 Reference Unit Rated Water Flow Rate"]

    @speed_3_reference_unit_rated_water_flow_rate.setter
    def speed_3_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_rated_water_flow_rate`')
        self._data["Speed 3 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_3_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_3_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_3_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 3 Heating Capacity Function of Temperature Curve Name"]

    @speed_3_heating_capacity_function_of_temperature_curve_name.setter
    def speed_3_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Heating Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 3 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_3_heating_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_3_heating_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_3_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 3 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_3_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_3_heating_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Heating Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_heating_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_heating_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_heating_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 3 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_3_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_3_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_3_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_3_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 3 Waste Heat Function of Temperature Curve Name"]

    @speed_3_waste_heat_function_of_temperature_curve_name.setter
    def speed_3_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 3 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 3 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_3_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_3_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_3_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 3 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_4_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_4_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 4 Reference Unit Gross Rated Heating Capacity"]

    @speed_4_reference_unit_gross_rated_heating_capacity.setter
    def speed_4_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 4 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_4_reference_unit_gross_rated_heating_cop(self):
        """Get speed_4_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 4 Reference Unit Gross Rated Heating COP"]

    @speed_4_reference_unit_gross_rated_heating_cop.setter
    def speed_4_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 4 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_4_reference_unit_rated_air_flow_rate(self):
        """Get speed_4_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_4_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 4 Reference Unit Rated Air Flow Rate"]

    @speed_4_reference_unit_rated_air_flow_rate.setter
    def speed_4_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_rated_air_flow_rate`')
        self._data["Speed 4 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_4_reference_unit_rated_water_flow_rate(self):
        """Get speed_4_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_4_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 4 Reference Unit Rated Water Flow Rate"]

    @speed_4_reference_unit_rated_water_flow_rate.setter
    def speed_4_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_rated_water_flow_rate`')
        self._data["Speed 4 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_4_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_4_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_4_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 4 Heating Capacity Function of Temperature Curve Name"]

    @speed_4_heating_capacity_function_of_temperature_curve_name.setter
    def speed_4_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Heating Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 4 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 4 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 4 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_4_heating_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_4_heating_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_4_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 4 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_4_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_4_heating_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Heating Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_heating_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_heating_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_heating_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 4 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_4_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_4_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_4_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_4_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 4 Waste Heat Function of Temperature Curve Name"]

    @speed_4_waste_heat_function_of_temperature_curve_name.setter
    def speed_4_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 4 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 4 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_4_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_4_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_4_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 4 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_5_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_5_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 5 Reference Unit Gross Rated Heating Capacity"]

    @speed_5_reference_unit_gross_rated_heating_capacity.setter
    def speed_5_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 5 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_5_reference_unit_gross_rated_heating_cop(self):
        """Get speed_5_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 5 Reference Unit Gross Rated Heating COP"]

    @speed_5_reference_unit_gross_rated_heating_cop.setter
    def speed_5_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 5 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_5_reference_unit_rated_air_flow_rate(self):
        """Get speed_5_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_5_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 5 Reference Unit Rated Air Flow Rate"]

    @speed_5_reference_unit_rated_air_flow_rate.setter
    def speed_5_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_rated_air_flow_rate`')
        self._data["Speed 5 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_5_reference_unit_rated_water_flow_rate(self):
        """Get speed_5_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_5_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 5 Reference Unit Rated Water Flow Rate"]

    @speed_5_reference_unit_rated_water_flow_rate.setter
    def speed_5_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_rated_water_flow_rate`')
        self._data["Speed 5 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_5_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_5_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_5_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 5 Heating Capacity Function of Temperature Curve Name"]

    @speed_5_heating_capacity_function_of_temperature_curve_name.setter
    def speed_5_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Heating Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 5 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 5 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 5 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_5_heating_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_5_heating_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_5_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 5 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_5_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_5_heating_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Heating Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_heating_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_heating_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_heating_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 5 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_5_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 5 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_5_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_5_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 5 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_5_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_5_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_5_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 5 Waste Heat Function of Temperature Curve Name"]

    @speed_5_waste_heat_function_of_temperature_curve_name.setter
    def speed_5_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 5 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 5 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_5_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_5_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_5_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 5 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_6_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_6_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 6 Reference Unit Gross Rated Heating Capacity"]

    @speed_6_reference_unit_gross_rated_heating_capacity.setter
    def speed_6_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 6 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_6_reference_unit_gross_rated_heating_cop(self):
        """Get speed_6_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 6 Reference Unit Gross Rated Heating COP"]

    @speed_6_reference_unit_gross_rated_heating_cop.setter
    def speed_6_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 6 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_6_reference_unit_rated_air_flow_rate(self):
        """Get speed_6_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_6_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 6 Reference Unit Rated Air Flow Rate"]

    @speed_6_reference_unit_rated_air_flow_rate.setter
    def speed_6_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_rated_air_flow_rate`')
        self._data["Speed 6 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_6_reference_unit_rated_water_flow_rate(self):
        """Get speed_6_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_6_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 6 Reference Unit Rated Water Flow Rate"]

    @speed_6_reference_unit_rated_water_flow_rate.setter
    def speed_6_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_rated_water_flow_rate`')
        self._data["Speed 6 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_6_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_6_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_6_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 6 Heating Capacity Function of Temperature Curve Name"]

    @speed_6_heating_capacity_function_of_temperature_curve_name.setter
    def speed_6_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Heating Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 6 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 6 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 6 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_6_heating_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_6_heating_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_6_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 6 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_6_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_6_heating_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Heating Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_heating_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_heating_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_heating_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 6 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_6_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 6 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_6_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_6_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 6 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_6_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_6_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_6_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 6 Waste Heat Function of Temperature Curve Name"]

    @speed_6_waste_heat_function_of_temperature_curve_name.setter
    def speed_6_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 6 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 6 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_6_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_6_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_6_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 6 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_7_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_7_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 7 Reference Unit Gross Rated Heating Capacity"]

    @speed_7_reference_unit_gross_rated_heating_capacity.setter
    def speed_7_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 7 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_7_reference_unit_gross_rated_heating_cop(self):
        """Get speed_7_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 7 Reference Unit Gross Rated Heating COP"]

    @speed_7_reference_unit_gross_rated_heating_cop.setter
    def speed_7_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 7 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_7_reference_unit_rated_air_flow_rate(self):
        """Get speed_7_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_7_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 7 Reference Unit Rated Air Flow Rate"]

    @speed_7_reference_unit_rated_air_flow_rate.setter
    def speed_7_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_rated_air_flow_rate`')
        self._data["Speed 7 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_7_reference_unit_rated_water_flow_rate(self):
        """Get speed_7_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_7_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 7 Reference Unit Rated Water Flow Rate"]

    @speed_7_reference_unit_rated_water_flow_rate.setter
    def speed_7_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_rated_water_flow_rate`')
        self._data["Speed 7 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_7_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_7_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_7_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 7 Heating Capacity Function of Temperature Curve Name"]

    @speed_7_heating_capacity_function_of_temperature_curve_name.setter
    def speed_7_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Heating Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 7 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 7 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 7 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_7_heating_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_7_heating_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_7_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 7 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_7_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_7_heating_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Heating Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_heating_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_heating_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_heating_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 7 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_7_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 7 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_7_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_7_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 7 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_7_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_7_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_7_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 7 Waste Heat Function of Temperature Curve Name"]

    @speed_7_waste_heat_function_of_temperature_curve_name.setter
    def speed_7_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 7 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 7 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_7_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_7_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_7_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 7 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_8_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_8_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 8 Reference Unit Gross Rated Heating Capacity"]

    @speed_8_reference_unit_gross_rated_heating_capacity.setter
    def speed_8_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 8 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_8_reference_unit_gross_rated_heating_cop(self):
        """Get speed_8_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 8 Reference Unit Gross Rated Heating COP"]

    @speed_8_reference_unit_gross_rated_heating_cop.setter
    def speed_8_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 8 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_8_reference_unit_rated_air_flow_rate(self):
        """Get speed_8_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_8_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 8 Reference Unit Rated Air Flow Rate"]

    @speed_8_reference_unit_rated_air_flow_rate.setter
    def speed_8_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_rated_air_flow_rate`')
        self._data["Speed 8 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_8_reference_unit_rated_water_flow_rate(self):
        """Get speed_8_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_8_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 8 Reference Unit Rated Water Flow Rate"]

    @speed_8_reference_unit_rated_water_flow_rate.setter
    def speed_8_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_rated_water_flow_rate`')
        self._data["Speed 8 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_8_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_8_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_8_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 8 Heating Capacity Function of Temperature Curve Name"]

    @speed_8_heating_capacity_function_of_temperature_curve_name.setter
    def speed_8_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Heating Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 8 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 8 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 8 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_8_heating_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_8_heating_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_8_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 8 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_8_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_8_heating_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Heating Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_heating_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_heating_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_heating_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 8 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_8_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 8 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_8_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_8_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 8 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_8_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_8_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_8_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 8 Waste Heat Function of Temperature Curve Name"]

    @speed_8_waste_heat_function_of_temperature_curve_name.setter
    def speed_8_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 8 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 8 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_8_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_8_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_8_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 8 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_9_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_9_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 9 Reference Unit Gross Rated Heating Capacity"]

    @speed_9_reference_unit_gross_rated_heating_capacity.setter
    def speed_9_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 9 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_9_reference_unit_gross_rated_heating_cop(self):
        """Get speed_9_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 9 Reference Unit Gross Rated Heating COP"]

    @speed_9_reference_unit_gross_rated_heating_cop.setter
    def speed_9_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 9 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_9_reference_unit_rated_air_flow_rate(self):
        """Get speed_9_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_9_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 9 Reference Unit Rated Air Flow Rate"]

    @speed_9_reference_unit_rated_air_flow_rate.setter
    def speed_9_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_rated_air_flow_rate`')
        self._data["Speed 9 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_9_reference_unit_rated_water_flow_rate(self):
        """Get speed_9_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_9_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 9 Reference Unit Rated Water Flow Rate"]

    @speed_9_reference_unit_rated_water_flow_rate.setter
    def speed_9_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_rated_water_flow_rate`')
        self._data["Speed 9 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_9_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_9_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_9_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 9 Heating Capacity Function of Temperature Curve Name"]

    @speed_9_heating_capacity_function_of_temperature_curve_name.setter
    def speed_9_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Heating Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 9 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 9 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 9 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_9_heating_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_9_heating_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_9_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 9 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_9_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_9_heating_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Heating Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_heating_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_heating_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_heating_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 9 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_9_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 9 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_9_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_9_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 9 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_9_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_9_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_9_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 9 Waste Heat Function of Temperature Curve Name"]

    @speed_9_waste_heat_function_of_temperature_curve_name.setter
    def speed_9_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 9 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 9 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_9_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_9_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_9_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 9 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_10_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_10_reference_unit_gross_rated_heating_capacity

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_heating_capacity` or None if not set
        """
        return self._data["Speed 10 Reference Unit Gross Rated Heating Capacity"]

    @speed_10_reference_unit_gross_rated_heating_capacity.setter
    def speed_10_reference_unit_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        
        {u'note': [u'Heating capacity not accounting for the effect of supply air fan heat'], u'units': u'w', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Heating Capacity`
                Units: w
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_gross_rated_heating_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_gross_rated_heating_capacity`')
        self._data["Speed 10 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_10_reference_unit_gross_rated_heating_cop(self):
        """Get speed_10_reference_unit_gross_rated_heating_cop

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_heating_cop` or None if not set
        """
        return self._data["Speed 10 Reference Unit Gross Rated Heating COP"]

    @speed_10_reference_unit_gross_rated_heating_cop.setter
    def speed_10_reference_unit_gross_rated_heating_cop(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Gross Rated Heating COP`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_gross_rated_heating_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_gross_rated_heating_cop`')
        self._data["Speed 10 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_10_reference_unit_rated_air_flow_rate(self):
        """Get speed_10_reference_unit_rated_air_flow_rate

        Returns:
            float: the value of `speed_10_reference_unit_rated_air_flow_rate` or None if not set
        """
        return self._data["Speed 10 Reference Unit Rated Air Flow Rate"]

    @speed_10_reference_unit_rated_air_flow_rate.setter
    def speed_10_reference_unit_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Rated Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_rated_air_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_rated_air_flow_rate`')
        self._data["Speed 10 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_10_reference_unit_rated_water_flow_rate(self):
        """Get speed_10_reference_unit_rated_water_flow_rate

        Returns:
            float: the value of `speed_10_reference_unit_rated_water_flow_rate` or None if not set
        """
        return self._data["Speed 10 Reference Unit Rated Water Flow Rate"]

    @speed_10_reference_unit_rated_water_flow_rate.setter
    def speed_10_reference_unit_rated_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Rated Water Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_rated_water_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_rated_water_flow_rate`')
        self._data["Speed 10 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_10_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_10_heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_10_heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 10 Heating Capacity Function of Temperature Curve Name"]

    @speed_10_heating_capacity_function_of_temperature_curve_name.setter
    def speed_10_heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Heating Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_heating_capacity_function_of_temperature_curve_name`')
        self._data["Speed 10 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 10 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 10 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_10_heating_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get speed_10_heating_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_10_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 10 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_10_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_10_heating_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Heating Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_heating_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_heating_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_heating_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 10 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_10_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 10 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_10_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_10_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Speed 10 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name(self):
        """Get speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffa + c*ffa**2', u'cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3', u'ffa = Fraction of the full load Air Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name`')
        self._data["Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name(self):
        """Get speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow
        
        {u'note': [u'optional', u'Table:OneIndependentVariable object can also be used', u'quadratic curve = a + b*ffw + c*ffw**2', u'cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3', u'ffw = Fraction of the full load Water Flow'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name`')
        self._data["Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self):
        """Get speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions

        Returns:
            float: the value of `speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set
        """
        return self._data["Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
        
        {u'units': u'dimensionless', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions`')
        self._data["Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_10_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_10_waste_heat_function_of_temperature_curve_name

        Returns:
            str: the value of `speed_10_waste_heat_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Speed 10 Waste Heat Function of Temperature Curve Name"]

    @speed_10_waste_heat_function_of_temperature_curve_name.setter
    def speed_10_waste_heat_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Speed 10 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)
        
        {u'note': [u'optional', u'Table:TwoIndependentVariables object can also be used', u'curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt', u'db = entering air dry bulb temperature (C)', u'ewt = water entering temperature seen by the evaporator (C)'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Speed 10 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `speed_10_waste_heat_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `speed_10_waste_heat_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `speed_10_waste_heat_function_of_temperature_curve_name`')
        self._data["Speed 10 Waste Heat Function of Temperature Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilWaterHeatingAirToWaterHeatPump(object):
    """ Corresponds to IDD object `Coil:WaterHeating:AirToWaterHeatPump`
        Heat pump water heater (HPWH) heating coil, air-to-water direct-expansion (DX)
        system which includes a water heating coil, evaporator air coil, evaporator
        fan, electric compressor, and water pump. Part of a WaterHeater:HeatPump system.
    
    """
    internal_name = "Coil:WaterHeating:AirToWaterHeatPump"
    field_count = 28
    required_fields = ["Name", "Rated Heating Capacity", "Evaporator Air Inlet Node Name", "Evaporator Air Outlet Node Name", "Condenser Water Inlet Node Name", "Condenser Water Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:WaterHeating:AirToWaterHeatPump`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Rated Heating Capacity"] = None
        self._data["Rated COP"] = None
        self._data["Rated Sensible Heat Ratio"] = None
        self._data["Rated Evaporator Inlet Air Dry-Bulb Temperature"] = None
        self._data["Rated Evaporator Inlet Air Wet-Bulb Temperature"] = None
        self._data["Rated Condenser Inlet Water Temperature"] = None
        self._data["Rated Evaporator Air Flow Rate"] = None
        self._data["Rated Condenser Water Flow Rate"] = None
        self._data["Evaporator Fan Power Included in Rated COP"] = None
        self._data["Condenser Pump Power Included in Rated COP"] = None
        self._data["Condenser Pump Heat Included in Rated Heating Capacity and Rated COP"] = None
        self._data["Condenser Water Pump Power"] = None
        self._data["Fraction of Condenser Pump Heat to Water"] = None
        self._data["Evaporator Air Inlet Node Name"] = None
        self._data["Evaporator Air Outlet Node Name"] = None
        self._data["Condenser Water Inlet Node Name"] = None
        self._data["Condenser Water Outlet Node Name"] = None
        self._data["Crankcase Heater Capacity"] = None
        self._data["Maximum Ambient Temperature for Crankcase Heater Operation"] = None
        self._data["Evaporator Air Temperature Type for Curve Objects"] = None
        self._data["Heating Capacity Function of Temperature Curve Name"] = None
        self._data["Heating Capacity Function of Air Flow Fraction Curve Name"] = None
        self._data["Heating Capacity Function of Water Flow Fraction Curve Name"] = None
        self._data["Heating COP Function of Temperature Curve Name"] = None
        self._data["Heating COP Function of Air Flow Fraction Curve Name"] = None
        self._data["Heating COP Function of Water Flow Fraction Curve Name"] = None
        self._data["Part Load Fraction Correlation Curve Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_heating_capacity = None
        else:
            self.rated_heating_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_cop = None
        else:
            self.rated_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_sensible_heat_ratio = None
        else:
            self.rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_evaporator_inlet_air_drybulb_temperature = None
        else:
            self.rated_evaporator_inlet_air_drybulb_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_evaporator_inlet_air_wetbulb_temperature = None
        else:
            self.rated_evaporator_inlet_air_wetbulb_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_condenser_inlet_water_temperature = None
        else:
            self.rated_condenser_inlet_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_evaporator_air_flow_rate = None
        else:
            self.rated_evaporator_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_condenser_water_flow_rate = None
        else:
            self.rated_condenser_water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.evaporator_fan_power_included_in_rated_cop = None
        else:
            self.evaporator_fan_power_included_in_rated_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_pump_power_included_in_rated_cop = None
        else:
            self.condenser_pump_power_included_in_rated_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop = None
        else:
            self.condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_water_pump_power = None
        else:
            self.condenser_water_pump_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_condenser_pump_heat_to_water = None
        else:
            self.fraction_of_condenser_pump_heat_to_water = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.evaporator_air_inlet_node_name = None
        else:
            self.evaporator_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.evaporator_air_outlet_node_name = None
        else:
            self.evaporator_air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_water_inlet_node_name = None
        else:
            self.condenser_water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_water_outlet_node_name = None
        else:
            self.condenser_water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.crankcase_heater_capacity = None
        else:
            self.crankcase_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_ambient_temperature_for_crankcase_heater_operation = None
        else:
            self.maximum_ambient_temperature_for_crankcase_heater_operation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.evaporator_air_temperature_type_for_curve_objects = None
        else:
            self.evaporator_air_temperature_type_for_curve_objects = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_function_of_temperature_curve_name = None
        else:
            self.heating_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_function_of_air_flow_fraction_curve_name = None
        else:
            self.heating_capacity_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_capacity_function_of_water_flow_fraction_curve_name = None
        else:
            self.heating_capacity_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_cop_function_of_temperature_curve_name = None
        else:
            self.heating_cop_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_cop_function_of_air_flow_fraction_curve_name = None
        else:
            self.heating_cop_function_of_air_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_cop_function_of_water_flow_fraction_curve_name = None
        else:
            self.heating_cop_function_of_water_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.part_load_fraction_correlation_curve_name = None
        else:
            self.part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        Unique name for this instance of a heat pump water heater DX coil.
        
        {u'note': [u'Unique name for this instance of a heat pump water heater DX coil.'], u'type': u'alpha', u'reference': u'HeatPumpWaterHeaterDXCoils', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def rated_heating_capacity(self):
        """Get rated_heating_capacity

        Returns:
            float: the value of `rated_heating_capacity` or None if not set
        """
        return self._data["Rated Heating Capacity"]

    @rated_heating_capacity.setter
    def rated_heating_capacity(self, value=None):
        """  Corresponds to IDD Field `Rated Heating Capacity`
        Heating capacity at the rated inlet air temperatures, rated condenser inlet
        water temperature, rated air flow rate, and rated water flow rate.
        Can optionally include condenser pump heat.
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Heating capacity at the rated inlet air temperatures, rated condenser inlet', u'water temperature, rated air flow rate, and rated water flow rate.', u'Can optionally include condenser pump heat.'], u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Heating Capacity`
                Units: W
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_heating_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_heating_capacity`')
        self._data["Rated Heating Capacity"] = value

    @property
    def rated_cop(self):
        """Get rated_cop

        Returns:
            float: the value of `rated_cop` or None if not set
        """
        return self._data["Rated COP"]

    @rated_cop.setter
    def rated_cop(self, value=3.2 ):
        """  Corresponds to IDD Field `Rated COP`
        Heating coefficient of performance at the rated inlet air temperatures,
        rated condenser inlet water temperature, rated air flow rate, and rated water flow rate.
        Can optionally include condenser pump power and evaporator fan power (see fields below).
        
        {'pytype': 'float', u'default': '3.2', u'minimum>': '0.0', u'note': [u'Heating coefficient of performance at the rated inlet air temperatures,', u'rated condenser inlet water temperature, rated air flow rate, and rated water flow rate.', u'Can optionally include condenser pump power and evaporator fan power (see fields below).'], u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated COP`
                Units: W/W
                Default value: 3.2
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_cop`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_cop`')
        self._data["Rated COP"] = value

    @property
    def rated_sensible_heat_ratio(self):
        """Get rated_sensible_heat_ratio

        Returns:
            float: the value of `rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Rated Sensible Heat Ratio"]

    @rated_sensible_heat_ratio.setter
    def rated_sensible_heat_ratio(self, value=0.85 ):
        """  Corresponds to IDD Field `Rated Sensible Heat Ratio`
        Gross air-side sensible heat ratio at the rated inlet air temperatures,
        rated condenser inlet water temperature, rated air flow rate, and rated water flow rate.
        Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling
        capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling
        and dehumidification by the coil alone.
        
        {'pytype': 'float', u'default': '0.85', u'maximum': '1.0', u'note': [u'Gross air-side sensible heat ratio at the rated inlet air temperatures,', u'rated condenser inlet water temperature, rated air flow rate, and rated water flow rate.', u'Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling', u'capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling', u'and dehumidification by the coil alone.'], u'minimum': '0.5', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Sensible Heat Ratio`
                Default value: 0.85
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_sensible_heat_ratio`'.format(value))
            if value < 0.5:
                raise ValueError('value need to be greater or equal 0.5 '
                                 'for field `rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `rated_sensible_heat_ratio`')
        self._data["Rated Sensible Heat Ratio"] = value

    @property
    def rated_evaporator_inlet_air_drybulb_temperature(self):
        """Get rated_evaporator_inlet_air_drybulb_temperature

        Returns:
            float: the value of `rated_evaporator_inlet_air_drybulb_temperature` or None if not set
        """
        return self._data["Rated Evaporator Inlet Air Dry-Bulb Temperature"]

    @rated_evaporator_inlet_air_drybulb_temperature.setter
    def rated_evaporator_inlet_air_drybulb_temperature(self, value=19.7 ):
        """  Corresponds to IDD Field `Rated Evaporator Inlet Air Dry-Bulb Temperature`
        Evaporator inlet air dry-bulb temperature corresponding to rated coil performance
        (heating capacity, COP and SHR).
        
        {'pytype': 'float', u'default': '19.7', u'minimum>': '5.0', u'note': [u'Evaporator inlet air dry-bulb temperature corresponding to rated coil performance', u'(heating capacity, COP and SHR).'], u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Evaporator Inlet Air Dry-Bulb Temperature`
                Units: C
                Default value: 19.7
                value > 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_evaporator_inlet_air_drybulb_temperature`'.format(value))
            if value <= 5.0:
                raise ValueError('value need to be greater 5.0 '
                                 'for field `rated_evaporator_inlet_air_drybulb_temperature`')
        self._data["Rated Evaporator Inlet Air Dry-Bulb Temperature"] = value

    @property
    def rated_evaporator_inlet_air_wetbulb_temperature(self):
        """Get rated_evaporator_inlet_air_wetbulb_temperature

        Returns:
            float: the value of `rated_evaporator_inlet_air_wetbulb_temperature` or None if not set
        """
        return self._data["Rated Evaporator Inlet Air Wet-Bulb Temperature"]

    @rated_evaporator_inlet_air_wetbulb_temperature.setter
    def rated_evaporator_inlet_air_wetbulb_temperature(self, value=13.5 ):
        """  Corresponds to IDD Field `Rated Evaporator Inlet Air Wet-Bulb Temperature`
        Evaporator inlet air wet-bulb temperature corresponding to rated coil performance
        (heating capacity, COP and SHR).
        
        {'pytype': 'float', u'default': '13.5', u'minimum>': '5.0', u'note': [u'Evaporator inlet air wet-bulb temperature corresponding to rated coil performance', u'(heating capacity, COP and SHR).'], u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Evaporator Inlet Air Wet-Bulb Temperature`
                Units: C
                Default value: 13.5
                value > 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_evaporator_inlet_air_wetbulb_temperature`'.format(value))
            if value <= 5.0:
                raise ValueError('value need to be greater 5.0 '
                                 'for field `rated_evaporator_inlet_air_wetbulb_temperature`')
        self._data["Rated Evaporator Inlet Air Wet-Bulb Temperature"] = value

    @property
    def rated_condenser_inlet_water_temperature(self):
        """Get rated_condenser_inlet_water_temperature

        Returns:
            float: the value of `rated_condenser_inlet_water_temperature` or None if not set
        """
        return self._data["Rated Condenser Inlet Water Temperature"]

    @rated_condenser_inlet_water_temperature.setter
    def rated_condenser_inlet_water_temperature(self, value=57.5 ):
        """  Corresponds to IDD Field `Rated Condenser Inlet Water Temperature`
        Condenser inlet water temperature corresponding to rated coil performance
        (heating capacity, COP and SHR).
        
        {'pytype': 'float', u'default': '57.5', u'minimum>': '25.0', u'note': [u'Condenser inlet water temperature corresponding to rated coil performance', u'(heating capacity, COP and SHR).'], u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Condenser Inlet Water Temperature`
                Units: C
                Default value: 57.5
                value > 25.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_condenser_inlet_water_temperature`'.format(value))
            if value <= 25.0:
                raise ValueError('value need to be greater 25.0 '
                                 'for field `rated_condenser_inlet_water_temperature`')
        self._data["Rated Condenser Inlet Water Temperature"] = value

    @property
    def rated_evaporator_air_flow_rate(self):
        """Get rated_evaporator_air_flow_rate

        Returns:
            float: the value of `rated_evaporator_air_flow_rate` or None if not set
        """
        return self._data["Rated Evaporator Air Flow Rate"]

    @rated_evaporator_air_flow_rate.setter
    def rated_evaporator_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Evaporator Air Flow Rate`
        Evaporator air flow rate corresponding to rated coil performance
        (heating capacity, COP and SHR).
        Default is 5.035E-5 m3/s/W (31.25 cfm/MBH) of rated heating capacity when autocalculated.
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Evaporator air flow rate corresponding to rated coil performance', u'(heating capacity, COP and SHR).', u'Default is 5.035E-5 m3/s/W (31.25 cfm/MBH) of rated heating capacity when autocalculated.'], u'units': u'm3/s', u'autocalculatable': True, u'type': u'real'}

        Args:
            value (float or "Autocalculate"): value for IDD Field `Rated Evaporator Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Rated Evaporator Air Flow Rate"] = value
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_evaporator_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_evaporator_air_flow_rate`')
        self._data["Rated Evaporator Air Flow Rate"] = value

    @property
    def rated_condenser_water_flow_rate(self):
        """Get rated_condenser_water_flow_rate

        Returns:
            float: the value of `rated_condenser_water_flow_rate` or None if not set
        """
        return self._data["Rated Condenser Water Flow Rate"]

    @rated_condenser_water_flow_rate.setter
    def rated_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Condenser Water Flow Rate`
        Condenser water flow rate corresponding to rated coil performance
        (heating capacity, COP and SHR).
        Default is 4.487E-8 m3/s/W (0.208 gpm/MBH) of rated heating capacity when autocalculated.
        A warning message will be issued if the ratio of Rated Condenser Water Flow Rate
        to Heating Capacity is less than 1.79405E-8 m3/s/W (0.083 gpm/MBH)
        or greater than 8.97024E-8 m3/s/W (0.417 gpm/MBH), but the simulation will continue.
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'Condenser water flow rate corresponding to rated coil performance', u'(heating capacity, COP and SHR).', u'Default is 4.487E-8 m3/s/W (0.208 gpm/MBH) of rated heating capacity when autocalculated.', u'A warning message will be issued if the ratio of Rated Condenser Water Flow Rate', u'to Heating Capacity is less than 1.79405E-8 m3/s/W (0.083 gpm/MBH)', u'or greater than 8.97024E-8 m3/s/W (0.417 gpm/MBH), but the simulation will continue.'], u'units': u'm3/s', u'autocalculatable': True, u'type': u'real'}

        Args:
            value (float or "Autocalculate"): value for IDD Field `Rated Condenser Water Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Rated Condenser Water Flow Rate"] = value
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_condenser_water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_condenser_water_flow_rate`')
        self._data["Rated Condenser Water Flow Rate"] = value

    @property
    def evaporator_fan_power_included_in_rated_cop(self):
        """Get evaporator_fan_power_included_in_rated_cop

        Returns:
            str: the value of `evaporator_fan_power_included_in_rated_cop` or None if not set
        """
        return self._data["Evaporator Fan Power Included in Rated COP"]

    @evaporator_fan_power_included_in_rated_cop.setter
    def evaporator_fan_power_included_in_rated_cop(self, value="Yes"):
        """  Corresponds to IDD Field `Evaporator Fan Power Included in Rated COP`
        Select Yes if the evaporator fan power is included in the rated COP. This choice field
        impacts the calculation of compressor electric power.
        
        {u'default': u'Yes', u'note': [u'Select Yes if the evaporator fan power is included in the rated COP. This choice field', u'impacts the calculation of compressor electric power.'], u'type': u'choice', u'key': [u'Yes', u'No'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Evaporator Fan Power Included in Rated COP`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `evaporator_fan_power_included_in_rated_cop`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `evaporator_fan_power_included_in_rated_cop`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `evaporator_fan_power_included_in_rated_cop`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `evaporator_fan_power_included_in_rated_cop`'.format(value))
            value = vals[value_lower]
        self._data["Evaporator Fan Power Included in Rated COP"] = value

    @property
    def condenser_pump_power_included_in_rated_cop(self):
        """Get condenser_pump_power_included_in_rated_cop

        Returns:
            str: the value of `condenser_pump_power_included_in_rated_cop` or None if not set
        """
        return self._data["Condenser Pump Power Included in Rated COP"]

    @condenser_pump_power_included_in_rated_cop.setter
    def condenser_pump_power_included_in_rated_cop(self, value="No"):
        """  Corresponds to IDD Field `Condenser Pump Power Included in Rated COP`
        Select Yes if the condenser pump power is included in the rated COP. This choice field
        impacts the calculation of compressor electric power.
        
        {u'default': u'No', u'note': [u'Select Yes if the condenser pump power is included in the rated COP. This choice field', u'impacts the calculation of compressor electric power.'], u'type': u'choice', u'key': [u'Yes', u'No'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Pump Power Included in Rated COP`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_pump_power_included_in_rated_cop`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_pump_power_included_in_rated_cop`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_pump_power_included_in_rated_cop`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condenser_pump_power_included_in_rated_cop`'.format(value))
            value = vals[value_lower]
        self._data["Condenser Pump Power Included in Rated COP"] = value

    @property
    def condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop(self):
        """Get condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop

        Returns:
            str: the value of `condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop` or None if not set
        """
        return self._data["Condenser Pump Heat Included in Rated Heating Capacity and Rated COP"]

    @condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop.setter
    def condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop(self, value="No"):
        """  Corresponds to IDD Field `Condenser Pump Heat Included in Rated Heating Capacity and Rated COP`
        Select Yes if the condenser pump heat is included in the rated heating capacity and
        rated COP. This choice field impacts the calculation of water heating capacity.
        
        {u'default': u'No', u'note': [u'Select Yes if the condenser pump heat is included in the rated heating capacity and', u'rated COP. This choice field impacts the calculation of water heating capacity.'], u'type': u'choice', u'key': [u'Yes', u'No'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Pump Heat Included in Rated Heating Capacity and Rated COP`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop`'.format(value))
            value = vals[value_lower]
        self._data["Condenser Pump Heat Included in Rated Heating Capacity and Rated COP"] = value

    @property
    def condenser_water_pump_power(self):
        """Get condenser_water_pump_power

        Returns:
            float: the value of `condenser_water_pump_power` or None if not set
        """
        return self._data["Condenser Water Pump Power"]

    @condenser_water_pump_power.setter
    def condenser_water_pump_power(self, value=0.0 ):
        """  Corresponds to IDD Field `Condenser Water Pump Power`
        A warning message will be issued if the ratio of Condenser Water Pump Power to Rated
        Heating Capacity exceeds 0.1422 W/W (41.67 Watts/MBH), but the simulation will continue.
        
        {'pytype': 'float', u'default': '0.0', u'note': [u'A warning message will be issued if the ratio of Condenser Water Pump Power to Rated', u'Heating Capacity exceeds 0.1422 W/W (41.67 Watts/MBH), but the simulation will continue.'], u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Condenser Water Pump Power`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `condenser_water_pump_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `condenser_water_pump_power`')
        self._data["Condenser Water Pump Power"] = value

    @property
    def fraction_of_condenser_pump_heat_to_water(self):
        """Get fraction_of_condenser_pump_heat_to_water

        Returns:
            float: the value of `fraction_of_condenser_pump_heat_to_water` or None if not set
        """
        return self._data["Fraction of Condenser Pump Heat to Water"]

    @fraction_of_condenser_pump_heat_to_water.setter
    def fraction_of_condenser_pump_heat_to_water(self, value=0.2 ):
        """  Corresponds to IDD Field `Fraction of Condenser Pump Heat to Water`
        Fraction of pump heat transferred to the condenser water. The pump is assumed
        to be located downstream of the condenser.
        
        {'pytype': 'float', u'default': '0.2', u'maximum': '1.0', u'note': [u'Fraction of pump heat transferred to the condenser water. The pump is assumed', u'to be located downstream of the condenser.'], u'minimum': '0.0', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Fraction of Condenser Pump Heat to Water`
                Default value: 0.2
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_condenser_pump_heat_to_water`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_condenser_pump_heat_to_water`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_condenser_pump_heat_to_water`')
        self._data["Fraction of Condenser Pump Heat to Water"] = value

    @property
    def evaporator_air_inlet_node_name(self):
        """Get evaporator_air_inlet_node_name

        Returns:
            str: the value of `evaporator_air_inlet_node_name` or None if not set
        """
        return self._data["Evaporator Air Inlet Node Name"]

    @evaporator_air_inlet_node_name.setter
    def evaporator_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Evaporator Air Inlet Node Name`
        The node from which the DX coil draws its inlet air.
        
        {u'note': [u'The node from which the DX coil draws its inlet air.'], u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Evaporator Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `evaporator_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `evaporator_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `evaporator_air_inlet_node_name`')
        self._data["Evaporator Air Inlet Node Name"] = value

    @property
    def evaporator_air_outlet_node_name(self):
        """Get evaporator_air_outlet_node_name

        Returns:
            str: the value of `evaporator_air_outlet_node_name` or None if not set
        """
        return self._data["Evaporator Air Outlet Node Name"]

    @evaporator_air_outlet_node_name.setter
    def evaporator_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Evaporator Air Outlet Node Name`
        The node to which the DX coil sends its outlet air.
        
        {u'note': [u'The node to which the DX coil sends its outlet air.'], u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Evaporator Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `evaporator_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `evaporator_air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `evaporator_air_outlet_node_name`')
        self._data["Evaporator Air Outlet Node Name"] = value

    @property
    def condenser_water_inlet_node_name(self):
        """Get condenser_water_inlet_node_name

        Returns:
            str: the value of `condenser_water_inlet_node_name` or None if not set
        """
        return self._data["Condenser Water Inlet Node Name"]

    @condenser_water_inlet_node_name.setter
    def condenser_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Water Inlet Node Name`
        The node from which the DX coil condenser draws its inlet water.
        This name should match the source side outlet node name in the associated
        water heater tank object.
        
        {u'note': [u'The node from which the DX coil condenser draws its inlet water.', u'This name should match the source side outlet node name in the associated', u'water heater tank object.'], u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_water_inlet_node_name`')
        self._data["Condenser Water Inlet Node Name"] = value

    @property
    def condenser_water_outlet_node_name(self):
        """Get condenser_water_outlet_node_name

        Returns:
            str: the value of `condenser_water_outlet_node_name` or None if not set
        """
        return self._data["Condenser Water Outlet Node Name"]

    @condenser_water_outlet_node_name.setter
    def condenser_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Water Outlet Node Name`
        The node to which the DX coil condenser sends its outlet water.
        This name should match the source side inlet node name in the associated
        water heater tank object.
        
        {u'note': [u'The node to which the DX coil condenser sends its outlet water.', u'This name should match the source side inlet node name in the associated', u'water heater tank object.'], u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_water_outlet_node_name`')
        self._data["Condenser Water Outlet Node Name"] = value

    @property
    def crankcase_heater_capacity(self):
        """Get crankcase_heater_capacity

        Returns:
            float: the value of `crankcase_heater_capacity` or None if not set
        """
        return self._data["Crankcase Heater Capacity"]

    @crankcase_heater_capacity.setter
    def crankcase_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Crankcase Heater Capacity`
        The compressor crankcase heater only operates when the dry-bulb temperature of air
        surrounding the compressor is below the Maximum Ambient Temperature for Crankcase
        Heater Operation and the DX coil is off.  The ambient temperature surrounding the
        compressor is set by the WaterHeater:HeatPump parent object (field Compressor Location).
        
        {'pytype': 'float', u'default': '0.0', u'note': [u'The compressor crankcase heater only operates when the dry-bulb temperature of air', u'surrounding the compressor is below the Maximum Ambient Temperature for Crankcase', u'Heater Operation and the DX coil is off.  The ambient temperature surrounding the', u'compressor is set by the WaterHeater:HeatPump parent object (field Compressor Location).'], u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Crankcase Heater Capacity`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `crankcase_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `crankcase_heater_capacity`')
        self._data["Crankcase Heater Capacity"] = value

    @property
    def maximum_ambient_temperature_for_crankcase_heater_operation(self):
        """Get maximum_ambient_temperature_for_crankcase_heater_operation

        Returns:
            float: the value of `maximum_ambient_temperature_for_crankcase_heater_operation` or None if not set
        """
        return self._data["Maximum Ambient Temperature for Crankcase Heater Operation"]

    @maximum_ambient_temperature_for_crankcase_heater_operation.setter
    def maximum_ambient_temperature_for_crankcase_heater_operation(self, value=10.0 ):
        """  Corresponds to IDD Field `Maximum Ambient Temperature for Crankcase Heater Operation`
        The compressor crankcase heater only operates when the dry-bulb temperature of air
        surrounding the compressor is below the Maximum Outdoor Temperature for Crankcase
        Heater Operation and the unit is off. The ambient temperature surrounding the
        compressor is set by the WaterHeater:HeatPump parent object (field Compressor Location).
        
        {'pytype': 'float', u'default': '10.0', u'note': [u'The compressor crankcase heater only operates when the dry-bulb temperature of air', u'surrounding the compressor is below the Maximum Outdoor Temperature for Crankcase', u'Heater Operation and the unit is off. The ambient temperature surrounding the', u'compressor is set by the WaterHeater:HeatPump parent object (field Compressor Location).'], u'minimum': '0.0', u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Ambient Temperature for Crankcase Heater Operation`
                Units: C
                Default value: 10.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_ambient_temperature_for_crankcase_heater_operation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_ambient_temperature_for_crankcase_heater_operation`')
        self._data["Maximum Ambient Temperature for Crankcase Heater Operation"] = value

    @property
    def evaporator_air_temperature_type_for_curve_objects(self):
        """Get evaporator_air_temperature_type_for_curve_objects

        Returns:
            str: the value of `evaporator_air_temperature_type_for_curve_objects` or None if not set
        """
        return self._data["Evaporator Air Temperature Type for Curve Objects"]

    @evaporator_air_temperature_type_for_curve_objects.setter
    def evaporator_air_temperature_type_for_curve_objects(self, value="WetBulbTemperature"):
        """  Corresponds to IDD Field `Evaporator Air Temperature Type for Curve Objects`
        Determines temperature type for heating capacity curves and
        heating COP curves. This input determines whether
        the inlet air dry-bulb or wet-bulb temperature is used to evaluate these curves.
        
        {u'default': u'WetBulbTemperature', u'note': [u'Determines temperature type for heating capacity curves and', u'heating COP curves. This input determines whether', u'the inlet air dry-bulb or wet-bulb temperature is used to evaluate these curves.'], u'type': u'choice', u'key': [u'DryBulbTemperature', u'WetBulbTemperature'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Evaporator Air Temperature Type for Curve Objects`
                Accepted values are:
                      - DryBulbTemperature
                      - WetBulbTemperature
                Default value: WetBulbTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `evaporator_air_temperature_type_for_curve_objects`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `evaporator_air_temperature_type_for_curve_objects`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `evaporator_air_temperature_type_for_curve_objects`')
            vals = {}
            vals["drybulbtemperature"] = "DryBulbTemperature"
            vals["wetbulbtemperature"] = "WetBulbTemperature"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `evaporator_air_temperature_type_for_curve_objects`'.format(value))
            value = vals[value_lower]
        self._data["Evaporator Air Temperature Type for Curve Objects"] = value

    @property
    def heating_capacity_function_of_temperature_curve_name(self):
        """Get heating_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `heating_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Heating Capacity Function of Temperature Curve Name"]

    @heating_capacity_function_of_temperature_curve_name.setter
    def heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        Heating capacity modifier curve (function of temperature) should be biquadratic or cubic.
        Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw).
        Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3.
        ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C).
        tw = condenser inlet water temperature (C).
        The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb
        is used as the evaporator inlet air temperature (ta).
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'Heating capacity modifier curve (function of temperature) should be biquadratic or cubic.', u'Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw).', u'Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3.', u'ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C).', u'tw = condenser inlet water temperature (C).', u'The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb', u'is used as the evaporator inlet air temperature (ta).'], u'type': u'object-list', u'object-list': u'BiquadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_capacity_function_of_temperature_curve_name`')
        self._data["Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get heating_capacity_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Heating Capacity Function of Air Flow Fraction Curve Name"]

    @heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def heating_capacity_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        Heating capacity modifier curve (function of air flow fraction) should be quadratic or cubic.
        Quadratic curve = a + b(ff) + c(ff)^2.
        Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3.
        ff = fraction of the rated evaporator air flow rate.
        Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts
        due to variations in air flow rate fraction.
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'Heating capacity modifier curve (function of air flow fraction) should be quadratic or cubic.', u'Quadratic curve = a + b(ff) + c(ff)^2.', u'Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3.', u'ff = fraction of the rated evaporator air flow rate.', u'Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts', u'due to variations in air flow rate fraction.'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_capacity_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_capacity_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_capacity_function_of_air_flow_fraction_curve_name`')
        self._data["Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def heating_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get heating_capacity_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Heating Capacity Function of Water Flow Fraction Curve Name"]

    @heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def heating_capacity_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heating Capacity Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        Heating capacity modifier curve (function of water flow fraction) should be quadratic or cubic.
        Quadratic curve = a + b(ff) + c(ff)^2.
        Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3.
        ff = fraction of the rated condenser water flow rate.
        Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts
        due to variations in water flow rate fraction.
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'Heating capacity modifier curve (function of water flow fraction) should be quadratic or cubic.', u'Quadratic curve = a + b(ff) + c(ff)^2.', u'Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3.', u'ff = fraction of the rated condenser water flow rate.', u'Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts', u'due to variations in water flow rate fraction.'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_capacity_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_capacity_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_capacity_function_of_water_flow_fraction_curve_name`')
        self._data["Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def heating_cop_function_of_temperature_curve_name(self):
        """Get heating_cop_function_of_temperature_curve_name

        Returns:
            str: the value of `heating_cop_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Heating COP Function of Temperature Curve Name"]

    @heating_cop_function_of_temperature_curve_name.setter
    def heating_cop_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heating COP Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        Heating COP modifier curve (function of temperature) should be biquadratic or cubic.
        Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw).
        Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3.
        ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C).
        tw = condenser inlet water temperature (C).
        The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb
        is used as the evaporator inlet air temperature (ta).
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'Heating COP modifier curve (function of temperature) should be biquadratic or cubic.', u'Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw).', u'Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3.', u'ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C).', u'tw = condenser inlet water temperature (C).', u'The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb', u'is used as the evaporator inlet air temperature (ta).'], u'type': u'object-list', u'object-list': u'BiquadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heating COP Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_cop_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_cop_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_cop_function_of_temperature_curve_name`')
        self._data["Heating COP Function of Temperature Curve Name"] = value

    @property
    def heating_cop_function_of_air_flow_fraction_curve_name(self):
        """Get heating_cop_function_of_air_flow_fraction_curve_name

        Returns:
            str: the value of `heating_cop_function_of_air_flow_fraction_curve_name` or None if not set
        """
        return self._data["Heating COP Function of Air Flow Fraction Curve Name"]

    @heating_cop_function_of_air_flow_fraction_curve_name.setter
    def heating_cop_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heating COP Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        Heating COP modifier curve (function of air flow fraction) should be quadratic or cubic.
        Quadratic curve = a + b(ff) + c(ff)^2.
        Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3.
        ff = fraction of the rated evaporator air flow rate.
        Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts
        due to variations in air flow rate fraction.
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'Heating COP modifier curve (function of air flow fraction) should be quadratic or cubic.', u'Quadratic curve = a + b(ff) + c(ff)^2.', u'Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3.', u'ff = fraction of the rated evaporator air flow rate.', u'Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts', u'due to variations in air flow rate fraction.'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heating COP Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_cop_function_of_air_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_cop_function_of_air_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_cop_function_of_air_flow_fraction_curve_name`')
        self._data["Heating COP Function of Air Flow Fraction Curve Name"] = value

    @property
    def heating_cop_function_of_water_flow_fraction_curve_name(self):
        """Get heating_cop_function_of_water_flow_fraction_curve_name

        Returns:
            str: the value of `heating_cop_function_of_water_flow_fraction_curve_name` or None if not set
        """
        return self._data["Heating COP Function of Water Flow Fraction Curve Name"]

    @heating_cop_function_of_water_flow_fraction_curve_name.setter
    def heating_cop_function_of_water_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heating COP Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        Heating COP modifier curve (function of water flow fraction) should be quadratic or cubic.
        Quadratic curve = a + b(ff) + c(ff)^2.
        Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3.
        ff = fraction of the rated condenser water flow rate.
        Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts
        due to variations in water flow rate fraction.
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'Heating COP modifier curve (function of water flow fraction) should be quadratic or cubic.', u'Quadratic curve = a + b(ff) + c(ff)^2.', u'Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3.', u'ff = fraction of the rated condenser water flow rate.', u'Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts', u'due to variations in water flow rate fraction.'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heating COP Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_cop_function_of_water_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_cop_function_of_water_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_cop_function_of_water_flow_fraction_curve_name`')
        self._data["Heating COP Function of Water Flow Fraction Curve Name"] = value

    @property
    def part_load_fraction_correlation_curve_name(self):
        """Get part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Part Load Fraction Correlation Curve Name"]

    @part_load_fraction_correlation_curve_name.setter
    def part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        Part Load Fraction Correlation (function of part load ratio) should be quadratic or cubic.
        Quadratic curve = a + b(PLR) + c(PLR)^2.
        Cubic curve = a + b(PLR) + c(PLR)^2 + d(PLR)^3.
        PLR = part load ratio (heating delivered/steady state heating capacity).
        Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts
        due to variations in part load ratio.
        
        {u'note': [u'Table:OneIndependentVariable object can also be used', u'Part Load Fraction Correlation (function of part load ratio) should be quadratic or cubic.', u'Quadratic curve = a + b(PLR) + c(PLR)^2.', u'Cubic curve = a + b(PLR) + c(PLR)^2 + d(PLR)^3.', u'PLR = part load ratio (heating delivered/steady state heating capacity).', u'Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts', u'due to variations in part load ratio.'], u'type': u'object-list', u'object-list': u'QuadraticCubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `part_load_fraction_correlation_curve_name`')
        self._data["Part Load Fraction Correlation Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilWaterHeatingDesuperheater(object):
    """ Corresponds to IDD object `Coil:WaterHeating:Desuperheater`
        Desuperheater air heating coil. The heating energy provided by this coil is reclaimed
        from the superheated refrigerant gas leaving a compressor and does not impact the
        performance of the compressor. This coil must be used with a water heater tank, see
        Water Heater:Mixed.
    
    """
    internal_name = "Coil:WaterHeating:Desuperheater"
    field_count = 20
    required_fields = ["Name", "Setpoint Temperature Schedule Name", "Rated Inlet Water Temperature", "Rated Outdoor Air Temperature", "Maximum Inlet Water Temperature for Heat Reclaim", "Water Inlet Node Name", "Water Outlet Node Name", "Tank Object Type", "Tank Name", "Heating Source Object Type", "Heating Source Name", "Water Flow Rate"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:WaterHeating:Desuperheater`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Setpoint Temperature Schedule Name"] = None
        self._data["Dead Band Temperature Difference"] = None
        self._data["Rated Heat Reclaim Recovery Efficiency"] = None
        self._data["Rated Inlet Water Temperature"] = None
        self._data["Rated Outdoor Air Temperature"] = None
        self._data["Maximum Inlet Water Temperature for Heat Reclaim"] = None
        self._data["Heat Reclaim Efficiency Function of Temperature Curve Name"] = None
        self._data["Water Inlet Node Name"] = None
        self._data["Water Outlet Node Name"] = None
        self._data["Tank Object Type"] = None
        self._data["Tank Name"] = None
        self._data["Heating Source Object Type"] = None
        self._data["Heating Source Name"] = None
        self._data["Water Flow Rate"] = None
        self._data["Water Pump Power"] = None
        self._data["Fraction of Pump Heat to Water"] = None
        self._data["On-Cycle Parasitic Electric Load"] = None
        self._data["Off-Cycle Parasitic Electric Load"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.setpoint_temperature_schedule_name = None
        else:
            self.setpoint_temperature_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.dead_band_temperature_difference = None
        else:
            self.dead_band_temperature_difference = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_heat_reclaim_recovery_efficiency = None
        else:
            self.rated_heat_reclaim_recovery_efficiency = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_inlet_water_temperature = None
        else:
            self.rated_inlet_water_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_outdoor_air_temperature = None
        else:
            self.rated_outdoor_air_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_inlet_water_temperature_for_heat_reclaim = None
        else:
            self.maximum_inlet_water_temperature_for_heat_reclaim = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_reclaim_efficiency_function_of_temperature_curve_name = None
        else:
            self.heat_reclaim_efficiency_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_inlet_node_name = None
        else:
            self.water_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_outlet_node_name = None
        else:
            self.water_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tank_object_type = None
        else:
            self.tank_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.tank_name = None
        else:
            self.tank_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_source_object_type = None
        else:
            self.heating_source_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_source_name = None
        else:
            self.heating_source_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_flow_rate = None
        else:
            self.water_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_pump_power = None
        else:
            self.water_pump_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fraction_of_pump_heat_to_water = None
        else:
            self.fraction_of_pump_heat_to_water = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.oncycle_parasitic_electric_load = None
        else:
            self.oncycle_parasitic_electric_load = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.offcycle_parasitic_electric_load = None
        else:
            self.offcycle_parasitic_electric_load = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        Unique name for this instance of a desuperheater water heating coil.
        
        {u'note': [u'Unique name for this instance of a desuperheater water heating coil.'], u'type': u'alpha', u'reference': u'WaterHeatingCoilsDesuperheater', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        Schedule values of 0 denote the desuperheater heating coil is off and the parasitic electric
        energy is also off.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.', u'Schedule values of 0 denote the desuperheater heating coil is off and the parasitic electric', u'energy is also off.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def setpoint_temperature_schedule_name(self):
        """Get setpoint_temperature_schedule_name

        Returns:
            str: the value of `setpoint_temperature_schedule_name` or None if not set
        """
        return self._data["Setpoint Temperature Schedule Name"]

    @setpoint_temperature_schedule_name.setter
    def setpoint_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Setpoint Temperature Schedule Name`
        Defines the cut-out temperature where the desuperheater water heating coil turns off.
        The desuperheater heating coil setpoint temperature should always be greater
        than the water tank's heater (element or burner) setpoint temperature. Temperature
        schedule values should be in degrees C.
        
        {u'note': [u'Defines the cut-out temperature where the desuperheater water heating coil turns off.', u'The desuperheater heating coil setpoint temperature should always be greater', u"than the water tank's heater (element or burner) setpoint temperature. Temperature", u'schedule values should be in degrees C.'], u'type': u'object-list', u'object-list': u'ScheduleNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Setpoint Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `setpoint_temperature_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `setpoint_temperature_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `setpoint_temperature_schedule_name`')
        self._data["Setpoint Temperature Schedule Name"] = value

    @property
    def dead_band_temperature_difference(self):
        """Get dead_band_temperature_difference

        Returns:
            float: the value of `dead_band_temperature_difference` or None if not set
        """
        return self._data["Dead Band Temperature Difference"]

    @dead_band_temperature_difference.setter
    def dead_band_temperature_difference(self, value=5.0 ):
        """  Corresponds to IDD Field `Dead Band Temperature Difference`
        Setpoint temperature minus the dead band temperature difference defines
        the cut-in temperature where the desuperheater water heating coil turns on.
        The water tank's heater (element or burner) setpoint temperature
        should always be less than the desuperheater heating coil cut-in temperature.
        
        {'pytype': 'float', u'default': '5.0', u'minimum>': '0.0', u'maximum': '20.0', u'note': [u'Setpoint temperature minus the dead band temperature difference defines', u'the cut-in temperature where the desuperheater water heating coil turns on.', u"The water tank's heater (element or burner) setpoint temperature", u'should always be less than the desuperheater heating coil cut-in temperature.'], u'units': u'deltaC', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Dead Band Temperature Difference`
                Units: deltaC
                Default value: 5.0
                value > 0.0
                value <= 20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `dead_band_temperature_difference`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `dead_band_temperature_difference`')
            if value > 20.0:
                raise ValueError('value need to be smaller 20.0 '
                                 'for field `dead_band_temperature_difference`')
        self._data["Dead Band Temperature Difference"] = value

    @property
    def rated_heat_reclaim_recovery_efficiency(self):
        """Get rated_heat_reclaim_recovery_efficiency

        Returns:
            float: the value of `rated_heat_reclaim_recovery_efficiency` or None if not set
        """
        return self._data["Rated Heat Reclaim Recovery Efficiency"]

    @rated_heat_reclaim_recovery_efficiency.setter
    def rated_heat_reclaim_recovery_efficiency(self, value=None):
        """  Corresponds to IDD Field `Rated Heat Reclaim Recovery Efficiency`
        Enter the fraction of waste heat reclaimed by the desuperheater water heating coil.
        
        {u'note': [u'Enter the fraction of waste heat reclaimed by the desuperheater water heating coil.'], u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Rated Heat Reclaim Recovery Efficiency`
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_heat_reclaim_recovery_efficiency`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_heat_reclaim_recovery_efficiency`')
        self._data["Rated Heat Reclaim Recovery Efficiency"] = value

    @property
    def rated_inlet_water_temperature(self):
        """Get rated_inlet_water_temperature

        Returns:
            float: the value of `rated_inlet_water_temperature` or None if not set
        """
        return self._data["Rated Inlet Water Temperature"]

    @rated_inlet_water_temperature.setter
    def rated_inlet_water_temperature(self, value=None):
        """  Corresponds to IDD Field `Rated Inlet Water Temperature`
        The inlet water temperature corresponding to the rated heat reclaim recovery efficiency.
        
        {u'units': u'C', u'note': [u'The inlet water temperature corresponding to the rated heat reclaim recovery efficiency.'], u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Rated Inlet Water Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_inlet_water_temperature`'.format(value))
        self._data["Rated Inlet Water Temperature"] = value

    @property
    def rated_outdoor_air_temperature(self):
        """Get rated_outdoor_air_temperature

        Returns:
            float: the value of `rated_outdoor_air_temperature` or None if not set
        """
        return self._data["Rated Outdoor Air Temperature"]

    @rated_outdoor_air_temperature.setter
    def rated_outdoor_air_temperature(self, value=None):
        """  Corresponds to IDD Field `Rated Outdoor Air Temperature`
        The outdoor air dry-bulb temperature corresponding to the
        rated heat reclaim recovery efficiency.
        
        {u'units': u'C', u'note': [u'The outdoor air dry-bulb temperature corresponding to the', u'rated heat reclaim recovery efficiency.'], u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Rated Outdoor Air Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_outdoor_air_temperature`'.format(value))
        self._data["Rated Outdoor Air Temperature"] = value

    @property
    def maximum_inlet_water_temperature_for_heat_reclaim(self):
        """Get maximum_inlet_water_temperature_for_heat_reclaim

        Returns:
            float: the value of `maximum_inlet_water_temperature_for_heat_reclaim` or None if not set
        """
        return self._data["Maximum Inlet Water Temperature for Heat Reclaim"]

    @maximum_inlet_water_temperature_for_heat_reclaim.setter
    def maximum_inlet_water_temperature_for_heat_reclaim(self, value=None):
        """  Corresponds to IDD Field `Maximum Inlet Water Temperature for Heat Reclaim`
        The desuperheater water heating coil is off when the inlet water temperature is above
        the maximum inlet water temperature for heat reclaim.
        
        {u'units': u'C', u'note': [u'The desuperheater water heating coil is off when the inlet water temperature is above', u'the maximum inlet water temperature for heat reclaim.'], u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Inlet Water Temperature for Heat Reclaim`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_inlet_water_temperature_for_heat_reclaim`'.format(value))
        self._data["Maximum Inlet Water Temperature for Heat Reclaim"] = value

    @property
    def heat_reclaim_efficiency_function_of_temperature_curve_name(self):
        """Get heat_reclaim_efficiency_function_of_temperature_curve_name

        Returns:
            str: the value of `heat_reclaim_efficiency_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Heat Reclaim Efficiency Function of Temperature Curve Name"]

    @heat_reclaim_efficiency_function_of_temperature_curve_name.setter
    def heat_reclaim_efficiency_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Heat Reclaim Efficiency Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        A biquadratic curve defining the performance of the desuperheater heating coil.
        Performance can be specified as a function of inlet water temperature, outdoor air
        dry-bulb temperature, or both.
        Curve = a + b*Tw + c*Tw**2 + d*odb + e*odb**2 + f*Tw*odb.
        Tw = desuperheater heating coil entering water temperature (C).
        Odb = outdoor dry-bulb temperature at DX system condenser (C).
        
        {u'note': [u'Table:TwoIndependentVariables object can also be used', u'A biquadratic curve defining the performance of the desuperheater heating coil.', u'Performance can be specified as a function of inlet water temperature, outdoor air', u'dry-bulb temperature, or both.', u'Curve = a + b*Tw + c*Tw**2 + d*odb + e*odb**2 + f*Tw*odb.', u'Tw = desuperheater heating coil entering water temperature (C).', u'Odb = outdoor dry-bulb temperature at DX system condenser (C).'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heat Reclaim Efficiency Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_reclaim_efficiency_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_reclaim_efficiency_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_reclaim_efficiency_function_of_temperature_curve_name`')
        self._data["Heat Reclaim Efficiency Function of Temperature Curve Name"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name

        Returns:
            str: the value of `water_inlet_node_name` or None if not set
        """
        return self._data["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Inlet Node Name`
        The node from which the desuperheater heating coil draws its inlet water.
        This name should match the source side outlet node name in the associated
        water heater tank object.
        
        {u'note': [u'The node from which the desuperheater heating coil draws its inlet water.', u'This name should match the source side outlet node name in the associated', u'water heater tank object.'], u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_inlet_node_name`')
        self._data["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name

        Returns:
            str: the value of `water_outlet_node_name` or None if not set
        """
        return self._data["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Water Outlet Node Name`
        The node to which the desuperheater heating coil sends its outlet water.
        This name should match the source side inlet node name in the associated
        water heater tank object.
        
        {u'note': [u'The node to which the desuperheater heating coil sends its outlet water.', u'This name should match the source side inlet node name in the associated', u'water heater tank object.'], u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_outlet_node_name`')
        self._data["Water Outlet Node Name"] = value

    @property
    def tank_object_type(self):
        """Get tank_object_type

        Returns:
            str: the value of `tank_object_type` or None if not set
        """
        return self._data["Tank Object Type"]

    @tank_object_type.setter
    def tank_object_type(self, value="WaterHeater:Mixed"):
        """  Corresponds to IDD Field `Tank Object Type`
        Specify the type of water heater tank used by this desuperheater water heating coil.
        
        {'pytype': 'str', u'default': u'WaterHeater:Mixed', u'required-field': True, u'note': [u'Specify the type of water heater tank used by this desuperheater water heating coil.'], u'key': [u'WaterHeater:Mixed'], u'type': u'choice'}

        Args:
            value (str): value for IDD Field `Tank Object Type`
                Accepted values are:
                      - WaterHeater:Mixed
                Default value: WaterHeater:Mixed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `tank_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `tank_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `tank_object_type`')
            vals = {}
            vals["waterheater:mixed"] = "WaterHeater:Mixed"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `tank_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Tank Object Type"] = value

    @property
    def tank_name(self):
        """Get tank_name

        Returns:
            str: the value of `tank_name` or None if not set
        """
        return self._data["Tank Name"]

    @tank_name.setter
    def tank_name(self, value=None):
        """  Corresponds to IDD Field `Tank Name`
        The name of the water heater tank used by this desuperheater water heating coil.
        Needs to match the name used in the corresponding water heater object.
        
        {u'note': [u'The name of the water heater tank used by this desuperheater water heating coil.', u'Needs to match the name used in the corresponding water heater object.'], u'type': u'alpha', u'object-list': u'WaterHeaterMixedNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `tank_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `tank_name`')
        self._data["Tank Name"] = value

    @property
    def heating_source_object_type(self):
        """Get heating_source_object_type

        Returns:
            str: the value of `heating_source_object_type` or None if not set
        """
        return self._data["Heating Source Object Type"]

    @heating_source_object_type.setter
    def heating_source_object_type(self, value=None):
        """  Corresponds to IDD Field `Heating Source Object Type`
        The type of DX system that is providing waste heat for reclaim.
        
        {u'note': [u'The type of DX system that is providing waste heat for reclaim.'], u'type': u'choice', u'key': [u'Coil:Cooling:DX:SingleSpeed', u'Coil:Cooling:DX:TwoSpeed', u'Coil:Cooling:DX:TwoStageWithHumidityControlMode', u'Refrigeration:CompressorRack', u'Refrigeration:Condenser:AirCooled', u'Refrigeration:Condenser:EvaporativeCooled', u'Refrigeration:Condenser:WaterCooled'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heating Source Object Type`
                Accepted values are:
                      - Coil:Cooling:DX:SingleSpeed
                      - Coil:Cooling:DX:TwoSpeed
                      - Coil:Cooling:DX:TwoStageWithHumidityControlMode
                      - Refrigeration:CompressorRack
                      - Refrigeration:Condenser:AirCooled
                      - Refrigeration:Condenser:EvaporativeCooled
                      - Refrigeration:Condenser:WaterCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_source_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_source_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_source_object_type`')
            vals = {}
            vals["coil:cooling:dx:singlespeed"] = "Coil:Cooling:DX:SingleSpeed"
            vals["coil:cooling:dx:twospeed"] = "Coil:Cooling:DX:TwoSpeed"
            vals["coil:cooling:dx:twostagewithhumiditycontrolmode"] = "Coil:Cooling:DX:TwoStageWithHumidityControlMode"
            vals["refrigeration:compressorrack"] = "Refrigeration:CompressorRack"
            vals["refrigeration:condenser:aircooled"] = "Refrigeration:Condenser:AirCooled"
            vals["refrigeration:condenser:evaporativecooled"] = "Refrigeration:Condenser:EvaporativeCooled"
            vals["refrigeration:condenser:watercooled"] = "Refrigeration:Condenser:WaterCooled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heating_source_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Heating Source Object Type"] = value

    @property
    def heating_source_name(self):
        """Get heating_source_name

        Returns:
            str: the value of `heating_source_name` or None if not set
        """
        return self._data["Heating Source Name"]

    @heating_source_name.setter
    def heating_source_name(self, value=None):
        """  Corresponds to IDD Field `Heating Source Name`
        The name of the DX system used for heat reclaim.
        
        {u'note': [u'The name of the DX system used for heat reclaim.'], u'type': u'object-list', u'object-list': u'DesuperHeatingCoilSources', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heating Source Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_source_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_source_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_source_name`')
        self._data["Heating Source Name"] = value

    @property
    def water_flow_rate(self):
        """Get water_flow_rate

        Returns:
            float: the value of `water_flow_rate` or None if not set
        """
        return self._data["Water Flow Rate"]

    @water_flow_rate.setter
    def water_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Water Flow Rate`
        The operating water flow rate.
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'The operating water flow rate.'], u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Water Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `water_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `water_flow_rate`')
        self._data["Water Flow Rate"] = value

    @property
    def water_pump_power(self):
        """Get water_pump_power

        Returns:
            float: the value of `water_pump_power` or None if not set
        """
        return self._data["Water Pump Power"]

    @water_pump_power.setter
    def water_pump_power(self, value=0.0 ):
        """  Corresponds to IDD Field `Water Pump Power`
        The water circulation pump electric power.
        
        {'pytype': 'float', u'default': '0.0', u'note': [u'The water circulation pump electric power.'], u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Water Pump Power`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `water_pump_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `water_pump_power`')
        self._data["Water Pump Power"] = value

    @property
    def fraction_of_pump_heat_to_water(self):
        """Get fraction_of_pump_heat_to_water

        Returns:
            float: the value of `fraction_of_pump_heat_to_water` or None if not set
        """
        return self._data["Fraction of Pump Heat to Water"]

    @fraction_of_pump_heat_to_water.setter
    def fraction_of_pump_heat_to_water(self, value=0.2 ):
        """  Corresponds to IDD Field `Fraction of Pump Heat to Water`
        The fraction of pump heat transferred to the water. The pump is assumed to be downstream of
        the desuperheater water heating coil.
        
        {'pytype': 'float', u'default': '0.2', u'maximum': '1.0', u'note': [u'The fraction of pump heat transferred to the water. The pump is assumed to be downstream of', u'the desuperheater water heating coil.'], u'minimum': '0.0', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Fraction of Pump Heat to Water`
                Default value: 0.2
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fraction_of_pump_heat_to_water`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `fraction_of_pump_heat_to_water`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `fraction_of_pump_heat_to_water`')
        self._data["Fraction of Pump Heat to Water"] = value

    @property
    def oncycle_parasitic_electric_load(self):
        """Get oncycle_parasitic_electric_load

        Returns:
            float: the value of `oncycle_parasitic_electric_load` or None if not set
        """
        return self._data["On-Cycle Parasitic Electric Load"]

    @oncycle_parasitic_electric_load.setter
    def oncycle_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `On-Cycle Parasitic Electric Load`
        Parasitic electric power consumed when the desuperheater water heating coil operates.
        Parasitic electric load does not contribute to water heating or the zone air heat balance.
        
        {'pytype': 'float', u'default': '0.0', u'note': [u'Parasitic electric power consumed when the desuperheater water heating coil operates.', u'Parasitic electric load does not contribute to water heating or the zone air heat balance.'], u'ip-units': u'W', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `On-Cycle Parasitic Electric Load`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `oncycle_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `oncycle_parasitic_electric_load`')
        self._data["On-Cycle Parasitic Electric Load"] = value

    @property
    def offcycle_parasitic_electric_load(self):
        """Get offcycle_parasitic_electric_load

        Returns:
            float: the value of `offcycle_parasitic_electric_load` or None if not set
        """
        return self._data["Off-Cycle Parasitic Electric Load"]

    @offcycle_parasitic_electric_load.setter
    def offcycle_parasitic_electric_load(self, value=0.0 ):
        """  Corresponds to IDD Field `Off-Cycle Parasitic Electric Load`
        Parasitic electric load consumed when the desuperheater water heating coil is off.
        Parasitic electric load does not contribute to water heating or the zone air heat balance.
        Off-cycle parasitic power is 0 when the availability schedule is 0.
        
        {'pytype': 'float', u'default': '0.0', u'note': [u'Parasitic electric load consumed when the desuperheater water heating coil is off.', u'Parasitic electric load does not contribute to water heating or the zone air heat balance.', u'Off-cycle parasitic power is 0 when the availability schedule is 0.'], u'ip-units': u'W', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Off-Cycle Parasitic Electric Load`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `offcycle_parasitic_electric_load`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `offcycle_parasitic_electric_load`')
        self._data["Off-Cycle Parasitic Electric Load"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilSystemCoolingDx(object):
    """ Corresponds to IDD object `CoilSystem:Cooling:DX`
        Virtual container component that consists of a DX cooling coil and its associated
        controls. This control object supports several different types of DX cooling coils
        and may be placed directly in an air loop branch or outdoor air equipment list.
    
    """
    internal_name = "CoilSystem:Cooling:DX"
    field_count = 12
    required_fields = ["Name", "DX Cooling Coil System Inlet Node Name", "DX Cooling Coil System Outlet Node Name", "DX Cooling Coil System Sensor Node Name", "Cooling Coil Object Type", "Cooling Coil Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `CoilSystem:Cooling:DX`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["DX Cooling Coil System Inlet Node Name"] = None
        self._data["DX Cooling Coil System Outlet Node Name"] = None
        self._data["DX Cooling Coil System Sensor Node Name"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self._data["Dehumidification Control Type"] = None
        self._data["Run on Sensible Load"] = None
        self._data["Run on Latent Load"] = None
        self._data["Use Outdoor Air DX Cooling Coil"] = None
        self._data["Outdoor Air DX Cooling Coil Leaving Minimum Air Temperature"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.dx_cooling_coil_system_inlet_node_name = None
        else:
            self.dx_cooling_coil_system_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.dx_cooling_coil_system_outlet_node_name = None
        else:
            self.dx_cooling_coil_system_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.dx_cooling_coil_system_sensor_node_name = None
        else:
            self.dx_cooling_coil_system_sensor_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.dehumidification_control_type = None
        else:
            self.dehumidification_control_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.run_on_sensible_load = None
        else:
            self.run_on_sensible_load = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.run_on_latent_load = None
        else:
            self.run_on_latent_load = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.use_outdoor_air_dx_cooling_coil = None
        else:
            self.use_outdoor_air_dx_cooling_coil = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature = None
        else:
            self.outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def dx_cooling_coil_system_inlet_node_name(self):
        """Get dx_cooling_coil_system_inlet_node_name

        Returns:
            str: the value of `dx_cooling_coil_system_inlet_node_name` or None if not set
        """
        return self._data["DX Cooling Coil System Inlet Node Name"]

    @dx_cooling_coil_system_inlet_node_name.setter
    def dx_cooling_coil_system_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `DX Cooling Coil System Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `DX Cooling Coil System Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `dx_cooling_coil_system_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dx_cooling_coil_system_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `dx_cooling_coil_system_inlet_node_name`')
        self._data["DX Cooling Coil System Inlet Node Name"] = value

    @property
    def dx_cooling_coil_system_outlet_node_name(self):
        """Get dx_cooling_coil_system_outlet_node_name

        Returns:
            str: the value of `dx_cooling_coil_system_outlet_node_name` or None if not set
        """
        return self._data["DX Cooling Coil System Outlet Node Name"]

    @dx_cooling_coil_system_outlet_node_name.setter
    def dx_cooling_coil_system_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `DX Cooling Coil System Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `DX Cooling Coil System Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `dx_cooling_coil_system_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dx_cooling_coil_system_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `dx_cooling_coil_system_outlet_node_name`')
        self._data["DX Cooling Coil System Outlet Node Name"] = value

    @property
    def dx_cooling_coil_system_sensor_node_name(self):
        """Get dx_cooling_coil_system_sensor_node_name

        Returns:
            str: the value of `dx_cooling_coil_system_sensor_node_name` or None if not set
        """
        return self._data["DX Cooling Coil System Sensor Node Name"]

    @dx_cooling_coil_system_sensor_node_name.setter
    def dx_cooling_coil_system_sensor_node_name(self, value=None):
        """  Corresponds to IDD Field `DX Cooling Coil System Sensor Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `DX Cooling Coil System Sensor Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `dx_cooling_coil_system_sensor_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dx_cooling_coil_system_sensor_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `dx_cooling_coil_system_sensor_node_name`')
        self._data["DX Cooling Coil System Sensor Node Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `Cooling Coil Object Type`
        
        {u'type': u'choice', u'key': [u'Coil:Cooling:DX:SingleSpeed', u'CoilSystem:Cooling:DX:HeatExchangerAssisted', u'Coil:Cooling:DX:TwoSpeed', u'Coil:Cooling:DX:TwoStageWithHumidityControlMode', u'Coil:Cooling:DX:VariableSpeed', u'Coil:Cooling:DX:SingleSpeed:ThermalStorage'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling Coil Object Type`
                Accepted values are:
                      - Coil:Cooling:DX:SingleSpeed
                      - CoilSystem:Cooling:DX:HeatExchangerAssisted
                      - Coil:Cooling:DX:TwoSpeed
                      - Coil:Cooling:DX:TwoStageWithHumidityControlMode
                      - Coil:Cooling:DX:VariableSpeed
                      - Coil:Cooling:DX:SingleSpeed:ThermalStorage
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_coil_object_type`')
            vals = {}
            vals["coil:cooling:dx:singlespeed"] = "Coil:Cooling:DX:SingleSpeed"
            vals["coilsystem:cooling:dx:heatexchangerassisted"] = "CoilSystem:Cooling:DX:HeatExchangerAssisted"
            vals["coil:cooling:dx:twospeed"] = "Coil:Cooling:DX:TwoSpeed"
            vals["coil:cooling:dx:twostagewithhumiditycontrolmode"] = "Coil:Cooling:DX:TwoStageWithHumidityControlMode"
            vals["coil:cooling:dx:variablespeed"] = "Coil:Cooling:DX:VariableSpeed"
            vals["coil:cooling:dx:singlespeed:thermalstorage"] = "Coil:Cooling:DX:SingleSpeed:ThermalStorage"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `cooling_coil_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Coil Name`
        
        {u'type': u'object-list', u'object-list': u'CoolingCoilsDXVariableSpeed', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling Coil Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_coil_name`')
        self._data["Cooling Coil Name"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self._data["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """  Corresponds to IDD Field `Dehumidification Control Type`
        None = meet sensible load only
        Multimode = activate enhanced dehumidification mode
        as needed and meet sensible load. If no sensible load
        exists, and Run on Latent Load = Yes, and a latent
        load exists, the unit will operate to meet the latent load.
        Valid only with Coil:Cooling:DX:TwoStageWithHumidityControlMode
        or CoilSystem:Cooling:DX:HeatExchangerAssisted.
        CoolReheat = cool beyond the dry bulb setpoint.
        as required to meet the humidity setpoint.
        Valid for all coil types.
        For all dehumidification controls, the max
        humidity setpoint on the Sensor Node is used.
        SetpointManager:SingleZone:Humidity:Maximum,
        SetpointManager:MultiZone:Humidity:Maximum, or
        SetpointManager:MultiZone:MaximumHumidity:Average, and
        SetpointManager:OutdoorAirPretreat (optional) objects.
        
        {u'default': u'None', u'note': [u'None = meet sensible load only', u'Multimode = activate enhanced dehumidification mode', u'as needed and meet sensible load. If no sensible load', u'exists, and Run on Latent Load = Yes, and a latent', u'load exists, the unit will operate to meet the latent load.', u'Valid only with Coil:Cooling:DX:TwoStageWithHumidityControlMode', u'or CoilSystem:Cooling:DX:HeatExchangerAssisted.', u'CoolReheat = cool beyond the dry bulb setpoint.', u'as required to meet the humidity setpoint.', u'Valid for all coil types.', u'For all dehumidification controls, the max', u'humidity setpoint on the Sensor Node is used.', u'SetpointManager:SingleZone:Humidity:Maximum,', u'SetpointManager:MultiZone:Humidity:Maximum, or', u'SetpointManager:MultiZone:MaximumHumidity:Average, and', u'SetpointManager:OutdoorAirPretreat (optional) objects.'], u'type': u'choice', u'key': [u'None', u'Multimode', u'CoolReheat'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Dehumidification Control Type`
                Accepted values are:
                      - None
                      - Multimode
                      - CoolReheat
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `dehumidification_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `dehumidification_control_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `dehumidification_control_type`')
            vals = {}
            vals["none"] = "None"
            vals["multimode"] = "Multimode"
            vals["coolreheat"] = "CoolReheat"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `dehumidification_control_type`'.format(value))
            value = vals[value_lower]
        self._data["Dehumidification Control Type"] = value

    @property
    def run_on_sensible_load(self):
        """Get run_on_sensible_load

        Returns:
            str: the value of `run_on_sensible_load` or None if not set
        """
        return self._data["Run on Sensible Load"]

    @run_on_sensible_load.setter
    def run_on_sensible_load(self, value="Yes"):
        """  Corresponds to IDD Field `Run on Sensible Load`
        If Yes, unit will run if there is a sensible load.
        If No, unit will not run if there is only a sensible load.
        Dehumidification controls will be active if specified.
        
        {u'default': u'Yes', u'note': [u'If Yes, unit will run if there is a sensible load.', u'If No, unit will not run if there is only a sensible load.', u'Dehumidification controls will be active if specified.'], u'type': u'choice', u'key': [u'Yes', u'No'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Run on Sensible Load`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `run_on_sensible_load`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `run_on_sensible_load`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `run_on_sensible_load`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `run_on_sensible_load`'.format(value))
            value = vals[value_lower]
        self._data["Run on Sensible Load"] = value

    @property
    def run_on_latent_load(self):
        """Get run_on_latent_load

        Returns:
            str: the value of `run_on_latent_load` or None if not set
        """
        return self._data["Run on Latent Load"]

    @run_on_latent_load.setter
    def run_on_latent_load(self, value="No"):
        """  Corresponds to IDD Field `Run on Latent Load`
        If Yes, unit will run if there is a latent load.
        even if there is no sensible load.
        If No, unit will not run only if there is a latent load.
        Dehumidification controls will be active if specified.
        
        {u'default': u'No', u'note': [u'If Yes, unit will run if there is a latent load.', u'even if there is no sensible load.', u'If No, unit will not run only if there is a latent load.', u'Dehumidification controls will be active if specified.'], u'type': u'choice', u'key': [u'Yes', u'No'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Run on Latent Load`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `run_on_latent_load`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `run_on_latent_load`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `run_on_latent_load`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `run_on_latent_load`'.format(value))
            value = vals[value_lower]
        self._data["Run on Latent Load"] = value

    @property
    def use_outdoor_air_dx_cooling_coil(self):
        """Get use_outdoor_air_dx_cooling_coil

        Returns:
            str: the value of `use_outdoor_air_dx_cooling_coil` or None if not set
        """
        return self._data["Use Outdoor Air DX Cooling Coil"]

    @use_outdoor_air_dx_cooling_coil.setter
    def use_outdoor_air_dx_cooling_coil(self, value="No"):
        """  Corresponds to IDD Field `Use Outdoor Air DX Cooling Coil`
        This input field is designed for use with DX cooling coils with low air flow
        to capacity ratio range (100 - 300 cfm/ton). Typical application is 100% dedicated
        outdoor air system (DOAS). Other air loop or zone HVAC systems with low flow
        to capacity ratio range may also use this input field.  If Yes, the DX cooling
        coil runs as 100% DOAS DX coil or low flow to capacity ratio range.
        If No, the DX cooling coil runs as a regular DX coil. If left blank the
        default is regular DX coil.
        
        {u'default': u'No', u'note': [u'This input field is designed for use with DX cooling coils with low air flow', u'to capacity ratio range (100 - 300 cfm/ton). Typical application is 100% dedicated', u'outdoor air system (DOAS). Other air loop or zone HVAC systems with low flow', u'to capacity ratio range may also use this input field.  If Yes, the DX cooling', u'coil runs as 100% DOAS DX coil or low flow to capacity ratio range.', u'If No, the DX cooling coil runs as a regular DX coil. If left blank the', u'default is regular DX coil.'], u'type': u'choice', u'key': [u'Yes', u'No'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Use Outdoor Air DX Cooling Coil`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `use_outdoor_air_dx_cooling_coil`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `use_outdoor_air_dx_cooling_coil`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `use_outdoor_air_dx_cooling_coil`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `use_outdoor_air_dx_cooling_coil`'.format(value))
            value = vals[value_lower]
        self._data["Use Outdoor Air DX Cooling Coil"] = value

    @property
    def outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature(self):
        """Get outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature

        Returns:
            float: the value of `outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature` or None if not set
        """
        return self._data["Outdoor Air DX Cooling Coil Leaving Minimum Air Temperature"]

    @outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature.setter
    def outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature(self, value=2.0 ):
        """  Corresponds to IDD Field `Outdoor Air DX Cooling Coil Leaving Minimum Air Temperature`
        DX cooling coil leaving minimum air temperature defines the minimum DX cooling coil
        leaving air temperature that should be maintained to avoid frost formation. This input
        field is optional and only used along with the input field above.
        
        {'pytype': 'float', u'default': '2.0', u'maximum': '7.2', u'note': [u'DX cooling coil leaving minimum air temperature defines the minimum DX cooling coil', u'leaving air temperature that should be maintained to avoid frost formation. This input', u'field is optional and only used along with the input field above.'], u'minimum': '0.0', u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Outdoor Air DX Cooling Coil Leaving Minimum Air Temperature`
                Units: C
                Default value: 2.0
                value >= 0.0
                value <= 7.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature`')
            if value > 7.2:
                raise ValueError('value need to be smaller 7.2 '
                                 'for field `outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature`')
        self._data["Outdoor Air DX Cooling Coil Leaving Minimum Air Temperature"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilSystemHeatingDx(object):
    """ Corresponds to IDD object `CoilSystem:Heating:DX`
        Virtual container component that consists of a DX heating coil (heat pump) and its
        associated controls. This control object supports two different types of DX heating
        coils and may be placed directly in an air loop branch or outdoor air equipment list.
    
    """
    internal_name = "CoilSystem:Heating:DX"
    field_count = 4
    required_fields = ["Name", "Heating Coil Object Type", "Heating Coil Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `CoilSystem:Heating:DX`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Heating Coil Object Type"] = None
        self._data["Heating Coil Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_coil_object_type = None
        else:
            self.heating_coil_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heating_coil_name = None
        else:
            self.heating_coil_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type

        Returns:
            str: the value of `heating_coil_object_type` or None if not set
        """
        return self._data["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `Heating Coil Object Type`
        
        {u'type': u'choice', u'key': [u'Coil:Heating:DX:SingleSpeed', u'Coil:Heating:DX:VariableSpeed'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heating Coil Object Type`
                Accepted values are:
                      - Coil:Heating:DX:SingleSpeed
                      - Coil:Heating:DX:VariableSpeed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_coil_object_type`')
            vals = {}
            vals["coil:heating:dx:singlespeed"] = "Coil:Heating:DX:SingleSpeed"
            vals["coil:heating:dx:variablespeed"] = "Coil:Heating:DX:VariableSpeed"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heating_coil_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name

        Returns:
            str: the value of `heating_coil_name` or None if not set
        """
        return self._data["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """  Corresponds to IDD Field `Heating Coil Name`
        
        {u'type': u'object-list', u'object-list': u'HeatingCoilsDXVariableSpeed', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heating Coil Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heating_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heating_coil_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heating_coil_name`')
        self._data["Heating Coil Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilSystemCoolingWaterHeatExchangerAssisted(object):
    """ Corresponds to IDD object `CoilSystem:Cooling:Water:HeatExchangerAssisted`
        Virtual component consisting of a chilled-water cooling coil and an air-to-air heat
        exchanger. The air-to-air heat exchanger precools the air entering the cooling coil
        and reuses this energy to reheat the supply air leaving the cooling coil. This heat
        exchange process improves the latent removal performance of the cooling coil (lower
        sensible heat ratio).
    
    """
    internal_name = "CoilSystem:Cooling:Water:HeatExchangerAssisted"
    field_count = 5
    required_fields = ["Name", "Heat Exchanger Object Type", "Heat Exchanger Name", "Cooling Coil Object Type", "Cooling Coil Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `CoilSystem:Cooling:Water:HeatExchangerAssisted`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Heat Exchanger Object Type"] = None
        self._data["Heat Exchanger Name"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_exchanger_object_type = None
        else:
            self.heat_exchanger_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_exchanger_name = None
        else:
            self.heat_exchanger_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {'type': 'alpha', u'reference': u'CoolingCoilsWater', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def heat_exchanger_object_type(self):
        """Get heat_exchanger_object_type

        Returns:
            str: the value of `heat_exchanger_object_type` or None if not set
        """
        return self._data["Heat Exchanger Object Type"]

    @heat_exchanger_object_type.setter
    def heat_exchanger_object_type(self, value=None):
        """  Corresponds to IDD Field `Heat Exchanger Object Type`
        
        {u'type': u'choice', u'key': [u'HeatExchanger:AirToAir:FlatPlate', u'HeatExchanger:AirToAir:SensibleAndLatent'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heat Exchanger Object Type`
                Accepted values are:
                      - HeatExchanger:AirToAir:FlatPlate
                      - HeatExchanger:AirToAir:SensibleAndLatent
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_exchanger_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_exchanger_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_exchanger_object_type`')
            vals = {}
            vals["heatexchanger:airtoair:flatplate"] = "HeatExchanger:AirToAir:FlatPlate"
            vals["heatexchanger:airtoair:sensibleandlatent"] = "HeatExchanger:AirToAir:SensibleAndLatent"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heat_exchanger_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Heat Exchanger Object Type"] = value

    @property
    def heat_exchanger_name(self):
        """Get heat_exchanger_name

        Returns:
            str: the value of `heat_exchanger_name` or None if not set
        """
        return self._data["Heat Exchanger Name"]

    @heat_exchanger_name.setter
    def heat_exchanger_name(self, value=None):
        """  Corresponds to IDD Field `Heat Exchanger Name`
        
        {'type': 'alpha', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heat Exchanger Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_exchanger_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_exchanger_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_exchanger_name`')
        self._data["Heat Exchanger Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `Cooling Coil Object Type`
        
        {u'type': u'choice', u'key': [u'Coil:Cooling:Water', u'Coil:Cooling:Water:DetailedGeometry'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling Coil Object Type`
                Accepted values are:
                      - Coil:Cooling:Water
                      - Coil:Cooling:Water:DetailedGeometry
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_coil_object_type`')
            vals = {}
            vals["coil:cooling:water"] = "Coil:Cooling:Water"
            vals["coil:cooling:water:detailedgeometry"] = "Coil:Cooling:Water:DetailedGeometry"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `cooling_coil_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Coil Name`
        
        {u'type': u'object-list', u'object-list': u'CoolingCoilsWaterNoHX', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling Coil Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_coil_name`')
        self._data["Cooling Coil Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilSystemCoolingDxHeatExchangerAssisted(object):
    """ Corresponds to IDD object `CoilSystem:Cooling:DX:HeatExchangerAssisted`
        Virtual component consisting of a direct expansion (DX) cooling coil and an
        air-to-air heat exchanger. The air-to-air heat exchanger precools the air entering the
        cooling coil and reuses this energy to reheat the supply air leaving the cooling
        coil. This heat exchange process improves the latent removal performance of the
        cooling coil (lower sensible heat ratio).
    
    """
    internal_name = "CoilSystem:Cooling:DX:HeatExchangerAssisted"
    field_count = 5
    required_fields = ["Name", "Heat Exchanger Object Type", "Heat Exchanger Name", "Cooling Coil Object Type", "Cooling Coil Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `CoilSystem:Cooling:DX:HeatExchangerAssisted`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Heat Exchanger Object Type"] = None
        self._data["Heat Exchanger Name"] = None
        self._data["Cooling Coil Object Type"] = None
        self._data["Cooling Coil Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_exchanger_object_type = None
        else:
            self.heat_exchanger_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_exchanger_name = None
        else:
            self.heat_exchanger_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_coil_object_type = None
        else:
            self.cooling_coil_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_coil_name = None
        else:
            self.cooling_coil_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {'type': 'alpha', u'reference': u'CoolingCoilsDXMultiModeOrSingleSpeed', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def heat_exchanger_object_type(self):
        """Get heat_exchanger_object_type

        Returns:
            str: the value of `heat_exchanger_object_type` or None if not set
        """
        return self._data["Heat Exchanger Object Type"]

    @heat_exchanger_object_type.setter
    def heat_exchanger_object_type(self, value=None):
        """  Corresponds to IDD Field `Heat Exchanger Object Type`
        
        {u'type': u'choice', u'key': [u'HeatExchanger:AirToAir:FlatPlate', u'HeatExchanger:AirToAir:SensibleAndLatent', u'HeatExchanger:Desiccant:BalancedFlow'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heat Exchanger Object Type`
                Accepted values are:
                      - HeatExchanger:AirToAir:FlatPlate
                      - HeatExchanger:AirToAir:SensibleAndLatent
                      - HeatExchanger:Desiccant:BalancedFlow
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_exchanger_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_exchanger_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_exchanger_object_type`')
            vals = {}
            vals["heatexchanger:airtoair:flatplate"] = "HeatExchanger:AirToAir:FlatPlate"
            vals["heatexchanger:airtoair:sensibleandlatent"] = "HeatExchanger:AirToAir:SensibleAndLatent"
            vals["heatexchanger:desiccant:balancedflow"] = "HeatExchanger:Desiccant:BalancedFlow"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heat_exchanger_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Heat Exchanger Object Type"] = value

    @property
    def heat_exchanger_name(self):
        """Get heat_exchanger_name

        Returns:
            str: the value of `heat_exchanger_name` or None if not set
        """
        return self._data["Heat Exchanger Name"]

    @heat_exchanger_name.setter
    def heat_exchanger_name(self, value=None):
        """  Corresponds to IDD Field `Heat Exchanger Name`
        
        {u'type': u'object-list', u'object-list': u'HXAirToAirNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heat Exchanger Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_exchanger_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_exchanger_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_exchanger_name`')
        self._data["Heat Exchanger Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set
        """
        return self._data["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `Cooling Coil Object Type`
        
        {u'type': u'choice', u'key': [u'Coil:Cooling:DX:SingleSpeed'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling Coil Object Type`
                Accepted values are:
                      - Coil:Cooling:DX:SingleSpeed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_coil_object_type`')
            vals = {}
            vals["coil:cooling:dx:singlespeed"] = "Coil:Cooling:DX:SingleSpeed"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `cooling_coil_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name

        Returns:
            str: the value of `cooling_coil_name` or None if not set
        """
        return self._data["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Coil Name`
        
        {u'type': u'object-list', u'object-list': u'CoolingCoilsDXSingleSpeed', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling Coil Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_coil_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_coil_name`')
        self._data["Cooling Coil Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class CoilCoolingDxSingleSpeedThermalStorage(object):
    """ Corresponds to IDD object `Coil:Cooling:DX:SingleSpeed:ThermalStorage`
        Direct expansion (DX) cooling coil and condensing unit (includes electric compressor
        and condenser fan), single-speed with packaged integrated thermal storage for cooling.
        
    
    """
    internal_name = "Coil:Cooling:DX:SingleSpeed:ThermalStorage"
    field_count = 106
    required_fields = ["Name", "Operating Mode Control Method", "Storage Type", "Storage Tank Ambient Temperature Node Name", "Storage Tank to Ambient U-value Times Area Heat Transfer Coefficient", "Rated Evaporator Air Flow Rate", "Evaporator Air Inlet Node Name", "Evaporator Air Outlet Node Name", "Cooling Only Mode Available", "Cooling And Charge Mode Available", "Cooling And Discharge Mode Available", "Charge Only Mode Available", "Discharge Only Mode Available", "Condenser Air Inlet Node Name", "Condenser Air Outlet Node Name", "Condenser Design Air Flow Rate"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Coil:Cooling:DX:SingleSpeed:ThermalStorage`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Operating Mode Control Method"] = None
        self._data["Operation Mode Control Schedule Name"] = None
        self._data["Storage Type"] = None
        self._data["User Defined Fluid Type"] = None
        self._data["Fluid Storage Volume"] = None
        self._data["Ice Storage Capacity"] = None
        self._data["Storage Capacity Sizing Factor"] = None
        self._data["Storage Tank Ambient Temperature Node Name"] = None
        self._data["Storage Tank to Ambient U-value Times Area Heat Transfer Coefficient"] = None
        self._data["Fluid Storage Tank Rating Temperature"] = None
        self._data["Rated Evaporator Air Flow Rate"] = None
        self._data["Evaporator Air Inlet Node Name"] = None
        self._data["Evaporator Air Outlet Node Name"] = None
        self._data["Cooling Only Mode Available"] = None
        self._data["Cooling Only Mode Rated Total Evaporator Cooling Capacity"] = None
        self._data["Cooling Only Mode Rated Sensible Heat Ratio"] = None
        self._data["Cooling Only Mode Rated COP"] = None
        self._data["Cooling Only Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Cooling Only Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Cooling Only Mode Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Cooling Only Mode Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Cooling Only Mode Part Load Fraction Correlation Curve Name"] = None
        self._data["Cooling Only Mode Sensible Heat Ratio Function of Temperature Curve Name"] = None
        self._data["Cooling Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Cooling And Charge Mode Available"] = None
        self._data["Cooling And Charge Mode Rated Total Evaporator Cooling Capacity"] = None
        self._data["Cooling And Charge Mode Capacity Sizing Factor"] = None
        self._data["Cooling And Charge Mode Rated Storage Charging Capacity"] = None
        self._data["Cooling And Charge Mode Storage Capacity Sizing Factor"] = None
        self._data["Cooling And Charge Mode Rated Sensible Heat Ratio"] = None
        self._data["Cooling And Charge Mode Cooling Rated COP"] = None
        self._data["Cooling And Charge Mode Charging Rated COP"] = None
        self._data["Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Cooling And Charge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Cooling And Charge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Cooling And Charge Mode Evaporator Part Load Fraction Correlation Curve Name"] = None
        self._data["Cooling And Charge Mode Storage Charge Capacity Function of Temperature Curve Name"] = None
        self._data["Cooling And Charge Mode Storage Charge Capacity Function of Total Evaporator PLR Curve Name"] = None
        self._data["Cooling And Charge Mode Storage Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Cooling And Charge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Cooling And Charge Mode Storage Energy Part Load Fraction Correlation Curve Name"] = None
        self._data["Cooling And Charge Mode Sensible Heat Ratio Function of Temperature Curve Name"] = None
        self._data["Cooling And Charge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Cooling And Discharge Mode Available"] = None
        self._data["Cooling And Discharge Mode Rated Total Evaporator Cooling Capacity"] = None
        self._data["Cooling And Discharge Mode Evaporator Capacity Sizing Factor"] = None
        self._data["Cooling And Discharge Mode Rated Storage Discharging Capacity"] = None
        self._data["Cooling And Discharge Mode Storage Discharge Capacity Sizing Factor"] = None
        self._data["Cooling And Discharge Mode Rated Sensible Heat Ratio"] = None
        self._data["Cooling And Discharge Mode Cooling Rated COP"] = None
        self._data["Cooling And Discharge Mode Discharging Rated COP"] = None
        self._data["Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name"] = None
        self._data["Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Cooling And Discharge Mode Evaporator Part Load Fraction Correlation Curve Name"] = None
        self._data["Cooling And Discharge Mode Storage Disharge Capacity Function of Temperature Curve Name"] = None
        self._data["Cooling And Discharge Mode Storage Disharge Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Cooling And Discharge Mode Storage Discharge Capacity Function of Total Evaporator PLR Curve Name"] = None
        self._data["Cooling And Discharge Mode Storage Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Cooling And Discharge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Cooling And Discharge Mode Storage Energy Part Load Fraction Correlation Curve Name"] = None
        self._data["Cooling And Discharge Mode Sensible Heat Ratio Function of Temperature Curve Name"] = None
        self._data["Cooling And Discharge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Charge Only Mode Available"] = None
        self._data["Charge Only Mode Rated Storage Charging Capacity"] = None
        self._data["Charge Only Mode Capacity Sizing Factor"] = None
        self._data["Charge Only Mode Charging Rated COP"] = None
        self._data["Charge Only Mode Storage Charge Capacity Function of Temperature Curve Name"] = None
        self._data["Charge Only Mode Storage Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Discharge Only Mode Available"] = None
        self._data["Discharge Only Mode Rated Storage Discharging Capacity"] = None
        self._data["Discharge Only Mode Capacity Sizing Factor"] = None
        self._data["Discharge Only Mode Rated Sensible Heat Ratio"] = None
        self._data["Discharge Only Mode Rated COP"] = None
        self._data["Discharge Only Mode Storage Discharge Capacity Function of Temperature Curve Name"] = None
        self._data["Discharge Only Mode Storage Discharge Capacity Function of Flow Fraction Curve Name"] = None
        self._data["Discharge Only Mode Energy Input Ratio Function of Temperature Curve Name"] = None
        self._data["Discharge Only Mode Energy Input Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Discharge Only Mode Part Load Fraction Correlation Curve Name"] = None
        self._data["Discharge Only Mode Sensible Heat Ratio Function of Temperature Curve Name"] = None
        self._data["Discharge Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"] = None
        self._data["Ancillary Electric Power"] = None
        self._data["Cold Weather Operation Minimum Outdoor Air Temperature"] = None
        self._data["Cold Weather Operation Ancillary Power"] = None
        self._data["Condenser Air Inlet Node Name"] = None
        self._data["Condenser Air Outlet Node Name"] = None
        self._data["Condenser Design Air Flow Rate"] = None
        self._data["Condenser Air Flow Sizing Factor"] = None
        self._data["Condenser Type"] = None
        self._data["Evaporative Condenser Effectiveness"] = None
        self._data["Evaporative Condenser Pump Rated Power Consumption"] = None
        self._data["Basin Heater Capacity"] = None
        self._data["Basin Heater Setpoint Temperature"] = None
        self._data["Basin Heater Availability Schedule Name"] = None
        self._data["Supply Water Storage Tank Name"] = None
        self._data["Condensate Collection Water Storage Tank Name"] = None
        self._data["Storage Tank Plant Connection Inlet Node Name"] = None
        self._data["Storage Tank Plant Connection Outlet Node Name"] = None
        self._data["Storage Tank Plant Connection Design Flow Rate"] = None
        self._data["Storage Tank Plant Connection Heat Transfer Effectiveness"] = None
        self._data["Storage Tank Minimum Operating Limit Fluid Temperature"] = None
        self._data["Storage Tank Maximum Operating Limit Fluid Temperature"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.operating_mode_control_method = None
        else:
            self.operating_mode_control_method = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.operation_mode_control_schedule_name = None
        else:
            self.operation_mode_control_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.storage_type = None
        else:
            self.storage_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.user_defined_fluid_type = None
        else:
            self.user_defined_fluid_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fluid_storage_volume = None
        else:
            self.fluid_storage_volume = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ice_storage_capacity = None
        else:
            self.ice_storage_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.storage_capacity_sizing_factor = None
        else:
            self.storage_capacity_sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.storage_tank_ambient_temperature_node_name = None
        else:
            self.storage_tank_ambient_temperature_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.storage_tank_to_ambient_uvalue_times_area_heat_transfer_coefficient = None
        else:
            self.storage_tank_to_ambient_uvalue_times_area_heat_transfer_coefficient = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.fluid_storage_tank_rating_temperature = None
        else:
            self.fluid_storage_tank_rating_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_evaporator_air_flow_rate = None
        else:
            self.rated_evaporator_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.evaporator_air_inlet_node_name = None
        else:
            self.evaporator_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.evaporator_air_outlet_node_name = None
        else:
            self.evaporator_air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_only_mode_available = None
        else:
            self.cooling_only_mode_available = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_only_mode_rated_total_evaporator_cooling_capacity = None
        else:
            self.cooling_only_mode_rated_total_evaporator_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_only_mode_rated_sensible_heat_ratio = None
        else:
            self.cooling_only_mode_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_only_mode_rated_cop = None
        else:
            self.cooling_only_mode_rated_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_only_mode_part_load_fraction_correlation_curve_name = None
        else:
            self.cooling_only_mode_part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name = None
        else:
            self.cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_available = None
        else:
            self.cooling_and_charge_mode_available = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_rated_total_evaporator_cooling_capacity = None
        else:
            self.cooling_and_charge_mode_rated_total_evaporator_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_capacity_sizing_factor = None
        else:
            self.cooling_and_charge_mode_capacity_sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_rated_storage_charging_capacity = None
        else:
            self.cooling_and_charge_mode_rated_storage_charging_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_storage_capacity_sizing_factor = None
        else:
            self.cooling_and_charge_mode_storage_capacity_sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_rated_sensible_heat_ratio = None
        else:
            self.cooling_and_charge_mode_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_cooling_rated_cop = None
        else:
            self.cooling_and_charge_mode_cooling_rated_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_charging_rated_cop = None
        else:
            self.cooling_and_charge_mode_charging_rated_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name = None
        else:
            self.cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_name = None
        else:
            self.cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_curve_name = None
        else:
            self.cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name = None
        else:
            self.cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name = None
        else:
            self.cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_available = None
        else:
            self.cooling_and_discharge_mode_available = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity = None
        else:
            self.cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_evaporator_capacity_sizing_factor = None
        else:
            self.cooling_and_discharge_mode_evaporator_capacity_sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_rated_storage_discharging_capacity = None
        else:
            self.cooling_and_discharge_mode_rated_storage_discharging_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor = None
        else:
            self.cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_rated_sensible_heat_ratio = None
        else:
            self.cooling_and_discharge_mode_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_cooling_rated_cop = None
        else:
            self.cooling_and_discharge_mode_cooling_rated_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_discharging_rated_cop = None
        else:
            self.cooling_and_discharge_mode_discharging_rated_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name = None
        else:
            self.cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name = None
        else:
            self.cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_storage_disharge_capacity_function_of_temperature_curve_name = None
        else:
            self.cooling_and_discharge_mode_storage_disharge_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_storage_disharge_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.cooling_and_discharge_mode_storage_disharge_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporator_plr_curve_name = None
        else:
            self.cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporator_plr_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_name = None
        else:
            self.cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name = None
        else:
            self.cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.charge_only_mode_available = None
        else:
            self.charge_only_mode_available = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.charge_only_mode_rated_storage_charging_capacity = None
        else:
            self.charge_only_mode_rated_storage_charging_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.charge_only_mode_capacity_sizing_factor = None
        else:
            self.charge_only_mode_capacity_sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.charge_only_mode_charging_rated_cop = None
        else:
            self.charge_only_mode_charging_rated_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name = None
        else:
            self.charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.discharge_only_mode_available = None
        else:
            self.discharge_only_mode_available = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.discharge_only_mode_rated_storage_discharging_capacity = None
        else:
            self.discharge_only_mode_rated_storage_discharging_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.discharge_only_mode_capacity_sizing_factor = None
        else:
            self.discharge_only_mode_capacity_sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.discharge_only_mode_rated_sensible_heat_ratio = None
        else:
            self.discharge_only_mode_rated_sensible_heat_ratio = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.discharge_only_mode_rated_cop = None
        else:
            self.discharge_only_mode_rated_cop = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name = None
        else:
            self.discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name = None
        else:
            self.discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name = None
        else:
            self.discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.discharge_only_mode_part_load_fraction_correlation_curve_name = None
        else:
            self.discharge_only_mode_part_load_fraction_correlation_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name = None
        else:
            self.discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name = None
        else:
            self.discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ancillary_electric_power = None
        else:
            self.ancillary_electric_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cold_weather_operation_minimum_outdoor_air_temperature = None
        else:
            self.cold_weather_operation_minimum_outdoor_air_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.cold_weather_operation_ancillary_power = None
        else:
            self.cold_weather_operation_ancillary_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_air_inlet_node_name = None
        else:
            self.condenser_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_air_outlet_node_name = None
        else:
            self.condenser_air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_design_air_flow_rate = None
        else:
            self.condenser_design_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_air_flow_sizing_factor = None
        else:
            self.condenser_air_flow_sizing_factor = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condenser_type = None
        else:
            self.condenser_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.evaporative_condenser_effectiveness = None
        else:
            self.evaporative_condenser_effectiveness = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.evaporative_condenser_pump_rated_power_consumption = None
        else:
            self.evaporative_condenser_pump_rated_power_consumption = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_capacity = None
        else:
            self.basin_heater_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_setpoint_temperature = None
        else:
            self.basin_heater_setpoint_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.basin_heater_availability_schedule_name = None
        else:
            self.basin_heater_availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.supply_water_storage_tank_name = None
        else:
            self.supply_water_storage_tank_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.condensate_collection_water_storage_tank_name = None
        else:
            self.condensate_collection_water_storage_tank_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.storage_tank_plant_connection_inlet_node_name = None
        else:
            self.storage_tank_plant_connection_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.storage_tank_plant_connection_outlet_node_name = None
        else:
            self.storage_tank_plant_connection_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.storage_tank_plant_connection_design_flow_rate = None
        else:
            self.storage_tank_plant_connection_design_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.storage_tank_plant_connection_heat_transfer_effectiveness = None
        else:
            self.storage_tank_plant_connection_heat_transfer_effectiveness = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.storage_tank_minimum_operating_limit_fluid_temperature = None
        else:
            self.storage_tank_minimum_operating_limit_fluid_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.storage_tank_maximum_operating_limit_fluid_temperature = None
        else:
            self.storage_tank_maximum_operating_limit_fluid_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'AFNCoilNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def operating_mode_control_method(self):
        """Get operating_mode_control_method

        Returns:
            str: the value of `operating_mode_control_method` or None if not set
        """
        return self._data["Operating Mode Control Method"]

    @operating_mode_control_method.setter
    def operating_mode_control_method(self, value=None):
        """  Corresponds to IDD Field `Operating Mode Control Method`
        
        {u'type': u'choice', u'key': [u'ScheduledModes', u'EMSControlled'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Operating Mode Control Method`
                Accepted values are:
                      - ScheduledModes
                      - EMSControlled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `operating_mode_control_method`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `operating_mode_control_method`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `operating_mode_control_method`')
            vals = {}
            vals["scheduledmodes"] = "ScheduledModes"
            vals["emscontrolled"] = "EMSControlled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `operating_mode_control_method`'.format(value))
            value = vals[value_lower]
        self._data["Operating Mode Control Method"] = value

    @property
    def operation_mode_control_schedule_name(self):
        """Get operation_mode_control_schedule_name

        Returns:
            str: the value of `operation_mode_control_schedule_name` or None if not set
        """
        return self._data["Operation Mode Control Schedule Name"]

    @operation_mode_control_schedule_name.setter
    def operation_mode_control_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Operation Mode Control Schedule Name`
        This field is used if the control method is set to ScheduledModes
        Schedule values control operating mode: 0=off, 1=cooling only, 2= cooling and charge,
        3= cooling and discharge, 4= charge only, and 5= discharge only
        
        {u'note': [u'This field is used if the control method is set to ScheduledModes', u'Schedule values control operating mode: 0=off, 1=cooling only, 2= cooling and charge,', u'3= cooling and discharge, 4= charge only, and 5= discharge only'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Operation Mode Control Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `operation_mode_control_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `operation_mode_control_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `operation_mode_control_schedule_name`')
        self._data["Operation Mode Control Schedule Name"] = value

    @property
    def storage_type(self):
        """Get storage_type

        Returns:
            str: the value of `storage_type` or None if not set
        """
        return self._data["Storage Type"]

    @storage_type.setter
    def storage_type(self, value=None):
        """  Corresponds to IDD Field `Storage Type`
        
        {u'type': u'choice', u'required-field': True, u'key': [u'Water', u'UserDefinedFluidType', u'Ice'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Storage Type`
                Accepted values are:
                      - Water
                      - UserDefinedFluidType
                      - Ice
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `storage_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `storage_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `storage_type`')
            vals = {}
            vals["water"] = "Water"
            vals["userdefinedfluidtype"] = "UserDefinedFluidType"
            vals["ice"] = "Ice"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `storage_type`'.format(value))
            value = vals[value_lower]
        self._data["Storage Type"] = value

    @property
    def user_defined_fluid_type(self):
        """Get user_defined_fluid_type

        Returns:
            str: the value of `user_defined_fluid_type` or None if not set
        """
        return self._data["User Defined Fluid Type"]

    @user_defined_fluid_type.setter
    def user_defined_fluid_type(self, value=None):
        """  Corresponds to IDD Field `User Defined Fluid Type`
        This field is required when Storage Type is UserDefinedFluidType
        
        {u'note': [u'This field is required when Storage Type is UserDefinedFluidType'], u'type': u'object-list', u'object-list': u'FluidAndGlycolNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `User Defined Fluid Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `user_defined_fluid_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `user_defined_fluid_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `user_defined_fluid_type`')
        self._data["User Defined Fluid Type"] = value

    @property
    def fluid_storage_volume(self):
        """Get fluid_storage_volume

        Returns:
            float: the value of `fluid_storage_volume` or None if not set
        """
        return self._data["Fluid Storage Volume"]

    @fluid_storage_volume.setter
    def fluid_storage_volume(self, value=None):
        """  Corresponds to IDD Field `Fluid Storage Volume`
        required field if Storage Type is Water or UserDefinedFluidType
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'required field if Storage Type is Water or UserDefinedFluidType'], u'units': u'm3', u'autocalculatable': True, u'type': u'real'}

        Args:
            value (float or "Autocalculate"): value for IDD Field `Fluid Storage Volume`
                Units: m3
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Fluid Storage Volume"] = value
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fluid_storage_volume`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `fluid_storage_volume`')
        self._data["Fluid Storage Volume"] = value

    @property
    def ice_storage_capacity(self):
        """Get ice_storage_capacity

        Returns:
            float: the value of `ice_storage_capacity` or None if not set
        """
        return self._data["Ice Storage Capacity"]

    @ice_storage_capacity.setter
    def ice_storage_capacity(self, value=None):
        """  Corresponds to IDD Field `Ice Storage Capacity`
        required field if Storage Type is Ice
        
        {'pytype': 'float', u'minimum>': '0.0', u'note': [u'required field if Storage Type is Ice'], u'units': u'GJ', u'autocalculatable': True, u'type': u'real'}

        Args:
            value (float or "Autocalculate"): value for IDD Field `Ice Storage Capacity`
                Units: GJ
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Ice Storage Capacity"] = value
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `ice_storage_capacity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `ice_storage_capacity`')
        self._data["Ice Storage Capacity"] = value

    @property
    def storage_capacity_sizing_factor(self):
        """Get storage_capacity_sizing_factor

        Returns:
            float: the value of `storage_capacity_sizing_factor` or None if not set
        """
        return self._data["Storage Capacity Sizing Factor"]

    @storage_capacity_sizing_factor.setter
    def storage_capacity_sizing_factor(self, value=None):
        """  Corresponds to IDD Field `Storage Capacity Sizing Factor`
        If one of the previous two fields is set to autocalculate, this determines the storage capacity
        as a function of Cooling Only Mode Rated Total Evaporator Cooling Capacity
        
        
        {u'units': u'hr', u'note': [u'If one of the previous two fields is set to autocalculate, this determines the storage capacity', u'as a function of Cooling Only Mode Rated Total Evaporator Cooling Capacity', u''], u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Storage Capacity Sizing Factor`
                Units: hr
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `storage_capacity_sizing_factor`'.format(value))
        self._data["Storage Capacity Sizing Factor"] = value

    @property
    def storage_tank_ambient_temperature_node_name(self):
        """Get storage_tank_ambient_temperature_node_name

        Returns:
            str: the value of `storage_tank_ambient_temperature_node_name` or None if not set
        """
        return self._data["Storage Tank Ambient Temperature Node Name"]

    @storage_tank_ambient_temperature_node_name.setter
    def storage_tank_ambient_temperature_node_name(self, value=None):
        """  Corresponds to IDD Field `Storage Tank Ambient Temperature Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Storage Tank Ambient Temperature Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `storage_tank_ambient_temperature_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `storage_tank_ambient_temperature_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `storage_tank_ambient_temperature_node_name`')
        self._data["Storage Tank Ambient Temperature Node Name"] = value

    @property
    def storage_tank_to_ambient_uvalue_times_area_heat_transfer_coefficient(self):
        """Get storage_tank_to_ambient_uvalue_times_area_heat_transfer_coefficient

        Returns:
            float: the value of `storage_tank_to_ambient_uvalue_times_area_heat_transfer_coefficient` or None if not set
        """
        return self._data["Storage Tank to Ambient U-value Times Area Heat Transfer Coefficient"]

    @storage_tank_to_ambient_uvalue_times_area_heat_transfer_coefficient.setter
    def storage_tank_to_ambient_uvalue_times_area_heat_transfer_coefficient(self, value=None):
        """  Corresponds to IDD Field `Storage Tank to Ambient U-value Times Area Heat Transfer Coefficient`
        
        {u'units': u'W/K', u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Storage Tank to Ambient U-value Times Area Heat Transfer Coefficient`
                Units: W/K
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `storage_tank_to_ambient_uvalue_times_area_heat_transfer_coefficient`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `storage_tank_to_ambient_uvalue_times_area_heat_transfer_coefficient`')
        self._data["Storage Tank to Ambient U-value Times Area Heat Transfer Coefficient"] = value

    @property
    def fluid_storage_tank_rating_temperature(self):
        """Get fluid_storage_tank_rating_temperature

        Returns:
            float: the value of `fluid_storage_tank_rating_temperature` or None if not set
        """
        return self._data["Fluid Storage Tank Rating Temperature"]

    @fluid_storage_tank_rating_temperature.setter
    def fluid_storage_tank_rating_temperature(self, value=None):
        """  Corresponds to IDD Field `Fluid Storage Tank Rating Temperature`
        required field if Storage Type is Water or UserDefinedFluidType
        
        {u'units': u'C', u'note': [u'required field if Storage Type is Water or UserDefinedFluidType'], u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Fluid Storage Tank Rating Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `fluid_storage_tank_rating_temperature`'.format(value))
        self._data["Fluid Storage Tank Rating Temperature"] = value

    @property
    def rated_evaporator_air_flow_rate(self):
        """Get rated_evaporator_air_flow_rate

        Returns:
            float: the value of `rated_evaporator_air_flow_rate` or None if not set
        """
        return self._data["Rated Evaporator Air Flow Rate"]

    @rated_evaporator_air_flow_rate.setter
    def rated_evaporator_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Rated Evaporator Air Flow Rate`
        Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP'], u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Evaporator Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_evaporator_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `rated_evaporator_air_flow_rate`')
        self._data["Rated Evaporator Air Flow Rate"] = value

    @property
    def evaporator_air_inlet_node_name(self):
        """Get evaporator_air_inlet_node_name

        Returns:
            str: the value of `evaporator_air_inlet_node_name` or None if not set
        """
        return self._data["Evaporator Air Inlet Node Name"]

    @evaporator_air_inlet_node_name.setter
    def evaporator_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Evaporator Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Evaporator Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `evaporator_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `evaporator_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `evaporator_air_inlet_node_name`')
        self._data["Evaporator Air Inlet Node Name"] = value

    @property
    def evaporator_air_outlet_node_name(self):
        """Get evaporator_air_outlet_node_name

        Returns:
            str: the value of `evaporator_air_outlet_node_name` or None if not set
        """
        return self._data["Evaporator Air Outlet Node Name"]

    @evaporator_air_outlet_node_name.setter
    def evaporator_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Evaporator Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Evaporator Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `evaporator_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `evaporator_air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `evaporator_air_outlet_node_name`')
        self._data["Evaporator Air Outlet Node Name"] = value

    @property
    def cooling_only_mode_available(self):
        """Get cooling_only_mode_available

        Returns:
            str: the value of `cooling_only_mode_available` or None if not set
        """
        return self._data["Cooling Only Mode Available"]

    @cooling_only_mode_available.setter
    def cooling_only_mode_available(self, value=None):
        """  Corresponds to IDD Field `Cooling Only Mode Available`
        
        {u'type': u'choice', u'key': [u'Yes', u'No'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling Only Mode Available`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_only_mode_available`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_only_mode_available`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_only_mode_available`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `cooling_only_mode_available`'.format(value))
            value = vals[value_lower]
        self._data["Cooling Only Mode Available"] = value

    @property
    def cooling_only_mode_rated_total_evaporator_cooling_capacity(self):
        """Get cooling_only_mode_rated_total_evaporator_cooling_capacity

        Returns:
            float: the value of `cooling_only_mode_rated_total_evaporator_cooling_capacity` or None if not set
        """
        return self._data["Cooling Only Mode Rated Total Evaporator Cooling Capacity"]

    @cooling_only_mode_rated_total_evaporator_cooling_capacity.setter
    def cooling_only_mode_rated_total_evaporator_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Cooling Only Mode Rated Total Evaporator Cooling Capacity`
        required field if Cooling Only Mode is available or if autocalculating sizes
        gross capacity excluding supply air fan heat
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        
        {'pytype': 'float', u'note': [u'required field if Cooling Only Mode is available or if autocalculating sizes', u'gross capacity excluding supply air fan heat', u'rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and', u'air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb'], u'autosizable': u'', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Cooling Only Mode Rated Total Evaporator Cooling Capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_only_mode_rated_total_evaporator_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_only_mode_rated_total_evaporator_cooling_capacity`')
        self._data["Cooling Only Mode Rated Total Evaporator Cooling Capacity"] = value

    @property
    def cooling_only_mode_rated_sensible_heat_ratio(self):
        """Get cooling_only_mode_rated_sensible_heat_ratio

        Returns:
            float: the value of `cooling_only_mode_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Cooling Only Mode Rated Sensible Heat Ratio"]

    @cooling_only_mode_rated_sensible_heat_ratio.setter
    def cooling_only_mode_rated_sensible_heat_ratio(self, value=0.7 ):
        """  Corresponds to IDD Field `Cooling Only Mode Rated Sensible Heat Ratio`
        required field if Cooling Only Mode is available
        Rated sensible heat ratio (gross sensible capacity/gross total capacity)
        sensible and total capacities do not include supply fan heat
        
        {'pytype': 'float', u'default': '0.7', u'maximum': '1.0', u'note': [u'required field if Cooling Only Mode is available', u'Rated sensible heat ratio (gross sensible capacity/gross total capacity)', u'sensible and total capacities do not include supply fan heat'], u'minimum': '0.0', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Cooling Only Mode Rated Sensible Heat Ratio`
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_only_mode_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_only_mode_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `cooling_only_mode_rated_sensible_heat_ratio`')
        self._data["Cooling Only Mode Rated Sensible Heat Ratio"] = value

    @property
    def cooling_only_mode_rated_cop(self):
        """Get cooling_only_mode_rated_cop

        Returns:
            float: the value of `cooling_only_mode_rated_cop` or None if not set
        """
        return self._data["Cooling Only Mode Rated COP"]

    @cooling_only_mode_rated_cop.setter
    def cooling_only_mode_rated_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `Cooling Only Mode Rated COP`
        Gross cooling capacity divided by power input to the compressor and outdoor fan,
        does not include supply fan heat or supply fan electrical energy input
        required field if Cooling Only Mode is available
        
        {'pytype': 'float', u'default': '3.0', u'note': [u'Gross cooling capacity divided by power input to the compressor and outdoor fan,', u'does not include supply fan heat or supply fan electrical energy input', u'required field if Cooling Only Mode is available'], u'minimum': '0.0', u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Cooling Only Mode Rated COP`
                Units: W/W
                Default value: 3.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_only_mode_rated_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_only_mode_rated_cop`')
        self._data["Cooling Only Mode Rated COP"] = value

    @property
    def cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name(self):
        """Get cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling Only Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name"]

    @cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name.setter
    def cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Only Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name`
        required field if Cooling Only Mode is available
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        biquadratic curve = a + b*ewb + c*ewb**2 + d*db + e*db**2 + f*ewb*db
        x = ewb = evaporator entering wetbulb temperature (C)
        y = db = drybulb temperature seen by the condenser (C)
        
        {u'note': [u'required field if Cooling Only Mode is available', u'Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed', u'biquadratic curve = a + b*ewb + c*ewb**2 + d*db + e*db**2 + f*ewb*db', u'x = ewb = evaporator entering wetbulb temperature (C)', u'y = db = drybulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling Only Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Cooling Only Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name(self):
        """Get cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Cooling Only Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name"]

    @cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Only Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name`
        required field if Cooling Only Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow rate
        
        {u'note': [u'required field if Cooling Only Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'x = ff = Fraction of the full load evaporator air flow rate'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling Only Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name`')
        self._data["Cooling Only Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling Only Mode Energy Input Ratio Function of Temperature Curve Name"]

    @cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name.setter
    def cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Only Mode Energy Input Ratio Function of Temperature Curve Name`
        required field if Cooling Only Mode is available
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*ewb + c*ewb**2 + d*db + e*db**2 + f*ewb*db
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = drybulb temperature seen by the condenser (C)
        
        {u'note': [u'required field if Cooling Only Mode is available', u'Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed', u'curve = a + b*ewb + c*ewb**2 + d*db + e*db**2 + f*ewb*db', u'x = ewb = evaporator entering wet-bulb temperature (C)', u'y = db = drybulb temperature seen by the condenser (C)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling Only Mode Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Cooling Only Mode Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Cooling Only Mode Energy Input Ratio Function of Flow Fraction Curve Name"]

    @cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Only Mode Energy Input Ratio Function of Flow Fraction Curve Name`
        required field if Cooling Only Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow
        
        {u'note': [u'required field if Cooling Only Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'x = ff = Fraction of the full load evaporator air flow'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling Only Mode Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Cooling Only Mode Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_only_mode_part_load_fraction_correlation_curve_name(self):
        """Get cooling_only_mode_part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `cooling_only_mode_part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Cooling Only Mode Part Load Fraction Correlation Curve Name"]

    @cooling_only_mode_part_load_fraction_correlation_curve_name.setter
    def cooling_only_mode_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Only Mode Part Load Fraction Correlation Curve Name`
        required field if Cooling Only Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        x = PLR = part load ratio (evaporator cooling load/steady state capacity)
        
        {u'note': [u'required field if Cooling Only Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'x = PLR = part load ratio (evaporator cooling load/steady state capacity)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling Only Mode Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_only_mode_part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_only_mode_part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_only_mode_part_load_fraction_correlation_curve_name`')
        self._data["Cooling Only Mode Part Load Fraction Correlation Curve Name"] = value

    @property
    def cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name(self):
        """Get cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling Only Mode Sensible Heat Ratio Function of Temperature Curve Name"]

    @cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name.setter
    def cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Only Mode Sensible Heat Ratio Function of Temperature Curve Name`
        required field if Cooling Only Mode is available
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb
        x = ewb = evaporator entering wetbulb temperature seen by the cooling coil (C)
        y = edb = evaporator entering drybulb temperature seen by the cooling coil (C)
        
        {u'note': [u'required field if Cooling Only Mode is available', u'Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed', u'curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb', u'x = ewb = evaporator entering wetbulb temperature seen by the cooling coil (C)', u'y = edb = evaporator entering drybulb temperature seen by the cooling coil (C)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling Only Mode Sensible Heat Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name`')
        self._data["Cooling Only Mode Sensible Heat Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name(self):
        """Get cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Cooling Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"]

    @cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name.setter
    def cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name`
        required field if Cooling Only Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow
        
        {u'note': [u'required field if Cooling Only Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'x = ff = Fraction of the full load evaporator air flow'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name`')
        self._data["Cooling Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_charge_mode_available(self):
        """Get cooling_and_charge_mode_available

        Returns:
            str: the value of `cooling_and_charge_mode_available` or None if not set
        """
        return self._data["Cooling And Charge Mode Available"]

    @cooling_and_charge_mode_available.setter
    def cooling_and_charge_mode_available(self, value=None):
        """  Corresponds to IDD Field `Cooling And Charge Mode Available`
        
        {u'type': u'choice', u'key': [u'Yes', u'No'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Available`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_charge_mode_available`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_charge_mode_available`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_charge_mode_available`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `cooling_and_charge_mode_available`'.format(value))
            value = vals[value_lower]
        self._data["Cooling And Charge Mode Available"] = value

    @property
    def cooling_and_charge_mode_rated_total_evaporator_cooling_capacity(self):
        """Get cooling_and_charge_mode_rated_total_evaporator_cooling_capacity

        Returns:
            float: the value of `cooling_and_charge_mode_rated_total_evaporator_cooling_capacity` or None if not set
        """
        return self._data["Cooling And Charge Mode Rated Total Evaporator Cooling Capacity"]

    @cooling_and_charge_mode_rated_total_evaporator_cooling_capacity.setter
    def cooling_and_charge_mode_rated_total_evaporator_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Cooling And Charge Mode Rated Total Evaporator Cooling Capacity`
        required field if Cooling And Charge Mode is available
        gross capacity excluding supply air fan heat
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)
        
        {'pytype': 'float', u'note': [u'required field if Cooling And Charge Mode is available', u'gross capacity excluding supply air fan heat', u'rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and', u'air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb', u'thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)'], u'minimum': '0.0', u'units': u'W', u'autocalculatable': True, u'type': u'real'}

        Args:
            value (float or "Autocalculate"): value for IDD Field `Cooling And Charge Mode Rated Total Evaporator Cooling Capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Cooling And Charge Mode Rated Total Evaporator Cooling Capacity"] = value
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_and_charge_mode_rated_total_evaporator_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_and_charge_mode_rated_total_evaporator_cooling_capacity`')
        self._data["Cooling And Charge Mode Rated Total Evaporator Cooling Capacity"] = value

    @property
    def cooling_and_charge_mode_capacity_sizing_factor(self):
        """Get cooling_and_charge_mode_capacity_sizing_factor

        Returns:
            float: the value of `cooling_and_charge_mode_capacity_sizing_factor` or None if not set
        """
        return self._data["Cooling And Charge Mode Capacity Sizing Factor"]

    @cooling_and_charge_mode_capacity_sizing_factor.setter
    def cooling_and_charge_mode_capacity_sizing_factor(self, value=0.5 ):
        """  Corresponds to IDD Field `Cooling And Charge Mode Capacity Sizing Factor`
        If previous field is autocalculate, this determines the evaporator capacity
        as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity
        
        {u'default': '0.5', u'note': [u'If previous field is autocalculate, this determines the evaporator capacity', u'as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity'], u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Cooling And Charge Mode Capacity Sizing Factor`
                Default value: 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_and_charge_mode_capacity_sizing_factor`'.format(value))
        self._data["Cooling And Charge Mode Capacity Sizing Factor"] = value

    @property
    def cooling_and_charge_mode_rated_storage_charging_capacity(self):
        """Get cooling_and_charge_mode_rated_storage_charging_capacity

        Returns:
            float: the value of `cooling_and_charge_mode_rated_storage_charging_capacity` or None if not set
        """
        return self._data["Cooling And Charge Mode Rated Storage Charging Capacity"]

    @cooling_and_charge_mode_rated_storage_charging_capacity.setter
    def cooling_and_charge_mode_rated_storage_charging_capacity(self, value=None):
        """  Corresponds to IDD Field `Cooling And Charge Mode Rated Storage Charging Capacity`
        required field if Cooling And Charge Mode is available
        net capacity including any internal devices
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)
        
        {'pytype': 'float', u'note': [u'required field if Cooling And Charge Mode is available', u'net capacity including any internal devices', u'rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and', u'air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb', u'thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)'], u'minimum': '0.0', u'units': u'W', u'autocalculatable': True, u'type': u'real'}

        Args:
            value (float or "Autocalculate"): value for IDD Field `Cooling And Charge Mode Rated Storage Charging Capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Cooling And Charge Mode Rated Storage Charging Capacity"] = value
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_and_charge_mode_rated_storage_charging_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_and_charge_mode_rated_storage_charging_capacity`')
        self._data["Cooling And Charge Mode Rated Storage Charging Capacity"] = value

    @property
    def cooling_and_charge_mode_storage_capacity_sizing_factor(self):
        """Get cooling_and_charge_mode_storage_capacity_sizing_factor

        Returns:
            float: the value of `cooling_and_charge_mode_storage_capacity_sizing_factor` or None if not set
        """
        return self._data["Cooling And Charge Mode Storage Capacity Sizing Factor"]

    @cooling_and_charge_mode_storage_capacity_sizing_factor.setter
    def cooling_and_charge_mode_storage_capacity_sizing_factor(self, value=0.5 ):
        """  Corresponds to IDD Field `Cooling And Charge Mode Storage Capacity Sizing Factor`
        If previous field is autocalculate, this determines the storage cooling capacity
        as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity
        
        {u'default': '0.5', u'note': [u'If previous field is autocalculate, this determines the storage cooling capacity', u'as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity'], u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Cooling And Charge Mode Storage Capacity Sizing Factor`
                Default value: 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_and_charge_mode_storage_capacity_sizing_factor`'.format(value))
        self._data["Cooling And Charge Mode Storage Capacity Sizing Factor"] = value

    @property
    def cooling_and_charge_mode_rated_sensible_heat_ratio(self):
        """Get cooling_and_charge_mode_rated_sensible_heat_ratio

        Returns:
            float: the value of `cooling_and_charge_mode_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Cooling And Charge Mode Rated Sensible Heat Ratio"]

    @cooling_and_charge_mode_rated_sensible_heat_ratio.setter
    def cooling_and_charge_mode_rated_sensible_heat_ratio(self, value=0.7 ):
        """  Corresponds to IDD Field `Cooling And Charge Mode Rated Sensible Heat Ratio`
        required field if Cooling And Charge Mode is available
        Rated sensible heat ratio (gross sensible evaporator capacity/gross total evaporator capacity)
        sensible and total capacities do not include supply fan heat
        
        {'pytype': 'float', u'default': '0.7', u'maximum': '1.0', u'note': [u'required field if Cooling And Charge Mode is available', u'Rated sensible heat ratio (gross sensible evaporator capacity/gross total evaporator capacity)', u'sensible and total capacities do not include supply fan heat'], u'minimum': '0.0', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Cooling And Charge Mode Rated Sensible Heat Ratio`
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_and_charge_mode_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_and_charge_mode_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `cooling_and_charge_mode_rated_sensible_heat_ratio`')
        self._data["Cooling And Charge Mode Rated Sensible Heat Ratio"] = value

    @property
    def cooling_and_charge_mode_cooling_rated_cop(self):
        """Get cooling_and_charge_mode_cooling_rated_cop

        Returns:
            float: the value of `cooling_and_charge_mode_cooling_rated_cop` or None if not set
        """
        return self._data["Cooling And Charge Mode Cooling Rated COP"]

    @cooling_and_charge_mode_cooling_rated_cop.setter
    def cooling_and_charge_mode_cooling_rated_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `Cooling And Charge Mode Cooling Rated COP`
        Gross evaporator cooling capacity divided by power input to the compressor (for cooling) and outdoor fan,
        does not include supply fan heat or supply fan electrical energy input
        required field if Cooling And Charge Mode is available
        
        {'pytype': 'float', u'default': '3.0', u'note': [u'Gross evaporator cooling capacity divided by power input to the compressor (for cooling) and outdoor fan,', u'does not include supply fan heat or supply fan electrical energy input', u'required field if Cooling And Charge Mode is available'], u'minimum': '0.0', u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Cooling And Charge Mode Cooling Rated COP`
                Units: W/W
                Default value: 3.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_and_charge_mode_cooling_rated_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_and_charge_mode_cooling_rated_cop`')
        self._data["Cooling And Charge Mode Cooling Rated COP"] = value

    @property
    def cooling_and_charge_mode_charging_rated_cop(self):
        """Get cooling_and_charge_mode_charging_rated_cop

        Returns:
            float: the value of `cooling_and_charge_mode_charging_rated_cop` or None if not set
        """
        return self._data["Cooling And Charge Mode Charging Rated COP"]

    @cooling_and_charge_mode_charging_rated_cop.setter
    def cooling_and_charge_mode_charging_rated_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `Cooling And Charge Mode Charging Rated COP`
        net cooling capacity divided by power input to the compressor (for charging) and outdoor fan,
        includes any internal devices
        required field if Cooling And Charge Mode is available
        
        {'pytype': 'float', u'default': '3.0', u'note': [u'net cooling capacity divided by power input to the compressor (for charging) and outdoor fan,', u'includes any internal devices', u'required field if Cooling And Charge Mode is available'], u'minimum': '0.0', u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Cooling And Charge Mode Charging Rated COP`
                Units: W/W
                Default value: 3.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_and_charge_mode_charging_rated_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_and_charge_mode_charging_rated_cop`')
        self._data["Cooling And Charge Mode Charging Rated COP"] = value

    @property
    def cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name(self):
        """Get cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name"]

    @cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name.setter
    def cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name`
        required field if Cooling And Charge Mode is available
        Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = db, z = stes)
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = drybulb temperature seen by the condenser (C)
        z = stes = state of thermal energy storage (C or fraction)
        
        {u'note': [u'required field if Cooling And Charge Mode is available', u'Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup', u'curve or table = func(x = ewb, y = db, z = stes)', u'x = ewb = evaporator entering wet-bulb temperature (C)', u'y = db = drybulb temperature seen by the condenser (C)', u'z = stes = state of thermal energy storage (C or fraction)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name(self):
        """Get cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name"]

    @cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name`
        required field if Cooling And Charge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow
        
        {u'note': [u'required field if Cooling And Charge Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'x = ff = Fraction of the full load evaporator air flow'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name`')
        self._data["Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling And Charge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name"]

    @cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name.setter
    def cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Charge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name`
        required field if Cooling And Charge Mode is available
        Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = db, z = stes)
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = dry-bulb temperature seen by the condenser (C)
        z = stes = state of thermal energy storage (C or fraction)
        
        {u'note': [u'required field if Cooling And Charge Mode is available', u'Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup', u'curve or table = func(x = ewb, y = db, z = stes)', u'x = ewb = evaporator entering wet-bulb temperature (C)', u'y = db = dry-bulb temperature seen by the condenser (C)', u'z = stes = state of thermal energy storage (C or fraction)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Cooling And Charge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Cooling And Charge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name"]

    @cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Charge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name`
        required field if Cooling And Charge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow
        
        {u'note': [u'required field if Cooling And Charge Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'x = ff = Fraction of the full load evaporator air flow'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Cooling And Charge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name(self):
        """Get cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Cooling And Charge Mode Evaporator Part Load Fraction Correlation Curve Name"]

    @cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name.setter
    def cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Charge Mode Evaporator Part Load Fraction Correlation Curve Name`
        required field if Cooling And Charge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        x = PLR = part load ratio (evaporator cooling load/steady state capacity)
        
        {u'note': [u'required field if Cooling And Charge Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'x = PLR = part load ratio (evaporator cooling load/steady state capacity)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Evaporator Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name`')
        self._data["Cooling And Charge Mode Evaporator Part Load Fraction Correlation Curve Name"] = value

    @property
    def cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_name(self):
        """Get cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling And Charge Mode Storage Charge Capacity Function of Temperature Curve Name"]

    @cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_name.setter
    def cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Charge Mode Storage Charge Capacity Function of Temperature Curve Name`
        required field if Cooling And Charge Mode is available
        Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = db, z = stes)
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = dry-bulb temperature seen by the condenser (C)
        z = stes = state of thermal energy storage (C or fraction)
        
        {u'note': [u'required field if Cooling And Charge Mode is available', u'Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup', u'curve or table = func(x = ewb, y = db, z = stes)', u'x = ewb = evaporator entering wet-bulb temperature (C)', u'y = db = dry-bulb temperature seen by the condenser (C)', u'z = stes = state of thermal energy storage (C or fraction)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Storage Charge Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_name`')
        self._data["Cooling And Charge Mode Storage Charge Capacity Function of Temperature Curve Name"] = value

    @property
    def cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_curve_name(self):
        """Get cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_curve_name

        Returns:
            str: the value of `cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_curve_name` or None if not set
        """
        return self._data["Cooling And Charge Mode Storage Charge Capacity Function of Total Evaporator PLR Curve Name"]

    @cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_curve_name.setter
    def cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Charge Mode Storage Charge Capacity Function of Total Evaporator PLR Curve Name`
        required field if Cooling And Charge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        x = PLR = part load ratio (evaporator cooling load/steady state capacity)
        
        {u'note': [u'required field if Cooling And Charge Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'x = PLR = part load ratio (evaporator cooling load/steady state capacity)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Storage Charge Capacity Function of Total Evaporator PLR Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_curve_name`')
        self._data["Cooling And Charge Mode Storage Charge Capacity Function of Total Evaporator PLR Curve Name"] = value

    @property
    def cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling And Charge Mode Storage Energy Input Ratio Function of Temperature Curve Name"]

    @cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_name.setter
    def cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Charge Mode Storage Energy Input Ratio Function of Temperature Curve Name`
        required field if Cooling And Charge Mode is available
        Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = db, z = stes)
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = dry-bulb temperature seen by the condenser (C)
        z = stes = state of thermal energy storage (C or fraction)
        
        {u'note': [u'required field if Cooling And Charge Mode is available', u'Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup', u'curve or table = func(x = ewb, y = db, z = stes)', u'x = ewb = evaporator entering wet-bulb temperature (C)', u'y = db = dry-bulb temperature seen by the condenser (C)', u'z = stes = state of thermal energy storage (C or fraction)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Storage Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Cooling And Charge Mode Storage Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Cooling And Charge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name"]

    @cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Charge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name`
        required field if Cooling And Charge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow
        
        {u'note': [u'required field if Cooling And Charge Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'x = ff = Fraction of the full load evaporator air flow'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Cooling And Charge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name(self):
        """Get cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Cooling And Charge Mode Storage Energy Part Load Fraction Correlation Curve Name"]

    @cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name.setter
    def cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Charge Mode Storage Energy Part Load Fraction Correlation Curve Name`
        required field if Cooling And Charge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        x = PLR = part load ratio (evaporator cooling load/steady state capacity)
        
        {u'note': [u'required field if Cooling And Charge Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'x = PLR = part load ratio (evaporator cooling load/steady state capacity)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Storage Energy Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name`')
        self._data["Cooling And Charge Mode Storage Energy Part Load Fraction Correlation Curve Name"] = value

    @property
    def cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name(self):
        """Get cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling And Charge Mode Sensible Heat Ratio Function of Temperature Curve Name"]

    @cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name.setter
    def cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Charge Mode Sensible Heat Ratio Function of Temperature Curve Name`
        required field if Cooling And Charge Mode is available
        Curves or tables with either two or three independent variables can be used.
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb
        x = ewb = entering wet-bulb temperature seen by the cooling coil (C)
        y = edb = entering dry-bulb temperature seen by the cooling coil (C)
        Also allows Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = edb, z = stes)
        z = stes = state of thermal energy storage (C or fraction)
        
        {u'note': [u'required field if Cooling And Charge Mode is available', u'Curves or tables with either two or three independent variables can be used.', u'Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed', u'curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb', u'x = ewb = entering wet-bulb temperature seen by the cooling coil (C)', u'y = edb = entering dry-bulb temperature seen by the cooling coil (C)', u'Also allows Curve:Triquadratic and Table:MultiVariableLookup', u'curve or table = func(x = ewb, y = edb, z = stes)', u'z = stes = state of thermal energy storage (C or fraction)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Sensible Heat Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name`')
        self._data["Cooling And Charge Mode Sensible Heat Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name(self):
        """Get cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Cooling And Charge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"]

    @cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name.setter
    def cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Charge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name`
        required field if Cooling And Charge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow
        
        {u'note': [u'required field if Cooling And Charge Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'x = ff = Fraction of the full load evaporator air flow'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name`')
        self._data["Cooling And Charge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_discharge_mode_available(self):
        """Get cooling_and_discharge_mode_available

        Returns:
            str: the value of `cooling_and_discharge_mode_available` or None if not set
        """
        return self._data["Cooling And Discharge Mode Available"]

    @cooling_and_discharge_mode_available.setter
    def cooling_and_discharge_mode_available(self, value=None):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Available`
        
        {u'type': u'choice', u'key': [u'Yes', u'No'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Available`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_discharge_mode_available`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_discharge_mode_available`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_discharge_mode_available`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `cooling_and_discharge_mode_available`'.format(value))
            value = vals[value_lower]
        self._data["Cooling And Discharge Mode Available"] = value

    @property
    def cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity(self):
        """Get cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity

        Returns:
            float: the value of `cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity` or None if not set
        """
        return self._data["Cooling And Discharge Mode Rated Total Evaporator Cooling Capacity"]

    @cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity.setter
    def cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity(self, value=None):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Rated Total Evaporator Cooling Capacity`
        required field if Cooling And Discharge Mode is available
        gross capacity excluding supply air fan heat
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)
        
        {'pytype': 'float', u'note': [u'required field if Cooling And Discharge Mode is available', u'gross capacity excluding supply air fan heat', u'rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and', u'air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb', u'thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)'], u'minimum': '0.0', u'units': u'W', u'autocalculatable': True, u'type': u'real'}

        Args:
            value (float or "Autocalculate"): value for IDD Field `Cooling And Discharge Mode Rated Total Evaporator Cooling Capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Cooling And Discharge Mode Rated Total Evaporator Cooling Capacity"] = value
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity`')
        self._data["Cooling And Discharge Mode Rated Total Evaporator Cooling Capacity"] = value

    @property
    def cooling_and_discharge_mode_evaporator_capacity_sizing_factor(self):
        """Get cooling_and_discharge_mode_evaporator_capacity_sizing_factor

        Returns:
            float: the value of `cooling_and_discharge_mode_evaporator_capacity_sizing_factor` or None if not set
        """
        return self._data["Cooling And Discharge Mode Evaporator Capacity Sizing Factor"]

    @cooling_and_discharge_mode_evaporator_capacity_sizing_factor.setter
    def cooling_and_discharge_mode_evaporator_capacity_sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Evaporator Capacity Sizing Factor`
        If previous field is autocalculate, this determines the charging capacity
        as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity
        
        {u'default': '1.0', u'note': [u'If previous field is autocalculate, this determines the charging capacity', u'as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity'], u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Cooling And Discharge Mode Evaporator Capacity Sizing Factor`
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_and_discharge_mode_evaporator_capacity_sizing_factor`'.format(value))
        self._data["Cooling And Discharge Mode Evaporator Capacity Sizing Factor"] = value

    @property
    def cooling_and_discharge_mode_rated_storage_discharging_capacity(self):
        """Get cooling_and_discharge_mode_rated_storage_discharging_capacity

        Returns:
            float: the value of `cooling_and_discharge_mode_rated_storage_discharging_capacity` or None if not set
        """
        return self._data["Cooling And Discharge Mode Rated Storage Discharging Capacity"]

    @cooling_and_discharge_mode_rated_storage_discharging_capacity.setter
    def cooling_and_discharge_mode_rated_storage_discharging_capacity(self, value=None):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Rated Storage Discharging Capacity`
        required field if Cooling And Discharge Mode is available
        net capacity including any internal devices
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)
        
        {'pytype': 'float', u'note': [u'required field if Cooling And Discharge Mode is available', u'net capacity including any internal devices', u'rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and', u'air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb', u'thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)'], u'minimum': '0.0', u'units': u'W', u'autocalculatable': True, u'type': u'real'}

        Args:
            value (float or "Autocalculate"): value for IDD Field `Cooling And Discharge Mode Rated Storage Discharging Capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Cooling And Discharge Mode Rated Storage Discharging Capacity"] = value
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_and_discharge_mode_rated_storage_discharging_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_and_discharge_mode_rated_storage_discharging_capacity`')
        self._data["Cooling And Discharge Mode Rated Storage Discharging Capacity"] = value

    @property
    def cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor(self):
        """Get cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor

        Returns:
            float: the value of `cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor` or None if not set
        """
        return self._data["Cooling And Discharge Mode Storage Discharge Capacity Sizing Factor"]

    @cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor.setter
    def cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Storage Discharge Capacity Sizing Factor`
        If previous field is autocalculate, this determines the charging capacity
        as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity
        
        {u'default': '1.0', u'note': [u'If previous field is autocalculate, this determines the charging capacity', u'as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity'], u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Cooling And Discharge Mode Storage Discharge Capacity Sizing Factor`
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor`'.format(value))
        self._data["Cooling And Discharge Mode Storage Discharge Capacity Sizing Factor"] = value

    @property
    def cooling_and_discharge_mode_rated_sensible_heat_ratio(self):
        """Get cooling_and_discharge_mode_rated_sensible_heat_ratio

        Returns:
            float: the value of `cooling_and_discharge_mode_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Cooling And Discharge Mode Rated Sensible Heat Ratio"]

    @cooling_and_discharge_mode_rated_sensible_heat_ratio.setter
    def cooling_and_discharge_mode_rated_sensible_heat_ratio(self, value=0.7 ):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Rated Sensible Heat Ratio`
        required field if Cooling And Discharge Mode is available
        Rated sensible heat ratio (gross sensible evaporator capacity/gross total evaporator capacity)
        sensible and total capacities do not include supply fan heat
        
        {'pytype': 'float', u'default': '0.7', u'maximum': '1.0', u'note': [u'required field if Cooling And Discharge Mode is available', u'Rated sensible heat ratio (gross sensible evaporator capacity/gross total evaporator capacity)', u'sensible and total capacities do not include supply fan heat'], u'minimum': '0.0', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Cooling And Discharge Mode Rated Sensible Heat Ratio`
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_and_discharge_mode_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_and_discharge_mode_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `cooling_and_discharge_mode_rated_sensible_heat_ratio`')
        self._data["Cooling And Discharge Mode Rated Sensible Heat Ratio"] = value

    @property
    def cooling_and_discharge_mode_cooling_rated_cop(self):
        """Get cooling_and_discharge_mode_cooling_rated_cop

        Returns:
            float: the value of `cooling_and_discharge_mode_cooling_rated_cop` or None if not set
        """
        return self._data["Cooling And Discharge Mode Cooling Rated COP"]

    @cooling_and_discharge_mode_cooling_rated_cop.setter
    def cooling_and_discharge_mode_cooling_rated_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Cooling Rated COP`
        Gross evaporator cooling capacity divided by power input to the compressor (for cooling) and outdoor fan,
        does not include supply fan heat or supply fan electrical energy input
        required field if Cooling And Discharge Mode is available
        
        {'pytype': 'float', u'default': '3.0', u'note': [u'Gross evaporator cooling capacity divided by power input to the compressor (for cooling) and outdoor fan,', u'does not include supply fan heat or supply fan electrical energy input', u'required field if Cooling And Discharge Mode is available'], u'minimum': '0.0', u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Cooling And Discharge Mode Cooling Rated COP`
                Units: W/W
                Default value: 3.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_and_discharge_mode_cooling_rated_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_and_discharge_mode_cooling_rated_cop`')
        self._data["Cooling And Discharge Mode Cooling Rated COP"] = value

    @property
    def cooling_and_discharge_mode_discharging_rated_cop(self):
        """Get cooling_and_discharge_mode_discharging_rated_cop

        Returns:
            float: the value of `cooling_and_discharge_mode_discharging_rated_cop` or None if not set
        """
        return self._data["Cooling And Discharge Mode Discharging Rated COP"]

    @cooling_and_discharge_mode_discharging_rated_cop.setter
    def cooling_and_discharge_mode_discharging_rated_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Discharging Rated COP`
        gross cooling capacity divided by power input to the compressor (for discharging),
        includes any internal devices for discharging storage but not supply fan
        required field if Cooling And Discharge Mode is available
        
        {'pytype': 'float', u'default': '3.0', u'note': [u'gross cooling capacity divided by power input to the compressor (for discharging),', u'includes any internal devices for discharging storage but not supply fan', u'required field if Cooling And Discharge Mode is available'], u'minimum': '0.0', u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Cooling And Discharge Mode Discharging Rated COP`
                Units: W/W
                Default value: 3.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cooling_and_discharge_mode_discharging_rated_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cooling_and_discharge_mode_discharging_rated_cop`')
        self._data["Cooling And Discharge Mode Discharging Rated COP"] = value

    @property
    def cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name(self):
        """Get cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name"]

    @cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name.setter
    def cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name`
        required field if Cooling Only Mode is available
        Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = db, z = stes)
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = dry-bulb temperature seen by the condenser (C)
        z = stes = state of thermal energy storage (C or fraction)
        
        {u'note': [u'required field if Cooling Only Mode is available', u'Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup', u'curve or table = func(x = ewb, y = db, z = stes)', u'x = ewb = evaporator entering wet-bulb temperature (C)', u'y = db = dry-bulb temperature seen by the condenser (C)', u'z = stes = state of thermal energy storage (C or fraction)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name`')
        self._data["Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name(self):
        """Get cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name"]

    @cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name`
        required field if Cooling And Discharge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow
        
        {u'note': [u'required field if Cooling And Discharge Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'x = ff = Fraction of the full load evaporator air flow'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name`')
        self._data["Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name"]

    @cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name.setter
    def cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name`
        required field if Cooling And Discharge Mode is available
        Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = db, z = stes)
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = dry-bulb temperature seen by the condenser (C)
        z = stes = state of thermal energy storage (C or fraction)
        
        {u'note': [u'required field if Cooling And Discharge Mode is available', u'Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup', u'curve or table = func(x = ewb, y = db, z = stes)', u'x = ewb = evaporator entering wet-bulb temperature (C)', u'y = db = dry-bulb temperature seen by the condenser (C)', u'z = stes = state of thermal energy storage (C or fraction)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name"]

    @cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name`
        required field if Cooling And Discharge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = Fraction of the full load evaporator air flow
        
        {u'note': [u'required field if Cooling And Discharge Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = Fraction of the full load evaporator air flow'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name(self):
        """Get cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Cooling And Discharge Mode Evaporator Part Load Fraction Correlation Curve Name"]

    @cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name.setter
    def cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Evaporator Part Load Fraction Correlation Curve Name`
        required field if Cooling And Discharge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        x = PLR = part load ratio (evaporator cooling load/steady state capacity)
        
        {u'note': [u'required field if Cooling And Discharge Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'x = PLR = part load ratio (evaporator cooling load/steady state capacity)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Evaporator Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name`')
        self._data["Cooling And Discharge Mode Evaporator Part Load Fraction Correlation Curve Name"] = value

    @property
    def cooling_and_discharge_mode_storage_disharge_capacity_function_of_temperature_curve_name(self):
        """Get cooling_and_discharge_mode_storage_disharge_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_and_discharge_mode_storage_disharge_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling And Discharge Mode Storage Disharge Capacity Function of Temperature Curve Name"]

    @cooling_and_discharge_mode_storage_disharge_capacity_function_of_temperature_curve_name.setter
    def cooling_and_discharge_mode_storage_disharge_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Storage Disharge Capacity Function of Temperature Curve Name`
        required field if Cooling And Discharge Mode is available
        Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = db, z = stes)
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = dry-bulb temperature seen by the condenser (C)
        z = stes = state of thermal energy storage (C or fraction)
        
        {u'note': [u'required field if Cooling And Discharge Mode is available', u'Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup', u'curve or table = func(x = ewb, y = db, z = stes)', u'x = ewb = evaporator entering wet-bulb temperature (C)', u'y = db = dry-bulb temperature seen by the condenser (C)', u'z = stes = state of thermal energy storage (C or fraction)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Storage Disharge Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_discharge_mode_storage_disharge_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_discharge_mode_storage_disharge_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_discharge_mode_storage_disharge_capacity_function_of_temperature_curve_name`')
        self._data["Cooling And Discharge Mode Storage Disharge Capacity Function of Temperature Curve Name"] = value

    @property
    def cooling_and_discharge_mode_storage_disharge_capacity_function_of_flow_fraction_curve_name(self):
        """Get cooling_and_discharge_mode_storage_disharge_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `cooling_and_discharge_mode_storage_disharge_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Cooling And Discharge Mode Storage Disharge Capacity Function of Flow Fraction Curve Name"]

    @cooling_and_discharge_mode_storage_disharge_capacity_function_of_flow_fraction_curve_name.setter
    def cooling_and_discharge_mode_storage_disharge_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Storage Disharge Capacity Function of Flow Fraction Curve Name`
        required field if Cooling And Discharge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = Fraction of the full load evaporator air flow
        
        {u'note': [u'required field if Cooling And Discharge Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = Fraction of the full load evaporator air flow'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Storage Disharge Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_discharge_mode_storage_disharge_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_discharge_mode_storage_disharge_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_discharge_mode_storage_disharge_capacity_function_of_flow_fraction_curve_name`')
        self._data["Cooling And Discharge Mode Storage Disharge Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporator_plr_curve_name(self):
        """Get cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporator_plr_curve_name

        Returns:
            str: the value of `cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporator_plr_curve_name` or None if not set
        """
        return self._data["Cooling And Discharge Mode Storage Discharge Capacity Function of Total Evaporator PLR Curve Name"]

    @cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporator_plr_curve_name.setter
    def cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporator_plr_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Storage Discharge Capacity Function of Total Evaporator PLR Curve Name`
        required field if Cooling And Discharge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        x =PLR = part load ratio (evaporator cooling load/steady state capacity)
        
        {u'note': [u'required field if Cooling And Discharge Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'x =PLR = part load ratio (evaporator cooling load/steady state capacity)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Storage Discharge Capacity Function of Total Evaporator PLR Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporator_plr_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporator_plr_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporator_plr_curve_name`')
        self._data["Cooling And Discharge Mode Storage Discharge Capacity Function of Total Evaporator PLR Curve Name"] = value

    @property
    def cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling And Discharge Mode Storage Energy Input Ratio Function of Temperature Curve Name"]

    @cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_curve_name.setter
    def cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Storage Energy Input Ratio Function of Temperature Curve Name`
        required field if Cooling And Discharge Mode is available
        Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = db, z = stes)
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = dry-bulb temperature seen by the condenser (C)
        z = stes = state of thermal energy storage (C or fraction)
        
        {u'note': [u'required field if Cooling And Discharge Mode is available', u'Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup', u'curve or table = func(x = ewb, y = db, z = stes)', u'x = ewb = evaporator entering wet-bulb temperature (C)', u'y = db = dry-bulb temperature seen by the condenser (C)', u'z = stes = state of thermal energy storage (C or fraction)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Storage Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Cooling And Discharge Mode Storage Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Cooling And Discharge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name"]

    @cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name`
        required field if Cooling And Discharge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow
        
        {u'note': [u'required field if Cooling And Discharge Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'x = ff = Fraction of the full load evaporator air flow'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Cooling And Discharge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_name(self):
        """Get cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Cooling And Discharge Mode Storage Energy Part Load Fraction Correlation Curve Name"]

    @cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_name.setter
    def cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Storage Energy Part Load Fraction Correlation Curve Name`
        required field if Cooling And Discharge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        x = PLR = part load ratio (evaporator cooling load/steady state capacity)
        
        {u'note': [u'required field if Cooling And Discharge Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3', u'x = PLR = part load ratio (evaporator cooling load/steady state capacity)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Storage Energy Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_name`')
        self._data["Cooling And Discharge Mode Storage Energy Part Load Fraction Correlation Curve Name"] = value

    @property
    def cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name(self):
        """Get cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Cooling And Discharge Mode Sensible Heat Ratio Function of Temperature Curve Name"]

    @cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name.setter
    def cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Sensible Heat Ratio Function of Temperature Curve Name`
        required field if Cooling And Discharge Mode is available
        Curves or tables with either two or three independent variables can be used.
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb
        x = ewb = entering wet-bulb temperature seen by the cooling coil (C)
        y = edb = entering dry-bulb temperature seen by the cooling coil (C)
        Also allows Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = edb, z = stes)
        z = stes = state of thermal energy storage (C or fraction)
        
        {u'note': [u'required field if Cooling And Discharge Mode is available', u'Curves or tables with either two or three independent variables can be used.', u'Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed', u'curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb', u'x = ewb = entering wet-bulb temperature seen by the cooling coil (C)', u'y = edb = entering dry-bulb temperature seen by the cooling coil (C)', u'Also allows Curve:Triquadratic and Table:MultiVariableLookup', u'curve or table = func(x = ewb, y = edb, z = stes)', u'z = stes = state of thermal energy storage (C or fraction)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Sensible Heat Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name`')
        self._data["Cooling And Discharge Mode Sensible Heat Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name(self):
        """Get cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Cooling And Discharge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"]

    @cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name.setter
    def cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Cooling And Discharge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name`
        required field if Cooling And Discharge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow
        
        {u'note': [u'required field if Cooling And Discharge Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'x = ff = Fraction of the full load evaporator air flow'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name`')
        self._data["Cooling And Discharge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def charge_only_mode_available(self):
        """Get charge_only_mode_available

        Returns:
            str: the value of `charge_only_mode_available` or None if not set
        """
        return self._data["Charge Only Mode Available"]

    @charge_only_mode_available.setter
    def charge_only_mode_available(self, value=None):
        """  Corresponds to IDD Field `Charge Only Mode Available`
        
        {u'type': u'choice', u'key': [u'Yes', u'No'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Charge Only Mode Available`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `charge_only_mode_available`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `charge_only_mode_available`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `charge_only_mode_available`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `charge_only_mode_available`'.format(value))
            value = vals[value_lower]
        self._data["Charge Only Mode Available"] = value

    @property
    def charge_only_mode_rated_storage_charging_capacity(self):
        """Get charge_only_mode_rated_storage_charging_capacity

        Returns:
            float: the value of `charge_only_mode_rated_storage_charging_capacity` or None if not set
        """
        return self._data["Charge Only Mode Rated Storage Charging Capacity"]

    @charge_only_mode_rated_storage_charging_capacity.setter
    def charge_only_mode_rated_storage_charging_capacity(self, value=None):
        """  Corresponds to IDD Field `Charge Only Mode Rated Storage Charging Capacity`
        required field if Charge Only  Mode is available
        net capacity including any internal devices
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)
        
        {'pytype': 'float', u'note': [u'required field if Charge Only  Mode is available', u'net capacity including any internal devices', u'air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb', u'thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)'], u'minimum': '0.0', u'units': u'W', u'autocalculatable': True, u'type': u'real'}

        Args:
            value (float or "Autocalculate"): value for IDD Field `Charge Only Mode Rated Storage Charging Capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Charge Only Mode Rated Storage Charging Capacity"] = value
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `charge_only_mode_rated_storage_charging_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `charge_only_mode_rated_storage_charging_capacity`')
        self._data["Charge Only Mode Rated Storage Charging Capacity"] = value

    @property
    def charge_only_mode_capacity_sizing_factor(self):
        """Get charge_only_mode_capacity_sizing_factor

        Returns:
            float: the value of `charge_only_mode_capacity_sizing_factor` or None if not set
        """
        return self._data["Charge Only Mode Capacity Sizing Factor"]

    @charge_only_mode_capacity_sizing_factor.setter
    def charge_only_mode_capacity_sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `Charge Only Mode Capacity Sizing Factor`
        If previous field is autocalculate, this determines the charging capacity
        as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity
        
        {u'default': '1.0', u'note': [u'If previous field is autocalculate, this determines the charging capacity', u'as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity'], u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Charge Only Mode Capacity Sizing Factor`
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `charge_only_mode_capacity_sizing_factor`'.format(value))
        self._data["Charge Only Mode Capacity Sizing Factor"] = value

    @property
    def charge_only_mode_charging_rated_cop(self):
        """Get charge_only_mode_charging_rated_cop

        Returns:
            float: the value of `charge_only_mode_charging_rated_cop` or None if not set
        """
        return self._data["Charge Only Mode Charging Rated COP"]

    @charge_only_mode_charging_rated_cop.setter
    def charge_only_mode_charging_rated_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `Charge Only Mode Charging Rated COP`
        net cooling capacity divided by power input to the compressor (for charging) and outdoor fan,
        includes any internal devices
        required field if Charge Only Mode is available
        
        {'pytype': 'float', u'default': '3.0', u'note': [u'net cooling capacity divided by power input to the compressor (for charging) and outdoor fan,', u'includes any internal devices', u'required field if Charge Only Mode is available'], u'minimum': '0.0', u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Charge Only Mode Charging Rated COP`
                Units: W/W
                Default value: 3.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `charge_only_mode_charging_rated_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `charge_only_mode_charging_rated_cop`')
        self._data["Charge Only Mode Charging Rated COP"] = value

    @property
    def charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name(self):
        """Get charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Charge Only Mode Storage Charge Capacity Function of Temperature Curve Name"]

    @charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name.setter
    def charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Charge Only Mode Storage Charge Capacity Function of Temperature Curve Name`
        required field if Charge Only Mode is available
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*db + c*db**2 + d*stes + e*stes**2 + f*db*stes
        x = db = drybulb temperature seen by the condenser (C)
        y = stes = state of thermal energy storage (C or fraction)
        
        {u'note': [u'required field if Charge Only Mode is available', u'Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed', u'curve = a + b*db + c*db**2 + d*stes + e*stes**2 + f*db*stes', u'x = db = drybulb temperature seen by the condenser (C)', u'y = stes = state of thermal energy storage (C or fraction)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Charge Only Mode Storage Charge Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name`')
        self._data["Charge Only Mode Storage Charge Capacity Function of Temperature Curve Name"] = value

    @property
    def charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Charge Only Mode Storage Energy Input Ratio Function of Temperature Curve Name"]

    @charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name.setter
    def charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Charge Only Mode Storage Energy Input Ratio Function of Temperature Curve Name`
        required field if Charge Only Mode is available
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*db + c*db**2 + d*stes + e*stes**2 + f*db*stes
        x = db = drybulb temperature seen by the condenser (C)
        y = stes = state of thermal energy storage (C or fraction)
        
        {u'note': [u'required field if Charge Only Mode is available', u'Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed', u'curve = a + b*db + c*db**2 + d*stes + e*stes**2 + f*db*stes', u'x = db = drybulb temperature seen by the condenser (C)', u'y = stes = state of thermal energy storage (C or fraction)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Charge Only Mode Storage Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Charge Only Mode Storage Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def discharge_only_mode_available(self):
        """Get discharge_only_mode_available

        Returns:
            str: the value of `discharge_only_mode_available` or None if not set
        """
        return self._data["Discharge Only Mode Available"]

    @discharge_only_mode_available.setter
    def discharge_only_mode_available(self, value=None):
        """  Corresponds to IDD Field `Discharge Only Mode Available`
        
        {u'type': u'choice', u'key': [u'Yes', u'No'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Discharge Only Mode Available`
                Accepted values are:
                      - Yes
                      - No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `discharge_only_mode_available`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `discharge_only_mode_available`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `discharge_only_mode_available`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `discharge_only_mode_available`'.format(value))
            value = vals[value_lower]
        self._data["Discharge Only Mode Available"] = value

    @property
    def discharge_only_mode_rated_storage_discharging_capacity(self):
        """Get discharge_only_mode_rated_storage_discharging_capacity

        Returns:
            float: the value of `discharge_only_mode_rated_storage_discharging_capacity` or None if not set
        """
        return self._data["Discharge Only Mode Rated Storage Discharging Capacity"]

    @discharge_only_mode_rated_storage_discharging_capacity.setter
    def discharge_only_mode_rated_storage_discharging_capacity(self, value=None):
        """  Corresponds to IDD Field `Discharge Only Mode Rated Storage Discharging Capacity`
        required field if Discharge Only Mode is available
        net capacity including any internal devices
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)
        
        {'pytype': 'float', u'note': [u'required field if Discharge Only Mode is available', u'net capacity including any internal devices', u'rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and', u'thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)'], u'minimum': '0.0', u'units': u'W', u'autocalculatable': True, u'type': u'real'}

        Args:
            value (float or "Autocalculate"): value for IDD Field `Discharge Only Mode Rated Storage Discharging Capacity`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Discharge Only Mode Rated Storage Discharging Capacity"] = value
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `discharge_only_mode_rated_storage_discharging_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `discharge_only_mode_rated_storage_discharging_capacity`')
        self._data["Discharge Only Mode Rated Storage Discharging Capacity"] = value

    @property
    def discharge_only_mode_capacity_sizing_factor(self):
        """Get discharge_only_mode_capacity_sizing_factor

        Returns:
            float: the value of `discharge_only_mode_capacity_sizing_factor` or None if not set
        """
        return self._data["Discharge Only Mode Capacity Sizing Factor"]

    @discharge_only_mode_capacity_sizing_factor.setter
    def discharge_only_mode_capacity_sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `Discharge Only Mode Capacity Sizing Factor`
        If previous field is autocalculate, this determines the discharging capacity
        as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity
        
        {u'default': '1.0', u'note': [u'If previous field is autocalculate, this determines the discharging capacity', u'as a multiplier on the Cooling Only Mode Rated Total Evaporator Cooling Capacity'], u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Discharge Only Mode Capacity Sizing Factor`
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `discharge_only_mode_capacity_sizing_factor`'.format(value))
        self._data["Discharge Only Mode Capacity Sizing Factor"] = value

    @property
    def discharge_only_mode_rated_sensible_heat_ratio(self):
        """Get discharge_only_mode_rated_sensible_heat_ratio

        Returns:
            float: the value of `discharge_only_mode_rated_sensible_heat_ratio` or None if not set
        """
        return self._data["Discharge Only Mode Rated Sensible Heat Ratio"]

    @discharge_only_mode_rated_sensible_heat_ratio.setter
    def discharge_only_mode_rated_sensible_heat_ratio(self, value=None):
        """  Corresponds to IDD Field `Discharge Only Mode Rated Sensible Heat Ratio`
        required field if Discharge Only Mode is available
        Rated sensible heat ratio (gross sensible evaporator capacity/gross total evaporator capacity)
        sensible and total capacities do not include supply fan heat
        
        {u'note': [u'required field if Discharge Only Mode is available', u'Rated sensible heat ratio (gross sensible evaporator capacity/gross total evaporator capacity)', u'sensible and total capacities do not include supply fan heat'], u'minimum': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Discharge Only Mode Rated Sensible Heat Ratio`
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `discharge_only_mode_rated_sensible_heat_ratio`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `discharge_only_mode_rated_sensible_heat_ratio`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `discharge_only_mode_rated_sensible_heat_ratio`')
        self._data["Discharge Only Mode Rated Sensible Heat Ratio"] = value

    @property
    def discharge_only_mode_rated_cop(self):
        """Get discharge_only_mode_rated_cop

        Returns:
            float: the value of `discharge_only_mode_rated_cop` or None if not set
        """
        return self._data["Discharge Only Mode Rated COP"]

    @discharge_only_mode_rated_cop.setter
    def discharge_only_mode_rated_cop(self, value=3.0 ):
        """  Corresponds to IDD Field `Discharge Only Mode Rated COP`
        required field if Discharge Only Mode is available
        gross cooling capacity divided by power input to the compressor (for discharging),
        includes any internal devices for discharging storage but not supply fan
        
        {'pytype': 'float', u'default': '3.0', u'note': [u'required field if Discharge Only Mode is available', u'gross cooling capacity divided by power input to the compressor (for discharging),', u'includes any internal devices for discharging storage but not supply fan'], u'minimum': '0.0', u'units': u'W/W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Discharge Only Mode Rated COP`
                Units: W/W
                Default value: 3.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `discharge_only_mode_rated_cop`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `discharge_only_mode_rated_cop`')
        self._data["Discharge Only Mode Rated COP"] = value

    @property
    def discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name(self):
        """Get discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name

        Returns:
            str: the value of `discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Discharge Only Mode Storage Discharge Capacity Function of Temperature Curve Name"]

    @discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name.setter
    def discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Discharge Only Mode Storage Discharge Capacity Function of Temperature Curve Name`
        required field if Discharge Only Mode is available
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*ewb + c*ewb**2 + d*stes + e*stes**2 + f*ewb*stes
        x = ewb = evaporator entering wetbulb temperature (C)
        y = stes = state of thermal energy storage (C or fraction)
        
        {u'note': [u'required field if Discharge Only Mode is available', u'Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed', u'curve = a + b*ewb + c*ewb**2 + d*stes + e*stes**2 + f*ewb*stes', u'x = ewb = evaporator entering wetbulb temperature (C)', u'y = stes = state of thermal energy storage (C or fraction)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Discharge Only Mode Storage Discharge Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name`')
        self._data["Discharge Only Mode Storage Discharge Capacity Function of Temperature Curve Name"] = value

    @property
    def discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name(self):
        """Get discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Discharge Only Mode Storage Discharge Capacity Function of Flow Fraction Curve Name"]

    @discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name.setter
    def discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Discharge Only Mode Storage Discharge Capacity Function of Flow Fraction Curve Name`
        required field if Discharge Only Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow
        
        {u'note': [u'required field if Discharge Only Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'x = ff = Fraction of the full load evaporator air flow'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Discharge Only Mode Storage Discharge Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name`')
        self._data["Discharge Only Mode Storage Discharge Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Discharge Only Mode Energy Input Ratio Function of Temperature Curve Name"]

    @discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name.setter
    def discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Discharge Only Mode Energy Input Ratio Function of Temperature Curve Name`
        required field if Discharge Only Mode is available
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*ewb + c*ewb**2 + d*stes + e*stes**2 + f*ewb*stes
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = stes = state of thermal energy storage (C or fraction)
        
        {u'note': [u'required field if Discharge Only Mode is available', u'Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed', u'curve = a + b*ewb + c*ewb**2 + d*stes + e*stes**2 + f*ewb*stes', u'x = ewb = evaporator entering wet-bulb temperature (C)', u'y = stes = state of thermal energy storage (C or fraction)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Discharge Only Mode Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name`')
        self._data["Discharge Only Mode Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Discharge Only Mode Energy Input Ratio Function of Flow Fraction Curve Name"]

    @discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Discharge Only Mode Energy Input Ratio Function of Flow Fraction Curve Name`
        required field if Discharge Only Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow
        
        {u'note': [u'required field if Discharge Only Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'x = ff = Fraction of the full load evaporator air flow'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Discharge Only Mode Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name`')
        self._data["Discharge Only Mode Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def discharge_only_mode_part_load_fraction_correlation_curve_name(self):
        """Get discharge_only_mode_part_load_fraction_correlation_curve_name

        Returns:
            str: the value of `discharge_only_mode_part_load_fraction_correlation_curve_name` or None if not set
        """
        return self._data["Discharge Only Mode Part Load Fraction Correlation Curve Name"]

    @discharge_only_mode_part_load_fraction_correlation_curve_name.setter
    def discharge_only_mode_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD Field `Discharge Only Mode Part Load Fraction Correlation Curve Name`
        required field if Discharge Only Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        
        {u'note': [u'required field if Discharge Only Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*PLR + c*PLR**2', u'cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Discharge Only Mode Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `discharge_only_mode_part_load_fraction_correlation_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `discharge_only_mode_part_load_fraction_correlation_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `discharge_only_mode_part_load_fraction_correlation_curve_name`')
        self._data["Discharge Only Mode Part Load Fraction Correlation Curve Name"] = value

    @property
    def discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name(self):
        """Get discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name

        Returns:
            str: the value of `discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name` or None if not set
        """
        return self._data["Discharge Only Mode Sensible Heat Ratio Function of Temperature Curve Name"]

    @discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name.setter
    def discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD Field `Discharge Only Mode Sensible Heat Ratio Function of Temperature Curve Name`
        required field if Discharge Only Mode is available
        Curves or tables with either two or three independent variables can be used.
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb
        x = ewb = entering wet-bulb temperature seen by the cooling coil (C)
        y = edb = entering dry-bulb temperature seen by the cooling coil (C)
        Also allows Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = edb, z = stes)
        z = stes = state of thermal energy storage (C or fraction)
        
        {u'note': [u'required field if Discharge Only Mode is available', u'Curves or tables with either two or three independent variables can be used.', u'Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed', u'curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb', u'x = ewb = entering wet-bulb temperature seen by the cooling coil (C)', u'y = edb = entering dry-bulb temperature seen by the cooling coil (C)', u'Also allows Curve:Triquadratic and Table:MultiVariableLookup', u'curve or table = func(x = ewb, y = edb, z = stes)', u'z = stes = state of thermal energy storage (C or fraction)'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Discharge Only Mode Sensible Heat Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name`')
        self._data["Discharge Only Mode Sensible Heat Ratio Function of Temperature Curve Name"] = value

    @property
    def discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name(self):
        """Get discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name

        Returns:
            str: the value of `discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name` or None if not set
        """
        return self._data["Discharge Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"]

    @discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name.setter
    def discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD Field `Discharge Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name`
        required field if Discharge Only Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = Fraction of the full load evaporator air flow
        
        {u'note': [u'required field if Discharge Only Mode is available', u'Any curve or table with one independent variable can be used:', u'Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,', u'Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,', u'Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,', u'Table:OneIndependentVariable', u'quadratic curve = a + b*ff + c*ff**2', u'cubic curve = a + b*ff + c*ff**2 + d*ff**3', u'ff = Fraction of the full load evaporator air flow'], u'type': u'object-list', u'object-list': u'AllCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Discharge Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name`')
        self._data["Discharge Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def ancillary_electric_power(self):
        """Get ancillary_electric_power

        Returns:
            float: the value of `ancillary_electric_power` or None if not set
        """
        return self._data["Ancillary Electric Power"]

    @ancillary_electric_power.setter
    def ancillary_electric_power(self, value=None):
        """  Corresponds to IDD Field `Ancillary Electric Power`
        controls and miscellaneous standby ancillary electric power draw, when available
        
        {u'units': u'W', u'note': [u'controls and miscellaneous standby ancillary electric power draw, when available'], u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Ancillary Electric Power`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `ancillary_electric_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `ancillary_electric_power`')
        self._data["Ancillary Electric Power"] = value

    @property
    def cold_weather_operation_minimum_outdoor_air_temperature(self):
        """Get cold_weather_operation_minimum_outdoor_air_temperature

        Returns:
            float: the value of `cold_weather_operation_minimum_outdoor_air_temperature` or None if not set
        """
        return self._data["Cold Weather Operation Minimum Outdoor Air Temperature"]

    @cold_weather_operation_minimum_outdoor_air_temperature.setter
    def cold_weather_operation_minimum_outdoor_air_temperature(self, value=None):
        """  Corresponds to IDD Field `Cold Weather Operation Minimum Outdoor Air Temperature`
        
        {u'units': u'C', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Cold Weather Operation Minimum Outdoor Air Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cold_weather_operation_minimum_outdoor_air_temperature`'.format(value))
        self._data["Cold Weather Operation Minimum Outdoor Air Temperature"] = value

    @property
    def cold_weather_operation_ancillary_power(self):
        """Get cold_weather_operation_ancillary_power

        Returns:
            float: the value of `cold_weather_operation_ancillary_power` or None if not set
        """
        return self._data["Cold Weather Operation Ancillary Power"]

    @cold_weather_operation_ancillary_power.setter
    def cold_weather_operation_ancillary_power(self, value=None):
        """  Corresponds to IDD Field `Cold Weather Operation Ancillary Power`
        
        {u'units': u'W', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Cold Weather Operation Ancillary Power`
                Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `cold_weather_operation_ancillary_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `cold_weather_operation_ancillary_power`')
        self._data["Cold Weather Operation Ancillary Power"] = value

    @property
    def condenser_air_inlet_node_name(self):
        """Get condenser_air_inlet_node_name

        Returns:
            str: the value of `condenser_air_inlet_node_name` or None if not set
        """
        return self._data["Condenser Air Inlet Node Name"]

    @condenser_air_inlet_node_name.setter
    def condenser_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Air Inlet Node Name`
        Enter the name of an outdoor air node. This node name is also specified in
        an OutdoorAir:Node or OutdoorAir:NodeList object.
        
        {u'note': [u'Enter the name of an outdoor air node. This node name is also specified in', u'an OutdoorAir:Node or OutdoorAir:NodeList object.'], u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_air_inlet_node_name`')
        self._data["Condenser Air Inlet Node Name"] = value

    @property
    def condenser_air_outlet_node_name(self):
        """Get condenser_air_outlet_node_name

        Returns:
            str: the value of `condenser_air_outlet_node_name` or None if not set
        """
        return self._data["Condenser Air Outlet Node Name"]

    @condenser_air_outlet_node_name.setter
    def condenser_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Condenser Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_air_outlet_node_name`')
        self._data["Condenser Air Outlet Node Name"] = value

    @property
    def condenser_design_air_flow_rate(self):
        """Get condenser_design_air_flow_rate

        Returns:
            float: the value of `condenser_design_air_flow_rate` or None if not set
        """
        return self._data["Condenser Design Air Flow Rate"]

    @condenser_design_air_flow_rate.setter
    def condenser_design_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Condenser Design Air Flow Rate`
        Used to calculate condenser leaving conditions and water use if evaporatively cooled.
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'note': [u'Used to calculate condenser leaving conditions and water use if evaporatively cooled.'], u'units': u'm3/s', u'autocalculatable': True, u'type': u'real'}

        Args:
            value (float or "Autocalculate"): value for IDD Field `Condenser Design Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value_lower = str(value).lower()
                if value_lower == "autocalculate":
                    self._data["Condenser Design Air Flow Rate"] = value
                    return
            except ValueError:
                pass
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `condenser_design_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `condenser_design_air_flow_rate`')
        self._data["Condenser Design Air Flow Rate"] = value

    @property
    def condenser_air_flow_sizing_factor(self):
        """Get condenser_air_flow_sizing_factor

        Returns:
            float: the value of `condenser_air_flow_sizing_factor` or None if not set
        """
        return self._data["Condenser Air Flow Sizing Factor"]

    @condenser_air_flow_sizing_factor.setter
    def condenser_air_flow_sizing_factor(self, value=1.0 ):
        """  Corresponds to IDD Field `Condenser Air Flow Sizing Factor`
        If previous field is autocalculate, this determines the condenser air flow size as a
        multiplier on the Rated Evaporator Air Flow Rate.
        
        {u'default': '1.0', u'note': [u'If previous field is autocalculate, this determines the condenser air flow size as a', u'multiplier on the Rated Evaporator Air Flow Rate.'], u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Condenser Air Flow Sizing Factor`
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `condenser_air_flow_sizing_factor`'.format(value))
        self._data["Condenser Air Flow Sizing Factor"] = value

    @property
    def condenser_type(self):
        """Get condenser_type

        Returns:
            str: the value of `condenser_type` or None if not set
        """
        return self._data["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """  Corresponds to IDD Field `Condenser Type`
        
        {u'default': u'AirCooled', u'type': u'choice', u'key': [u'AirCooled', u'EvaporativelyCooled'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condenser Type`
                Accepted values are:
                      - AirCooled
                      - EvaporativelyCooled
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condenser_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condenser_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condenser_type`')
            vals = {}
            vals["aircooled"] = "AirCooled"
            vals["evaporativelycooled"] = "EvaporativelyCooled"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `condenser_type`'.format(value))
            value = vals[value_lower]
        self._data["Condenser Type"] = value

    @property
    def evaporative_condenser_effectiveness(self):
        """Get evaporative_condenser_effectiveness

        Returns:
            float: the value of `evaporative_condenser_effectiveness` or None if not set
        """
        return self._data["Evaporative Condenser Effectiveness"]

    @evaporative_condenser_effectiveness.setter
    def evaporative_condenser_effectiveness(self, value=0.7 ):
        """  Corresponds to IDD Field `Evaporative Condenser Effectiveness`
        required field if condenser type is evaporatively cooled
        
        {'pytype': 'float', u'default': '0.7', u'minimum>': '0.0', u'maximum': '1.0', u'note': [u'required field if condenser type is evaporatively cooled'], u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.7
                value > 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporative_condenser_effectiveness`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `evaporative_condenser_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `evaporative_condenser_effectiveness`')
        self._data["Evaporative Condenser Effectiveness"] = value

    @property
    def evaporative_condenser_pump_rated_power_consumption(self):
        """Get evaporative_condenser_pump_rated_power_consumption

        Returns:
            float: the value of `evaporative_condenser_pump_rated_power_consumption` or None if not set
        """
        return self._data["Evaporative Condenser Pump Rated Power Consumption"]

    @evaporative_condenser_pump_rated_power_consumption.setter
    def evaporative_condenser_pump_rated_power_consumption(self, value=0.0 ):
        """  Corresponds to IDD Field `Evaporative Condenser Pump Rated Power Consumption`
        Rated power consumed by the evaporative condenser's water pump
        
        {'pytype': 'float', u'default': '0.0', u'note': [u"Rated power consumed by the evaporative condenser's water pump"], u'autosizable': u'', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Evaporative Condenser Pump Rated Power Consumption`
                Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `evaporative_condenser_pump_rated_power_consumption`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `evaporative_condenser_pump_rated_power_consumption`')
        self._data["Evaporative Condenser Pump Rated Power Consumption"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self._data["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=0.0 ):
        """  Corresponds to IDD Field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the DX coil is off.
        If this field is blank, the basin heater is always available.
        
        {'pytype': 'float', u'default': '0.0', u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled and for periods', u'when the basin heater is available (field Basin Heater Operating Schedule Name).', u'For this situation, the heater maintains the basin water temperature at the basin heater', u'setpoint temperature when the outdoor air temperature falls below the setpoint temperature.', u'The basin heater only operates when the DX coil is off.', u'If this field is blank, the basin heater is always available.'], u'minimum': '0.0', u'units': u'W/K', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `basin_heater_capacity`')
        self._data["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self._data["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0 ):
        """  Corresponds to IDD Field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.
        
        {'pytype': 'float', u'default': '2.0', u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled.', u'Enter the outdoor dry-bulb temperature when the basin heater turns on.'], u'minimum': '2.0', u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `basin_heater_setpoint_temperature`'.format(value))
            if value < 2.0:
                raise ValueError('value need to be greater or equal 2.0 '
                                 'for field `basin_heater_setpoint_temperature`')
        self._data["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_availability_schedule_name(self):
        """Get basin_heater_availability_schedule_name

        Returns:
            str: the value of `basin_heater_availability_schedule_name` or None if not set
        """
        return self._data["Basin Heater Availability Schedule Name"]

    @basin_heater_availability_schedule_name.setter
    def basin_heater_availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Basin Heater Availability Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.
        
        {u'note': [u'This field is only used for Condenser Type = EvaporativelyCooled.', u'Schedule values greater than 0 allow the basin heater to operate whenever the outdoor', u'air dry-bulb temperature is below the basin heater setpoint temperature.', u'If a schedule name is not entered, the basin heater is allowed to operate', u'throughout the entire simulation.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Basin Heater Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `basin_heater_availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `basin_heater_availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `basin_heater_availability_schedule_name`')
        self._data["Basin Heater Availability Schedule Name"] = value

    @property
    def supply_water_storage_tank_name(self):
        """Get supply_water_storage_tank_name

        Returns:
            str: the value of `supply_water_storage_tank_name` or None if not set
        """
        return self._data["Supply Water Storage Tank Name"]

    @supply_water_storage_tank_name.setter
    def supply_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `Supply Water Storage Tank Name`
        
        {u'type': u'object-list', u'object-list': u'WaterStorageTankNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Supply Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_water_storage_tank_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `supply_water_storage_tank_name`')
        self._data["Supply Water Storage Tank Name"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set
        """
        return self._data["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `Condensate Collection Water Storage Tank Name`
        
        {u'type': u'object-list', u'object-list': u'WaterStorageTankNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Condensate Collection Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `condensate_collection_water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `condensate_collection_water_storage_tank_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `condensate_collection_water_storage_tank_name`')
        self._data["Condensate Collection Water Storage Tank Name"] = value

    @property
    def storage_tank_plant_connection_inlet_node_name(self):
        """Get storage_tank_plant_connection_inlet_node_name

        Returns:
            str: the value of `storage_tank_plant_connection_inlet_node_name` or None if not set
        """
        return self._data["Storage Tank Plant Connection Inlet Node Name"]

    @storage_tank_plant_connection_inlet_node_name.setter
    def storage_tank_plant_connection_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Storage Tank Plant Connection Inlet Node Name`
        
        {u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Storage Tank Plant Connection Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `storage_tank_plant_connection_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `storage_tank_plant_connection_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `storage_tank_plant_connection_inlet_node_name`')
        self._data["Storage Tank Plant Connection Inlet Node Name"] = value

    @property
    def storage_tank_plant_connection_outlet_node_name(self):
        """Get storage_tank_plant_connection_outlet_node_name

        Returns:
            str: the value of `storage_tank_plant_connection_outlet_node_name` or None if not set
        """
        return self._data["Storage Tank Plant Connection Outlet Node Name"]

    @storage_tank_plant_connection_outlet_node_name.setter
    def storage_tank_plant_connection_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Storage Tank Plant Connection Outlet Node Name`
        
        {u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Storage Tank Plant Connection Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `storage_tank_plant_connection_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `storage_tank_plant_connection_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `storage_tank_plant_connection_outlet_node_name`')
        self._data["Storage Tank Plant Connection Outlet Node Name"] = value

    @property
    def storage_tank_plant_connection_design_flow_rate(self):
        """Get storage_tank_plant_connection_design_flow_rate

        Returns:
            float: the value of `storage_tank_plant_connection_design_flow_rate` or None if not set
        """
        return self._data["Storage Tank Plant Connection Design Flow Rate"]

    @storage_tank_plant_connection_design_flow_rate.setter
    def storage_tank_plant_connection_design_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Storage Tank Plant Connection Design Flow Rate`
        
        {u'units': u'm3/s', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Storage Tank Plant Connection Design Flow Rate`
                Units: m3/s
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `storage_tank_plant_connection_design_flow_rate`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `storage_tank_plant_connection_design_flow_rate`')
        self._data["Storage Tank Plant Connection Design Flow Rate"] = value

    @property
    def storage_tank_plant_connection_heat_transfer_effectiveness(self):
        """Get storage_tank_plant_connection_heat_transfer_effectiveness

        Returns:
            float: the value of `storage_tank_plant_connection_heat_transfer_effectiveness` or None if not set
        """
        return self._data["Storage Tank Plant Connection Heat Transfer Effectiveness"]

    @storage_tank_plant_connection_heat_transfer_effectiveness.setter
    def storage_tank_plant_connection_heat_transfer_effectiveness(self, value=0.7 ):
        """  Corresponds to IDD Field `Storage Tank Plant Connection Heat Transfer Effectiveness`
        
        {u'default': '0.7', u'minimum': '0.0', u'type': u'real', u'maximum': '1.0', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Storage Tank Plant Connection Heat Transfer Effectiveness`
                Default value: 0.7
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `storage_tank_plant_connection_heat_transfer_effectiveness`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `storage_tank_plant_connection_heat_transfer_effectiveness`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `storage_tank_plant_connection_heat_transfer_effectiveness`')
        self._data["Storage Tank Plant Connection Heat Transfer Effectiveness"] = value

    @property
    def storage_tank_minimum_operating_limit_fluid_temperature(self):
        """Get storage_tank_minimum_operating_limit_fluid_temperature

        Returns:
            float: the value of `storage_tank_minimum_operating_limit_fluid_temperature` or None if not set
        """
        return self._data["Storage Tank Minimum Operating Limit Fluid Temperature"]

    @storage_tank_minimum_operating_limit_fluid_temperature.setter
    def storage_tank_minimum_operating_limit_fluid_temperature(self, value=None):
        """  Corresponds to IDD Field `Storage Tank Minimum Operating Limit Fluid Temperature`
        For fluid storage tanks only, minimum limit for storage tank
        If omitted,then the minimum temperature limit is that used for fluid property data.
        
        {u'units': u'C', u'note': [u'For fluid storage tanks only, minimum limit for storage tank', u'If omitted,then the minimum temperature limit is that used for fluid property data.'], u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Storage Tank Minimum Operating Limit Fluid Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `storage_tank_minimum_operating_limit_fluid_temperature`'.format(value))
        self._data["Storage Tank Minimum Operating Limit Fluid Temperature"] = value

    @property
    def storage_tank_maximum_operating_limit_fluid_temperature(self):
        """Get storage_tank_maximum_operating_limit_fluid_temperature

        Returns:
            float: the value of `storage_tank_maximum_operating_limit_fluid_temperature` or None if not set
        """
        return self._data["Storage Tank Maximum Operating Limit Fluid Temperature"]

    @storage_tank_maximum_operating_limit_fluid_temperature.setter
    def storage_tank_maximum_operating_limit_fluid_temperature(self, value=None):
        """  Corresponds to IDD Field `Storage Tank Maximum Operating Limit Fluid Temperature`
        For fluid storage tanks only, maximum limit for storage tank
        If omitted,then the maximum temperature limit is that used for fluid property data.
        
        {u'units': u'C', u'note': [u'For fluid storage tanks only, maximum limit for storage tank', u'If omitted,then the maximum temperature limit is that used for fluid property data.'], u'type': u'real', u'Group': u'Evaporative Coolers', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Storage Tank Maximum Operating Limit Fluid Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `storage_tank_maximum_operating_limit_fluid_temperature`'.format(value))
        self._data["Storage Tank Maximum Operating Limit Fluid Temperature"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class HumidifierSteamElectric(object):
    """ Corresponds to IDD object `Humidifier:Steam:Electric`
        Electrically heated steam humidifier with fan.
    
    """
    internal_name = "Humidifier:Steam:Electric"
    field_count = 9
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Humidifier:Steam:Electric`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Rated Capacity"] = None
        self._data["Rated Power"] = None
        self._data["Rated Fan Power"] = None
        self._data["Standby Power"] = None
        self._data["Air Inlet Node Name"] = None
        self._data["Air Outlet Node Name"] = None
        self._data["Water Storage Tank Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_capacity = None
        else:
            self.rated_capacity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_power = None
        else:
            self.rated_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rated_fan_power = None
        else:
            self.rated_fan_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.standby_power = None
        else:
            self.standby_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_inlet_node_name = None
        else:
            self.air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.air_outlet_node_name = None
        else:
            self.air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.water_storage_tank_name = None
        else:
            self.water_storage_tank_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {'type': 'alpha', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def rated_capacity(self):
        """Get rated_capacity

        Returns:
            float: the value of `rated_capacity` or None if not set
        """
        return self._data["Rated Capacity"]

    @rated_capacity.setter
    def rated_capacity(self, value=None):
        """  Corresponds to IDD Field `Rated Capacity`
        Capacity is m3/s of water at 5.05 C
        
        {'pytype': 'float', u'note': [u'Capacity is m3/s of water at 5.05 C'], u'ip-units': u'gal/min', u'minimum': '0.0', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Capacity`
                Units: m3/s
                IP-Units: gal/min
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_capacity`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_capacity`')
        self._data["Rated Capacity"] = value

    @property
    def rated_power(self):
        """Get rated_power

        Returns:
            float: the value of `rated_power` or None if not set
        """
        return self._data["Rated Power"]

    @rated_power.setter
    def rated_power(self, value=None):
        """  Corresponds to IDD Field `Rated Power`
        if autosized the rated power is calculated from the rated capacity
        and enthalpy rise of water from 20.0C to 100.0C steam and assumes
        electric to thermal energy conversion efficiency of 100.0%
        
        {'pytype': 'float', u'note': [u'if autosized the rated power is calculated from the rated capacity', u'and enthalpy rise of water from 20.0C to 100.0C steam and assumes', u'electric to thermal energy conversion efficiency of 100.0%'], u'ip-units': u'W', u'autosizable': u'', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rated Power`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_power`')
        self._data["Rated Power"] = value

    @property
    def rated_fan_power(self):
        """Get rated_fan_power

        Returns:
            float: the value of `rated_fan_power` or None if not set
        """
        return self._data["Rated Fan Power"]

    @rated_fan_power.setter
    def rated_fan_power(self, value=None):
        """  Corresponds to IDD Field `Rated Fan Power`
        
        {u'units': u'W', u'ip-units': u'W', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Rated Fan Power`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rated_fan_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rated_fan_power`')
        self._data["Rated Fan Power"] = value

    @property
    def standby_power(self):
        """Get standby_power

        Returns:
            float: the value of `standby_power` or None if not set
        """
        return self._data["Standby Power"]

    @standby_power.setter
    def standby_power(self, value=None):
        """  Corresponds to IDD Field `Standby Power`
        
        {u'units': u'W', u'ip-units': u'W', u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Standby Power`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `standby_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `standby_power`')
        self._data["Standby Power"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name

        Returns:
            str: the value of `air_inlet_node_name` or None if not set
        """
        return self._data["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Inlet Node Name`
        
        {u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_inlet_node_name`')
        self._data["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name

        Returns:
            str: the value of `air_outlet_node_name` or None if not set
        """
        return self._data["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Air Outlet Node Name`
        
        {u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `air_outlet_node_name`')
        self._data["Air Outlet Node Name"] = value

    @property
    def water_storage_tank_name(self):
        """Get water_storage_tank_name

        Returns:
            str: the value of `water_storage_tank_name` or None if not set
        """
        return self._data["Water Storage Tank Name"]

    @water_storage_tank_name.setter
    def water_storage_tank_name(self, value=None):
        """  Corresponds to IDD Field `Water Storage Tank Name`
        
        {u'type': u'object-list', u'object-list': u'WaterStorageTankNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `water_storage_tank_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `water_storage_tank_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `water_storage_tank_name`')
        self._data["Water Storage Tank Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class DehumidifierDesiccantNoFans(object):
    """ Corresponds to IDD object `Dehumidifier:Desiccant:NoFans`
        This object models a solid desiccant dehumidifier. The process
        air stream is the air which is dehumidified. The regeneration air
        stream is the air which is heated to regenerate the desiccant.
        This object determines the process air outlet conditions, the
        load on the regeneration heating coil, the electric power consumption
        for the wheel rotor motor, and the regeneration air fan mass flow rate.
        All other heat exchangers are modeled as separate objects connected
        to the inlet and outlet nodes of the dehumidifier. The solid
        desiccant dehumidifier is typically used in an AirLoopHVAC:OutdoorAirSystem,
        but can also be specified in any AirLoopHVAC.
    
    """
    internal_name = "Dehumidifier:Desiccant:NoFans"
    field_count = 25
    required_fields = ["Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Dehumidifier:Desiccant:NoFans`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Process Air Inlet Node Name"] = None
        self._data["Process Air Outlet Node Name"] = None
        self._data["Regeneration Air Inlet Node Name"] = None
        self._data["Regeneration Fan Inlet Node Name"] = None
        self._data["Control Type"] = None
        self._data["Leaving Maximum Humidity Ratio Setpoint"] = None
        self._data["Nominal Process Air Flow Rate"] = None
        self._data["Nominal Process Air Velocity"] = None
        self._data["Rotor Power"] = None
        self._data["Regeneration Coil Object Type"] = None
        self._data["Regeneration Coil Name"] = None
        self._data["Regeneration Fan Object Type"] = None
        self._data["Regeneration Fan Name"] = None
        self._data["Performance Model Type"] = None
        self._data["Leaving Dry-Bulb Function of Entering Dry-Bulb and Humidity Ratio Curve Name"] = None
        self._data["Leaving Dry-Bulb Function of Air Velocity Curve Name"] = None
        self._data["Leaving Humidity Ratio Function of Entering Dry-Bulb and Humidity Ratio Curve Name"] = None
        self._data["Leaving Humidity Ratio Function of Air Velocity Curve Name"] = None
        self._data["Regeneration Energy Function of Entering Dry-Bulb and Humidity Ratio Curve Name"] = None
        self._data["Regeneration Energy Function of Air Velocity Curve Name"] = None
        self._data["Regeneration Velocity Function of Entering Dry-Bulb and Humidity Ratio Curve Name"] = None
        self._data["Regeneration Velocity Function of Air Velocity Curve Name"] = None
        self._data["Nominal Regeneration Temperature"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.process_air_inlet_node_name = None
        else:
            self.process_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.process_air_outlet_node_name = None
        else:
            self.process_air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_air_inlet_node_name = None
        else:
            self.regeneration_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_fan_inlet_node_name = None
        else:
            self.regeneration_fan_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.control_type = None
        else:
            self.control_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.leaving_maximum_humidity_ratio_setpoint = None
        else:
            self.leaving_maximum_humidity_ratio_setpoint = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_process_air_flow_rate = None
        else:
            self.nominal_process_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_process_air_velocity = None
        else:
            self.nominal_process_air_velocity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rotor_power = None
        else:
            self.rotor_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_coil_object_type = None
        else:
            self.regeneration_coil_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_coil_name = None
        else:
            self.regeneration_coil_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_fan_object_type = None
        else:
            self.regeneration_fan_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_fan_name = None
        else:
            self.regeneration_fan_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.performance_model_type = None
        else:
            self.performance_model_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.leaving_drybulb_function_of_entering_drybulb_and_humidity_ratio_curve_name = None
        else:
            self.leaving_drybulb_function_of_entering_drybulb_and_humidity_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.leaving_drybulb_function_of_air_velocity_curve_name = None
        else:
            self.leaving_drybulb_function_of_air_velocity_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.leaving_humidity_ratio_function_of_entering_drybulb_and_humidity_ratio_curve_name = None
        else:
            self.leaving_humidity_ratio_function_of_entering_drybulb_and_humidity_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.leaving_humidity_ratio_function_of_air_velocity_curve_name = None
        else:
            self.leaving_humidity_ratio_function_of_air_velocity_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_energy_function_of_entering_drybulb_and_humidity_ratio_curve_name = None
        else:
            self.regeneration_energy_function_of_entering_drybulb_and_humidity_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_energy_function_of_air_velocity_curve_name = None
        else:
            self.regeneration_energy_function_of_air_velocity_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_velocity_function_of_entering_drybulb_and_humidity_ratio_curve_name = None
        else:
            self.regeneration_velocity_function_of_entering_drybulb_and_humidity_ratio_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_velocity_function_of_air_velocity_curve_name = None
        else:
            self.regeneration_velocity_function_of_air_velocity_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_regeneration_temperature = None
        else:
            self.nominal_regeneration_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {'type': 'alpha', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def process_air_inlet_node_name(self):
        """Get process_air_inlet_node_name

        Returns:
            str: the value of `process_air_inlet_node_name` or None if not set
        """
        return self._data["Process Air Inlet Node Name"]

    @process_air_inlet_node_name.setter
    def process_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Process Air Inlet Node Name`
        This is the node entering the process side of the desiccant wheel.
        
        {u'note': [u'This is the node entering the process side of the desiccant wheel.'], u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Process Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `process_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `process_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `process_air_inlet_node_name`')
        self._data["Process Air Inlet Node Name"] = value

    @property
    def process_air_outlet_node_name(self):
        """Get process_air_outlet_node_name

        Returns:
            str: the value of `process_air_outlet_node_name` or None if not set
        """
        return self._data["Process Air Outlet Node Name"]

    @process_air_outlet_node_name.setter
    def process_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Process Air Outlet Node Name`
        This is the node leaving the process side of the desiccant wheel.
        
        {u'note': [u'This is the node leaving the process side of the desiccant wheel.'], u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Process Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `process_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `process_air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `process_air_outlet_node_name`')
        self._data["Process Air Outlet Node Name"] = value

    @property
    def regeneration_air_inlet_node_name(self):
        """Get regeneration_air_inlet_node_name

        Returns:
            str: the value of `regeneration_air_inlet_node_name` or None if not set
        """
        return self._data["Regeneration Air Inlet Node Name"]

    @regeneration_air_inlet_node_name.setter
    def regeneration_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Regeneration Air Inlet Node Name`
        This is the node entering the regeneration side of the desiccant wheel
        after the regeneration coil.
        
        {u'note': [u'This is the node entering the regeneration side of the desiccant wheel', u'after the regeneration coil.'], u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_air_inlet_node_name`')
        self._data["Regeneration Air Inlet Node Name"] = value

    @property
    def regeneration_fan_inlet_node_name(self):
        """Get regeneration_fan_inlet_node_name

        Returns:
            str: the value of `regeneration_fan_inlet_node_name` or None if not set
        """
        return self._data["Regeneration Fan Inlet Node Name"]

    @regeneration_fan_inlet_node_name.setter
    def regeneration_fan_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Regeneration Fan Inlet Node Name`
        Node for air entering the regeneration fan, mass flow is set
        by the desiccant dehumidifier module.
        
        {u'note': [u'Node for air entering the regeneration fan, mass flow is set', u'by the desiccant dehumidifier module.'], u'type': u'node', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Fan Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_fan_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_fan_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_fan_inlet_node_name`')
        self._data["Regeneration Fan Inlet Node Name"] = value

    @property
    def control_type(self):
        """Get control_type

        Returns:
            str: the value of `control_type` or None if not set
        """
        return self._data["Control Type"]

    @control_type.setter
    def control_type(self, value=None):
        """  Corresponds to IDD Field `Control Type`
        Type of setpoint control:
        LeavingMaximumHumidityRatioSetpoint means that the unit is controlled
        to deliver air at the Leaving Max Humidity Ratio Setpoint (see below),
        SystemNodeMaximumHumidityRatioSetpoint means that the leaving humidity
        ratio setpoint is the System Node Humidity Ratio Max property
        of the Process Air Outlet Node.  A Setpoint
        object must be used to control this setpoint.
        Both control types use bypass dampers to prevent overdrying.
        
        {u'note': [u'Type of setpoint control:', u'LeavingMaximumHumidityRatioSetpoint means that the unit is controlled', u'to deliver air at the Leaving Max Humidity Ratio Setpoint (see below),', u'SystemNodeMaximumHumidityRatioSetpoint means that the leaving humidity', u'ratio setpoint is the System Node Humidity Ratio Max property', u'of the Process Air Outlet Node.  A Setpoint', u'object must be used to control this setpoint.', u'Both control types use bypass dampers to prevent overdrying.'], u'type': u'choice', u'key': [u'LeavingMaximumHumidityRatioSetpoint', u'SystemNodeMaximumHumidityRatioSetpoint'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Control Type`
                Accepted values are:
                      - LeavingMaximumHumidityRatioSetpoint
                      - SystemNodeMaximumHumidityRatioSetpoint
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `control_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `control_type`')
            vals = {}
            vals["leavingmaximumhumidityratiosetpoint"] = "LeavingMaximumHumidityRatioSetpoint"
            vals["systemnodemaximumhumidityratiosetpoint"] = "SystemNodeMaximumHumidityRatioSetpoint"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `control_type`'.format(value))
            value = vals[value_lower]
        self._data["Control Type"] = value

    @property
    def leaving_maximum_humidity_ratio_setpoint(self):
        """Get leaving_maximum_humidity_ratio_setpoint

        Returns:
            float: the value of `leaving_maximum_humidity_ratio_setpoint` or None if not set
        """
        return self._data["Leaving Maximum Humidity Ratio Setpoint"]

    @leaving_maximum_humidity_ratio_setpoint.setter
    def leaving_maximum_humidity_ratio_setpoint(self, value=None):
        """  Corresponds to IDD Field `Leaving Maximum Humidity Ratio Setpoint`
        Fixed setpoint for maximum process air leaving humidity ratio
        Applicable only when Control Type = LeavingMaximumHumidityRatioSetpoint.
        
        {u'note': [u'Fixed setpoint for maximum process air leaving humidity ratio', u'Applicable only when Control Type = LeavingMaximumHumidityRatioSetpoint.'], u'units': u'kgWater/kgDryAir', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Leaving Maximum Humidity Ratio Setpoint`
                Units: kgWater/kgDryAir
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `leaving_maximum_humidity_ratio_setpoint`'.format(value))
        self._data["Leaving Maximum Humidity Ratio Setpoint"] = value

    @property
    def nominal_process_air_flow_rate(self):
        """Get nominal_process_air_flow_rate

        Returns:
            float: the value of `nominal_process_air_flow_rate` or None if not set
        """
        return self._data["Nominal Process Air Flow Rate"]

    @nominal_process_air_flow_rate.setter
    def nominal_process_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Nominal Process Air Flow Rate`
        Process air flow rate at nominal conditions
        
        {u'note': [u'Process air flow rate at nominal conditions'], u'units': u'm3/s', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Nominal Process Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_process_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_process_air_flow_rate`')
        self._data["Nominal Process Air Flow Rate"] = value

    @property
    def nominal_process_air_velocity(self):
        """Get nominal_process_air_velocity

        Returns:
            float: the value of `nominal_process_air_velocity` or None if not set
        """
        return self._data["Nominal Process Air Velocity"]

    @nominal_process_air_velocity.setter
    def nominal_process_air_velocity(self, value=None):
        """  Corresponds to IDD Field `Nominal Process Air Velocity`
        Process air velocity at nominal flow
        When using Performance Model Type of Default, must be 2.032 to 4.064 m/s (400 to 800 fpm)
        
        {'pytype': 'float', u'minimum>': '0.0', u'maximum': '6.0', u'note': [u'Process air velocity at nominal flow', u'When using Performance Model Type of Default, must be 2.032 to 4.064 m/s (400 to 800 fpm)'], u'units': u'm/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Nominal Process Air Velocity`
                Units: m/s
                value > 0.0
                value <= 6.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_process_air_velocity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_process_air_velocity`')
            if value > 6.0:
                raise ValueError('value need to be smaller 6.0 '
                                 'for field `nominal_process_air_velocity`')
        self._data["Nominal Process Air Velocity"] = value

    @property
    def rotor_power(self):
        """Get rotor_power

        Returns:
            float: the value of `rotor_power` or None if not set
        """
        return self._data["Rotor Power"]

    @rotor_power.setter
    def rotor_power(self, value=None):
        """  Corresponds to IDD Field `Rotor Power`
        Power input to wheel rotor motor
        
        {'pytype': 'float', u'note': [u'Power input to wheel rotor motor'], u'ip-units': u'W', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rotor Power`
                Units: W
                IP-Units: W
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rotor_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rotor_power`')
        self._data["Rotor Power"] = value

    @property
    def regeneration_coil_object_type(self):
        """Get regeneration_coil_object_type

        Returns:
            str: the value of `regeneration_coil_object_type` or None if not set
        """
        return self._data["Regeneration Coil Object Type"]

    @regeneration_coil_object_type.setter
    def regeneration_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `Regeneration Coil Object Type`
        heating coil type
        works with gas, electric, hot water and steam heating coils
        
        {u'note': [u'heating coil type', u'works with gas, electric, hot water and steam heating coils'], u'type': u'choice', u'key': [u'Coil:Heating:Electric', u'Coil:Heating:Gas', u'Coil:Heating:Water', u'Coil:Heating:Steam'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Coil Object Type`
                Accepted values are:
                      - Coil:Heating:Electric
                      - Coil:Heating:Gas
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_coil_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_coil_object_type`')
            vals = {}
            vals["coil:heating:electric"] = "Coil:Heating:Electric"
            vals["coil:heating:gas"] = "Coil:Heating:Gas"
            vals["coil:heating:water"] = "Coil:Heating:Water"
            vals["coil:heating:steam"] = "Coil:Heating:Steam"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `regeneration_coil_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Regeneration Coil Object Type"] = value

    @property
    def regeneration_coil_name(self):
        """Get regeneration_coil_name

        Returns:
            str: the value of `regeneration_coil_name` or None if not set
        """
        return self._data["Regeneration Coil Name"]

    @regeneration_coil_name.setter
    def regeneration_coil_name(self, value=None):
        """  Corresponds to IDD Field `Regeneration Coil Name`
        Name of heating coil object for regeneration air
        
        {u'note': [u'Name of heating coil object for regeneration air'], u'type': u'object-list', u'object-list': u'HeatingCoilName', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Coil Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_coil_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_coil_name`')
        self._data["Regeneration Coil Name"] = value

    @property
    def regeneration_fan_object_type(self):
        """Get regeneration_fan_object_type

        Returns:
            str: the value of `regeneration_fan_object_type` or None if not set
        """
        return self._data["Regeneration Fan Object Type"]

    @regeneration_fan_object_type.setter
    def regeneration_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `Regeneration Fan Object Type`
        Type of fan object for regeneration air.  When using the Default
        Performance Model Type (see below), only Fan:VariableVolume is valid.
        
        {u'note': [u'Type of fan object for regeneration air.  When using the Default', u'Performance Model Type (see below), only Fan:VariableVolume is valid.'], u'type': u'choice', u'key': [u'Fan:VariableVolume', u'Fan:ConstantVolume'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Fan Object Type`
                Accepted values are:
                      - Fan:VariableVolume
                      - Fan:ConstantVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_fan_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_fan_object_type`')
            vals = {}
            vals["fan:variablevolume"] = "Fan:VariableVolume"
            vals["fan:constantvolume"] = "Fan:ConstantVolume"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `regeneration_fan_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Regeneration Fan Object Type"] = value

    @property
    def regeneration_fan_name(self):
        """Get regeneration_fan_name

        Returns:
            str: the value of `regeneration_fan_name` or None if not set
        """
        return self._data["Regeneration Fan Name"]

    @regeneration_fan_name.setter
    def regeneration_fan_name(self, value=None):
        """  Corresponds to IDD Field `Regeneration Fan Name`
        Name of fan object for regeneration air
        
        {u'note': [u'Name of fan object for regeneration air'], u'type': u'object-list', u'object-list': u'FansCVandVAV', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Fan Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_fan_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_fan_name`')
        self._data["Regeneration Fan Name"] = value

    @property
    def performance_model_type(self):
        """Get performance_model_type

        Returns:
            str: the value of `performance_model_type` or None if not set
        """
        return self._data["Performance Model Type"]

    @performance_model_type.setter
    def performance_model_type(self, value=None):
        """  Corresponds to IDD Field `Performance Model Type`
        Specifies whether the default performance model or user-specified
        curves should be used to model the performance.  The default model
        is a generic solid desiccant wheel using performance curves of the form:
        curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*vel + C7*vel**2
        + C8*edb*ew + C9*edb**2*ew**2 + C10*edb*vel + C11*edb**2*vel**2
        + C12*ew*vel + C13*ew**2*vel**2 + C14*ALOG(edb) + C15*ALOG(ew) + C16*ALOG(vel)
        edb = process entering dry-bulb temperature [C]
        ew  = process entering humidity ratio [kgWater/kgDryAir]
        vel = process air velocity [m/s]
        If UserCurves are specified, then performance is calculated as follows:
        Leaving Dry-Bulb = (Leaving Dry-Bulb fTW Curve) * (Leaving Dry-Bulb fV Curve)
        Leaving Humidity Ratio = (Leaving Humidity Ratio fTW Curve) * (Leaving Humidity Ratio fV Curve)
        Regen Energy = (Regen Energy fTW Curve) * (Regen Energy fV Curve)
        Regen Velocity = (Regen Velocity fTW Curve) * (Regen Velocity fV Curve)
        
        {u'note': [u'Specifies whether the default performance model or user-specified', u'curves should be used to model the performance.  The default model', u'is a generic solid desiccant wheel using performance curves of the form:', u'curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*vel + C7*vel**2', u'+ C8*edb*ew + C9*edb**2*ew**2 + C10*edb*vel + C11*edb**2*vel**2', u'+ C12*ew*vel + C13*ew**2*vel**2 + C14*ALOG(edb) + C15*ALOG(ew) + C16*ALOG(vel)', u'edb = process entering dry-bulb temperature [C]', u'ew  = process entering humidity ratio [kgWater/kgDryAir]', u'vel = process air velocity [m/s]', u'If UserCurves are specified, then performance is calculated as follows:', u'Leaving Dry-Bulb = (Leaving Dry-Bulb fTW Curve) * (Leaving Dry-Bulb fV Curve)', u'Leaving Humidity Ratio = (Leaving Humidity Ratio fTW Curve) * (Leaving Humidity Ratio fV Curve)', u'Regen Energy = (Regen Energy fTW Curve) * (Regen Energy fV Curve)', u'Regen Velocity = (Regen Velocity fTW Curve) * (Regen Velocity fV Curve)'], u'type': u'choice', u'key': [u'Default', u'UserCurves'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Performance Model Type`
                Accepted values are:
                      - Default
                      - UserCurves
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `performance_model_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `performance_model_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `performance_model_type`')
            vals = {}
            vals["default"] = "Default"
            vals["usercurves"] = "UserCurves"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `performance_model_type`'.format(value))
            value = vals[value_lower]
        self._data["Performance Model Type"] = value

    @property
    def leaving_drybulb_function_of_entering_drybulb_and_humidity_ratio_curve_name(self):
        """Get leaving_drybulb_function_of_entering_drybulb_and_humidity_ratio_curve_name

        Returns:
            str: the value of `leaving_drybulb_function_of_entering_drybulb_and_humidity_ratio_curve_name` or None if not set
        """
        return self._data["Leaving Dry-Bulb Function of Entering Dry-Bulb and Humidity Ratio Curve Name"]

    @leaving_drybulb_function_of_entering_drybulb_and_humidity_ratio_curve_name.setter
    def leaving_drybulb_function_of_entering_drybulb_and_humidity_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Leaving Dry-Bulb Function of Entering Dry-Bulb and Humidity Ratio Curve Name`
        Leaving dry-bulb of process air as a function of entering dry-bulb
        and entering humidity ratio, biquadratic curve
        Table:TwoIndependentVariables object can also be used
        curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew
        edb = process entering dry-bulb temperature [C]
        ew  = process entering humidity ratio [kgWater/kgDryAir]
        
        {u'note': [u'Leaving dry-bulb of process air as a function of entering dry-bulb', u'and entering humidity ratio, biquadratic curve', u'Table:TwoIndependentVariables object can also be used', u'curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew', u'edb = process entering dry-bulb temperature [C]', u'ew  = process entering humidity ratio [kgWater/kgDryAir]'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Leaving Dry-Bulb Function of Entering Dry-Bulb and Humidity Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `leaving_drybulb_function_of_entering_drybulb_and_humidity_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `leaving_drybulb_function_of_entering_drybulb_and_humidity_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `leaving_drybulb_function_of_entering_drybulb_and_humidity_ratio_curve_name`')
        self._data["Leaving Dry-Bulb Function of Entering Dry-Bulb and Humidity Ratio Curve Name"] = value

    @property
    def leaving_drybulb_function_of_air_velocity_curve_name(self):
        """Get leaving_drybulb_function_of_air_velocity_curve_name

        Returns:
            str: the value of `leaving_drybulb_function_of_air_velocity_curve_name` or None if not set
        """
        return self._data["Leaving Dry-Bulb Function of Air Velocity Curve Name"]

    @leaving_drybulb_function_of_air_velocity_curve_name.setter
    def leaving_drybulb_function_of_air_velocity_curve_name(self, value=None):
        """  Corresponds to IDD Field `Leaving Dry-Bulb Function of Air Velocity Curve Name`
        Leaving dry-bulb of process air as a function of air velocity,
        quadratic curve.
        Table:OneIndependentVariable object can also be used
        curve = C1 + C2*v + C3*v**2
        v = process air velocity [m/s]
        
        {u'note': [u'Leaving dry-bulb of process air as a function of air velocity,', u'quadratic curve.', u'Table:OneIndependentVariable object can also be used', u'curve = C1 + C2*v + C3*v**2', u'v = process air velocity [m/s]'], u'type': u'object-list', u'object-list': u'QuadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Leaving Dry-Bulb Function of Air Velocity Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `leaving_drybulb_function_of_air_velocity_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `leaving_drybulb_function_of_air_velocity_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `leaving_drybulb_function_of_air_velocity_curve_name`')
        self._data["Leaving Dry-Bulb Function of Air Velocity Curve Name"] = value

    @property
    def leaving_humidity_ratio_function_of_entering_drybulb_and_humidity_ratio_curve_name(self):
        """Get leaving_humidity_ratio_function_of_entering_drybulb_and_humidity_ratio_curve_name

        Returns:
            str: the value of `leaving_humidity_ratio_function_of_entering_drybulb_and_humidity_ratio_curve_name` or None if not set
        """
        return self._data["Leaving Humidity Ratio Function of Entering Dry-Bulb and Humidity Ratio Curve Name"]

    @leaving_humidity_ratio_function_of_entering_drybulb_and_humidity_ratio_curve_name.setter
    def leaving_humidity_ratio_function_of_entering_drybulb_and_humidity_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Leaving Humidity Ratio Function of Entering Dry-Bulb and Humidity Ratio Curve Name`
        Leaving humidity ratio of process air as a function of entering dry-bulb
        and entering humidity ratio, biquadratic curve
        Table:TwoIndependentVariables object can also be used
        curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew
        edb = process entering dry-bulb temperature [C]
        ew  = process entering humidity ratio [kgWater/kgDryAir]
        
        {u'note': [u'Leaving humidity ratio of process air as a function of entering dry-bulb', u'and entering humidity ratio, biquadratic curve', u'Table:TwoIndependentVariables object can also be used', u'curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew', u'edb = process entering dry-bulb temperature [C]', u'ew  = process entering humidity ratio [kgWater/kgDryAir]'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Leaving Humidity Ratio Function of Entering Dry-Bulb and Humidity Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `leaving_humidity_ratio_function_of_entering_drybulb_and_humidity_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `leaving_humidity_ratio_function_of_entering_drybulb_and_humidity_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `leaving_humidity_ratio_function_of_entering_drybulb_and_humidity_ratio_curve_name`')
        self._data["Leaving Humidity Ratio Function of Entering Dry-Bulb and Humidity Ratio Curve Name"] = value

    @property
    def leaving_humidity_ratio_function_of_air_velocity_curve_name(self):
        """Get leaving_humidity_ratio_function_of_air_velocity_curve_name

        Returns:
            str: the value of `leaving_humidity_ratio_function_of_air_velocity_curve_name` or None if not set
        """
        return self._data["Leaving Humidity Ratio Function of Air Velocity Curve Name"]

    @leaving_humidity_ratio_function_of_air_velocity_curve_name.setter
    def leaving_humidity_ratio_function_of_air_velocity_curve_name(self, value=None):
        """  Corresponds to IDD Field `Leaving Humidity Ratio Function of Air Velocity Curve Name`
        Leaving humidity ratio of process air as a function of
        process air velocity, quadratic curve.
        Table:OneIndependentVariable object can also be used
        curve = C1 + C2*v + C3*v**2
        v = process air velocity [m/s]
        
        {u'note': [u'Leaving humidity ratio of process air as a function of', u'process air velocity, quadratic curve.', u'Table:OneIndependentVariable object can also be used', u'curve = C1 + C2*v + C3*v**2', u'v = process air velocity [m/s]'], u'type': u'object-list', u'object-list': u'QuadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Leaving Humidity Ratio Function of Air Velocity Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `leaving_humidity_ratio_function_of_air_velocity_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `leaving_humidity_ratio_function_of_air_velocity_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `leaving_humidity_ratio_function_of_air_velocity_curve_name`')
        self._data["Leaving Humidity Ratio Function of Air Velocity Curve Name"] = value

    @property
    def regeneration_energy_function_of_entering_drybulb_and_humidity_ratio_curve_name(self):
        """Get regeneration_energy_function_of_entering_drybulb_and_humidity_ratio_curve_name

        Returns:
            str: the value of `regeneration_energy_function_of_entering_drybulb_and_humidity_ratio_curve_name` or None if not set
        """
        return self._data["Regeneration Energy Function of Entering Dry-Bulb and Humidity Ratio Curve Name"]

    @regeneration_energy_function_of_entering_drybulb_and_humidity_ratio_curve_name.setter
    def regeneration_energy_function_of_entering_drybulb_and_humidity_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Regeneration Energy Function of Entering Dry-Bulb and Humidity Ratio Curve Name`
        Regeneration energy [J/kg of water removed] as a function of
        entering dry-bulb and entering humidity ratio, biquadratic curve
        Table:TwoIndependentVariables object can also be used
        curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew
        edb = process entering dry-bulb temperature [C]
        ew  = process entering humidity ratio [kgWater/kgDryAir]
        
        {u'note': [u'Regeneration energy [J/kg of water removed] as a function of', u'entering dry-bulb and entering humidity ratio, biquadratic curve', u'Table:TwoIndependentVariables object can also be used', u'curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew', u'edb = process entering dry-bulb temperature [C]', u'ew  = process entering humidity ratio [kgWater/kgDryAir]'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Energy Function of Entering Dry-Bulb and Humidity Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_energy_function_of_entering_drybulb_and_humidity_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_energy_function_of_entering_drybulb_and_humidity_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_energy_function_of_entering_drybulb_and_humidity_ratio_curve_name`')
        self._data["Regeneration Energy Function of Entering Dry-Bulb and Humidity Ratio Curve Name"] = value

    @property
    def regeneration_energy_function_of_air_velocity_curve_name(self):
        """Get regeneration_energy_function_of_air_velocity_curve_name

        Returns:
            str: the value of `regeneration_energy_function_of_air_velocity_curve_name` or None if not set
        """
        return self._data["Regeneration Energy Function of Air Velocity Curve Name"]

    @regeneration_energy_function_of_air_velocity_curve_name.setter
    def regeneration_energy_function_of_air_velocity_curve_name(self, value=None):
        """  Corresponds to IDD Field `Regeneration Energy Function of Air Velocity Curve Name`
        Regeneration energy [J/kg of water removed] as a function of
        process air velocity, quadratic curve.
        Table:OneIndependentVariable object can also be used
        curve = C1 + C2*v + C3*v**2
        v = process air velocity [m/s]
        
        {u'note': [u'Regeneration energy [J/kg of water removed] as a function of', u'process air velocity, quadratic curve.', u'Table:OneIndependentVariable object can also be used', u'curve = C1 + C2*v + C3*v**2', u'v = process air velocity [m/s]'], u'type': u'object-list', u'object-list': u'QuadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Energy Function of Air Velocity Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_energy_function_of_air_velocity_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_energy_function_of_air_velocity_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_energy_function_of_air_velocity_curve_name`')
        self._data["Regeneration Energy Function of Air Velocity Curve Name"] = value

    @property
    def regeneration_velocity_function_of_entering_drybulb_and_humidity_ratio_curve_name(self):
        """Get regeneration_velocity_function_of_entering_drybulb_and_humidity_ratio_curve_name

        Returns:
            str: the value of `regeneration_velocity_function_of_entering_drybulb_and_humidity_ratio_curve_name` or None if not set
        """
        return self._data["Regeneration Velocity Function of Entering Dry-Bulb and Humidity Ratio Curve Name"]

    @regeneration_velocity_function_of_entering_drybulb_and_humidity_ratio_curve_name.setter
    def regeneration_velocity_function_of_entering_drybulb_and_humidity_ratio_curve_name(self, value=None):
        """  Corresponds to IDD Field `Regeneration Velocity Function of Entering Dry-Bulb and Humidity Ratio Curve Name`
        Regeneration velocity [m/s] as a function of
        entering dry-bulb and entering humidity ratio, biquadratic curve
        Table:TwoIndependentVariables object can also be used
        curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew
        edb = process entering dry-bulb temperature [C]
        ew  = process entering humidity ratio [kgWater/kgDryAir]
        
        {u'note': [u'Regeneration velocity [m/s] as a function of', u'entering dry-bulb and entering humidity ratio, biquadratic curve', u'Table:TwoIndependentVariables object can also be used', u'curve = C1 + C2*edb + C3*edb**2 + C4*ew + C5*ew**2 + C6*edb*ew', u'edb = process entering dry-bulb temperature [C]', u'ew  = process entering humidity ratio [kgWater/kgDryAir]'], u'type': u'object-list', u'object-list': u'BiquadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Velocity Function of Entering Dry-Bulb and Humidity Ratio Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_velocity_function_of_entering_drybulb_and_humidity_ratio_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_velocity_function_of_entering_drybulb_and_humidity_ratio_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_velocity_function_of_entering_drybulb_and_humidity_ratio_curve_name`')
        self._data["Regeneration Velocity Function of Entering Dry-Bulb and Humidity Ratio Curve Name"] = value

    @property
    def regeneration_velocity_function_of_air_velocity_curve_name(self):
        """Get regeneration_velocity_function_of_air_velocity_curve_name

        Returns:
            str: the value of `regeneration_velocity_function_of_air_velocity_curve_name` or None if not set
        """
        return self._data["Regeneration Velocity Function of Air Velocity Curve Name"]

    @regeneration_velocity_function_of_air_velocity_curve_name.setter
    def regeneration_velocity_function_of_air_velocity_curve_name(self, value=None):
        """  Corresponds to IDD Field `Regeneration Velocity Function of Air Velocity Curve Name`
        Regeneration velocity [m/s] as a function of
        process air velocity, quadratic curve.
        Table:OneIndependentVariable object can also be used
        curve = C1 + C2*v + C3*v**2
        v = process air velocity [m/s]
        
        {u'note': [u'Regeneration velocity [m/s] as a function of', u'process air velocity, quadratic curve.', u'Table:OneIndependentVariable object can also be used', u'curve = C1 + C2*v + C3*v**2', u'v = process air velocity [m/s]'], u'type': u'object-list', u'object-list': u'QuadraticCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Velocity Function of Air Velocity Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_velocity_function_of_air_velocity_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_velocity_function_of_air_velocity_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_velocity_function_of_air_velocity_curve_name`')
        self._data["Regeneration Velocity Function of Air Velocity Curve Name"] = value

    @property
    def nominal_regeneration_temperature(self):
        """Get nominal_regeneration_temperature

        Returns:
            float: the value of `nominal_regeneration_temperature` or None if not set
        """
        return self._data["Nominal Regeneration Temperature"]

    @nominal_regeneration_temperature.setter
    def nominal_regeneration_temperature(self, value=None):
        """  Corresponds to IDD Field `Nominal Regeneration Temperature`
        Nominal regen temperature upon which the regen energy modifier
        curve is based.  Not used if Default if chosen for the field Performance Mode Type.
        121 C is a commonly used value.
        
        {'pytype': 'float', u'maximum': '250.0', u'note': [u'Nominal regen temperature upon which the regen energy modifier', u'curve is based.  Not used if Default if chosen for the field Performance Mode Type.', u'121 C is a commonly used value.'], u'minimum': '40.0', u'units': u'C', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Nominal Regeneration Temperature`
                Units: C
                value >= 40.0
                value <= 250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_regeneration_temperature`'.format(value))
            if value < 40.0:
                raise ValueError('value need to be greater or equal 40.0 '
                                 'for field `nominal_regeneration_temperature`')
            if value > 250.0:
                raise ValueError('value need to be smaller 250.0 '
                                 'for field `nominal_regeneration_temperature`')
        self._data["Nominal Regeneration Temperature"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class DehumidifierDesiccantSystem(object):
    """ Corresponds to IDD object `Dehumidifier:Desiccant:System`
        This compound object models a desiccant heat exchanger, an optional
        heater, and associated fans. The process air stream is the air which
        is dehumidified. The regeneration air stream is the air which is
        heated to regenerate the desiccant. The desiccant heat exchanger
        transfers both sensible and latent energy between the process and
        regeneration air streams. The desiccant dehumidifier is typically used
        in an AirLoopHVAC:OutdoorAirSystem, but can also be specified in any AirLoopHVAC.
    
    """
    internal_name = "Dehumidifier:Desiccant:System"
    field_count = 18
    required_fields = ["Name", "Desiccant Heat Exchanger Object Type", "Desiccant Heat Exchanger Name", "Sensor Node Name", "Regeneration Air Fan Object Type", "Regeneration Air Fan Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `Dehumidifier:Desiccant:System`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Desiccant Heat Exchanger Object Type"] = None
        self._data["Desiccant Heat Exchanger Name"] = None
        self._data["Sensor Node Name"] = None
        self._data["Regeneration Air Fan Object Type"] = None
        self._data["Regeneration Air Fan Name"] = None
        self._data["Regeneration Air Fan Placement"] = None
        self._data["Regeneration Air Heater Object Type"] = None
        self._data["Regeneration Air Heater Name"] = None
        self._data["Regeneration Inlet Air Setpoint Temperature"] = None
        self._data["Companion Cooling Coil Object Type"] = None
        self._data["Companion Cooling Coil Name"] = None
        self._data["Companion Cooling Coil Upstream of Dehumidifier Process Inlet"] = None
        self._data["Companion Coil Regeneration Air Heating"] = None
        self._data["Exhaust Fan Maximum Flow Rate"] = None
        self._data["Exhaust Fan Maximum Power"] = None
        self._data["Exhaust Fan Power Curve Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.desiccant_heat_exchanger_object_type = None
        else:
            self.desiccant_heat_exchanger_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.desiccant_heat_exchanger_name = None
        else:
            self.desiccant_heat_exchanger_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensor_node_name = None
        else:
            self.sensor_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_air_fan_object_type = None
        else:
            self.regeneration_air_fan_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_air_fan_name = None
        else:
            self.regeneration_air_fan_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_air_fan_placement = None
        else:
            self.regeneration_air_fan_placement = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_air_heater_object_type = None
        else:
            self.regeneration_air_heater_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_air_heater_name = None
        else:
            self.regeneration_air_heater_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_inlet_air_setpoint_temperature = None
        else:
            self.regeneration_inlet_air_setpoint_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.companion_cooling_coil_object_type = None
        else:
            self.companion_cooling_coil_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.companion_cooling_coil_name = None
        else:
            self.companion_cooling_coil_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.companion_cooling_coil_upstream_of_dehumidifier_process_inlet = None
        else:
            self.companion_cooling_coil_upstream_of_dehumidifier_process_inlet = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.companion_coil_regeneration_air_heating = None
        else:
            self.companion_coil_regeneration_air_heating = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.exhaust_fan_maximum_flow_rate = None
        else:
            self.exhaust_fan_maximum_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.exhaust_fan_maximum_power = None
        else:
            self.exhaust_fan_maximum_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.exhaust_fan_power_curve_name = None
        else:
            self.exhaust_fan_power_curve_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def desiccant_heat_exchanger_object_type(self):
        """Get desiccant_heat_exchanger_object_type

        Returns:
            str: the value of `desiccant_heat_exchanger_object_type` or None if not set
        """
        return self._data["Desiccant Heat Exchanger Object Type"]

    @desiccant_heat_exchanger_object_type.setter
    def desiccant_heat_exchanger_object_type(self, value=None):
        """  Corresponds to IDD Field `Desiccant Heat Exchanger Object Type`
        
        {u'type': u'choice', u'key': [u'HeatExchanger:Desiccant:BalancedFlow'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Desiccant Heat Exchanger Object Type`
                Accepted values are:
                      - HeatExchanger:Desiccant:BalancedFlow
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `desiccant_heat_exchanger_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `desiccant_heat_exchanger_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `desiccant_heat_exchanger_object_type`')
            vals = {}
            vals["heatexchanger:desiccant:balancedflow"] = "HeatExchanger:Desiccant:BalancedFlow"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `desiccant_heat_exchanger_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Desiccant Heat Exchanger Object Type"] = value

    @property
    def desiccant_heat_exchanger_name(self):
        """Get desiccant_heat_exchanger_name

        Returns:
            str: the value of `desiccant_heat_exchanger_name` or None if not set
        """
        return self._data["Desiccant Heat Exchanger Name"]

    @desiccant_heat_exchanger_name.setter
    def desiccant_heat_exchanger_name(self, value=None):
        """  Corresponds to IDD Field `Desiccant Heat Exchanger Name`
        
        {u'type': u'object-list', u'object-list': u'HXDesiccantBalanced', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Desiccant Heat Exchanger Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `desiccant_heat_exchanger_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `desiccant_heat_exchanger_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `desiccant_heat_exchanger_name`')
        self._data["Desiccant Heat Exchanger Name"] = value

    @property
    def sensor_node_name(self):
        """Get sensor_node_name

        Returns:
            str: the value of `sensor_node_name` or None if not set
        """
        return self._data["Sensor Node Name"]

    @sensor_node_name.setter
    def sensor_node_name(self, value=None):
        """  Corresponds to IDD Field `Sensor Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Sensor Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `sensor_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `sensor_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `sensor_node_name`')
        self._data["Sensor Node Name"] = value

    @property
    def regeneration_air_fan_object_type(self):
        """Get regeneration_air_fan_object_type

        Returns:
            str: the value of `regeneration_air_fan_object_type` or None if not set
        """
        return self._data["Regeneration Air Fan Object Type"]

    @regeneration_air_fan_object_type.setter
    def regeneration_air_fan_object_type(self, value=None):
        """  Corresponds to IDD Field `Regeneration Air Fan Object Type`
        
        {u'type': u'choice', u'key': [u'Fan:OnOff', u'Fan:ConstantVolume'], u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Air Fan Object Type`
                Accepted values are:
                      - Fan:OnOff
                      - Fan:ConstantVolume
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_air_fan_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_air_fan_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_air_fan_object_type`')
            vals = {}
            vals["fan:onoff"] = "Fan:OnOff"
            vals["fan:constantvolume"] = "Fan:ConstantVolume"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `regeneration_air_fan_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Regeneration Air Fan Object Type"] = value

    @property
    def regeneration_air_fan_name(self):
        """Get regeneration_air_fan_name

        Returns:
            str: the value of `regeneration_air_fan_name` or None if not set
        """
        return self._data["Regeneration Air Fan Name"]

    @regeneration_air_fan_name.setter
    def regeneration_air_fan_name(self, value=None):
        """  Corresponds to IDD Field `Regeneration Air Fan Name`
        
        {u'type': u'object-list', u'object-list': u'FansOnOffandVAV', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Air Fan Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_air_fan_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_air_fan_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_air_fan_name`')
        self._data["Regeneration Air Fan Name"] = value

    @property
    def regeneration_air_fan_placement(self):
        """Get regeneration_air_fan_placement

        Returns:
            str: the value of `regeneration_air_fan_placement` or None if not set
        """
        return self._data["Regeneration Air Fan Placement"]

    @regeneration_air_fan_placement.setter
    def regeneration_air_fan_placement(self, value="DrawThrough"):
        """  Corresponds to IDD Field `Regeneration Air Fan Placement`
        
        {u'default': u'DrawThrough', u'type': u'choice', u'key': [u'BlowThrough', u'DrawThrough'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Air Fan Placement`
                Accepted values are:
                      - BlowThrough
                      - DrawThrough
                Default value: DrawThrough
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_air_fan_placement`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_air_fan_placement`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_air_fan_placement`')
            vals = {}
            vals["blowthrough"] = "BlowThrough"
            vals["drawthrough"] = "DrawThrough"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `regeneration_air_fan_placement`'.format(value))
            value = vals[value_lower]
        self._data["Regeneration Air Fan Placement"] = value

    @property
    def regeneration_air_heater_object_type(self):
        """Get regeneration_air_heater_object_type

        Returns:
            str: the value of `regeneration_air_heater_object_type` or None if not set
        """
        return self._data["Regeneration Air Heater Object Type"]

    @regeneration_air_heater_object_type.setter
    def regeneration_air_heater_object_type(self, value=None):
        """  Corresponds to IDD Field `Regeneration Air Heater Object Type`
        works with gas, electric, hot water and steam heating coils
        
        {u'note': [u'works with gas, electric, hot water and steam heating coils'], u'type': u'choice', u'key': [u'Coil:Heating:Electric', u'Coil:Heating:Gas', u'Coil:Heating:Water', u'Coil:Heating:Steam'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Air Heater Object Type`
                Accepted values are:
                      - Coil:Heating:Electric
                      - Coil:Heating:Gas
                      - Coil:Heating:Water
                      - Coil:Heating:Steam
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_air_heater_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_air_heater_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_air_heater_object_type`')
            vals = {}
            vals["coil:heating:electric"] = "Coil:Heating:Electric"
            vals["coil:heating:gas"] = "Coil:Heating:Gas"
            vals["coil:heating:water"] = "Coil:Heating:Water"
            vals["coil:heating:steam"] = "Coil:Heating:Steam"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `regeneration_air_heater_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Regeneration Air Heater Object Type"] = value

    @property
    def regeneration_air_heater_name(self):
        """Get regeneration_air_heater_name

        Returns:
            str: the value of `regeneration_air_heater_name` or None if not set
        """
        return self._data["Regeneration Air Heater Name"]

    @regeneration_air_heater_name.setter
    def regeneration_air_heater_name(self, value=None):
        """  Corresponds to IDD Field `Regeneration Air Heater Name`
        
        {u'type': u'object-list', u'object-list': u'HeatingCoilName', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Air Heater Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_air_heater_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_air_heater_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_air_heater_name`')
        self._data["Regeneration Air Heater Name"] = value

    @property
    def regeneration_inlet_air_setpoint_temperature(self):
        """Get regeneration_inlet_air_setpoint_temperature

        Returns:
            float: the value of `regeneration_inlet_air_setpoint_temperature` or None if not set
        """
        return self._data["Regeneration Inlet Air Setpoint Temperature"]

    @regeneration_inlet_air_setpoint_temperature.setter
    def regeneration_inlet_air_setpoint_temperature(self, value=None):
        """  Corresponds to IDD Field `Regeneration Inlet Air Setpoint Temperature`
        
        {u'units': u'C', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Regeneration Inlet Air Setpoint Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `regeneration_inlet_air_setpoint_temperature`'.format(value))
        self._data["Regeneration Inlet Air Setpoint Temperature"] = value

    @property
    def companion_cooling_coil_object_type(self):
        """Get companion_cooling_coil_object_type

        Returns:
            str: the value of `companion_cooling_coil_object_type` or None if not set
        """
        return self._data["Companion Cooling Coil Object Type"]

    @companion_cooling_coil_object_type.setter
    def companion_cooling_coil_object_type(self, value=None):
        """  Corresponds to IDD Field `Companion Cooling Coil Object Type`
        
        {u'type': u'choice', u'key': [u'Coil:Cooling:DX:SingleSpeed', u'Coil:Cooling:DX:TwoStageWithHumidityControlMode'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Companion Cooling Coil Object Type`
                Accepted values are:
                      - Coil:Cooling:DX:SingleSpeed
                      - Coil:Cooling:DX:TwoStageWithHumidityControlMode
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `companion_cooling_coil_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `companion_cooling_coil_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `companion_cooling_coil_object_type`')
            vals = {}
            vals["coil:cooling:dx:singlespeed"] = "Coil:Cooling:DX:SingleSpeed"
            vals["coil:cooling:dx:twostagewithhumiditycontrolmode"] = "Coil:Cooling:DX:TwoStageWithHumidityControlMode"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `companion_cooling_coil_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Companion Cooling Coil Object Type"] = value

    @property
    def companion_cooling_coil_name(self):
        """Get companion_cooling_coil_name

        Returns:
            str: the value of `companion_cooling_coil_name` or None if not set
        """
        return self._data["Companion Cooling Coil Name"]

    @companion_cooling_coil_name.setter
    def companion_cooling_coil_name(self, value=None):
        """  Corresponds to IDD Field `Companion Cooling Coil Name`
        
        {u'type': u'object-list', u'object-list': u'CoolingCoilsDXMultiModeOrSingleSpeed', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Companion Cooling Coil Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `companion_cooling_coil_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `companion_cooling_coil_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `companion_cooling_coil_name`')
        self._data["Companion Cooling Coil Name"] = value

    @property
    def companion_cooling_coil_upstream_of_dehumidifier_process_inlet(self):
        """Get companion_cooling_coil_upstream_of_dehumidifier_process_inlet

        Returns:
            str: the value of `companion_cooling_coil_upstream_of_dehumidifier_process_inlet` or None if not set
        """
        return self._data["Companion Cooling Coil Upstream of Dehumidifier Process Inlet"]

    @companion_cooling_coil_upstream_of_dehumidifier_process_inlet.setter
    def companion_cooling_coil_upstream_of_dehumidifier_process_inlet(self, value="No"):
        """  Corresponds to IDD Field `Companion Cooling Coil Upstream of Dehumidifier Process Inlet`
        Select Yes if the companion cooling coil is located directly upstream
        of the desiccant heat exchanger's process air inlet node.
        
        {u'default': u'No', u'note': [u'Select Yes if the companion cooling coil is located directly upstream', u"of the desiccant heat exchanger's process air inlet node."], u'type': u'choice', u'key': [u'Yes', u'No'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Companion Cooling Coil Upstream of Dehumidifier Process Inlet`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `companion_cooling_coil_upstream_of_dehumidifier_process_inlet`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `companion_cooling_coil_upstream_of_dehumidifier_process_inlet`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `companion_cooling_coil_upstream_of_dehumidifier_process_inlet`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `companion_cooling_coil_upstream_of_dehumidifier_process_inlet`'.format(value))
            value = vals[value_lower]
        self._data["Companion Cooling Coil Upstream of Dehumidifier Process Inlet"] = value

    @property
    def companion_coil_regeneration_air_heating(self):
        """Get companion_coil_regeneration_air_heating

        Returns:
            str: the value of `companion_coil_regeneration_air_heating` or None if not set
        """
        return self._data["Companion Coil Regeneration Air Heating"]

    @companion_coil_regeneration_air_heating.setter
    def companion_coil_regeneration_air_heating(self, value="No"):
        """  Corresponds to IDD Field `Companion Coil Regeneration Air Heating`
        
        {u'default': u'No', u'type': u'choice', u'key': [u'Yes', u'No'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Companion Coil Regeneration Air Heating`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `companion_coil_regeneration_air_heating`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `companion_coil_regeneration_air_heating`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `companion_coil_regeneration_air_heating`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `companion_coil_regeneration_air_heating`'.format(value))
            value = vals[value_lower]
        self._data["Companion Coil Regeneration Air Heating"] = value

    @property
    def exhaust_fan_maximum_flow_rate(self):
        """Get exhaust_fan_maximum_flow_rate

        Returns:
            float: the value of `exhaust_fan_maximum_flow_rate` or None if not set
        """
        return self._data["Exhaust Fan Maximum Flow Rate"]

    @exhaust_fan_maximum_flow_rate.setter
    def exhaust_fan_maximum_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Exhaust Fan Maximum Flow Rate`
        
        {u'units': u'm3/s', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Exhaust Fan Maximum Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `exhaust_fan_maximum_flow_rate`'.format(value))
        self._data["Exhaust Fan Maximum Flow Rate"] = value

    @property
    def exhaust_fan_maximum_power(self):
        """Get exhaust_fan_maximum_power

        Returns:
            float: the value of `exhaust_fan_maximum_power` or None if not set
        """
        return self._data["Exhaust Fan Maximum Power"]

    @exhaust_fan_maximum_power.setter
    def exhaust_fan_maximum_power(self, value=None):
        """  Corresponds to IDD Field `Exhaust Fan Maximum Power`
        
        {u'units': u'W', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Exhaust Fan Maximum Power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `exhaust_fan_maximum_power`'.format(value))
        self._data["Exhaust Fan Maximum Power"] = value

    @property
    def exhaust_fan_power_curve_name(self):
        """Get exhaust_fan_power_curve_name

        Returns:
            str: the value of `exhaust_fan_power_curve_name` or None if not set
        """
        return self._data["Exhaust Fan Power Curve Name"]

    @exhaust_fan_power_curve_name.setter
    def exhaust_fan_power_curve_name(self, value=None):
        """  Corresponds to IDD Field `Exhaust Fan Power Curve Name`
        Curve object type must be Curve:Quadratic or Curve:Cubic
        Table:OneIndependentVariable object can also be used
        
        {u'note': [u'Curve object type must be Curve:Quadratic or Curve:Cubic', u'Table:OneIndependentVariable object can also be used'], u'Group': u'Heat Recovery', u'type': u'alpha', u'object-list': u'CubicCurves', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Exhaust Fan Power Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_fan_power_curve_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_fan_power_curve_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `exhaust_fan_power_curve_name`')
        self._data["Exhaust Fan Power Curve Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class HeatExchangerAirToAirFlatPlate(object):
    """ Corresponds to IDD object `HeatExchanger:AirToAir:FlatPlate`
        Flat plate air-to-air heat exchanger, typically used for exhaust or relief air heat
        recovery.
    
    """
    internal_name = "HeatExchanger:AirToAir:FlatPlate"
    field_count = 15
    required_fields = ["Name", "Nominal Supply Air Flow Rate", "Nominal Supply Air Inlet Temperature", "Nominal Supply Air Outlet Temperature", "Nominal Secondary Air Flow Rate", "Nominal Secondary Air Inlet Temperature", "Supply Air Inlet Node Name", "Supply Air Outlet Node Name", "Secondary Air Inlet Node Name", "Secondary Air Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HeatExchanger:AirToAir:FlatPlate`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Flow Arrangement Type"] = None
        self._data["Economizer Lockout"] = None
        self._data["Ratio of Supply to Secondary hA Values"] = None
        self._data["Nominal Supply Air Flow Rate"] = None
        self._data["Nominal Supply Air Inlet Temperature"] = None
        self._data["Nominal Supply Air Outlet Temperature"] = None
        self._data["Nominal Secondary Air Flow Rate"] = None
        self._data["Nominal Secondary Air Inlet Temperature"] = None
        self._data["Nominal Electric Power"] = None
        self._data["Supply Air Inlet Node Name"] = None
        self._data["Supply Air Outlet Node Name"] = None
        self._data["Secondary Air Inlet Node Name"] = None
        self._data["Secondary Air Outlet Node Name"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.flow_arrangement_type = None
        else:
            self.flow_arrangement_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.economizer_lockout = None
        else:
            self.economizer_lockout = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.ratio_of_supply_to_secondary_ha_values = None
        else:
            self.ratio_of_supply_to_secondary_ha_values = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_supply_air_flow_rate = None
        else:
            self.nominal_supply_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_supply_air_inlet_temperature = None
        else:
            self.nominal_supply_air_inlet_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_supply_air_outlet_temperature = None
        else:
            self.nominal_supply_air_outlet_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_secondary_air_flow_rate = None
        else:
            self.nominal_secondary_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_secondary_air_inlet_temperature = None
        else:
            self.nominal_secondary_air_inlet_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_electric_power = None
        else:
            self.nominal_electric_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.supply_air_inlet_node_name = None
        else:
            self.supply_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.supply_air_outlet_node_name = None
        else:
            self.supply_air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.secondary_air_inlet_node_name = None
        else:
            self.secondary_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.secondary_air_outlet_node_name = None
        else:
            self.secondary_air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'AFNHeatExchangerNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def flow_arrangement_type(self):
        """Get flow_arrangement_type

        Returns:
            str: the value of `flow_arrangement_type` or None if not set
        """
        return self._data["Flow Arrangement Type"]

    @flow_arrangement_type.setter
    def flow_arrangement_type(self, value=None):
        """  Corresponds to IDD Field `Flow Arrangement Type`
        
        {u'type': u'choice', u'key': [u'CounterFlow', u'ParallelFlow', u'CrossFlowBothUnmixed'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Flow Arrangement Type`
                Accepted values are:
                      - CounterFlow
                      - ParallelFlow
                      - CrossFlowBothUnmixed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `flow_arrangement_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `flow_arrangement_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `flow_arrangement_type`')
            vals = {}
            vals["counterflow"] = "CounterFlow"
            vals["parallelflow"] = "ParallelFlow"
            vals["crossflowbothunmixed"] = "CrossFlowBothUnmixed"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `flow_arrangement_type`'.format(value))
            value = vals[value_lower]
        self._data["Flow Arrangement Type"] = value

    @property
    def economizer_lockout(self):
        """Get economizer_lockout

        Returns:
            str: the value of `economizer_lockout` or None if not set
        """
        return self._data["Economizer Lockout"]

    @economizer_lockout.setter
    def economizer_lockout(self, value="Yes"):
        """  Corresponds to IDD Field `Economizer Lockout`
        Yes means that the heat exchanger will be locked out (off)
        when the economizer is operating or high humidity control is active
        
        {u'default': u'Yes', u'note': [u'Yes means that the heat exchanger will be locked out (off)', u'when the economizer is operating or high humidity control is active'], u'type': u'choice', u'key': [u'Yes', u'No'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Economizer Lockout`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `economizer_lockout`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `economizer_lockout`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `economizer_lockout`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `economizer_lockout`'.format(value))
            value = vals[value_lower]
        self._data["Economizer Lockout"] = value

    @property
    def ratio_of_supply_to_secondary_ha_values(self):
        """Get ratio_of_supply_to_secondary_ha_values

        Returns:
            float: the value of `ratio_of_supply_to_secondary_ha_values` or None if not set
        """
        return self._data["Ratio of Supply to Secondary hA Values"]

    @ratio_of_supply_to_secondary_ha_values.setter
    def ratio_of_supply_to_secondary_ha_values(self, value=None):
        """  Corresponds to IDD Field `Ratio of Supply to Secondary hA Values`
        Ratio of h*A for supply side to h*A for exhaust side
        
        {u'note': [u'Ratio of h*A for supply side to h*A for exhaust side'], u'minimum': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Ratio of Supply to Secondary hA Values`
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `ratio_of_supply_to_secondary_ha_values`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `ratio_of_supply_to_secondary_ha_values`')
        self._data["Ratio of Supply to Secondary hA Values"] = value

    @property
    def nominal_supply_air_flow_rate(self):
        """Get nominal_supply_air_flow_rate

        Returns:
            float: the value of `nominal_supply_air_flow_rate` or None if not set
        """
        return self._data["Nominal Supply Air Flow Rate"]

    @nominal_supply_air_flow_rate.setter
    def nominal_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Nominal Supply Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Nominal Supply Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_supply_air_flow_rate`')
        self._data["Nominal Supply Air Flow Rate"] = value

    @property
    def nominal_supply_air_inlet_temperature(self):
        """Get nominal_supply_air_inlet_temperature

        Returns:
            float: the value of `nominal_supply_air_inlet_temperature` or None if not set
        """
        return self._data["Nominal Supply Air Inlet Temperature"]

    @nominal_supply_air_inlet_temperature.setter
    def nominal_supply_air_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `Nominal Supply Air Inlet Temperature`
        
        {u'units': u'C', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Nominal Supply Air Inlet Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_supply_air_inlet_temperature`'.format(value))
        self._data["Nominal Supply Air Inlet Temperature"] = value

    @property
    def nominal_supply_air_outlet_temperature(self):
        """Get nominal_supply_air_outlet_temperature

        Returns:
            float: the value of `nominal_supply_air_outlet_temperature` or None if not set
        """
        return self._data["Nominal Supply Air Outlet Temperature"]

    @nominal_supply_air_outlet_temperature.setter
    def nominal_supply_air_outlet_temperature(self, value=None):
        """  Corresponds to IDD Field `Nominal Supply Air Outlet Temperature`
        
        {u'units': u'C', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Nominal Supply Air Outlet Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_supply_air_outlet_temperature`'.format(value))
        self._data["Nominal Supply Air Outlet Temperature"] = value

    @property
    def nominal_secondary_air_flow_rate(self):
        """Get nominal_secondary_air_flow_rate

        Returns:
            float: the value of `nominal_secondary_air_flow_rate` or None if not set
        """
        return self._data["Nominal Secondary Air Flow Rate"]

    @nominal_secondary_air_flow_rate.setter
    def nominal_secondary_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Nominal Secondary Air Flow Rate`
        
        {u'units': u'm3/s', u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Nominal Secondary Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_secondary_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_secondary_air_flow_rate`')
        self._data["Nominal Secondary Air Flow Rate"] = value

    @property
    def nominal_secondary_air_inlet_temperature(self):
        """Get nominal_secondary_air_inlet_temperature

        Returns:
            float: the value of `nominal_secondary_air_inlet_temperature` or None if not set
        """
        return self._data["Nominal Secondary Air Inlet Temperature"]

    @nominal_secondary_air_inlet_temperature.setter
    def nominal_secondary_air_inlet_temperature(self, value=None):
        """  Corresponds to IDD Field `Nominal Secondary Air Inlet Temperature`
        
        {u'units': u'C', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Nominal Secondary Air Inlet Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_secondary_air_inlet_temperature`'.format(value))
        self._data["Nominal Secondary Air Inlet Temperature"] = value

    @property
    def nominal_electric_power(self):
        """Get nominal_electric_power

        Returns:
            float: the value of `nominal_electric_power` or None if not set
        """
        return self._data["Nominal Electric Power"]

    @nominal_electric_power.setter
    def nominal_electric_power(self, value=None):
        """  Corresponds to IDD Field `Nominal Electric Power`
        
        {u'units': u'W', u'ip-units': u'W', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Nominal Electric Power`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_electric_power`'.format(value))
        self._data["Nominal Electric Power"] = value

    @property
    def supply_air_inlet_node_name(self):
        """Get supply_air_inlet_node_name

        Returns:
            str: the value of `supply_air_inlet_node_name` or None if not set
        """
        return self._data["Supply Air Inlet Node Name"]

    @supply_air_inlet_node_name.setter
    def supply_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Supply Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Supply Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `supply_air_inlet_node_name`')
        self._data["Supply Air Inlet Node Name"] = value

    @property
    def supply_air_outlet_node_name(self):
        """Get supply_air_outlet_node_name

        Returns:
            str: the value of `supply_air_outlet_node_name` or None if not set
        """
        return self._data["Supply Air Outlet Node Name"]

    @supply_air_outlet_node_name.setter
    def supply_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Supply Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Supply Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `supply_air_outlet_node_name`')
        self._data["Supply Air Outlet Node Name"] = value

    @property
    def secondary_air_inlet_node_name(self):
        """Get secondary_air_inlet_node_name

        Returns:
            str: the value of `secondary_air_inlet_node_name` or None if not set
        """
        return self._data["Secondary Air Inlet Node Name"]

    @secondary_air_inlet_node_name.setter
    def secondary_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Secondary Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Secondary Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `secondary_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `secondary_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `secondary_air_inlet_node_name`')
        self._data["Secondary Air Inlet Node Name"] = value

    @property
    def secondary_air_outlet_node_name(self):
        """Get secondary_air_outlet_node_name

        Returns:
            str: the value of `secondary_air_outlet_node_name` or None if not set
        """
        return self._data["Secondary Air Outlet Node Name"]

    @secondary_air_outlet_node_name.setter
    def secondary_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Secondary Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Secondary Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `secondary_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `secondary_air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `secondary_air_outlet_node_name`')
        self._data["Secondary Air Outlet Node Name"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class HeatExchangerAirToAirSensibleAndLatent(object):
    """ Corresponds to IDD object `HeatExchanger:AirToAir:SensibleAndLatent`
        This object models an air-to-air heat exchanger using effectiveness relationships.
        The heat exchanger can transfer sensible energy, latent energy, or both between the
        supply (primary) and exhaust (secondary) air streams.
    
    """
    internal_name = "HeatExchanger:AirToAir:SensibleAndLatent"
    field_count = 23
    required_fields = ["Name", "Nominal Supply Air Flow Rate", "Supply Air Inlet Node Name", "Supply Air Outlet Node Name", "Exhaust Air Inlet Node Name", "Exhaust Air Outlet Node Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HeatExchanger:AirToAir:SensibleAndLatent`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Nominal Supply Air Flow Rate"] = None
        self._data["Sensible Effectiveness at 100% Heating Air Flow"] = None
        self._data["Latent Effectiveness at 100% Heating Air Flow"] = None
        self._data["Sensible Effectiveness at 75% Heating Air Flow"] = None
        self._data["Latent Effectiveness at 75% Heating Air Flow"] = None
        self._data["Sensible Effectiveness at 100% Cooling Air Flow"] = None
        self._data["Latent Effectiveness at 100% Cooling Air Flow"] = None
        self._data["Sensible Effectiveness at 75% Cooling Air Flow"] = None
        self._data["Latent Effectiveness at 75% Cooling Air Flow"] = None
        self._data["Supply Air Inlet Node Name"] = None
        self._data["Supply Air Outlet Node Name"] = None
        self._data["Exhaust Air Inlet Node Name"] = None
        self._data["Exhaust Air Outlet Node Name"] = None
        self._data["Nominal Electric Power"] = None
        self._data["Supply Air Outlet Temperature Control"] = None
        self._data["Heat Exchanger Type"] = None
        self._data["Frost Control Type"] = None
        self._data["Threshold Temperature"] = None
        self._data["Initial Defrost Time Fraction"] = None
        self._data["Rate of Defrost Time Fraction Increase"] = None
        self._data["Economizer Lockout"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_supply_air_flow_rate = None
        else:
            self.nominal_supply_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensible_effectiveness_at_100_heating_air_flow = None
        else:
            self.sensible_effectiveness_at_100_heating_air_flow = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.latent_effectiveness_at_100_heating_air_flow = None
        else:
            self.latent_effectiveness_at_100_heating_air_flow = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensible_effectiveness_at_75_heating_air_flow = None
        else:
            self.sensible_effectiveness_at_75_heating_air_flow = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.latent_effectiveness_at_75_heating_air_flow = None
        else:
            self.latent_effectiveness_at_75_heating_air_flow = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensible_effectiveness_at_100_cooling_air_flow = None
        else:
            self.sensible_effectiveness_at_100_cooling_air_flow = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.latent_effectiveness_at_100_cooling_air_flow = None
        else:
            self.latent_effectiveness_at_100_cooling_air_flow = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.sensible_effectiveness_at_75_cooling_air_flow = None
        else:
            self.sensible_effectiveness_at_75_cooling_air_flow = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.latent_effectiveness_at_75_cooling_air_flow = None
        else:
            self.latent_effectiveness_at_75_cooling_air_flow = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.supply_air_inlet_node_name = None
        else:
            self.supply_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.supply_air_outlet_node_name = None
        else:
            self.supply_air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.exhaust_air_inlet_node_name = None
        else:
            self.exhaust_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.exhaust_air_outlet_node_name = None
        else:
            self.exhaust_air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_electric_power = None
        else:
            self.nominal_electric_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.supply_air_outlet_temperature_control = None
        else:
            self.supply_air_outlet_temperature_control = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_exchanger_type = None
        else:
            self.heat_exchanger_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.frost_control_type = None
        else:
            self.frost_control_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.threshold_temperature = None
        else:
            self.threshold_temperature = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.initial_defrost_time_fraction = None
        else:
            self.initial_defrost_time_fraction = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.rate_of_defrost_time_fraction_increase = None
        else:
            self.rate_of_defrost_time_fraction_increase = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.economizer_lockout = None
        else:
            self.economizer_lockout = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'AFNHeatExchangerNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def nominal_supply_air_flow_rate(self):
        """Get nominal_supply_air_flow_rate

        Returns:
            float: the value of `nominal_supply_air_flow_rate` or None if not set
        """
        return self._data["Nominal Supply Air Flow Rate"]

    @nominal_supply_air_flow_rate.setter
    def nominal_supply_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Nominal Supply Air Flow Rate`
        
        {'pytype': 'float', u'minimum>': '0.0', u'required-field': True, u'autosizable': u'', u'units': u'm3/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Nominal Supply Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_supply_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_supply_air_flow_rate`')
        self._data["Nominal Supply Air Flow Rate"] = value

    @property
    def sensible_effectiveness_at_100_heating_air_flow(self):
        """Get sensible_effectiveness_at_100_heating_air_flow

        Returns:
            float: the value of `sensible_effectiveness_at_100_heating_air_flow` or None if not set
        """
        return self._data["Sensible Effectiveness at 100% Heating Air Flow"]

    @sensible_effectiveness_at_100_heating_air_flow.setter
    def sensible_effectiveness_at_100_heating_air_flow(self, value=0.0 ):
        """  Corresponds to IDD Field `Sensible Effectiveness at 100% Heating Air Flow`
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '1.0', u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Sensible Effectiveness at 100% Heating Air Flow`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_effectiveness_at_100_heating_air_flow`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `sensible_effectiveness_at_100_heating_air_flow`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `sensible_effectiveness_at_100_heating_air_flow`')
        self._data["Sensible Effectiveness at 100% Heating Air Flow"] = value

    @property
    def latent_effectiveness_at_100_heating_air_flow(self):
        """Get latent_effectiveness_at_100_heating_air_flow

        Returns:
            float: the value of `latent_effectiveness_at_100_heating_air_flow` or None if not set
        """
        return self._data["Latent Effectiveness at 100% Heating Air Flow"]

    @latent_effectiveness_at_100_heating_air_flow.setter
    def latent_effectiveness_at_100_heating_air_flow(self, value=0.0 ):
        """  Corresponds to IDD Field `Latent Effectiveness at 100% Heating Air Flow`
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '1.0', u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Latent Effectiveness at 100% Heating Air Flow`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `latent_effectiveness_at_100_heating_air_flow`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `latent_effectiveness_at_100_heating_air_flow`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `latent_effectiveness_at_100_heating_air_flow`')
        self._data["Latent Effectiveness at 100% Heating Air Flow"] = value

    @property
    def sensible_effectiveness_at_75_heating_air_flow(self):
        """Get sensible_effectiveness_at_75_heating_air_flow

        Returns:
            float: the value of `sensible_effectiveness_at_75_heating_air_flow` or None if not set
        """
        return self._data["Sensible Effectiveness at 75% Heating Air Flow"]

    @sensible_effectiveness_at_75_heating_air_flow.setter
    def sensible_effectiveness_at_75_heating_air_flow(self, value=0.0 ):
        """  Corresponds to IDD Field `Sensible Effectiveness at 75% Heating Air Flow`
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '1.0', u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Sensible Effectiveness at 75% Heating Air Flow`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_effectiveness_at_75_heating_air_flow`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `sensible_effectiveness_at_75_heating_air_flow`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `sensible_effectiveness_at_75_heating_air_flow`')
        self._data["Sensible Effectiveness at 75% Heating Air Flow"] = value

    @property
    def latent_effectiveness_at_75_heating_air_flow(self):
        """Get latent_effectiveness_at_75_heating_air_flow

        Returns:
            float: the value of `latent_effectiveness_at_75_heating_air_flow` or None if not set
        """
        return self._data["Latent Effectiveness at 75% Heating Air Flow"]

    @latent_effectiveness_at_75_heating_air_flow.setter
    def latent_effectiveness_at_75_heating_air_flow(self, value=0.0 ):
        """  Corresponds to IDD Field `Latent Effectiveness at 75% Heating Air Flow`
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '1.0', u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Latent Effectiveness at 75% Heating Air Flow`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `latent_effectiveness_at_75_heating_air_flow`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `latent_effectiveness_at_75_heating_air_flow`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `latent_effectiveness_at_75_heating_air_flow`')
        self._data["Latent Effectiveness at 75% Heating Air Flow"] = value

    @property
    def sensible_effectiveness_at_100_cooling_air_flow(self):
        """Get sensible_effectiveness_at_100_cooling_air_flow

        Returns:
            float: the value of `sensible_effectiveness_at_100_cooling_air_flow` or None if not set
        """
        return self._data["Sensible Effectiveness at 100% Cooling Air Flow"]

    @sensible_effectiveness_at_100_cooling_air_flow.setter
    def sensible_effectiveness_at_100_cooling_air_flow(self, value=0.0 ):
        """  Corresponds to IDD Field `Sensible Effectiveness at 100% Cooling Air Flow`
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '1.0', u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Sensible Effectiveness at 100% Cooling Air Flow`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_effectiveness_at_100_cooling_air_flow`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `sensible_effectiveness_at_100_cooling_air_flow`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `sensible_effectiveness_at_100_cooling_air_flow`')
        self._data["Sensible Effectiveness at 100% Cooling Air Flow"] = value

    @property
    def latent_effectiveness_at_100_cooling_air_flow(self):
        """Get latent_effectiveness_at_100_cooling_air_flow

        Returns:
            float: the value of `latent_effectiveness_at_100_cooling_air_flow` or None if not set
        """
        return self._data["Latent Effectiveness at 100% Cooling Air Flow"]

    @latent_effectiveness_at_100_cooling_air_flow.setter
    def latent_effectiveness_at_100_cooling_air_flow(self, value=0.0 ):
        """  Corresponds to IDD Field `Latent Effectiveness at 100% Cooling Air Flow`
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '1.0', u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Latent Effectiveness at 100% Cooling Air Flow`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `latent_effectiveness_at_100_cooling_air_flow`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `latent_effectiveness_at_100_cooling_air_flow`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `latent_effectiveness_at_100_cooling_air_flow`')
        self._data["Latent Effectiveness at 100% Cooling Air Flow"] = value

    @property
    def sensible_effectiveness_at_75_cooling_air_flow(self):
        """Get sensible_effectiveness_at_75_cooling_air_flow

        Returns:
            float: the value of `sensible_effectiveness_at_75_cooling_air_flow` or None if not set
        """
        return self._data["Sensible Effectiveness at 75% Cooling Air Flow"]

    @sensible_effectiveness_at_75_cooling_air_flow.setter
    def sensible_effectiveness_at_75_cooling_air_flow(self, value=0.0 ):
        """  Corresponds to IDD Field `Sensible Effectiveness at 75% Cooling Air Flow`
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '1.0', u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Sensible Effectiveness at 75% Cooling Air Flow`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `sensible_effectiveness_at_75_cooling_air_flow`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `sensible_effectiveness_at_75_cooling_air_flow`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `sensible_effectiveness_at_75_cooling_air_flow`')
        self._data["Sensible Effectiveness at 75% Cooling Air Flow"] = value

    @property
    def latent_effectiveness_at_75_cooling_air_flow(self):
        """Get latent_effectiveness_at_75_cooling_air_flow

        Returns:
            float: the value of `latent_effectiveness_at_75_cooling_air_flow` or None if not set
        """
        return self._data["Latent Effectiveness at 75% Cooling Air Flow"]

    @latent_effectiveness_at_75_cooling_air_flow.setter
    def latent_effectiveness_at_75_cooling_air_flow(self, value=0.0 ):
        """  Corresponds to IDD Field `Latent Effectiveness at 75% Cooling Air Flow`
        
        {'pytype': 'float', u'default': '0.0', u'maximum': '1.0', u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Latent Effectiveness at 75% Cooling Air Flow`
                Units: dimensionless
                Default value: 0.0
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `latent_effectiveness_at_75_cooling_air_flow`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `latent_effectiveness_at_75_cooling_air_flow`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `latent_effectiveness_at_75_cooling_air_flow`')
        self._data["Latent Effectiveness at 75% Cooling Air Flow"] = value

    @property
    def supply_air_inlet_node_name(self):
        """Get supply_air_inlet_node_name

        Returns:
            str: the value of `supply_air_inlet_node_name` or None if not set
        """
        return self._data["Supply Air Inlet Node Name"]

    @supply_air_inlet_node_name.setter
    def supply_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Supply Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Supply Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `supply_air_inlet_node_name`')
        self._data["Supply Air Inlet Node Name"] = value

    @property
    def supply_air_outlet_node_name(self):
        """Get supply_air_outlet_node_name

        Returns:
            str: the value of `supply_air_outlet_node_name` or None if not set
        """
        return self._data["Supply Air Outlet Node Name"]

    @supply_air_outlet_node_name.setter
    def supply_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Supply Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Supply Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `supply_air_outlet_node_name`')
        self._data["Supply Air Outlet Node Name"] = value

    @property
    def exhaust_air_inlet_node_name(self):
        """Get exhaust_air_inlet_node_name

        Returns:
            str: the value of `exhaust_air_inlet_node_name` or None if not set
        """
        return self._data["Exhaust Air Inlet Node Name"]

    @exhaust_air_inlet_node_name.setter
    def exhaust_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Exhaust Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Exhaust Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `exhaust_air_inlet_node_name`')
        self._data["Exhaust Air Inlet Node Name"] = value

    @property
    def exhaust_air_outlet_node_name(self):
        """Get exhaust_air_outlet_node_name

        Returns:
            str: the value of `exhaust_air_outlet_node_name` or None if not set
        """
        return self._data["Exhaust Air Outlet Node Name"]

    @exhaust_air_outlet_node_name.setter
    def exhaust_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Exhaust Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Exhaust Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `exhaust_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `exhaust_air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `exhaust_air_outlet_node_name`')
        self._data["Exhaust Air Outlet Node Name"] = value

    @property
    def nominal_electric_power(self):
        """Get nominal_electric_power

        Returns:
            float: the value of `nominal_electric_power` or None if not set
        """
        return self._data["Nominal Electric Power"]

    @nominal_electric_power.setter
    def nominal_electric_power(self, value=0.0 ):
        """  Corresponds to IDD Field `Nominal Electric Power`
        
        {'pytype': 'float', u'default': '0.0', u'ip-units': u'W', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Nominal Electric Power`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_electric_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_electric_power`')
        self._data["Nominal Electric Power"] = value

    @property
    def supply_air_outlet_temperature_control(self):
        """Get supply_air_outlet_temperature_control

        Returns:
            str: the value of `supply_air_outlet_temperature_control` or None if not set
        """
        return self._data["Supply Air Outlet Temperature Control"]

    @supply_air_outlet_temperature_control.setter
    def supply_air_outlet_temperature_control(self, value="No"):
        """  Corresponds to IDD Field `Supply Air Outlet Temperature Control`
        
        {u'default': u'No', u'type': u'choice', u'key': [u'No', u'Yes'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Supply Air Outlet Temperature Control`
                Accepted values are:
                      - No
                      - Yes
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `supply_air_outlet_temperature_control`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `supply_air_outlet_temperature_control`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `supply_air_outlet_temperature_control`')
            vals = {}
            vals["no"] = "No"
            vals["yes"] = "Yes"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `supply_air_outlet_temperature_control`'.format(value))
            value = vals[value_lower]
        self._data["Supply Air Outlet Temperature Control"] = value

    @property
    def heat_exchanger_type(self):
        """Get heat_exchanger_type

        Returns:
            str: the value of `heat_exchanger_type` or None if not set
        """
        return self._data["Heat Exchanger Type"]

    @heat_exchanger_type.setter
    def heat_exchanger_type(self, value="Plate"):
        """  Corresponds to IDD Field `Heat Exchanger Type`
        
        {u'default': u'Plate', u'type': u'choice', u'key': [u'Plate', u'Rotary'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heat Exchanger Type`
                Accepted values are:
                      - Plate
                      - Rotary
                Default value: Plate
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_exchanger_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_exchanger_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_exchanger_type`')
            vals = {}
            vals["plate"] = "Plate"
            vals["rotary"] = "Rotary"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heat_exchanger_type`'.format(value))
            value = vals[value_lower]
        self._data["Heat Exchanger Type"] = value

    @property
    def frost_control_type(self):
        """Get frost_control_type

        Returns:
            str: the value of `frost_control_type` or None if not set
        """
        return self._data["Frost Control Type"]

    @frost_control_type.setter
    def frost_control_type(self, value="None"):
        """  Corresponds to IDD Field `Frost Control Type`
        
        {u'default': u'None', u'type': u'choice', u'key': [u'None', u'ExhaustAirRecirculation', u'ExhaustOnly', u'MinimumExhaustTemperature'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Frost Control Type`
                Accepted values are:
                      - None
                      - ExhaustAirRecirculation
                      - ExhaustOnly
                      - MinimumExhaustTemperature
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `frost_control_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `frost_control_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `frost_control_type`')
            vals = {}
            vals["none"] = "None"
            vals["exhaustairrecirculation"] = "ExhaustAirRecirculation"
            vals["exhaustonly"] = "ExhaustOnly"
            vals["minimumexhausttemperature"] = "MinimumExhaustTemperature"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `frost_control_type`'.format(value))
            value = vals[value_lower]
        self._data["Frost Control Type"] = value

    @property
    def threshold_temperature(self):
        """Get threshold_temperature

        Returns:
            float: the value of `threshold_temperature` or None if not set
        """
        return self._data["Threshold Temperature"]

    @threshold_temperature.setter
    def threshold_temperature(self, value=1.7 ):
        """  Corresponds to IDD Field `Threshold Temperature`
        Supply (outdoor) air inlet temp threshold for exhaust air recirculation and
        exhaust only frost control types. Exhaust air outlet threshold Temperature for
        minimum exhaust temperature frost control type.
        
        {u'units': u'C', u'default': '1.7', u'note': [u'Supply (outdoor) air inlet temp threshold for exhaust air recirculation and', u'exhaust only frost control types. Exhaust air outlet threshold Temperature for', u'minimum exhaust temperature frost control type.'], u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Threshold Temperature`
                Units: C
                Default value: 1.7
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `threshold_temperature`'.format(value))
        self._data["Threshold Temperature"] = value

    @property
    def initial_defrost_time_fraction(self):
        """Get initial_defrost_time_fraction

        Returns:
            float: the value of `initial_defrost_time_fraction` or None if not set
        """
        return self._data["Initial Defrost Time Fraction"]

    @initial_defrost_time_fraction.setter
    def initial_defrost_time_fraction(self, value=0.083 ):
        """  Corresponds to IDD Field `Initial Defrost Time Fraction`
        Fraction of the time when frost control will be invoked at the threshold temperature.
        This field only used for exhaust air recirc and exhaust-only frost control types.
        
        {'pytype': 'float', u'default': '0.083', u'maximum': '1.0', u'note': [u'Fraction of the time when frost control will be invoked at the threshold temperature.', u'This field only used for exhaust air recirc and exhaust-only frost control types.'], u'minimum': '0.0', u'units': u'dimensionless', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Initial Defrost Time Fraction`
                Units: dimensionless
                Default value: 0.083
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `initial_defrost_time_fraction`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `initial_defrost_time_fraction`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `initial_defrost_time_fraction`')
        self._data["Initial Defrost Time Fraction"] = value

    @property
    def rate_of_defrost_time_fraction_increase(self):
        """Get rate_of_defrost_time_fraction_increase

        Returns:
            float: the value of `rate_of_defrost_time_fraction_increase` or None if not set
        """
        return self._data["Rate of Defrost Time Fraction Increase"]

    @rate_of_defrost_time_fraction_increase.setter
    def rate_of_defrost_time_fraction_increase(self, value=0.012 ):
        """  Corresponds to IDD Field `Rate of Defrost Time Fraction Increase`
        Rate of increase in defrost time fraction as actual temp falls below threshold temperature.
        This field only used for exhaust air recirc and exhaust-only frost control types.
        
        {'pytype': 'float', u'default': '0.012', u'note': [u'Rate of increase in defrost time fraction as actual temp falls below threshold temperature.', u'This field only used for exhaust air recirc and exhaust-only frost control types.'], u'minimum': '0.0', u'units': u'1/K', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Rate of Defrost Time Fraction Increase`
                Units: 1/K
                Default value: 0.012
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `rate_of_defrost_time_fraction_increase`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `rate_of_defrost_time_fraction_increase`')
        self._data["Rate of Defrost Time Fraction Increase"] = value

    @property
    def economizer_lockout(self):
        """Get economizer_lockout

        Returns:
            str: the value of `economizer_lockout` or None if not set
        """
        return self._data["Economizer Lockout"]

    @economizer_lockout.setter
    def economizer_lockout(self, value="Yes"):
        """  Corresponds to IDD Field `Economizer Lockout`
        Yes means that the heat exchanger will be locked out (off)
        when the economizer is operating or high humidity control is active
        
        {u'default': u'Yes', u'note': [u'Yes means that the heat exchanger will be locked out (off)', u'when the economizer is operating or high humidity control is active'], u'type': u'choice', u'key': [u'Yes', u'No'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Economizer Lockout`
                Accepted values are:
                      - Yes
                      - No
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `economizer_lockout`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `economizer_lockout`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `economizer_lockout`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `economizer_lockout`'.format(value))
            value = vals[value_lower]
        self._data["Economizer Lockout"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class HeatExchangerDesiccantBalancedFlow(object):
    """ Corresponds to IDD object `HeatExchanger:Desiccant:BalancedFlow`
        This object models a balanced desiccant heat exchanger.
        The heat exchanger transfers both sensible and latent energy between the
        process and regeneration air streams. The air flow rate and face velocity
        are assumed to be the same on both the process and regeneration sides of the
        heat exchanger.
    
    """
    internal_name = "HeatExchanger:Desiccant:BalancedFlow"
    field_count = 9
    required_fields = ["Name", "Regeneration Air Inlet Node Name", "Regeneration Air Outlet Node Name", "Process Air Inlet Node Name", "Process Air Outlet Node Name", "Heat Exchanger Performance Name"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HeatExchanger:Desiccant:BalancedFlow`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Availability Schedule Name"] = None
        self._data["Regeneration Air Inlet Node Name"] = None
        self._data["Regeneration Air Outlet Node Name"] = None
        self._data["Process Air Inlet Node Name"] = None
        self._data["Process Air Outlet Node Name"] = None
        self._data["Heat Exchanger Performance Object Type"] = None
        self._data["Heat Exchanger Performance Name"] = None
        self._data["Economizer Lockout"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.availability_schedule_name = None
        else:
            self.availability_schedule_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_air_inlet_node_name = None
        else:
            self.regeneration_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.regeneration_air_outlet_node_name = None
        else:
            self.regeneration_air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.process_air_inlet_node_name = None
        else:
            self.process_air_inlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.process_air_outlet_node_name = None
        else:
            self.process_air_outlet_node_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_exchanger_performance_object_type = None
        else:
            self.heat_exchanger_performance_object_type = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.heat_exchanger_performance_name = None
        else:
            self.heat_exchanger_performance_name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.economizer_lockout = None
        else:
            self.economizer_lockout = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'AFNHeatExchangerNames', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name

        Returns:
            str: the value of `availability_schedule_name` or None if not set
        """
        return self._data["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """  Corresponds to IDD Field `Availability Schedule Name`
        Availability schedule name for this system. Schedule value > 0 means the system is available.
        If this field is blank, the system is always available.
        
        {u'note': [u'Availability schedule name for this system. Schedule value > 0 means the system is available.', u'If this field is blank, the system is always available.'], u'type': u'object-list', u'object-list': u'ScheduleNames', 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `availability_schedule_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `availability_schedule_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `availability_schedule_name`')
        self._data["Availability Schedule Name"] = value

    @property
    def regeneration_air_inlet_node_name(self):
        """Get regeneration_air_inlet_node_name

        Returns:
            str: the value of `regeneration_air_inlet_node_name` or None if not set
        """
        return self._data["Regeneration Air Inlet Node Name"]

    @regeneration_air_inlet_node_name.setter
    def regeneration_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Regeneration Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_air_inlet_node_name`')
        self._data["Regeneration Air Inlet Node Name"] = value

    @property
    def regeneration_air_outlet_node_name(self):
        """Get regeneration_air_outlet_node_name

        Returns:
            str: the value of `regeneration_air_outlet_node_name` or None if not set
        """
        return self._data["Regeneration Air Outlet Node Name"]

    @regeneration_air_outlet_node_name.setter
    def regeneration_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Regeneration Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Regeneration Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `regeneration_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `regeneration_air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `regeneration_air_outlet_node_name`')
        self._data["Regeneration Air Outlet Node Name"] = value

    @property
    def process_air_inlet_node_name(self):
        """Get process_air_inlet_node_name

        Returns:
            str: the value of `process_air_inlet_node_name` or None if not set
        """
        return self._data["Process Air Inlet Node Name"]

    @process_air_inlet_node_name.setter
    def process_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Process Air Inlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Process Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `process_air_inlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `process_air_inlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `process_air_inlet_node_name`')
        self._data["Process Air Inlet Node Name"] = value

    @property
    def process_air_outlet_node_name(self):
        """Get process_air_outlet_node_name

        Returns:
            str: the value of `process_air_outlet_node_name` or None if not set
        """
        return self._data["Process Air Outlet Node Name"]

    @process_air_outlet_node_name.setter
    def process_air_outlet_node_name(self, value=None):
        """  Corresponds to IDD Field `Process Air Outlet Node Name`
        
        {u'type': u'node', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Process Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `process_air_outlet_node_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `process_air_outlet_node_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `process_air_outlet_node_name`')
        self._data["Process Air Outlet Node Name"] = value

    @property
    def heat_exchanger_performance_object_type(self):
        """Get heat_exchanger_performance_object_type

        Returns:
            str: the value of `heat_exchanger_performance_object_type` or None if not set
        """
        return self._data["Heat Exchanger Performance Object Type"]

    @heat_exchanger_performance_object_type.setter
    def heat_exchanger_performance_object_type(self, value="HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1"):
        """  Corresponds to IDD Field `Heat Exchanger Performance Object Type`
        
        {u'default': u'HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1', u'type': u'choice', u'key': [u'HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heat Exchanger Performance Object Type`
                Accepted values are:
                      - HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1
                Default value: HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_exchanger_performance_object_type`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_exchanger_performance_object_type`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_exchanger_performance_object_type`')
            vals = {}
            vals["heatexchanger:desiccant:balancedflow:performancedatatype1"] = "HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `heat_exchanger_performance_object_type`'.format(value))
            value = vals[value_lower]
        self._data["Heat Exchanger Performance Object Type"] = value

    @property
    def heat_exchanger_performance_name(self):
        """Get heat_exchanger_performance_name

        Returns:
            str: the value of `heat_exchanger_performance_name` or None if not set
        """
        return self._data["Heat Exchanger Performance Name"]

    @heat_exchanger_performance_name.setter
    def heat_exchanger_performance_name(self, value=None):
        """  Corresponds to IDD Field `Heat Exchanger Performance Name`
        
        {u'type': u'object-list', u'object-list': u'DesiccantHXPerfData', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Heat Exchanger Performance Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `heat_exchanger_performance_name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `heat_exchanger_performance_name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `heat_exchanger_performance_name`')
        self._data["Heat Exchanger Performance Name"] = value

    @property
    def economizer_lockout(self):
        """Get economizer_lockout

        Returns:
            str: the value of `economizer_lockout` or None if not set
        """
        return self._data["Economizer Lockout"]

    @economizer_lockout.setter
    def economizer_lockout(self, value="No"):
        """  Corresponds to IDD Field `Economizer Lockout`
        Yes means that the heat exchanger will be locked out (off)
        when the economizer is operating or high humidity control is active
        
        {u'default': u'No', u'note': [u'Yes means that the heat exchanger will be locked out (off)', u'when the economizer is operating or high humidity control is active'], u'type': u'choice', u'key': [u'Yes', u'No'], 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Economizer Lockout`
                Accepted values are:
                      - Yes
                      - No
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `economizer_lockout`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `economizer_lockout`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `economizer_lockout`')
            vals = {}
            vals["yes"] = "Yes"
            vals["no"] = "No"
            value_lower = value.lower()
            if value_lower not in vals:
                found = False
                if self.accept_substring:
                    for key in vals:
                        if key in value_lower:
                            value_lower = key
                            found = True
                            break

                if not found:
                    raise ValueError('value {} is not an accepted value for '
                                     'field `economizer_lockout`'.format(value))
            value = vals[value_lower]
        self._data["Economizer Lockout"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])

class HeatExchangerDesiccantBalancedFlowPerformanceDataType1(object):
    """ Corresponds to IDD object `HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1`
        RTO = B1 + B2*RWI + B3*RTI + B4*(RWI/RTI) + B5*PWI + B6*PTI + B7*(PWI/PTI)
        + B8*RFV
        RWO = C1 + C2*RWI + C3*RTI + C4*(RWI/RTI) + C5*PWI + C6*PTI + C7*(PWI/PTI)
        + C8*RFV
        where,
        RTO = Dry-bulb temperature of the regeneration outlet air (C)
        RWO = Humidity ratio of the regeneration outlet air (kgWater/kgDryAir)
        RWI = Humidity ratio of the regeneration inlet air (kgWater/kgDryAir)
        RTI = Dry-bulb temperature of the regeneration inlet air (C)
        PWI = Humidity ratio of the process inlet air (kgWater/kgDryAir)
        PTI = Dry-bulb temperature of the process inlet air (C)
        RFV = Regeneration Face Velocity (m/s)
    
    """
    internal_name = "HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1"
    field_count = 52
    required_fields = ["Name", "Nominal Air Face Velocity", "Temperature Equation Coefficient 1", "Temperature Equation Coefficient 2", "Temperature Equation Coefficient 3", "Temperature Equation Coefficient 4", "Temperature Equation Coefficient 5", "Temperature Equation Coefficient 6", "Temperature Equation Coefficient 7", "Temperature Equation Coefficient 8", "Minimum Regeneration Inlet Air Humidity Ratio for Temperature Equation", "Maximum Regeneration Inlet Air Humidity Ratio for Temperature Equation", "Minimum Regeneration Inlet Air Temperature for Temperature Equation", "Maximum Regeneration Inlet Air Temperature for Temperature Equation", "Minimum Process Inlet Air Humidity Ratio for Temperature Equation", "Maximum Process Inlet Air Humidity Ratio for Temperature Equation", "Minimum Process Inlet Air Temperature for Temperature Equation", "Maximum Process Inlet Air Temperature for Temperature Equation", "Minimum Regeneration Air Velocity for Temperature Equation", "Maximum Regeneration Air Velocity for Temperature Equation", "Minimum Regeneration Outlet Air Temperature for Temperature Equation", "Maximum Regeneration Outlet Air Temperature for Temperature Equation", "Minimum Regeneration Inlet Air Relative Humidity for Temperature Equation", "Maximum Regeneration Inlet Air Relative Humidity for Temperature Equation", "Minimum Process Inlet Air Relative Humidity for Temperature Equation", "Maximum Process Inlet Air Relative Humidity for Temperature Equation", "Humidity Ratio Equation Coefficient 1", "Humidity Ratio Equation Coefficient 2", "Humidity Ratio Equation Coefficient 3", "Humidity Ratio Equation Coefficient 4", "Humidity Ratio Equation Coefficient 5", "Humidity Ratio Equation Coefficient 6", "Humidity Ratio Equation Coefficient 7", "Humidity Ratio Equation Coefficient 8", "Minimum Regeneration Inlet Air Humidity Ratio for Humidity Ratio Equation", "Maximum Regeneration Inlet Air Humidity Ratio for Humidity Ratio Equation", "Minimum Regeneration Inlet Air Temperature for Humidity Ratio Equation", "Maximum Regeneration Inlet Air Temperature for Humidity Ratio Equation", "Minimum Process Inlet Air Humidity Ratio for Humidity Ratio Equation", "Maximum Process Inlet Air Humidity Ratio for Humidity Ratio Equation", "Minimum Process Inlet Air Temperature for Humidity Ratio Equation", "Maximum Process Inlet Air Temperature for Humidity Ratio Equation", "Minimum Regeneration Air Velocity for Humidity Ratio Equation", "Maximum Regeneration Air Velocity for Humidity Ratio Equation", "Minimum Regeneration Outlet Air Humidity Ratio for Humidity Ratio Equation", "Maximum Regeneration Outlet Air Humidity Ratio for Humidity Ratio Equation", "Minimum Regeneration Inlet Air Relative Humidity for Humidity Ratio Equation", "Maximum Regeneration Inlet Air Relative Humidity for Humidity Ratio Equation", "Minimum Process Inlet Air Relative Humidity for Humidity Ratio Equation", "Maximum Process Inlet Air Relative Humidity for Humidity Ratio Equation"]

    def __init__(self):
        """ Init data dictionary object for IDD  `HeatExchanger:Desiccant:BalancedFlow:PerformanceDataType1`
        """
        self._data = OrderedDict()
        self._data["Name"] = None
        self._data["Nominal Air Flow Rate"] = None
        self._data["Nominal Air Face Velocity"] = None
        self._data["Nominal Electric Power"] = None
        self._data["Temperature Equation Coefficient 1"] = None
        self._data["Temperature Equation Coefficient 2"] = None
        self._data["Temperature Equation Coefficient 3"] = None
        self._data["Temperature Equation Coefficient 4"] = None
        self._data["Temperature Equation Coefficient 5"] = None
        self._data["Temperature Equation Coefficient 6"] = None
        self._data["Temperature Equation Coefficient 7"] = None
        self._data["Temperature Equation Coefficient 8"] = None
        self._data["Minimum Regeneration Inlet Air Humidity Ratio for Temperature Equation"] = None
        self._data["Maximum Regeneration Inlet Air Humidity Ratio for Temperature Equation"] = None
        self._data["Minimum Regeneration Inlet Air Temperature for Temperature Equation"] = None
        self._data["Maximum Regeneration Inlet Air Temperature for Temperature Equation"] = None
        self._data["Minimum Process Inlet Air Humidity Ratio for Temperature Equation"] = None
        self._data["Maximum Process Inlet Air Humidity Ratio for Temperature Equation"] = None
        self._data["Minimum Process Inlet Air Temperature for Temperature Equation"] = None
        self._data["Maximum Process Inlet Air Temperature for Temperature Equation"] = None
        self._data["Minimum Regeneration Air Velocity for Temperature Equation"] = None
        self._data["Maximum Regeneration Air Velocity for Temperature Equation"] = None
        self._data["Minimum Regeneration Outlet Air Temperature for Temperature Equation"] = None
        self._data["Maximum Regeneration Outlet Air Temperature for Temperature Equation"] = None
        self._data["Minimum Regeneration Inlet Air Relative Humidity for Temperature Equation"] = None
        self._data["Maximum Regeneration Inlet Air Relative Humidity for Temperature Equation"] = None
        self._data["Minimum Process Inlet Air Relative Humidity for Temperature Equation"] = None
        self._data["Maximum Process Inlet Air Relative Humidity for Temperature Equation"] = None
        self._data["Humidity Ratio Equation Coefficient 1"] = None
        self._data["Humidity Ratio Equation Coefficient 2"] = None
        self._data["Humidity Ratio Equation Coefficient 3"] = None
        self._data["Humidity Ratio Equation Coefficient 4"] = None
        self._data["Humidity Ratio Equation Coefficient 5"] = None
        self._data["Humidity Ratio Equation Coefficient 6"] = None
        self._data["Humidity Ratio Equation Coefficient 7"] = None
        self._data["Humidity Ratio Equation Coefficient 8"] = None
        self._data["Minimum Regeneration Inlet Air Humidity Ratio for Humidity Ratio Equation"] = None
        self._data["Maximum Regeneration Inlet Air Humidity Ratio for Humidity Ratio Equation"] = None
        self._data["Minimum Regeneration Inlet Air Temperature for Humidity Ratio Equation"] = None
        self._data["Maximum Regeneration Inlet Air Temperature for Humidity Ratio Equation"] = None
        self._data["Minimum Process Inlet Air Humidity Ratio for Humidity Ratio Equation"] = None
        self._data["Maximum Process Inlet Air Humidity Ratio for Humidity Ratio Equation"] = None
        self._data["Minimum Process Inlet Air Temperature for Humidity Ratio Equation"] = None
        self._data["Maximum Process Inlet Air Temperature for Humidity Ratio Equation"] = None
        self._data["Minimum Regeneration Air Velocity for Humidity Ratio Equation"] = None
        self._data["Maximum Regeneration Air Velocity for Humidity Ratio Equation"] = None
        self._data["Minimum Regeneration Outlet Air Humidity Ratio for Humidity Ratio Equation"] = None
        self._data["Maximum Regeneration Outlet Air Humidity Ratio for Humidity Ratio Equation"] = None
        self._data["Minimum Regeneration Inlet Air Relative Humidity for Humidity Ratio Equation"] = None
        self._data["Maximum Regeneration Inlet Air Relative Humidity for Humidity Ratio Equation"] = None
        self._data["Minimum Process Inlet Air Relative Humidity for Humidity Ratio Equation"] = None
        self._data["Maximum Process Inlet Air Relative Humidity for Humidity Ratio Equation"] = None
        self.accept_substring = False

    def read(self, vals, accept_substring=True):
        """ Read values

        Args:
            vals (list): list of strings representing values
        """
        self.accept_substring = accept_substring
        i = 0
        if len(vals[i]) == 0:
            self.name = None
        else:
            self.name = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_air_flow_rate = None
        else:
            self.nominal_air_flow_rate = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_air_face_velocity = None
        else:
            self.nominal_air_face_velocity = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.nominal_electric_power = None
        else:
            self.nominal_electric_power = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_equation_coefficient_1 = None
        else:
            self.temperature_equation_coefficient_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_equation_coefficient_2 = None
        else:
            self.temperature_equation_coefficient_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_equation_coefficient_3 = None
        else:
            self.temperature_equation_coefficient_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_equation_coefficient_4 = None
        else:
            self.temperature_equation_coefficient_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_equation_coefficient_5 = None
        else:
            self.temperature_equation_coefficient_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_equation_coefficient_6 = None
        else:
            self.temperature_equation_coefficient_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_equation_coefficient_7 = None
        else:
            self.temperature_equation_coefficient_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.temperature_equation_coefficient_8 = None
        else:
            self.temperature_equation_coefficient_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_regeneration_inlet_air_humidity_ratio_for_temperature_equation = None
        else:
            self.minimum_regeneration_inlet_air_humidity_ratio_for_temperature_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_regeneration_inlet_air_humidity_ratio_for_temperature_equation = None
        else:
            self.maximum_regeneration_inlet_air_humidity_ratio_for_temperature_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_regeneration_inlet_air_temperature_for_temperature_equation = None
        else:
            self.minimum_regeneration_inlet_air_temperature_for_temperature_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_regeneration_inlet_air_temperature_for_temperature_equation = None
        else:
            self.maximum_regeneration_inlet_air_temperature_for_temperature_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_process_inlet_air_humidity_ratio_for_temperature_equation = None
        else:
            self.minimum_process_inlet_air_humidity_ratio_for_temperature_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_process_inlet_air_humidity_ratio_for_temperature_equation = None
        else:
            self.maximum_process_inlet_air_humidity_ratio_for_temperature_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_process_inlet_air_temperature_for_temperature_equation = None
        else:
            self.minimum_process_inlet_air_temperature_for_temperature_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_process_inlet_air_temperature_for_temperature_equation = None
        else:
            self.maximum_process_inlet_air_temperature_for_temperature_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_regeneration_air_velocity_for_temperature_equation = None
        else:
            self.minimum_regeneration_air_velocity_for_temperature_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_regeneration_air_velocity_for_temperature_equation = None
        else:
            self.maximum_regeneration_air_velocity_for_temperature_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_regeneration_outlet_air_temperature_for_temperature_equation = None
        else:
            self.minimum_regeneration_outlet_air_temperature_for_temperature_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_regeneration_outlet_air_temperature_for_temperature_equation = None
        else:
            self.maximum_regeneration_outlet_air_temperature_for_temperature_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_regeneration_inlet_air_relative_humidity_for_temperature_equation = None
        else:
            self.minimum_regeneration_inlet_air_relative_humidity_for_temperature_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_regeneration_inlet_air_relative_humidity_for_temperature_equation = None
        else:
            self.maximum_regeneration_inlet_air_relative_humidity_for_temperature_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_process_inlet_air_relative_humidity_for_temperature_equation = None
        else:
            self.minimum_process_inlet_air_relative_humidity_for_temperature_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_process_inlet_air_relative_humidity_for_temperature_equation = None
        else:
            self.maximum_process_inlet_air_relative_humidity_for_temperature_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.humidity_ratio_equation_coefficient_1 = None
        else:
            self.humidity_ratio_equation_coefficient_1 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.humidity_ratio_equation_coefficient_2 = None
        else:
            self.humidity_ratio_equation_coefficient_2 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.humidity_ratio_equation_coefficient_3 = None
        else:
            self.humidity_ratio_equation_coefficient_3 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.humidity_ratio_equation_coefficient_4 = None
        else:
            self.humidity_ratio_equation_coefficient_4 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.humidity_ratio_equation_coefficient_5 = None
        else:
            self.humidity_ratio_equation_coefficient_5 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.humidity_ratio_equation_coefficient_6 = None
        else:
            self.humidity_ratio_equation_coefficient_6 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.humidity_ratio_equation_coefficient_7 = None
        else:
            self.humidity_ratio_equation_coefficient_7 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.humidity_ratio_equation_coefficient_8 = None
        else:
            self.humidity_ratio_equation_coefficient_8 = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation = None
        else:
            self.minimum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation = None
        else:
            self.maximum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_regeneration_inlet_air_temperature_for_humidity_ratio_equation = None
        else:
            self.minimum_regeneration_inlet_air_temperature_for_humidity_ratio_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_regeneration_inlet_air_temperature_for_humidity_ratio_equation = None
        else:
            self.maximum_regeneration_inlet_air_temperature_for_humidity_ratio_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation = None
        else:
            self.minimum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation = None
        else:
            self.maximum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_process_inlet_air_temperature_for_humidity_ratio_equation = None
        else:
            self.minimum_process_inlet_air_temperature_for_humidity_ratio_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_process_inlet_air_temperature_for_humidity_ratio_equation = None
        else:
            self.maximum_process_inlet_air_temperature_for_humidity_ratio_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_regeneration_air_velocity_for_humidity_ratio_equation = None
        else:
            self.minimum_regeneration_air_velocity_for_humidity_ratio_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_regeneration_air_velocity_for_humidity_ratio_equation = None
        else:
            self.maximum_regeneration_air_velocity_for_humidity_ratio_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation = None
        else:
            self.minimum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation = None
        else:
            self.maximum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation = None
        else:
            self.minimum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation = None
        else:
            self.maximum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.minimum_process_inlet_air_relative_humidity_for_humidity_ratio_equation = None
        else:
            self.minimum_process_inlet_air_relative_humidity_for_humidity_ratio_equation = vals[i]
        i += 1
        if i >= len(vals):
            return
        if len(vals[i]) == 0:
            self.maximum_process_inlet_air_relative_humidity_for_humidity_ratio_equation = None
        else:
            self.maximum_process_inlet_air_relative_humidity_for_humidity_ratio_equation = vals[i]
        i += 1
        if i >= len(vals):
            return

    @property
    def name(self):
        """Get name

        Returns:
            str: the value of `name` or None if not set
        """
        return self._data["Name"]

    @name.setter
    def name(self, value=None):
        """  Corresponds to IDD Field `Name`
        
        {u'type': u'alpha', u'reference': u'DesiccantHXPerfData', u'required-field': True, 'pytype': 'str'}

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = str(value)
            except ValueError:
                raise ValueError('value {} need to be of type str '
                                 'for field `name`'.format(value))
            if ',' in value:
                raise ValueError('value should not contain a comma '
                                 'for field `name`')
            if '!' in value:
                raise ValueError('value should not contain a ! '
                                 'for field `name`')
        self._data["Name"] = value

    @property
    def nominal_air_flow_rate(self):
        """Get nominal_air_flow_rate

        Returns:
            float: the value of `nominal_air_flow_rate` or None if not set
        """
        return self._data["Nominal Air Flow Rate"]

    @nominal_air_flow_rate.setter
    def nominal_air_flow_rate(self, value=None):
        """  Corresponds to IDD Field `Nominal Air Flow Rate`
        Air flow rate at nominal conditions (assumed to be the same for both sides
        of the heat exchanger).
        
        {u'note': [u'Air flow rate at nominal conditions (assumed to be the same for both sides', u'of the heat exchanger).'], u'units': u'm3/s', u'minimum>': '0.0', u'type': u'real', 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Nominal Air Flow Rate`
                Units: m3/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_air_flow_rate`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_air_flow_rate`')
        self._data["Nominal Air Flow Rate"] = value

    @property
    def nominal_air_face_velocity(self):
        """Get nominal_air_face_velocity

        Returns:
            float: the value of `nominal_air_face_velocity` or None if not set
        """
        return self._data["Nominal Air Face Velocity"]

    @nominal_air_face_velocity.setter
    def nominal_air_face_velocity(self, value=None):
        """  Corresponds to IDD Field `Nominal Air Face Velocity`
        
        {'pytype': 'float', u'minimum>': '0.0', u'maximum': '6.0', u'required-field': True, u'units': u'm/s', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Nominal Air Face Velocity`
                Units: m/s
                value > 0.0
                value <= 6.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_air_face_velocity`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `nominal_air_face_velocity`')
            if value > 6.0:
                raise ValueError('value need to be smaller 6.0 '
                                 'for field `nominal_air_face_velocity`')
        self._data["Nominal Air Face Velocity"] = value

    @property
    def nominal_electric_power(self):
        """Get nominal_electric_power

        Returns:
            float: the value of `nominal_electric_power` or None if not set
        """
        return self._data["Nominal Electric Power"]

    @nominal_electric_power.setter
    def nominal_electric_power(self, value=0.0 ):
        """  Corresponds to IDD Field `Nominal Electric Power`
        Parasitic electric power (e.g., desiccant wheel motor)
        
        {'pytype': 'float', u'default': '0.0', u'note': [u'Parasitic electric power (e.g., desiccant wheel motor)'], u'ip-units': u'W', u'minimum': '0.0', u'units': u'W', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Nominal Electric Power`
                Units: W
                IP-Units: W
                Default value: 0.0
                value >= 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `nominal_electric_power`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `nominal_electric_power`')
        self._data["Nominal Electric Power"] = value

    @property
    def temperature_equation_coefficient_1(self):
        """Get temperature_equation_coefficient_1

        Returns:
            float: the value of `temperature_equation_coefficient_1` or None if not set
        """
        return self._data["Temperature Equation Coefficient 1"]

    @temperature_equation_coefficient_1.setter
    def temperature_equation_coefficient_1(self, value=None):
        """  Corresponds to IDD Field `Temperature Equation Coefficient 1`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Temperature Equation Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_equation_coefficient_1`'.format(value))
        self._data["Temperature Equation Coefficient 1"] = value

    @property
    def temperature_equation_coefficient_2(self):
        """Get temperature_equation_coefficient_2

        Returns:
            float: the value of `temperature_equation_coefficient_2` or None if not set
        """
        return self._data["Temperature Equation Coefficient 2"]

    @temperature_equation_coefficient_2.setter
    def temperature_equation_coefficient_2(self, value=None):
        """  Corresponds to IDD Field `Temperature Equation Coefficient 2`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Temperature Equation Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_equation_coefficient_2`'.format(value))
        self._data["Temperature Equation Coefficient 2"] = value

    @property
    def temperature_equation_coefficient_3(self):
        """Get temperature_equation_coefficient_3

        Returns:
            float: the value of `temperature_equation_coefficient_3` or None if not set
        """
        return self._data["Temperature Equation Coefficient 3"]

    @temperature_equation_coefficient_3.setter
    def temperature_equation_coefficient_3(self, value=None):
        """  Corresponds to IDD Field `Temperature Equation Coefficient 3`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Temperature Equation Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_equation_coefficient_3`'.format(value))
        self._data["Temperature Equation Coefficient 3"] = value

    @property
    def temperature_equation_coefficient_4(self):
        """Get temperature_equation_coefficient_4

        Returns:
            float: the value of `temperature_equation_coefficient_4` or None if not set
        """
        return self._data["Temperature Equation Coefficient 4"]

    @temperature_equation_coefficient_4.setter
    def temperature_equation_coefficient_4(self, value=None):
        """  Corresponds to IDD Field `Temperature Equation Coefficient 4`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Temperature Equation Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_equation_coefficient_4`'.format(value))
        self._data["Temperature Equation Coefficient 4"] = value

    @property
    def temperature_equation_coefficient_5(self):
        """Get temperature_equation_coefficient_5

        Returns:
            float: the value of `temperature_equation_coefficient_5` or None if not set
        """
        return self._data["Temperature Equation Coefficient 5"]

    @temperature_equation_coefficient_5.setter
    def temperature_equation_coefficient_5(self, value=None):
        """  Corresponds to IDD Field `Temperature Equation Coefficient 5`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Temperature Equation Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_equation_coefficient_5`'.format(value))
        self._data["Temperature Equation Coefficient 5"] = value

    @property
    def temperature_equation_coefficient_6(self):
        """Get temperature_equation_coefficient_6

        Returns:
            float: the value of `temperature_equation_coefficient_6` or None if not set
        """
        return self._data["Temperature Equation Coefficient 6"]

    @temperature_equation_coefficient_6.setter
    def temperature_equation_coefficient_6(self, value=None):
        """  Corresponds to IDD Field `Temperature Equation Coefficient 6`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Temperature Equation Coefficient 6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_equation_coefficient_6`'.format(value))
        self._data["Temperature Equation Coefficient 6"] = value

    @property
    def temperature_equation_coefficient_7(self):
        """Get temperature_equation_coefficient_7

        Returns:
            float: the value of `temperature_equation_coefficient_7` or None if not set
        """
        return self._data["Temperature Equation Coefficient 7"]

    @temperature_equation_coefficient_7.setter
    def temperature_equation_coefficient_7(self, value=None):
        """  Corresponds to IDD Field `Temperature Equation Coefficient 7`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Temperature Equation Coefficient 7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_equation_coefficient_7`'.format(value))
        self._data["Temperature Equation Coefficient 7"] = value

    @property
    def temperature_equation_coefficient_8(self):
        """Get temperature_equation_coefficient_8

        Returns:
            float: the value of `temperature_equation_coefficient_8` or None if not set
        """
        return self._data["Temperature Equation Coefficient 8"]

    @temperature_equation_coefficient_8.setter
    def temperature_equation_coefficient_8(self, value=None):
        """  Corresponds to IDD Field `Temperature Equation Coefficient 8`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Temperature Equation Coefficient 8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `temperature_equation_coefficient_8`'.format(value))
        self._data["Temperature Equation Coefficient 8"] = value

    @property
    def minimum_regeneration_inlet_air_humidity_ratio_for_temperature_equation(self):
        """Get minimum_regeneration_inlet_air_humidity_ratio_for_temperature_equation

        Returns:
            float: the value of `minimum_regeneration_inlet_air_humidity_ratio_for_temperature_equation` or None if not set
        """
        return self._data["Minimum Regeneration Inlet Air Humidity Ratio for Temperature Equation"]

    @minimum_regeneration_inlet_air_humidity_ratio_for_temperature_equation.setter
    def minimum_regeneration_inlet_air_humidity_ratio_for_temperature_equation(self, value=None):
        """  Corresponds to IDD Field `Minimum Regeneration Inlet Air Humidity Ratio for Temperature Equation`
        
        {'pytype': 'float', u'maximum': '1.0', u'required-field': True, u'minimum': '0.0', u'units': u'kgWater/kgDryAir', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Minimum Regeneration Inlet Air Humidity Ratio for Temperature Equation`
                Units: kgWater/kgDryAir
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_regeneration_inlet_air_humidity_ratio_for_temperature_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_regeneration_inlet_air_humidity_ratio_for_temperature_equation`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `minimum_regeneration_inlet_air_humidity_ratio_for_temperature_equation`')
        self._data["Minimum Regeneration Inlet Air Humidity Ratio for Temperature Equation"] = value

    @property
    def maximum_regeneration_inlet_air_humidity_ratio_for_temperature_equation(self):
        """Get maximum_regeneration_inlet_air_humidity_ratio_for_temperature_equation

        Returns:
            float: the value of `maximum_regeneration_inlet_air_humidity_ratio_for_temperature_equation` or None if not set
        """
        return self._data["Maximum Regeneration Inlet Air Humidity Ratio for Temperature Equation"]

    @maximum_regeneration_inlet_air_humidity_ratio_for_temperature_equation.setter
    def maximum_regeneration_inlet_air_humidity_ratio_for_temperature_equation(self, value=None):
        """  Corresponds to IDD Field `Maximum Regeneration Inlet Air Humidity Ratio for Temperature Equation`
        
        {'pytype': 'float', u'maximum': '1.0', u'required-field': True, u'minimum': '0.0', u'units': u'kgWater/kgDryAir', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Regeneration Inlet Air Humidity Ratio for Temperature Equation`
                Units: kgWater/kgDryAir
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_regeneration_inlet_air_humidity_ratio_for_temperature_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_regeneration_inlet_air_humidity_ratio_for_temperature_equation`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_regeneration_inlet_air_humidity_ratio_for_temperature_equation`')
        self._data["Maximum Regeneration Inlet Air Humidity Ratio for Temperature Equation"] = value

    @property
    def minimum_regeneration_inlet_air_temperature_for_temperature_equation(self):
        """Get minimum_regeneration_inlet_air_temperature_for_temperature_equation

        Returns:
            float: the value of `minimum_regeneration_inlet_air_temperature_for_temperature_equation` or None if not set
        """
        return self._data["Minimum Regeneration Inlet Air Temperature for Temperature Equation"]

    @minimum_regeneration_inlet_air_temperature_for_temperature_equation.setter
    def minimum_regeneration_inlet_air_temperature_for_temperature_equation(self, value=None):
        """  Corresponds to IDD Field `Minimum Regeneration Inlet Air Temperature for Temperature Equation`
        
        {u'units': u'C', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Minimum Regeneration Inlet Air Temperature for Temperature Equation`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_regeneration_inlet_air_temperature_for_temperature_equation`'.format(value))
        self._data["Minimum Regeneration Inlet Air Temperature for Temperature Equation"] = value

    @property
    def maximum_regeneration_inlet_air_temperature_for_temperature_equation(self):
        """Get maximum_regeneration_inlet_air_temperature_for_temperature_equation

        Returns:
            float: the value of `maximum_regeneration_inlet_air_temperature_for_temperature_equation` or None if not set
        """
        return self._data["Maximum Regeneration Inlet Air Temperature for Temperature Equation"]

    @maximum_regeneration_inlet_air_temperature_for_temperature_equation.setter
    def maximum_regeneration_inlet_air_temperature_for_temperature_equation(self, value=None):
        """  Corresponds to IDD Field `Maximum Regeneration Inlet Air Temperature for Temperature Equation`
        
        {u'units': u'C', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Regeneration Inlet Air Temperature for Temperature Equation`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_regeneration_inlet_air_temperature_for_temperature_equation`'.format(value))
        self._data["Maximum Regeneration Inlet Air Temperature for Temperature Equation"] = value

    @property
    def minimum_process_inlet_air_humidity_ratio_for_temperature_equation(self):
        """Get minimum_process_inlet_air_humidity_ratio_for_temperature_equation

        Returns:
            float: the value of `minimum_process_inlet_air_humidity_ratio_for_temperature_equation` or None if not set
        """
        return self._data["Minimum Process Inlet Air Humidity Ratio for Temperature Equation"]

    @minimum_process_inlet_air_humidity_ratio_for_temperature_equation.setter
    def minimum_process_inlet_air_humidity_ratio_for_temperature_equation(self, value=None):
        """  Corresponds to IDD Field `Minimum Process Inlet Air Humidity Ratio for Temperature Equation`
        
        {'pytype': 'float', u'maximum': '1.0', u'required-field': True, u'minimum': '0.0', u'units': u'kgWater/kgDryAir', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Minimum Process Inlet Air Humidity Ratio for Temperature Equation`
                Units: kgWater/kgDryAir
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_process_inlet_air_humidity_ratio_for_temperature_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_process_inlet_air_humidity_ratio_for_temperature_equation`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `minimum_process_inlet_air_humidity_ratio_for_temperature_equation`')
        self._data["Minimum Process Inlet Air Humidity Ratio for Temperature Equation"] = value

    @property
    def maximum_process_inlet_air_humidity_ratio_for_temperature_equation(self):
        """Get maximum_process_inlet_air_humidity_ratio_for_temperature_equation

        Returns:
            float: the value of `maximum_process_inlet_air_humidity_ratio_for_temperature_equation` or None if not set
        """
        return self._data["Maximum Process Inlet Air Humidity Ratio for Temperature Equation"]

    @maximum_process_inlet_air_humidity_ratio_for_temperature_equation.setter
    def maximum_process_inlet_air_humidity_ratio_for_temperature_equation(self, value=None):
        """  Corresponds to IDD Field `Maximum Process Inlet Air Humidity Ratio for Temperature Equation`
        
        {'pytype': 'float', u'maximum': '1.0', u'required-field': True, u'minimum': '0.0', u'units': u'kgWater/kgDryAir', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Process Inlet Air Humidity Ratio for Temperature Equation`
                Units: kgWater/kgDryAir
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_process_inlet_air_humidity_ratio_for_temperature_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_process_inlet_air_humidity_ratio_for_temperature_equation`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_process_inlet_air_humidity_ratio_for_temperature_equation`')
        self._data["Maximum Process Inlet Air Humidity Ratio for Temperature Equation"] = value

    @property
    def minimum_process_inlet_air_temperature_for_temperature_equation(self):
        """Get minimum_process_inlet_air_temperature_for_temperature_equation

        Returns:
            float: the value of `minimum_process_inlet_air_temperature_for_temperature_equation` or None if not set
        """
        return self._data["Minimum Process Inlet Air Temperature for Temperature Equation"]

    @minimum_process_inlet_air_temperature_for_temperature_equation.setter
    def minimum_process_inlet_air_temperature_for_temperature_equation(self, value=None):
        """  Corresponds to IDD Field `Minimum Process Inlet Air Temperature for Temperature Equation`
        
        {u'units': u'C', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Minimum Process Inlet Air Temperature for Temperature Equation`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_process_inlet_air_temperature_for_temperature_equation`'.format(value))
        self._data["Minimum Process Inlet Air Temperature for Temperature Equation"] = value

    @property
    def maximum_process_inlet_air_temperature_for_temperature_equation(self):
        """Get maximum_process_inlet_air_temperature_for_temperature_equation

        Returns:
            float: the value of `maximum_process_inlet_air_temperature_for_temperature_equation` or None if not set
        """
        return self._data["Maximum Process Inlet Air Temperature for Temperature Equation"]

    @maximum_process_inlet_air_temperature_for_temperature_equation.setter
    def maximum_process_inlet_air_temperature_for_temperature_equation(self, value=None):
        """  Corresponds to IDD Field `Maximum Process Inlet Air Temperature for Temperature Equation`
        
        {u'units': u'C', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Process Inlet Air Temperature for Temperature Equation`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_process_inlet_air_temperature_for_temperature_equation`'.format(value))
        self._data["Maximum Process Inlet Air Temperature for Temperature Equation"] = value

    @property
    def minimum_regeneration_air_velocity_for_temperature_equation(self):
        """Get minimum_regeneration_air_velocity_for_temperature_equation

        Returns:
            float: the value of `minimum_regeneration_air_velocity_for_temperature_equation` or None if not set
        """
        return self._data["Minimum Regeneration Air Velocity for Temperature Equation"]

    @minimum_regeneration_air_velocity_for_temperature_equation.setter
    def minimum_regeneration_air_velocity_for_temperature_equation(self, value=None):
        """  Corresponds to IDD Field `Minimum Regeneration Air Velocity for Temperature Equation`
        
        {u'units': u'm/s', u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Minimum Regeneration Air Velocity for Temperature Equation`
                Units: m/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_regeneration_air_velocity_for_temperature_equation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `minimum_regeneration_air_velocity_for_temperature_equation`')
        self._data["Minimum Regeneration Air Velocity for Temperature Equation"] = value

    @property
    def maximum_regeneration_air_velocity_for_temperature_equation(self):
        """Get maximum_regeneration_air_velocity_for_temperature_equation

        Returns:
            float: the value of `maximum_regeneration_air_velocity_for_temperature_equation` or None if not set
        """
        return self._data["Maximum Regeneration Air Velocity for Temperature Equation"]

    @maximum_regeneration_air_velocity_for_temperature_equation.setter
    def maximum_regeneration_air_velocity_for_temperature_equation(self, value=None):
        """  Corresponds to IDD Field `Maximum Regeneration Air Velocity for Temperature Equation`
        
        {u'units': u'm/s', u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Regeneration Air Velocity for Temperature Equation`
                Units: m/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_regeneration_air_velocity_for_temperature_equation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_regeneration_air_velocity_for_temperature_equation`')
        self._data["Maximum Regeneration Air Velocity for Temperature Equation"] = value

    @property
    def minimum_regeneration_outlet_air_temperature_for_temperature_equation(self):
        """Get minimum_regeneration_outlet_air_temperature_for_temperature_equation

        Returns:
            float: the value of `minimum_regeneration_outlet_air_temperature_for_temperature_equation` or None if not set
        """
        return self._data["Minimum Regeneration Outlet Air Temperature for Temperature Equation"]

    @minimum_regeneration_outlet_air_temperature_for_temperature_equation.setter
    def minimum_regeneration_outlet_air_temperature_for_temperature_equation(self, value=None):
        """  Corresponds to IDD Field `Minimum Regeneration Outlet Air Temperature for Temperature Equation`
        
        {u'units': u'C', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Minimum Regeneration Outlet Air Temperature for Temperature Equation`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_regeneration_outlet_air_temperature_for_temperature_equation`'.format(value))
        self._data["Minimum Regeneration Outlet Air Temperature for Temperature Equation"] = value

    @property
    def maximum_regeneration_outlet_air_temperature_for_temperature_equation(self):
        """Get maximum_regeneration_outlet_air_temperature_for_temperature_equation

        Returns:
            float: the value of `maximum_regeneration_outlet_air_temperature_for_temperature_equation` or None if not set
        """
        return self._data["Maximum Regeneration Outlet Air Temperature for Temperature Equation"]

    @maximum_regeneration_outlet_air_temperature_for_temperature_equation.setter
    def maximum_regeneration_outlet_air_temperature_for_temperature_equation(self, value=None):
        """  Corresponds to IDD Field `Maximum Regeneration Outlet Air Temperature for Temperature Equation`
        
        {u'units': u'C', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Regeneration Outlet Air Temperature for Temperature Equation`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_regeneration_outlet_air_temperature_for_temperature_equation`'.format(value))
        self._data["Maximum Regeneration Outlet Air Temperature for Temperature Equation"] = value

    @property
    def minimum_regeneration_inlet_air_relative_humidity_for_temperature_equation(self):
        """Get minimum_regeneration_inlet_air_relative_humidity_for_temperature_equation

        Returns:
            float: the value of `minimum_regeneration_inlet_air_relative_humidity_for_temperature_equation` or None if not set
        """
        return self._data["Minimum Regeneration Inlet Air Relative Humidity for Temperature Equation"]

    @minimum_regeneration_inlet_air_relative_humidity_for_temperature_equation.setter
    def minimum_regeneration_inlet_air_relative_humidity_for_temperature_equation(self, value=None):
        """  Corresponds to IDD Field `Minimum Regeneration Inlet Air Relative Humidity for Temperature Equation`
        
        {'pytype': 'float', u'maximum': '100.0', u'required-field': True, u'minimum': '0.0', u'units': u'percent', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Minimum Regeneration Inlet Air Relative Humidity for Temperature Equation`
                Units: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_regeneration_inlet_air_relative_humidity_for_temperature_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_regeneration_inlet_air_relative_humidity_for_temperature_equation`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `minimum_regeneration_inlet_air_relative_humidity_for_temperature_equation`')
        self._data["Minimum Regeneration Inlet Air Relative Humidity for Temperature Equation"] = value

    @property
    def maximum_regeneration_inlet_air_relative_humidity_for_temperature_equation(self):
        """Get maximum_regeneration_inlet_air_relative_humidity_for_temperature_equation

        Returns:
            float: the value of `maximum_regeneration_inlet_air_relative_humidity_for_temperature_equation` or None if not set
        """
        return self._data["Maximum Regeneration Inlet Air Relative Humidity for Temperature Equation"]

    @maximum_regeneration_inlet_air_relative_humidity_for_temperature_equation.setter
    def maximum_regeneration_inlet_air_relative_humidity_for_temperature_equation(self, value=None):
        """  Corresponds to IDD Field `Maximum Regeneration Inlet Air Relative Humidity for Temperature Equation`
        
        {'pytype': 'float', u'maximum': '100.0', u'required-field': True, u'minimum': '0.0', u'units': u'percent', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Regeneration Inlet Air Relative Humidity for Temperature Equation`
                Units: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_regeneration_inlet_air_relative_humidity_for_temperature_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_regeneration_inlet_air_relative_humidity_for_temperature_equation`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `maximum_regeneration_inlet_air_relative_humidity_for_temperature_equation`')
        self._data["Maximum Regeneration Inlet Air Relative Humidity for Temperature Equation"] = value

    @property
    def minimum_process_inlet_air_relative_humidity_for_temperature_equation(self):
        """Get minimum_process_inlet_air_relative_humidity_for_temperature_equation

        Returns:
            float: the value of `minimum_process_inlet_air_relative_humidity_for_temperature_equation` or None if not set
        """
        return self._data["Minimum Process Inlet Air Relative Humidity for Temperature Equation"]

    @minimum_process_inlet_air_relative_humidity_for_temperature_equation.setter
    def minimum_process_inlet_air_relative_humidity_for_temperature_equation(self, value=None):
        """  Corresponds to IDD Field `Minimum Process Inlet Air Relative Humidity for Temperature Equation`
        
        {'pytype': 'float', u'maximum': '100.0', u'required-field': True, u'minimum': '0.0', u'units': u'percent', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Minimum Process Inlet Air Relative Humidity for Temperature Equation`
                Units: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_process_inlet_air_relative_humidity_for_temperature_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_process_inlet_air_relative_humidity_for_temperature_equation`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `minimum_process_inlet_air_relative_humidity_for_temperature_equation`')
        self._data["Minimum Process Inlet Air Relative Humidity for Temperature Equation"] = value

    @property
    def maximum_process_inlet_air_relative_humidity_for_temperature_equation(self):
        """Get maximum_process_inlet_air_relative_humidity_for_temperature_equation

        Returns:
            float: the value of `maximum_process_inlet_air_relative_humidity_for_temperature_equation` or None if not set
        """
        return self._data["Maximum Process Inlet Air Relative Humidity for Temperature Equation"]

    @maximum_process_inlet_air_relative_humidity_for_temperature_equation.setter
    def maximum_process_inlet_air_relative_humidity_for_temperature_equation(self, value=None):
        """  Corresponds to IDD Field `Maximum Process Inlet Air Relative Humidity for Temperature Equation`
        
        {'pytype': 'float', u'maximum': '100.0', u'required-field': True, u'minimum': '0.0', u'units': u'percent', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Process Inlet Air Relative Humidity for Temperature Equation`
                Units: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_process_inlet_air_relative_humidity_for_temperature_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_process_inlet_air_relative_humidity_for_temperature_equation`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `maximum_process_inlet_air_relative_humidity_for_temperature_equation`')
        self._data["Maximum Process Inlet Air Relative Humidity for Temperature Equation"] = value

    @property
    def humidity_ratio_equation_coefficient_1(self):
        """Get humidity_ratio_equation_coefficient_1

        Returns:
            float: the value of `humidity_ratio_equation_coefficient_1` or None if not set
        """
        return self._data["Humidity Ratio Equation Coefficient 1"]

    @humidity_ratio_equation_coefficient_1.setter
    def humidity_ratio_equation_coefficient_1(self, value=None):
        """  Corresponds to IDD Field `Humidity Ratio Equation Coefficient 1`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Humidity Ratio Equation Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidity_ratio_equation_coefficient_1`'.format(value))
        self._data["Humidity Ratio Equation Coefficient 1"] = value

    @property
    def humidity_ratio_equation_coefficient_2(self):
        """Get humidity_ratio_equation_coefficient_2

        Returns:
            float: the value of `humidity_ratio_equation_coefficient_2` or None if not set
        """
        return self._data["Humidity Ratio Equation Coefficient 2"]

    @humidity_ratio_equation_coefficient_2.setter
    def humidity_ratio_equation_coefficient_2(self, value=None):
        """  Corresponds to IDD Field `Humidity Ratio Equation Coefficient 2`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Humidity Ratio Equation Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidity_ratio_equation_coefficient_2`'.format(value))
        self._data["Humidity Ratio Equation Coefficient 2"] = value

    @property
    def humidity_ratio_equation_coefficient_3(self):
        """Get humidity_ratio_equation_coefficient_3

        Returns:
            float: the value of `humidity_ratio_equation_coefficient_3` or None if not set
        """
        return self._data["Humidity Ratio Equation Coefficient 3"]

    @humidity_ratio_equation_coefficient_3.setter
    def humidity_ratio_equation_coefficient_3(self, value=None):
        """  Corresponds to IDD Field `Humidity Ratio Equation Coefficient 3`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Humidity Ratio Equation Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidity_ratio_equation_coefficient_3`'.format(value))
        self._data["Humidity Ratio Equation Coefficient 3"] = value

    @property
    def humidity_ratio_equation_coefficient_4(self):
        """Get humidity_ratio_equation_coefficient_4

        Returns:
            float: the value of `humidity_ratio_equation_coefficient_4` or None if not set
        """
        return self._data["Humidity Ratio Equation Coefficient 4"]

    @humidity_ratio_equation_coefficient_4.setter
    def humidity_ratio_equation_coefficient_4(self, value=None):
        """  Corresponds to IDD Field `Humidity Ratio Equation Coefficient 4`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Humidity Ratio Equation Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidity_ratio_equation_coefficient_4`'.format(value))
        self._data["Humidity Ratio Equation Coefficient 4"] = value

    @property
    def humidity_ratio_equation_coefficient_5(self):
        """Get humidity_ratio_equation_coefficient_5

        Returns:
            float: the value of `humidity_ratio_equation_coefficient_5` or None if not set
        """
        return self._data["Humidity Ratio Equation Coefficient 5"]

    @humidity_ratio_equation_coefficient_5.setter
    def humidity_ratio_equation_coefficient_5(self, value=None):
        """  Corresponds to IDD Field `Humidity Ratio Equation Coefficient 5`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Humidity Ratio Equation Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidity_ratio_equation_coefficient_5`'.format(value))
        self._data["Humidity Ratio Equation Coefficient 5"] = value

    @property
    def humidity_ratio_equation_coefficient_6(self):
        """Get humidity_ratio_equation_coefficient_6

        Returns:
            float: the value of `humidity_ratio_equation_coefficient_6` or None if not set
        """
        return self._data["Humidity Ratio Equation Coefficient 6"]

    @humidity_ratio_equation_coefficient_6.setter
    def humidity_ratio_equation_coefficient_6(self, value=None):
        """  Corresponds to IDD Field `Humidity Ratio Equation Coefficient 6`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Humidity Ratio Equation Coefficient 6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidity_ratio_equation_coefficient_6`'.format(value))
        self._data["Humidity Ratio Equation Coefficient 6"] = value

    @property
    def humidity_ratio_equation_coefficient_7(self):
        """Get humidity_ratio_equation_coefficient_7

        Returns:
            float: the value of `humidity_ratio_equation_coefficient_7` or None if not set
        """
        return self._data["Humidity Ratio Equation Coefficient 7"]

    @humidity_ratio_equation_coefficient_7.setter
    def humidity_ratio_equation_coefficient_7(self, value=None):
        """  Corresponds to IDD Field `Humidity Ratio Equation Coefficient 7`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Humidity Ratio Equation Coefficient 7`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidity_ratio_equation_coefficient_7`'.format(value))
        self._data["Humidity Ratio Equation Coefficient 7"] = value

    @property
    def humidity_ratio_equation_coefficient_8(self):
        """Get humidity_ratio_equation_coefficient_8

        Returns:
            float: the value of `humidity_ratio_equation_coefficient_8` or None if not set
        """
        return self._data["Humidity Ratio Equation Coefficient 8"]

    @humidity_ratio_equation_coefficient_8.setter
    def humidity_ratio_equation_coefficient_8(self, value=None):
        """  Corresponds to IDD Field `Humidity Ratio Equation Coefficient 8`
        
        {u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Humidity Ratio Equation Coefficient 8`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `humidity_ratio_equation_coefficient_8`'.format(value))
        self._data["Humidity Ratio Equation Coefficient 8"] = value

    @property
    def minimum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation(self):
        """Get minimum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation

        Returns:
            float: the value of `minimum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation` or None if not set
        """
        return self._data["Minimum Regeneration Inlet Air Humidity Ratio for Humidity Ratio Equation"]

    @minimum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation.setter
    def minimum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation(self, value=None):
        """  Corresponds to IDD Field `Minimum Regeneration Inlet Air Humidity Ratio for Humidity Ratio Equation`
        
        {'pytype': 'float', u'maximum': '1.0', u'required-field': True, u'minimum': '0.0', u'units': u'kgWater/kgDryAir', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Minimum Regeneration Inlet Air Humidity Ratio for Humidity Ratio Equation`
                Units: kgWater/kgDryAir
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `minimum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation`')
        self._data["Minimum Regeneration Inlet Air Humidity Ratio for Humidity Ratio Equation"] = value

    @property
    def maximum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation(self):
        """Get maximum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation

        Returns:
            float: the value of `maximum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation` or None if not set
        """
        return self._data["Maximum Regeneration Inlet Air Humidity Ratio for Humidity Ratio Equation"]

    @maximum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation.setter
    def maximum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation(self, value=None):
        """  Corresponds to IDD Field `Maximum Regeneration Inlet Air Humidity Ratio for Humidity Ratio Equation`
        
        {'pytype': 'float', u'maximum': '1.0', u'required-field': True, u'minimum': '0.0', u'units': u'kgWater/kgDryAir', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Regeneration Inlet Air Humidity Ratio for Humidity Ratio Equation`
                Units: kgWater/kgDryAir
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_regeneration_inlet_air_humidity_ratio_for_humidity_ratio_equation`')
        self._data["Maximum Regeneration Inlet Air Humidity Ratio for Humidity Ratio Equation"] = value

    @property
    def minimum_regeneration_inlet_air_temperature_for_humidity_ratio_equation(self):
        """Get minimum_regeneration_inlet_air_temperature_for_humidity_ratio_equation

        Returns:
            float: the value of `minimum_regeneration_inlet_air_temperature_for_humidity_ratio_equation` or None if not set
        """
        return self._data["Minimum Regeneration Inlet Air Temperature for Humidity Ratio Equation"]

    @minimum_regeneration_inlet_air_temperature_for_humidity_ratio_equation.setter
    def minimum_regeneration_inlet_air_temperature_for_humidity_ratio_equation(self, value=None):
        """  Corresponds to IDD Field `Minimum Regeneration Inlet Air Temperature for Humidity Ratio Equation`
        
        {u'units': u'C', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Minimum Regeneration Inlet Air Temperature for Humidity Ratio Equation`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_regeneration_inlet_air_temperature_for_humidity_ratio_equation`'.format(value))
        self._data["Minimum Regeneration Inlet Air Temperature for Humidity Ratio Equation"] = value

    @property
    def maximum_regeneration_inlet_air_temperature_for_humidity_ratio_equation(self):
        """Get maximum_regeneration_inlet_air_temperature_for_humidity_ratio_equation

        Returns:
            float: the value of `maximum_regeneration_inlet_air_temperature_for_humidity_ratio_equation` or None if not set
        """
        return self._data["Maximum Regeneration Inlet Air Temperature for Humidity Ratio Equation"]

    @maximum_regeneration_inlet_air_temperature_for_humidity_ratio_equation.setter
    def maximum_regeneration_inlet_air_temperature_for_humidity_ratio_equation(self, value=None):
        """  Corresponds to IDD Field `Maximum Regeneration Inlet Air Temperature for Humidity Ratio Equation`
        
        {u'units': u'C', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Regeneration Inlet Air Temperature for Humidity Ratio Equation`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_regeneration_inlet_air_temperature_for_humidity_ratio_equation`'.format(value))
        self._data["Maximum Regeneration Inlet Air Temperature for Humidity Ratio Equation"] = value

    @property
    def minimum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation(self):
        """Get minimum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation

        Returns:
            float: the value of `minimum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation` or None if not set
        """
        return self._data["Minimum Process Inlet Air Humidity Ratio for Humidity Ratio Equation"]

    @minimum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation.setter
    def minimum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation(self, value=None):
        """  Corresponds to IDD Field `Minimum Process Inlet Air Humidity Ratio for Humidity Ratio Equation`
        
        {'pytype': 'float', u'maximum': '1.0', u'required-field': True, u'minimum': '0.0', u'units': u'kgWater/kgDryAir', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Minimum Process Inlet Air Humidity Ratio for Humidity Ratio Equation`
                Units: kgWater/kgDryAir
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `minimum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation`')
        self._data["Minimum Process Inlet Air Humidity Ratio for Humidity Ratio Equation"] = value

    @property
    def maximum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation(self):
        """Get maximum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation

        Returns:
            float: the value of `maximum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation` or None if not set
        """
        return self._data["Maximum Process Inlet Air Humidity Ratio for Humidity Ratio Equation"]

    @maximum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation.setter
    def maximum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation(self, value=None):
        """  Corresponds to IDD Field `Maximum Process Inlet Air Humidity Ratio for Humidity Ratio Equation`
        
        {'pytype': 'float', u'maximum': '1.0', u'required-field': True, u'minimum': '0.0', u'units': u'kgWater/kgDryAir', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Process Inlet Air Humidity Ratio for Humidity Ratio Equation`
                Units: kgWater/kgDryAir
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_process_inlet_air_humidity_ratio_for_humidity_ratio_equation`')
        self._data["Maximum Process Inlet Air Humidity Ratio for Humidity Ratio Equation"] = value

    @property
    def minimum_process_inlet_air_temperature_for_humidity_ratio_equation(self):
        """Get minimum_process_inlet_air_temperature_for_humidity_ratio_equation

        Returns:
            float: the value of `minimum_process_inlet_air_temperature_for_humidity_ratio_equation` or None if not set
        """
        return self._data["Minimum Process Inlet Air Temperature for Humidity Ratio Equation"]

    @minimum_process_inlet_air_temperature_for_humidity_ratio_equation.setter
    def minimum_process_inlet_air_temperature_for_humidity_ratio_equation(self, value=None):
        """  Corresponds to IDD Field `Minimum Process Inlet Air Temperature for Humidity Ratio Equation`
        
        {u'units': u'C', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Minimum Process Inlet Air Temperature for Humidity Ratio Equation`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_process_inlet_air_temperature_for_humidity_ratio_equation`'.format(value))
        self._data["Minimum Process Inlet Air Temperature for Humidity Ratio Equation"] = value

    @property
    def maximum_process_inlet_air_temperature_for_humidity_ratio_equation(self):
        """Get maximum_process_inlet_air_temperature_for_humidity_ratio_equation

        Returns:
            float: the value of `maximum_process_inlet_air_temperature_for_humidity_ratio_equation` or None if not set
        """
        return self._data["Maximum Process Inlet Air Temperature for Humidity Ratio Equation"]

    @maximum_process_inlet_air_temperature_for_humidity_ratio_equation.setter
    def maximum_process_inlet_air_temperature_for_humidity_ratio_equation(self, value=None):
        """  Corresponds to IDD Field `Maximum Process Inlet Air Temperature for Humidity Ratio Equation`
        
        {u'units': u'C', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Process Inlet Air Temperature for Humidity Ratio Equation`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_process_inlet_air_temperature_for_humidity_ratio_equation`'.format(value))
        self._data["Maximum Process Inlet Air Temperature for Humidity Ratio Equation"] = value

    @property
    def minimum_regeneration_air_velocity_for_humidity_ratio_equation(self):
        """Get minimum_regeneration_air_velocity_for_humidity_ratio_equation

        Returns:
            float: the value of `minimum_regeneration_air_velocity_for_humidity_ratio_equation` or None if not set
        """
        return self._data["Minimum Regeneration Air Velocity for Humidity Ratio Equation"]

    @minimum_regeneration_air_velocity_for_humidity_ratio_equation.setter
    def minimum_regeneration_air_velocity_for_humidity_ratio_equation(self, value=None):
        """  Corresponds to IDD Field `Minimum Regeneration Air Velocity for Humidity Ratio Equation`
        
        {u'units': u'm/s', u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Minimum Regeneration Air Velocity for Humidity Ratio Equation`
                Units: m/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_regeneration_air_velocity_for_humidity_ratio_equation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `minimum_regeneration_air_velocity_for_humidity_ratio_equation`')
        self._data["Minimum Regeneration Air Velocity for Humidity Ratio Equation"] = value

    @property
    def maximum_regeneration_air_velocity_for_humidity_ratio_equation(self):
        """Get maximum_regeneration_air_velocity_for_humidity_ratio_equation

        Returns:
            float: the value of `maximum_regeneration_air_velocity_for_humidity_ratio_equation` or None if not set
        """
        return self._data["Maximum Regeneration Air Velocity for Humidity Ratio Equation"]

    @maximum_regeneration_air_velocity_for_humidity_ratio_equation.setter
    def maximum_regeneration_air_velocity_for_humidity_ratio_equation(self, value=None):
        """  Corresponds to IDD Field `Maximum Regeneration Air Velocity for Humidity Ratio Equation`
        
        {u'units': u'm/s', u'minimum>': '0.0', u'type': u'real', u'required-field': True, 'pytype': 'float'}

        Args:
            value (float): value for IDD Field `Maximum Regeneration Air Velocity for Humidity Ratio Equation`
                Units: m/s
                value > 0.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_regeneration_air_velocity_for_humidity_ratio_equation`'.format(value))
            if value <= 0.0:
                raise ValueError('value need to be greater 0.0 '
                                 'for field `maximum_regeneration_air_velocity_for_humidity_ratio_equation`')
        self._data["Maximum Regeneration Air Velocity for Humidity Ratio Equation"] = value

    @property
    def minimum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation(self):
        """Get minimum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation

        Returns:
            float: the value of `minimum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation` or None if not set
        """
        return self._data["Minimum Regeneration Outlet Air Humidity Ratio for Humidity Ratio Equation"]

    @minimum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation.setter
    def minimum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation(self, value=None):
        """  Corresponds to IDD Field `Minimum Regeneration Outlet Air Humidity Ratio for Humidity Ratio Equation`
        
        {'pytype': 'float', u'maximum': '1.0', u'required-field': True, u'minimum': '0.0', u'units': u'kgWater/kgDryAir', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Minimum Regeneration Outlet Air Humidity Ratio for Humidity Ratio Equation`
                Units: kgWater/kgDryAir
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `minimum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation`')
        self._data["Minimum Regeneration Outlet Air Humidity Ratio for Humidity Ratio Equation"] = value

    @property
    def maximum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation(self):
        """Get maximum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation

        Returns:
            float: the value of `maximum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation` or None if not set
        """
        return self._data["Maximum Regeneration Outlet Air Humidity Ratio for Humidity Ratio Equation"]

    @maximum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation.setter
    def maximum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation(self, value=None):
        """  Corresponds to IDD Field `Maximum Regeneration Outlet Air Humidity Ratio for Humidity Ratio Equation`
        
        {'pytype': 'float', u'maximum': '1.0', u'required-field': True, u'minimum': '0.0', u'units': u'kgWater/kgDryAir', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Regeneration Outlet Air Humidity Ratio for Humidity Ratio Equation`
                Units: kgWater/kgDryAir
                value >= 0.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation`')
            if value > 1.0:
                raise ValueError('value need to be smaller 1.0 '
                                 'for field `maximum_regeneration_outlet_air_humidity_ratio_for_humidity_ratio_equation`')
        self._data["Maximum Regeneration Outlet Air Humidity Ratio for Humidity Ratio Equation"] = value

    @property
    def minimum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation(self):
        """Get minimum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation

        Returns:
            float: the value of `minimum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation` or None if not set
        """
        return self._data["Minimum Regeneration Inlet Air Relative Humidity for Humidity Ratio Equation"]

    @minimum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation.setter
    def minimum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation(self, value=None):
        """  Corresponds to IDD Field `Minimum Regeneration Inlet Air Relative Humidity for Humidity Ratio Equation`
        
        {'pytype': 'float', u'maximum': '100.0', u'required-field': True, u'minimum': '0.0', u'units': u'percent', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Minimum Regeneration Inlet Air Relative Humidity for Humidity Ratio Equation`
                Units: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `minimum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation`')
        self._data["Minimum Regeneration Inlet Air Relative Humidity for Humidity Ratio Equation"] = value

    @property
    def maximum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation(self):
        """Get maximum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation

        Returns:
            float: the value of `maximum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation` or None if not set
        """
        return self._data["Maximum Regeneration Inlet Air Relative Humidity for Humidity Ratio Equation"]

    @maximum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation.setter
    def maximum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation(self, value=None):
        """  Corresponds to IDD Field `Maximum Regeneration Inlet Air Relative Humidity for Humidity Ratio Equation`
        
        {'pytype': 'float', u'maximum': '100.0', u'required-field': True, u'minimum': '0.0', u'units': u'percent', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Regeneration Inlet Air Relative Humidity for Humidity Ratio Equation`
                Units: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `maximum_regeneration_inlet_air_relative_humidity_for_humidity_ratio_equation`')
        self._data["Maximum Regeneration Inlet Air Relative Humidity for Humidity Ratio Equation"] = value

    @property
    def minimum_process_inlet_air_relative_humidity_for_humidity_ratio_equation(self):
        """Get minimum_process_inlet_air_relative_humidity_for_humidity_ratio_equation

        Returns:
            float: the value of `minimum_process_inlet_air_relative_humidity_for_humidity_ratio_equation` or None if not set
        """
        return self._data["Minimum Process Inlet Air Relative Humidity for Humidity Ratio Equation"]

    @minimum_process_inlet_air_relative_humidity_for_humidity_ratio_equation.setter
    def minimum_process_inlet_air_relative_humidity_for_humidity_ratio_equation(self, value=None):
        """  Corresponds to IDD Field `Minimum Process Inlet Air Relative Humidity for Humidity Ratio Equation`
        
        {'pytype': 'float', u'maximum': '100.0', u'required-field': True, u'minimum': '0.0', u'units': u'percent', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Minimum Process Inlet Air Relative Humidity for Humidity Ratio Equation`
                Units: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `minimum_process_inlet_air_relative_humidity_for_humidity_ratio_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `minimum_process_inlet_air_relative_humidity_for_humidity_ratio_equation`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `minimum_process_inlet_air_relative_humidity_for_humidity_ratio_equation`')
        self._data["Minimum Process Inlet Air Relative Humidity for Humidity Ratio Equation"] = value

    @property
    def maximum_process_inlet_air_relative_humidity_for_humidity_ratio_equation(self):
        """Get maximum_process_inlet_air_relative_humidity_for_humidity_ratio_equation

        Returns:
            float: the value of `maximum_process_inlet_air_relative_humidity_for_humidity_ratio_equation` or None if not set
        """
        return self._data["Maximum Process Inlet Air Relative Humidity for Humidity Ratio Equation"]

    @maximum_process_inlet_air_relative_humidity_for_humidity_ratio_equation.setter
    def maximum_process_inlet_air_relative_humidity_for_humidity_ratio_equation(self, value=None):
        """  Corresponds to IDD Field `Maximum Process Inlet Air Relative Humidity for Humidity Ratio Equation`
        
        {'pytype': 'float', u'maximum': '100.0', u'required-field': True, u'minimum': '0.0', u'units': u'percent', u'type': u'real'}

        Args:
            value (float): value for IDD Field `Maximum Process Inlet Air Relative Humidity for Humidity Ratio Equation`
                Units: percent
                value >= 0.0
                value <= 100.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        if value is not None:
            try:
                value = float(value)
            except ValueError:
                raise ValueError('value {} need to be of type float '
                                 'for field `maximum_process_inlet_air_relative_humidity_for_humidity_ratio_equation`'.format(value))
            if value < 0.0:
                raise ValueError('value need to be greater or equal 0.0 '
                                 'for field `maximum_process_inlet_air_relative_humidity_for_humidity_ratio_equation`')
            if value > 100.0:
                raise ValueError('value need to be smaller 100.0 '
                                 'for field `maximum_process_inlet_air_relative_humidity_for_humidity_ratio_equation`')
        self._data["Maximum Process Inlet Air Relative Humidity for Humidity Ratio Equation"] = value

    def check(self):
        """ Checks if all required fields are not None
        """
        good = True
        for key in self.required_fields:
            if self._data[key] is None:
                good = False
                break
        return good

    @classmethod
    def _to_str(cls, value):
        """ Represents values either as string or None values as empty string

        Args:
            value: a value
        """
        if value is None:
            return ''
        else:
            return str(value)

    def export(self):
        """ Export values of data object as list of strings"""
        out = []
        for key, value in self._data.iteritems():
            out.append(self._to_str(value))
        return out

    def __str__(self):
        out = [self.internal_name]
        out += self.export()
        return ",".join(out[:20])